/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XPathParser_Coverage_Test_Passing {
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private Compiler compilerMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilterExprError_UnZS18() throws org.apache.commons.jxpath.ri.parser.ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        try {
            parser.FilterExpr();
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbsoluteLocationPath_LocationStep_LocationStep_LocationStep_SlashSlash_XJna15() throws Exception {
        ArrayList steps = new ArrayList();
        steps.add("step1");
        steps.add("step2");
        steps.add("step3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExprNoToken_xTrk7() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        try {
            parser.UnaryExpr();
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExpr_noInput_AQzL9() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("".getBytes()));
        try {
            parser.RelationalExpr();
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardName20_BRSa19() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader("NCName NCName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifierChild_ZLfQ0() throws org.apache.commons.jxpath.ri.parser.ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("".getBytes()));
        assertEquals(Compiler.AXIS_CHILD, parser.AbbreviatedAxisSpecifier());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifierInvalid_zsXd3() throws org.apache.commons.jxpath.ri.parser.ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("invalid".getBytes()));
        assertEquals(Compiler.AXIS_CHILD, parser.AbbreviatedAxisSpecifier());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitToken_CiGk1() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0));
        parser.ReInit(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0));
        assertNotNull(parser.token);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_SGss0_1() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
        assertEquals(1, parser.jj_input_stream.getBeginLine());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_SGss0_2() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.ReInit(new java.io.ByteArrayInputStream(new byte[0]));
        assertEquals(1, parser.jj_input_stream.getBeginColumn());
    }
}