/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DynamicPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_gkCb0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWhenNameIsDifferent_rHku1() {
        DynamicPointer dp1 = new DynamicPointer(new QName("prefix1", "localName1"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer dp2 = new DynamicPointer(new QName("prefix2", "localName2"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dp1.equals(dp2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWhenNameIsOneNull_yplI2() {
        DynamicPointer dp1 = new DynamicPointer(new QName("prefix", "localName"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer dp2 = new DynamicPointer(null, new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dp1.equals(dp2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWhenObjectIsDifferent_MJCA6() {
        DynamicPointer dp1 = new DynamicPointer(new QName("prefix", "localName"), new Object(), new PageContextHandler(), new Locale("en"));
        Object obj = new Object();
        boolean result = dp1.equals(obj);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWhenObjectIsSame_kytr7() {
        DynamicPointer dp1 = new DynamicPointer(new QName("prefix", "localName"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dp1.equals(dp1);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWhenBeanIsDifferent_hOaw4_yzHP0() {
        DynamicPointer dp1 = new DynamicPointer(new QName("prefix", "localName"), new Object(), new PageContextHandler(), new Locale("en"));
        DynamicPointer dp2 = new DynamicPointer(new QName("prefix", "localName"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dp1.equals(dp2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValueWithBeanInfo_ReturnsTrue_CFxh4_LOpl0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        JXPathIntrospector.getBeanInfo(Integer.class);
        boolean result = dynamicPointer.isLeaf();
        assertTrue(result);
    }
}