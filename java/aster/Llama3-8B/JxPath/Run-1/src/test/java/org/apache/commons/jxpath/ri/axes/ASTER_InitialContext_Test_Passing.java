/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
    @Mock
    private NodePointer nodePointer;
    private boolean collection;
    @InjectMocks
    private InitialContext initialcontext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private Pointer pointer;
    @Mock
    private InitialContext initialContext;
    private boolean started = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        collection = false;
        Mockito.when(nodePointer.getLength()).thenReturn(5);
        // Test when position is within the range
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        // Test when position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        // Test when collection is true
        collection = true;
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        // Test when collection is true and position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        Assertions.assertTrue(initialcontext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        collection = false;
        Mockito.when(nodePointer.getLength()).thenReturn(5);
        // Test when position is within the range
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        // Test when position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        // Test when collection is true
        collection = true;
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        // Test when collection is true and position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        Assertions.assertFalse(initialcontext.setPosition(6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNullCollection_Smel4() {
        InitialContext initialContext = new InitialContext(null);
        initialContext.setPosition(1);
        assertTrue(initialContext.getPosition() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer() {
        nodePointer = mock(NodePointer.class);
        initialcontext = new InitialContext(namespaceContext);
        when(initialcontext.getSingleNodePointer()).thenReturn(pointer);
        Pointer result = initialcontext.getSingleNodePointer();
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_dvhJ0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Pointer result = initialContext.getSingleNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_HMkU0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        InitialContext initialContext = new InitialContext(namespaceContext);
        NodePointer result = initialContext.getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        initialContext = new InitialContext(namespaceContext);
        when(namespaceContext.getPosition()).thenReturn(0);
        boolean result = initialContext.nextNode();
        verify(initialContext).setPosition(1);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_wivr0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), null), null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        InitialContext initialContext = new InitialContext(new NamespaceContext(selfContext, nodeTypeTest));
        boolean result = initialContext.nextNode();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_VLIf0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), null), null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        InitialContext initialContext = new InitialContext(new NamespaceContext(selfContext, nodeTest));
        Object result = initialContext.getValue();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        collection = false;
        Mockito.when(nodePointer.getLength()).thenReturn(5);
        // Test when position is within the range
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        Assertions.assertTrue(initialcontext.setPosition(2));
        // Test when position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        Assertions.assertFalse(initialcontext.setPosition(6));
        // Test when collection is true
        collection = true;
        initialcontext.setPosition(2);
        Mockito.verify(nodePointer).setIndex(1);
        Assertions.assertTrue(initialcontext.setPosition(2));
        // Test when collection is true and position is out of range
        initialcontext.setPosition(6);
        Mockito.verify(nodePointer, Mockito.never()).setIndex(Mockito.anyInt());
        Assertions.assertFalse(initialcontext.setPosition(6));
    }
}