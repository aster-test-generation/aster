/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    private Object value = UNINITIALIZED;
    @Mock
    private PropertyDescriptor propertyDescriptor;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private BeanPropertyPointer beanpropertypointer;
    @Mock
    private IndexedPropertyDescriptor indexedPropertyDescriptor;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private JXPathBasicBeanInfo jxpathBasicBeanInfo;
    @Mock
    private Object getBaseValue;
    @Mock
    private Object getBean;
    @Mock
    private Object collection;
    @Mock
    private JXPathBeanInfo beanInfo;
    @Mock
    private PropertyDescriptor[] propertyDescriptors;
    @Mock
    private BeanPropertyPointer beanPropertyPointer;
    private static final Object UNINITIALIZED = new Object();
    private Object baseValue = UNINITIALIZED;
    private transient String[] names;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName() throws Exception {
        when(propertyDescriptor.getName()).thenReturn("testProperty");
        beanpropertypointer = new BeanPropertyPointer(null, null);
        assertEquals("testProperty", beanpropertypointer.getPropertyName());
        verify(propertyDescriptor, times(1)).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(dOMNodePointer, jXPathBasicBeanInfo);
        // Arrange
        when(jXPathContext.createPath("xpath")).thenReturn(dOMNodePointer);
        beanpropertypointer.createPath(jXPathContext);
        // Assert
        verify(jXPathContext, times(1)).createPath("xpath");
        assertEquals(dOMNodePointer, beanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullContext_SuBJ1() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, null);
        JXPathContext jXPathContext = null;
        try {
            beanPropertyPointer.createPath(jXPathContext);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, null);
        String propertyName = "testProperty";
        beanpropertypointer.setPropertyName(propertyName);
        assertEquals(propertyName, beanpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        // Arrange
        when(domNodePointer.isContainer()).thenReturn(true);
        // Act
        boolean result = beanpropertypointer.isContainer();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_1() {
        beanpropertypointer = new BeanPropertyPointer(null, null);
        // Test when index is the same
        beanpropertypointer.setIndex(0);
        // Test when index is different
        beanpropertypointer.setIndex(1);
        // Test when index is 0 and collection
        beanpropertypointer.setIndex(0);
        // Test when index is not 0 and collection
        beanpropertypointer.setIndex(1);
        assertEquals(0, beanpropertypointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_2() {
        beanpropertypointer = new BeanPropertyPointer(null, null);
        // Test when index is the same
        beanpropertypointer.setIndex(0);
        // Test when index is different
        beanpropertypointer.setIndex(1);
        // Test when index is 0 and collection
        beanpropertypointer.setIndex(0);
        // Test when index is not 0 and collection
        beanpropertypointer.setIndex(1);
        assertEquals(1, beanpropertypointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, beanInfo);
        // Arrange
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        // Act
        PropertyDescriptor[] result = beanpropertypointer.getPropertyDescriptors();
        // Assert
        assertEquals(propertyDescriptors, result);
        verify(beanInfo, times(1)).getPropertyDescriptors();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_1() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        // Test when propertyDescriptor is null
        when(propertyDescriptor).thenReturn(null);
        // Test when propertyDescriptor is IndexedPropertyDescriptor
        when(propertyDescriptor).thenReturn(indexedPropertyDescriptor);
        // Test when propertyDescriptor is not IndexedPropertyDescriptor
        when(propertyDescriptor).thenReturn(propertyDescriptor);
        assertEquals(1, beanPropertyPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, null);
        when(propertyDescriptors.length).thenReturn(2);
        when(propertyDescriptors[0].getName()).thenReturn("property1");
        when(propertyDescriptors[1].getName()).thenReturn("property2");
        String[] expectedNames = {"property1", "property2"};
        String[] actualNames = beanpropertypointer.getPropertyNames();
        assertArrayEquals(expectedNames, actualNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_AtomicBeanInfo_ReturnsZero() {
        beanpropertypointer = new BeanPropertyPointer(null, beanInfo);
        // Arrange
        when(beanInfo.isAtomic()).thenReturn(true);
        // Act
        int propertyCount = beanpropertypointer.getPropertyCount();
        // Assert
        assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_NonAtomicBeanInfo_ReturnsPropertyDescriptorsLength() {
        beanpropertypointer = new BeanPropertyPointer(null, beanInfo);
        // Arrange
        when(beanInfo.isAtomic()).thenReturn(false);
        PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[5];
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        // Act
        int propertyCount = beanpropertypointer.getPropertyCount();
        // Assert
        assertEquals(5, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNameNull_CefE0_ScsF0() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, new JXPathBasicBeanInfo(Object.class, true));
        assertEquals("*", beanPropertyPointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_aDxk0_DkOB0() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, null);
        JXPathContext jXPathContext = JXPathContext.newContext(null);
        NodePointer result = beanPropertyPointer.createPath(jXPathContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_WHOLE_COLLECTION_Dedc0() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, jxpathBasicBeanInfo);
        beanpropertypointer.setIndex(BeanPropertyPointer.WHOLE_COLLECTION);
        when(valueUtils.getValue(getBaseValue)).thenReturn("testValue");
        assertEquals("testValue", beanpropertypointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_NULL_PROPERTY_DESCRIPTOR_Znor0() throws Exception {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, jxpathBasicBeanInfo);
        when(propertyDescriptor).thenReturn(null);
        assertEquals(null, beanPropertyPointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex() {
        beanpropertypointer = new BeanPropertyPointer(null, null);
        // Test when index is the same
        beanpropertypointer.setIndex(0);
        assertEquals(0, beanpropertypointer.getIndex());
        // Test when index is different
        beanpropertypointer.setIndex(1);
        assertEquals(1, beanpropertypointer.getIndex());
        // Test when index is 0 and collection
        beanpropertypointer.setIndex(0);
        assertEquals(0, beanpropertypointer.getIndex());
        // Test when index is not 0 and collection
        beanpropertypointer.setIndex(1);
        assertEquals(1, beanpropertypointer.getIndex());
    }
}