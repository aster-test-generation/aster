/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    private Node node;
    private DOMNodePointer domnodepointer;
    private NodePointer nodepointer;
    private NamedNodeMap namednodemap;
    private NodeTest nodeTest;
    private NodeList nodelist;
    private Document document;
    private DOMNodePointer domNodePointer;
    private JXPathContext jXPathContext;
    private QName qName;
    private AbstractFactory abstractFactory;
    @Mock
    private Element element;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMAttributeIterator attributeIterator;
    private Attr attr;
    private QName qname;
    private String defaultNamespace;
    private Node parent;
    private String id;
    @Mock
    private QName testName;
    private Node parentNode;
    @Mock
    private NamespaceResolver superNamespaceResolver;
    @Mock
    private Pointer namespaceContextPointer;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_textNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_textNode_emptyValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("");
        domnodepointer.setValue("");
        verify(node).setNodeValue("");
        verify(node).getParentNode().removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_nodeNotSupported() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        domnodepointer.setValue("value");
        verify(node, never()).setNodeValue(any());
        verify(node, never()).appendChild(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute("attrName")).thenReturn("attributeValue");
        when(node.getParentNode()).thenReturn(element);
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attributeValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(DOMNodePointer.getPrefix(node)).thenReturn("prefix");
        when(DOMNodePointer.getLocalName(node)).thenReturn("localName");
        QName expected = new QName("prefix", "localName");
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        QName expected = new QName(null, "target");
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", domnodepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateAttribute() throws Exception {
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(element, Locale.US, "id");
        qname = new QName("prefix", "localName");
        // Act
        NodePointer result = domnodepointer.createAttribute(null, qname);
        // Assert
        verify(element, times(1)).setAttribute(qname.getName(), "");
        assertEquals(result, domnodepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn("namespaceURI");
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        assertEquals("namespaceURI", DOMNodePointer.getNamespaceURI(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURINamespaceAttr() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn(null);
        when(attr.getValue()).thenReturn("namespaceURI");
        when(node.getParentNode()).thenReturn(node);
        when(node instanceof Document).thenReturn(false);
        assertEquals("namespaceURI", DOMNodePointer.getNamespaceURI(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURINoNamespaceAttr() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn(null);
        when(node.getParentNode()).thenReturn(null);
        assertEquals(null, DOMNodePointer.getNamespaceURI(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(((Comment) node).getData()).thenReturn("   comment text   ");
        assertEquals("comment text", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ElementNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getTextContent()).thenReturn("element text");
        assertEquals("element text", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI() throws Exception {
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        assertEquals(defaultNamespace, domnodepointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_Null() throws Exception {
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        when(node.getParentNode()).thenReturn(null);
        assertEquals("", domnodepointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_Empty() throws Exception {
        defaultNamespace = "";
        node = mock(Node.class);
        defaultNamespace = "http://example.com";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn(defaultNamespace);
        assertEquals(defaultNamespace, domnodepointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_NullLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        // Act
        boolean result = domNodePointer.isLanguage(null);
        // Assert
        verify(domNodePointer).isLanguage(null);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_EmptyLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        // Act
        boolean result = domNodePointer.isLanguage("");
        // Assert
        verify(domNodePointer).isLanguage("");
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageNotStartingWith_ReturnsFalse() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        // Arrange
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        // Act
        boolean result = domNodePointer.isLanguage("fr");
        // Assert
        verify(domNodePointer).getLanguage();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageStartingWith_ReturnsTrue() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        when(node.getParentNode()).thenReturn(node);
        // Arrange
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        // Act
        boolean result = domNodePointer.isLanguage("en");
        // Assert
        verify(domNodePointer).getLanguage();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has anamespace
        when(node.getPrefix()).thenReturn("prefix");
        // Test case 2: Node does not have anamespace
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a namespace but nonamespace
        when(node.getNodeName()).thenReturn("namespace:localName");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_1() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_2() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertTrue(result instanceof NamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_PI_Node_nWwP3() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/processing-instruction('target')[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_wzib0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/prefix:localName[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_OiLy1() {
        QName qName = new QName(null, "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/localName[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_PI_CqJh3() {
        QName qName = new QName(null, "target");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/processing-instruction('target')[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_NoPrefix_VCSx6() {
        QName qName = new QName(null, "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/localName[2]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_ByQName_eZyQ7() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/prefix:localName[3]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_PI_Node_reYF2() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/processing-instruction('target')[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xml")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String namespace = domnodepointer.getNamespaceURI("xml");
        assertEquals("http://example.com", namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLNSPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String namespace = domnodepointer.getNamespaceURI("xmlns");
        assertEquals("http://example.com", namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String namespace = domnodepointer.getNamespaceURI("custom");
        assertEquals("http://example.com", namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_UnknownNamespace() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("unknown")).thenReturn(null);
        String namespace = domnodepointer.getNamespaceURI("unknown");
        assertNull(namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        DOMNodePointer domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        Mockito.when(domnodepointer.isActual()).thenReturn(true);
        boolean actual = domnodepointer.isActual();
        Assertions.assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_EbuX0_wEiC0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), null);
        boolean result = domNodePointer.isLanguage("lang");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_UGNZ0_DTCs0() {
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("prefix", "localName");
        DOMNodePointer ptr = new DOMNodePointer(null, null, null);
        NodePointer result = ptr.createChild(context, name, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_ProcessingInstructionNode_ZUTX0() throws Exception {
        Node node = mock(Node.class);
        Node parentNode = mock(Node.class);
        VariablePointer variablePointer = mock(VariablePointer.class);
        QName qName = mock(QName.class);
        DOMNodePointer domnodepointer = new DOMNodePointer(parentNode, Locale.US, null);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        String expectedPath = "/processing-instruction('target')[relativePosition]";
        assertEquals(expectedPath, domnodepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_mJwz0() throws Exception {
        NamespaceResolver superNamespaceResolver = new NamespaceResolver();
        NamespaceResolver localNamespaceResolver = new NamespaceResolver(superNamespaceResolver);
        localNamespaceResolver.setNamespaceContextPointer(new DOMNodePointer(null, null, null));
        DOMNodePointer domnodepointer = new DOMNodePointer(null, null, null);
        NamespaceResolver expectedNamespaceResolver = localNamespaceResolver;
        NamespaceResolver actualNamespaceResolver = domnodepointer.getNamespaceResolver();
        assertEquals(localNamespaceResolver.hashCode(), actualNamespaceResolver.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_OtherNodeType_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        QName expected = null;
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_1_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a namespace but no prefix
        when(node.getNodeName()).thenReturn("namespace:localName");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_jMuq0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PreviousSibling_jnPa1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node previousSibling = mock(Node.class);
        when(previousSibling.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(previousSibling);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[2]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_gvTr2_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_DocumentNode_Fvdp4() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_AGTF2_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        String result = domNodePointer.asPath();
        assertEquals("/text()[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_OhoW5() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/prefix:localName[2]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_cKiF0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_XyxE1_fid1() {
        QName name = new QName("localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_xXRS5_fid1() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePositionSibling_uffs6_fid1() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node sibling = mock(Node.class);
        when(node.getPreviousSibling()).thenReturn(sibling);
        when(sibling.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("/localName[2]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePositionSiblingText_VTsL7_fid1() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node sibling = mock(Node.class);
        when(node.getPreviousSibling()).thenReturn(sibling);
        when(sibling.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoNamespace_fSJF4_fid1() {
        QName name = new QName(null, "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_wVNK7_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(mock(Node.class));
        when(node.getPreviousSibling().getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[2]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PreviousSibling_XkRR1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node previousSibling = mock(Node.class);
        when(previousSibling.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(node.getPreviousSibling()).thenReturn(previousSibling);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[2]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix_bkFY4_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("custom");
        assertEquals(NodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefixWithNamespace_eIfy5_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.getNamespaceURI("custom");
        String result = domNodePointer.getNamespaceURI("custom");
        assertEquals(NodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_EbuX0_wEiC0_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(new VariablePointer(new QName("prefix", "localName")), node);
        boolean result = domNodePointer.isLanguage("lang");
        assertEquals(domNodePointer.isLanguage("lang"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_Id_yANe6_ZGFB0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        String id = "someId";
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("id('someId')", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_mJwz0_fid1() throws Exception {
        NamespaceResolver superNamespaceResolver = new NamespaceResolver();
        NamespaceResolver localNamespaceResolver = new NamespaceResolver(superNamespaceResolver);
        localNamespaceResolver.setNamespaceContextPointer(new DOMNodePointer(null, null, null));
        DOMNodePointer domnodepointer = new DOMNodePointer(null, null, null);
        NamespaceResolver expectedNamespaceResolver = localNamespaceResolver;
        NamespaceResolver actualNamespaceResolver = domnodepointer.getNamespaceResolver();
        assertEquals(expectedNamespaceResolver, actualNamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
        // Test case 3: Node has a namespace but no prefix
        when(node.getNodeName()).thenReturn("namespace:localName");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result instanceof NamespacePointer);
    }
}