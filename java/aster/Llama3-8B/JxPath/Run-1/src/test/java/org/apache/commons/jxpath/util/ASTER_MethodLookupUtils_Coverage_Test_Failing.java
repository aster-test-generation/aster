/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ExpressionContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_bzTs0() {
        Class targetClass = ExpressionContext.class;
        Object[] parameters = new Object[]{null};
        Class[] types = new Class[]{ExpressionContext.class};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNullParameter_Wdwe1() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[]{null};
        Class[] types = new Class[]{Object.class};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullTargetClass_TiGr5() {
        Class targetClass = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{"param1"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullTargetClassWithNullParameter_jmlI16() {
        Class targetClass = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodExactMatch_Egva4() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, Integer.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodAmbiguousMatch_EQBO5() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, Integer.class, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodTryExactFalse_XAVd6() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, Integer.class, null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodStaticMethod_FEuu8() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithNullParameter_lPqw10() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, null, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithPrimitiveParameter_RKLv11() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int.class, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithArrayParameter_UmRE12() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int[].class, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithClassParameter_SZUD13() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, Class.class, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithInterfaceParameter_StoL14() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, Comparable.class, String.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithArrayParameterWithNull_nRxW17() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int[].class, null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithArrayParameterWithPrimitive_UrAd18() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int[].class, int.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithArrayParameterWithClass_ljwC19() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int[].class, Class.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodWithArrayParameterWithInterface_FacQ20() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{String.class, int[].class, Comparable.class});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameters_LbKP0_nscN0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", null);
            assertNotNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonStaticMethod_DuAN1_ttPa0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupMethod(targetClass, "methodName", new Object[]{"param1"});
            assertNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodExactMatch_oOEK2_IRUR0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{"param1"});
            assertNotNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodAmbiguousMatch_hppQ3_MZVx0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{"param1", "param2"});
            assertNotNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameterTypes_Koil7_BrTf0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupMethod(targetClass, "methodName", null);
            assertNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameter_Ubkc11_HaJq0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{null});
            assertNotNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNonStaticMethodWithNullParameter_xDOI12_wqXv0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupMethod(targetClass, "methodName", new Object[]{null});
            assertNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodAmbiguousMatchWithNullParameter_UvmS14_efrT0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[]{null, "param2"});
            assertNotNull(method);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException was thrown");
        }
    }
}