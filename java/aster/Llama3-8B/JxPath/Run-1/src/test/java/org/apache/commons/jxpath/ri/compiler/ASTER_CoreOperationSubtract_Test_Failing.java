/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Failing {
    @Mock
    private Constant constant1;
    @Mock
    private Constant constant2;
    @Mock
    private EvalContext evalContext;
    @Mock
    private InfoSetUtil infoSetUtil;
    private CoreOperationSubtract coreOperationSubtract;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        coreOperationSubtract = new CoreOperationSubtract(constant1, constant2);
        // Arrange
        when(constant1.computeValue(evalContext)).thenReturn(10.0);
        when(constant2.computeValue(evalContext)).thenReturn(5.0);
        when(infoSetUtil.doubleValue(any())).thenReturn(10.0);
        // Act
        Object result = coreOperationSubtract.computeValue(evalContext);
        // Assert
        assertEquals(5.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_fIfW0() {
        CoreOperationSubtract coreOperationSubtract = new CoreOperationSubtract(new Constant("a"), new Constant("b"));
        assertEquals(0, coreOperationSubtract.getPrecedence());
    }
}