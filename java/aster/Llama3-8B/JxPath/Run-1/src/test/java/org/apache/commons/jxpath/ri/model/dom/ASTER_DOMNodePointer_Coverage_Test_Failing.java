/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DOMNodePointer_Coverage_Test_Failing {
    private String stringValue(Node node) {
        return null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_huHX0() {
        QName name = new QName("qualifiedName");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator nodeIterator = domNodePointer.attributeIterator(name);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_EEjt0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator result = domNodePointer.namespaceIterator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_nBqR0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean result = domNodePointer.isLanguage(null);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyPrefix_zVik1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("");
        assertNull(DOMNodePointer.UNKNOWN_NAMESPACE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownPrefix_szdG4() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("unknown");
        assertNull(DOMNodePointer.UNKNOWN_NAMESPACE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndSameNamespaceContextPointer_ijIm4() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertNull(domNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_viwB0_UvjU0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test");
        int index = 0;
        Object value = "testValue";
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ReturnsCorrectNodePointer_xlvB2_OngW0_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test");
        int index = 0;
        Object value = "testValue";
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        assertEquals(name, result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NullNode_zGwG3_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        assertEquals("", domNodePointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_nBqR0_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean result = domNodePointer.isLanguage("en");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyPrefix_zVik1_fid1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("");
        assertEquals(DOMNodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownPrefix_szdG4_fid1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("unknown");
        assertEquals(DOMNodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_LocalNamespaceResolverIsNotNullAndDifferentInstanceAndSameNamespaceContextPointer_ijIm4_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        NamespaceResolver expectedNamespaceResolver = new NamespaceResolver(null);
        assertEquals(domNodePointer, expectedNamespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPrefix_EXJj0_QHYe0_fid1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = nodePointer.getNamespaceURI("");
        assertEquals(DOMNodePointer.UNKNOWN_NAMESPACE, nodePointer.getNamespaceURI(""));
    }
}