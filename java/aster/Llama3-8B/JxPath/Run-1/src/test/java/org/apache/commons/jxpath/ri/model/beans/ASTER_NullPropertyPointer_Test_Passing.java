/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
    private String propertyName = "*";
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PropertyOwnerPointer propertyOwnerPointer;
    @Mock
    private PropertyPointer propertyPointer;
    @Mock
    private QName qname;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContext context;
    @Mock
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer immediateParentPointer;
    private boolean byNameAttribute = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_UxUX0() {
        QName qName = new QName("*");
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        NodePointer nodePointer = nullPropertyPointer.getValuePointer();
        assertEquals(new QName("*"), nodePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Act
        String result = nullpropertypointer.getPropertyName();
        // Assert
        assertEquals(propertyName, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = nullpropertypointer.isContainer();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        QName expected = new QName(propertyName);
        QName actual = nullpropertypointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        int expectedLength = 0;
        // Act
        int actualLength = nullpropertypointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        String[] expected = new String[0];
        String[] actual = nullpropertypointer.getPropertyNames();
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() {
        MockitoAnnotations.initMocks(this);
        when(parent.isActual()).thenReturn(true);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        boolean actual = nullPropertyPointer.isActual();
        assertEquals(false, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        // Act
        boolean result = nullpropertypointer.isLeaf();
        // Assert
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_TFBk0() throws Exception {
        MockitoAnnotations.initMocks(this);
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(Mockito.mock(DOMNodePointer.class));
        assertEquals(0, nullpropertypointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_jHMj0() throws Exception {
        MockitoAnnotations.initMocks(this);
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(null);
        nullpropertypointer.setPropertyName("test");
        assertEquals("test", nullpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNameAttributeValue_ZcRZ0_1() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        String attributeValue = "newAttribute";
        nullpropertypointer.setNameAttributeValue(attributeValue);
        assertEquals(attributeValue, nullpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNameAttributeValue_ZcRZ0_2() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        String attributeValue = "newAttribute";
        nullpropertypointer.setNameAttributeValue(attributeValue);
        assertEquals(0, nullpropertypointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_bEQM0() {
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(null);
        int propertyCount = nullpropertypointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }
}