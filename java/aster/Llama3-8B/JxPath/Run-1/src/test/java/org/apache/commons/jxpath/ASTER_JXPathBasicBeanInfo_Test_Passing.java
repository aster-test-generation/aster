/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsForClassWithoutProperties_UJfN1_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsForClassWithoutProperties_UJfN1_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithClassAndAtomic_ZdWG0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, true);
        String result = beanInfo.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithClass_ufcT1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class);
        String result = beanInfo.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithClassAndDynamicPropertyHandlerClass_XJVG2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.class, PropertyDescriptor.class);
        String result = beanInfo.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_CwWZ0_gymJ0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        boolean result = beanInfo.isAtomic();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic1_cMRG1_dkdB0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        boolean result = beanInfo.isAtomic();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic2_BNhY2_iyLM0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, null);
        boolean result = beanInfo.isAtomic();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass_vUtM0_CrNP0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        boolean result = beanInfo.isDynamic();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass1_hYQl1_xjHb1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Class result = beanInfo.getDynamicPropertyHandlerClass();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass2_cnMp2_NrIT1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, null);
        boolean result = beanInfo.isDynamic();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_JVbh0_BSsn0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_EWyv1_groc1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_YniM2_JiFX0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, null);
        PropertyDescriptor propertyDescriptor = beanInfo.getPropertyDescriptor("propertyName");
        Assertions.assertNull(propertyDescriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicTrue_ntLc2_lXdu0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        boolean result = beanInfo.isDynamic();
        assert(result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicFalse_EsyW3_mAyo0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, null);
        boolean result = beanInfo.isDynamic();
        assert(result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsForInterface_kkDh3_Uxbt1() {
        try {
            JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Class.forName("java.io.Serializable"), false);
        } catch (ClassNotFoundException e) {
            Assertions.fail("ClassNotFoundException was expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsForClassWithoutProperties_UJfN1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        Assertions.assertNotNull(propertyDescriptors);
        Assertions.assertArrayEquals(new PropertyDescriptor[0], propertyDescriptors);
    }
}