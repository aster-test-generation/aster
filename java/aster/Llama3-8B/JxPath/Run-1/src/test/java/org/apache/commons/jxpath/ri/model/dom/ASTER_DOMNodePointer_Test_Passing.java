/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    private Node node;
    private DOMNodePointer domnodepointer;
    private NodePointer nodepointer;
    private NamedNodeMap namednodemap;
    private NodeTest nodeTest;
    private NodeList nodelist;
    private Document document;
    private DOMNodePointer domNodePointer;
    private JXPathContext jXPathContext;
    private QName qName;
    private AbstractFactory abstractFactory;
    @Mock
    private Element element;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMAttributeIterator attributeIterator;
    private Attr attr;
    private QName qname;
    private String defaultNamespace;
    private Node parent;
    private String id;
    @Mock
    private QName testName;
    private Node parentNode;
    @Mock
    private NamespaceResolver superNamespaceResolver;
    @Mock
    private Pointer namespaceContextPointer;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_elementNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node childNode = mock(Node.class);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.getLength()).thenReturn(1);
        when(nodelist.item(0)).thenReturn(childNode);
        domnodepointer.setValue(childNode);
        verify(node).appendChild(childNode.cloneNode(true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_documentNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        Node childNode = mock(Node.class);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.getLength()).thenReturn(1);
        when(nodelist.item(0)).thenReturn(childNode);
        domnodepointer.setValue(childNode);
        verify(node).appendChild(childNode.cloneNode(true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        domnodepointer = Mockito.mock(DOMNodePointer.class);
        // Arrange
        Mockito.when(domnodepointer.isCollection()).thenReturn(true);
        // Act
        boolean result = domnodepointer.isCollection();
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).isCollection();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NullNode_jrsg3() {
        String result = DOMNodePointer.findEnclosingAttribute(null, "attrName");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Act
        int hashCode = domnodepointer.hashCode();
        // Assert
        verify(node).hashCode();
        assertEquals(node.hashCode(), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_OtherNodeType() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        QName expected = null;
        QName actual = domnodepointer.getName();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_VariablePointer_EWZm3() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
        String result = pointer.getNamespaceURI();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        domnodepointer = Mockito.mock(DOMNodePointer.class);
        // Create a mock NodeTest object
        NodeTest nodeTest = Mockito.mock(NodeTest.class);
        // Create a mock NodePointer object
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        // Set the startWith parameter to the mock NodePointer object
        Mockito.when(domnodepointer.childIterator(nodeTest, false, nodePointer)).thenReturn(Mockito.mock(NodeIterator.class));
        // Create a NodeIterator object
        NodeIterator nodeIterator = Mockito.mock(NodeIterator.class);
        // Set the return value of the childIterator method to the mock NodeIterator object
        Mockito.when(domnodepointer.childIterator(nodeTest, false, null)).thenReturn(nodeIterator);
        // Verify that the childIterator method returns the correct NodeIterator object
        NodeIterator result = domnodepointer.childIterator(nodeTest, false, null);
        Mockito.verify(domnodepointer).childIterator(nodeTest, false, null);
        Assertions.assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        domnodepointer = Mockito.mock(DOMNodePointer.class);
        // Arrange
        Mockito.when(domnodepointer.getLength()).thenReturn(1);
        // Act
        int length = domnodepointer.getLength();
        // Assert
        Assertions.assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        // Test with localName not null
        when(node.getLocalName()).thenReturn("localName");
        // Test with localName null
        when(node.getLocalName()).thenReturn(null);
        String name = "prefix:localName";
        when(node.getNodeName()).thenReturn(name);
        // Test with localName null and no prefix
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremove() throws Exception {
        node = mock(Node.class);
        parent = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(parent);
        domnodepointer.remove();
        verify(parent, times(1)).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has a prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test case 2: Node does not have a prefix
        when(node.getPrefix()).thenReturn(null);
        // Test case 3: Node has a namespace but no prefix
        when(node.getNodeName()).thenReturn("namespace:localName");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_jMuq0() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PreviousSibling_jnPa1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node previousSibling = mock(Node.class);
        when(previousSibling.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(previousSibling);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_gvTr2() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$prefix:localName/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_AGTF2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        String result = domNodePointer.asPath();
        assertEquals("id('id')", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_cKiF0() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_XyxE1() {
        QName name = new QName("localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_flpP2() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_DocumentNode_DkKG4() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_xXRS5() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePositionSibling_uffs6() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node sibling = mock(Node.class);
        when(node.getPreviousSibling()).thenReturn(sibling);
        when(sibling.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePositionSiblingText_VTsL7() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node sibling = mock(Node.class);
        when(node.getPreviousSibling()).thenReturn(sibling);
        when(sibling.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, node);
        assertEquals("", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_cHYm1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoNamespace_fSJF4() {
        QName name = new QName(null, "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NullId_hjPl5() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_wVNK7() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(mock(Node.class));
        when(node.getPreviousSibling().getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_qgtx0() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("$prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PreviousSibling_XkRR1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node previousSibling = mock(Node.class);
        when(previousSibling.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(node.getPreviousSibling()).thenReturn(previousSibling);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_DocumentNode_HENJ4() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        String namespace = domnodepointer.getNamespaceURI("");
        assertEquals(domnodepointer.getDefaultNamespaceURI(), namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EmptyPrefix_RyTj1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("");
        assertEquals(domNodePointer.getDefaultNamespaceURI(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix_bkFY4() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("custom");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefixWithNamespace_eIfy5() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.getNamespaceURI("custom");
        String result = domNodePointer.getNamespaceURI("custom");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Arrange
        // No need to arrange anything as we are testing the getBaseValue method
        // Act
        Object baseValue = domnodepointer.getBaseValue();
        // Assert
        assertEquals(node, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_UUqV0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual2_Nuri1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual4_Xyqp3() {
        Node node = null;
        Locale locale = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, null);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual5_JeTe4() {
        Node node = null;
        Locale locale = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual6_ncPQ5() {
        Node node = null;
        Locale locale = Locale.US;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClassObject_FHuR3_uuCp0() {
        QName qName = new QName("prefix", "localName");
        boolean result = new DOMNodePointer(null, Locale.US, "id").equals(qName);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithoutParent_vmSP1_owpP0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        Node node = mock(Node.class);
        DOMNodePointer nodePointer = new DOMNodePointer(variablePointer, node);
        try {
            nodePointer.remove();
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove root DOM node", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_Id_yANe6_ZGFB0() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        String id = "someId";
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullPrefix_sZqt0() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        String namespace = domnodepointer.getNamespaceURI("");
        assertEquals(domnodepointer.getNamespaceResolver().getNamespaceURI(""), namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullPrefix_TToT0_gGdZ0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceResolver().getNamespaceURI("");
        assertEquals(domNodePointer.getDefaultNamespaceURI(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix_eBnO2_NHZZ0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLNSPrefix_qKsO3_BJyC0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("xmlns");
        assertEquals("http://www.w3.org/2000/xmlns/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual3_mkxz2_CmJD0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        assertEquals(true, domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        // Test with localName not null
        when(node.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
        // Test with localName null
        when(node.getLocalName()).thenReturn(null);
        String name = "prefix:localName";
        when(node.getNodeName()).thenReturn(name);
        assertEquals("localName", DOMNodePointer.getLocalName(node));
        // Test with localName null and no prefix
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }
}