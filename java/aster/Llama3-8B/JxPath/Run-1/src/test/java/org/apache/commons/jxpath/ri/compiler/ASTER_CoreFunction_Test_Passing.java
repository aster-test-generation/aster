/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private InfoSetUtil infoSetUtil;
    @Mock
    private Expression expression;
    private int functionCode;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @InjectMocks
    private CoreFunction corefunction;
    @Mock
    private EvalContext ctx;
    @Mock
    private Object set;
    private CoreFunction coreFunction;
    @Mock
    private Expression expression1;
    @Mock
    private Expression expression2;
    @Mock
    private EvalContext evalContext1;
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private Expression[] args;
    @Mock
    private BasicNodeSet basicNodeSet;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private EvalContext evalContext2;
    @Mock
    private NodePointer nodePointer2;
    private static Double ZERO = Double.valueOf(0);
    @Mock
    private EvalContext nestedEvalContext;
    @Mock
    Expression expression3;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionID() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getContextPointer()).thenReturn(nodePointer);
        when(infoSetUtil.stringValue(any())).thenReturn("testId");
        when(expression.computeValue(evalContext)).thenReturn("testId");
        when(evalContext.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getContextPointer()).thenReturn(nodePointer);
        when(infoSetUtil.stringValue(any())).thenReturn("testId");
        when(expression.computeValue(evalContext)).thenReturn("testId");
        Object result = corefunction.functionID(evalContext);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionLast() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_LAST;
        when(evalContext.nextNode()).thenReturn(true);
        when(evalContext.next()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionPosition() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_POSITION;
        when(evalContext.getPosition()).thenReturn(1);
        assertEquals(1, corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionCount() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_COUNT;
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        assertEquals(1, corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionString() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_STRING;
        when(evalContext.toString()).thenReturn("test");
        assertEquals("test", corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionConcat() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_CONCAT;
        when(evalContext.next()).thenReturn("test1");
        when(evalContext.next()).thenReturn("test2");
        assertEquals("test1test2", corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionStartsWith() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_STARTS_WITH;
        when(evalContext.next()).thenReturn("test");
        when(evalContext.next()).thenReturn("test1");
        assertEquals(true, corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionName() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(ctx.hasNext()).thenReturn(true);
        when(ctx.next()).thenReturn(nodePointer);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        assertEquals(nodePointer.getName().toString(), corefunction.functionName(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionFalse() {
        corefunction = new CoreFunction(0, new Expression[0]);
        // Arrange
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Act
        Object result = corefunction.functionFalse(evalContext);
        // Assert
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLang() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.isLanguage("lang")).thenReturn(true);
        Object result = corefunction.functionLang(evalContext);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLangNullSingleNodePointer() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(evalContext.getSingleNodePointer()).thenReturn(null);
        Object result = corefunction.functionLang(evalContext);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLangFalseSingleNodePointer() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.isLanguage("lang")).thenReturn(false);
        Object result = corefunction.functionLang(evalContext);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionPosition() {
        coreFunction = new CoreFunction(0, new Expression[0]);
        when(evalContext.getCurrentPosition()).thenReturn(1);
        when(evalContext.getPosition()).thenReturn(1);
        Object result = coreFunction.functionPosition(evalContext);
        assertEquals(Integer.valueOf(1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_XsGD0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("last");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionPosition_bLWa1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("position");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCount_wAEx2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assert functionName.equals("count");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLast() throws Exception {
        MockitoAnnotations.initMocks(this);
        CoreFunction corefunction = new CoreFunction(1, new Expression[0]);
        // Arrange
        when(evalContext.getCurrentPosition()).thenReturn(1);
        when(evalContext.nextNode()).thenReturn(true).thenReturn(false);
        when(evalContext.getPosition()).thenReturn(1);
        // Act
        Object result = corefunction.functionLast(evalContext);
        // Assert
        assertEquals(1.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCountWithNullArgs_SAhc0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        int result = coreFunction.getArgumentCount();
        Assertions.assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionStartsWith() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getPosition()).thenReturn(0);
        when(expression1.computeValue(evalContext)).thenReturn("Hello");
        when(expression2.computeValue(evalContext)).thenReturn("HelloWorld");
        CoreFunction corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        boolean result = (boolean) corefunction.functionStartsWith(evalContext);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNamespaceURI() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext1.hasNext()).thenReturn(true);
        when(evalContext1.next()).thenReturn(nodePointer1);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", corefunction.functionNamespaceURI(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNamespaceURIfirstArgumentIsPresent() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext1.hasNext()).thenReturn(true);
        when(evalContext1.next()).thenReturn(nodePointer1);
        when(evalContext1.getCurrentNodePointer()).thenReturn(nodePointer1);
        when(nodePointer1.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", corefunction.functionNamespaceURI(evalContext1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNamespaceURIfirstArgumentIsNotPresent() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext1.hasNext()).thenReturn(true);
        when(evalContext1.next()).thenReturn(nodePointer1);
        assertEquals("", corefunction.functionNamespaceURI(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionConcat() throws Exception {
        MockitoAnnotations.initMocks(this);
        corefunction = new CoreFunction(1, args);
        // Arrange
        String expected = "Hello, World!";
        when(args[0].compute(evalContext)).thenReturn("Hello, ");
        when(args[1].compute(evalContext)).thenReturn("World!");
        // Act
        Object result = corefunction.functionConcat(evalContext);
        // Assert
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionCount() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(expression.compute(evalContext)).thenReturn(1);
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{expression});
        Object result = coreFunction.functionCount(evalContext);
        assertEquals(1.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionEndsWith() throws Exception {
        MockitoAnnotations.initMocks(this);
        CoreFunction corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        when(expression1.computeValue(evalContext)).thenReturn("Hello");
        when(expression2.computeValue(evalContext)).thenReturn("World");
        // Act
        Object result = corefunction.functionEndsWith(evalContext);
        // Assert
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_cRIG0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String result = coreFunction.toString();
        assert result.equals("getFunctionName()");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_DSci3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        String result = coreFunction.toString();
        assert result.equals("getFunctionName()");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionKey() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(nodePointer.getValue()).thenReturn("value");
        when(jxpathContext.getNodeSetByKey("key", "value")).thenReturn(nodeSet);
        CoreFunction coreFunction = new CoreFunction(1, new Expression[2]);
        when(evalContext.getJXPathContext()).thenReturn(jxpathContext);
        when(evalContext.getPosition()).thenReturn(1);
        when(evalContext.next()).thenReturn(nodePointer);
        when(nodePointer.getValue()).thenReturn("value");
        when(jxpathContext.getNodeSetByKey("key", "value")).thenReturn(nodeSet);
        Object result = coreFunction.functionKey(evalContext);
        assertEquals(NodeSetContext.class, result.getClass());
        verify(evalContext, times(1)).getJXPathContext();
        verify(evalContext, times(1)).getPosition();
        verify(evalContext, times(1)).next();
        verify(jxpathContext, times(1)).getNodeSetByKey("key", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLocalName_noNext() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext2.hasNext()).thenReturn(true);
        when(evalContext2.next()).thenReturn(nodePointer2);
        when(evalContext.hasNext()).thenReturn(false);
        assertEquals("", corefunction.functionLocalName(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLocalName_noNodePointer() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext2.hasNext()).thenReturn(true);
        when(evalContext2.next()).thenReturn(nodePointer2);
        when(evalContext.getCurrentNodePointer()).thenReturn(null);
        assertEquals("", corefunction.functionLocalName(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionLocalName_noName() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.next()).thenReturn(nodePointer);
        when(evalContext2.hasNext()).thenReturn(true);
        when(evalContext2.next()).thenReturn(nodePointer2);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(null);
        assertEquals("", corefunction.functionLocalName(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionTrue() {
        coreFunction = new CoreFunction(1, new Expression[0]);
        // Set up the mocks
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Call the method under test
        Object result = coreFunction.functionTrue(evalContext);
        // Verify the result
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionNull() throws Exception {
        corefunction = new CoreFunction(0, new Expression[0]);
        // Arrange
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(false);
        // Act
        Object result = corefunction.functionNull(evalContext);
        // Assert
        assertEquals(null, result);
        verify(evalContext, times(1)).getPosition();
        verify(evalContext, times(1)).hasNext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSumNullArgument_MUwA0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        Object result = coreFunction.functionSum(null);
        assertEquals(ZERO, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstringAfter() throws Exception {
        MockitoAnnotations.initMocks(this);
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2});
        // Arrange
        String s1 = "Hello World";
        String s2 = "World";
        Mockito.when(expression1.computeValue(evalContext)).thenReturn(s1);
        Mockito.when(expression2.computeValue(evalContext)).thenReturn(s2);
        // Act
        Object result = corefunction.functionSubstringAfter(evalContext);
        // Assert
        Mockito.verify(evalContext, Mockito.times(1)).setPosition(Mockito.anyInt());
        Mockito.verify(evalContext, Mockito.times(1)).getJXPathContext();
        Mockito.verify(expression1, Mockito.times(1)).computeValue(evalContext);
        Mockito.verify(expression2, Mockito.times(1)).computeValue(evalContext);
        assertEquals("Hello ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentLast_RVsF0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentBoolean_JniH1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        Assertions.assertTrue(args == null || args.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentCount_RKjC3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentNot_AnSB4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentDefault_CdCo5() {
        CoreFunction coreFunction = new CoreFunction(100, new Expression[0]);
        boolean result = coreFunction.computeContextDependent();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionRound() throws Exception {
        corefunction = new CoreFunction(1, new Expression[]{expression});
        Mockito.when(expression.computeValue(Mockito.any(EvalContext.class))).thenReturn("1.234");
        Mockito.when(InfoSetUtil.doubleValue(Mockito.anyString())).thenReturn(1.234);
        Mockito.when(evalContext.getPosition()).thenReturn(1);
        Object result = corefunction.functionRound(evalContext);
        Assertions.assertEquals(result, 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstring() throws Exception {
        corefunction = new CoreFunction(1, new Expression[]{expression1, expression2, expression3});
        // Arrange
        String s1 = "Hello";
        when(infoSetUtil.stringValue(expression1.computeValue(evalContext))).thenReturn(s1);
        when(infoSetUtil.doubleValue(expression2.computeValue(evalContext))).thenReturn(3.0);
        when(infoSetUtil.doubleValue(expression3.computeValue(evalContext))).thenReturn(2.0);
        // Act
        Object result = corefunction.functionSubstring(evalContext);
        // Assert
        assertEquals("llo", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueFunctionLang_FTaC0() throws Exception {
        MockitoAnnotations.initMocks(this);
        functionCode = Compiler.FUNCTION_LANG;
        JXPathContext jxpathContext = Mockito.mock(JXPathContext.class);
        when(evalContext.getJXPathContext()).thenReturn(jxpathContext);
        assertEquals(jxpathContext, corefunction.computeValue(evalContext));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSumNonEvalContextArgument_SjLP1_FEnj0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        Object result = coreFunction.functionSubstring(null);
        assertEquals("Invalid argument type for 'substring': java.lang.Null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionString_FxRY0() throws Exception {
        MockitoAnnotations.initMocks(this);
        CoreFunction corefunction = new CoreFunction(1, new Expression[0]);
        EvalContext evalContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.toString()).thenReturn("someNodePointer");
        InfoSetUtil infoSetUtil = mock(InfoSetUtil.class);
        when(infoSetUtil.stringValue(any(NodePointer.class))).thenReturn("someStringValue");
        Object result = corefunction.functionSubstring(evalContext);
        assertEquals("someStringValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionContains_gEaU0() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.getJXPathContext()).thenReturn(null);
        when(expression1.computeValue(evalContext)).thenReturn("Hello");
        when(expression2.computeValue(evalContext)).thenReturn("World");
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        when(evalContext.getValue()).thenReturn("Hello");
        when(evalContext.next()).thenReturn(true);
        when(evalContext.getNodeSet()).thenReturn(null);
        when(evalContext.nextSet()).thenReturn(true);
        when(evalContext.getContextNodePointer()).thenReturn(null);
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.getDocumentOrder()).thenReturn(0);
        when(evalContext.getContextNodeList()).thenReturn(null);
        when(evalContext.getCurrentNodePointer()).thenReturn(null);
        when(evalContext.getRootContext()).thenReturn(null);
        when(evalContext.getCurrentPosition()).thenReturn(0);
        when(evalContext.isChildOrderingRequired()).thenReturn(true);
        corefunction.functionSubstring(evalContext);
    }
}