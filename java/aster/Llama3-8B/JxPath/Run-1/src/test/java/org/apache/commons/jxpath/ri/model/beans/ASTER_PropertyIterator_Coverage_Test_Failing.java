/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PropertyIterator_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_DVPe0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        int position = propertyIterator.getPosition();
        assert position == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameNotNull_CRBl0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameNull_VRXG3() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionFalse_mbAz4_1() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        propertyIterator.setPosition(1);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertFalse(propertyIterator.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionFalse_mbAz4_2() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        propertyIterator.setPosition(1);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_HlbQ5() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        propertyIterator.reset();
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleThrowable_UBAT7_UsnS0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        Throwable throwable = new Throwable();
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualPropertyReverseTrueEmptyTrue_cSTr11_hWXs0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, true, null);
        propertyIterator.prepareForIndividualProperty("name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualPropertyReverseFalseEmptyFalse_KPXN12_MyEG0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionFalse_mbAz4() {
        PropertyIterator propertyIterator = new PropertyIterator(null, "name", false, null);
        propertyIterator.setPosition(1);
        assertFalse(propertyIterator.setPosition(1));
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNull(nodePointer);
    }
}