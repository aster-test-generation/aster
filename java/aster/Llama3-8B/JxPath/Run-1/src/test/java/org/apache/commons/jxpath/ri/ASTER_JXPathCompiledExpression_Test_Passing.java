/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    @Mock
    private JXPathContext jxpathcontext;
    @Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private Pointer pointer;
    private JXPathCompiledExpression jxpathcompiledexpression;
    @Mock
    private Iterator iterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPath_ibrN1() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("test", new Constant("test"));
        assertEquals("test", expression.getXPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_VthO0() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("string"));
        assertEquals("xpath", expression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNumber_mIaZ1() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant(1));
        assertEquals("xpath", expression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionStringConstant_UbpC0() {
        JXPathCompiledExpression jxpath = new JXPathCompiledExpression("xpath", new Constant("string"));
        Expression result = jxpath.getExpression();
        assertEquals(Constant.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionNumberConstant_mDdN1() {
        JXPathCompiledExpression jxpath = new JXPathCompiledExpression("xpath", new Constant(1));
        Expression result = jxpath.getExpression();
        assertEquals(Constant.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Zvem0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContext jxpathContext = JXPathContext.newContext(null, null);
        JXPathContextReferenceImpl jxpathContextReferenceImpl = (JXPathContextReferenceImpl) jxpathContext;
        Object value = jxpathCompiledExpression.getValue(jxpathContext);
        assertEquals("expression", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_WRoG0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContext jxpathContext = JXPathContext.newContext(null, null);
        Iterator iterator = jxpathCompiledExpression.iteratePointers(jxpathContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_mBoq0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContext jxpathContext = JXPathContext.newContext(null, null);
        Iterator iterator = jxpathCompiledExpression.iterate(jxpathContext);
        assert iterator != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_XKrC0_WuMb0() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        JXPathContext jxpathContext = JXPathContext.newContext(null, null);
        jxpathCompiledExpression.iterate(jxpathContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_eirF0_tHzs0() {
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(null, null);
        JXPathContext context = JXPathContext.newContext(null, null);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("constant"));
        Object result = expression.getValue(context, Object.class);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ROPF0_sMns0() {
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(null, null);
        JXPathContext context = JXPathContext.newContext(contextReference, null);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("string"));
        Pointer result = expression.getPointer(context, "xpath");
        assertNotNull(result);
    }
}