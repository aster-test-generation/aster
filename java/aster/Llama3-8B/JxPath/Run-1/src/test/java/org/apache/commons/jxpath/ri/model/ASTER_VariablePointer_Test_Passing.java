/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private VariablePointer variablepointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private NodePointer nodePointer;
    private Variables variables;
    private boolean actual;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueUndefinedVariable_mkLH0() {
        VariablePointer variablePointer = new VariablePointer(new QName("undefined"));
        try {
            variablePointer.setValue("value");
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot set undefined variable: undefined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithQName_DTFu1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        QName result = variablePointer.getName();
        assert result.toString().equals("qualifiedName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthActualFalse_hxfF1() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        int result = variablePointer.getLength();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_JdNd0() {
        VariablePointer pointer = new VariablePointer(new QName("prefix", "localName"));
        boolean result = pointer.equals(pointer);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_tzfW1() {
        VariablePointer pointer1 = new VariablePointer(new QName("prefix", "localName"));
        VariablePointer pointer2 = new VariablePointer(new QName("prefix", "localName"));
        boolean result = pointer1.equals(pointer2);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_bmoX2() {
        VariablePointer pointer = new VariablePointer(new QName("prefix", "localName"));
        boolean result = pointer.equals(null);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_Vomr3() {
        VariablePointer pointer = new VariablePointer(new QName("prefix", "localName"));
        Object object = new Object();
        boolean result = pointer.equals(object);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_YWUe4() {
        VariablePointer pointer = new VariablePointer(new QName("prefix", "localName"));
        VariablePointer other = new VariablePointer(new QName("prefix", "otherLocalName"));
        boolean result = pointer.equals(other);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNull_SprF2() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        JXPathContext context = null;
        try {
            NodePointer result = variablePointer.createPath(context);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNoIndexAndNotActual_emsq0() {
        QName name = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(name);
        String result = variablePointer.asPath();
        assertEquals("$qualifiedName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndexAndNotActual_DFZz2() {
        QName name = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(name);
        variablePointer.setIndex(0);
        String result = variablePointer.asPath();
        assertEquals("$qualifiedName[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithWholeCollectionAndNotActual_wXDe4() {
        QName name = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(name);
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
        String result = variablePointer.asPath();
        assertEquals("$qualifiedName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariables_ContextHasVariables_kWsk0_EWAi0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("variableName"));
        variablePointer.findVariables(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentVariables_dSHk5_uGNq0() {
        VariablePointer pointer = new VariablePointer(new QName("prefix", "localName"));
        VariablePointer other = new VariablePointer(new QName("prefix", "localName"));
        boolean result = pointer.equals(other);
        assert(result == true);
    }
}