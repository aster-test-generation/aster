/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    @Mock
    private Object superObject;
    ParentContext parentContext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private ParentContext parentcontext;
    @Mock
    private NodePointer nodePointer;
    private NodeTest nodeTest;
    private NodePointer currentNodePointer;
    private boolean setStarted = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        MockitoAnnotations.initMocks(this);
        parentContext = Mockito.mock(ParentContext.class);
        Mockito.when(parentContext.getDocumentOrder()).thenReturn(1);
        int result = parentContext.getDocumentOrder();
        Mockito.verify(parentContext, Mockito.times(1)).getDocumentOrder();
        Assertions.assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition() {
        MockitoAnnotations.initMocks(this);
        parentContext = Mockito.mock(ParentContext.class);
        Mockito.when(parentContext.getCurrentPosition()).thenReturn(1);
        int currentPosition = parentContext.getCurrentPosition();
        Assertions.assertEquals(1, currentPosition);
    }
}