/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ExpressionContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_DQha0() {
        MethodLookupUtils.lookupConstructor(ExpressionContext.class, new Object[]{});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNullParameter_aZcr1() {
        MethodLookupUtils.lookupConstructor(ExpressionContext.class, new Object[]{null});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutParameters_dsDV2() {
        MethodLookupUtils.lookupConstructor(ExpressionContext.class, new Object[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutParameters_SjKI2() {
        Class targetClass = Object.class;
        Object[] parameters = new Object[0];
        Class[] types = new Class[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNullParameters_TDSp0() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodEmptyParameters_lQXT1() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNullParameter_dBzh2() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{null});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNoMatch_letG3() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "method", new Object[]{Object.class});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMethodNotFound_bffn7() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "nonExistingMethod", new Object[]{String.class});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullMethodName_ijkR6_rGSC0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, null, new Object[]{"param1"});
            assertNull(method);
        } catch (ClassNotFoundException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodEmptyParameterTypes_lfRH8_INNe0() {
        try {
            Class targetClass = Class.forName("TargetClass");
            Method method = MethodLookupUtils.lookupStaticMethod(targetClass, "methodName", new Object[0]);
            assertNull(method);
        } catch (ClassNotFoundException e) {
        }
    }
}