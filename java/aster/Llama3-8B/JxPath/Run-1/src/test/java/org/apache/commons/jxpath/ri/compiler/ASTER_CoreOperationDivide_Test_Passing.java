/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationDivide_Test_Passing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private Constant constant1;
    @Mock
    private Constant constant2;
    private CoreOperationDivide coreOperationDivide;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ygPe0() {
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("a"), new Constant("b"));
        assertEquals("div", coreOperationDivide.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        coreOperationDivide = new CoreOperationDivide(constant1, constant2);
        // Set up the mock objects
        when(constant1.computeValue(evalContext)).thenReturn(10.0);
        when(constant2.computeValue(evalContext)).thenReturn(2.0);
        // Call the method under test
        Object result = coreOperationDivide.computeValue(evalContext);
        // Verify the result
        assertEquals(5.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_PORk0() {
        Constant c1 = new Constant("1");
        Constant c2 = new Constant(2);
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(c1, c2);
        assertFalse(coreOperationDivide.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_FmFu5() {
        CoreOperationDivide coreOperationDivide = new CoreOperationDivide(new Constant("a"), new Constant(5));
        assertEquals(5, coreOperationDivide.getPrecedence());
    }
}