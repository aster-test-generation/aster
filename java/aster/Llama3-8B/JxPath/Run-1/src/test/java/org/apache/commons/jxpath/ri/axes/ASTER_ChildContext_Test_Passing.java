/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
    @Mock
    private NodeIterator iterator;
    @Mock
    private ChildContext childContext;
    @Mock
    private Object superObject;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @InjectMocks
    private ChildContext childcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() {
        childcontext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        // Set up the mock objects
        when(childcontext.getCurrentPosition()).thenReturn(0);
        // Call the method under test
        boolean result = childcontext.nextNode();
        // Verify the result
        assertEquals(true, result);
        verify(childcontext).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_gUpw0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), null), null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        ChildContext childContext = new ChildContext(new NamespaceContext(selfContext, nodeTest), nodeTest, true, false);
        boolean result = childContext.nextNode();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_dRqA0_1() throws Exception {
        ChildContext childContext = new ChildContext(null, null, false, false);
        int position = 1;
        int oldPosition = 0;
        boolean result = childContext.nextNode();
        Mockito.verify(childContext, Mockito.times(1)).nextNode();
        Mockito.verify(childContext, Mockito.times(1)).getCurrentPosition();
        Mockito.verifyNoMoreInteractions(childContext);
        Assertions.assertEquals(oldPosition, childContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_dRqA0_2() throws Exception {
        ChildContext childContext = new ChildContext(null, null, false, false);
        int position = 1;
        int oldPosition = 0;
        boolean result = childContext.nextNode();
        Mockito.verify(childContext, Mockito.times(1)).nextNode();
        Mockito.verify(childContext, Mockito.times(1)).getCurrentPosition();
        Mockito.verifyNoMoreInteractions(childContext);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_QcEA0() throws Exception {
        NodeTypeTest nodeTest1 = new NodeTypeTest(1);
        NodeTypeTest nodeTest2 = new NodeTypeTest(1);
        NodeTypeTest nodeTest3 = new NodeTypeTest(1);
        NodeTypeTest nodeTest4 = new NodeTypeTest(1);
        NodeTypeTest nodeTest5 = new NodeTypeTest(1);
        SelfContext selfContext1 = new SelfContext(null, nodeTest1);
        SelfContext selfContext2 = new SelfContext(selfContext1, nodeTest2);
        SelfContext selfContext3 = new SelfContext(selfContext2, nodeTest3);
        SelfContext selfContext4 = new SelfContext(selfContext3, nodeTest4);
        SelfContext selfContext5 = new SelfContext(selfContext4, nodeTest5);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext5, nodeTest5);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest5, false, false);
        NodePointer nodePointer = childContext.getCurrentNodePointer();
        NodePointer result = childContext.getCurrentNodePointer();
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_HjHA0() throws Exception {
        ChildContext childContext = new ChildContext(null, null, false, false);
        Iterator<NodePointer> iterator = mock(Iterator.class);
        when(iterator.hasNext()).thenReturn(true).thenReturn(false);
        when(iterator.next()).thenReturn(nodePointer);
        boolean result = childContext.nextNode();
        assertEquals(true, result);
    }
}