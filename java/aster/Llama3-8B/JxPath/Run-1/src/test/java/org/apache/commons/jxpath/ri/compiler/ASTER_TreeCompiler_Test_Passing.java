/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTest_ZDFT0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qname = new QName("test");
        Object result = treeCompiler.nodeNameTest(qname);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_ViMT0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.nodeTypeTest(1);
        assertEquals(NodeTypeTest.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteral_oLjV0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("test");
        assertEquals(Constant.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_quAr0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
        assertEquals(VariableReference.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStepWithNullNodeTest_FGmJ1_fid1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        try {
            treeCompiler.step(1, null, new Object[]{"predicate1", "predicate2"});
            assertEquals(false, true);
        } catch (Exception e) {
            assertEquals("java.lang.ClassCastException", e.getClass().getName());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_quAr0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_quAr0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object result = treeCompiler.variableReference(qName);
        assertEquals(VariableReference.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_yyre0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_yyre0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertEquals("processing-instruction('test')", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_Irit1_wrzw0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = "left"; // Replace abstract Expression with a concrete object
        Object right = "right"; // Replace abstract Expression with a concrete object
        Object result = treeCompiler.processingInstructionTest("mod(" + left + "," + right + ")");
        assertEquals(result.getClass(), ProcessingInstructionTest.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOr_SYmQ0_ZEmN1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("or");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_UbUM0_jaOf0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = new ProcessingInstructionTest("expression");
        Object result = treeCompiler.processingInstructionTest("minus");
        assertEquals(ProcessingInstructionTest.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_Zzsq0_ERgk0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String left = "1";
        String right = "2";
        Object result = treeCompiler.processingInstructionTest("processing " + left + " * " + right);
        assertEquals(ProcessingInstructionTest.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_BUuo0_xTOG0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String left = "1";
        String right = "2";
        Object result = treeCompiler.processingInstructionTest("greaterThan(" + left + "," + right + ")");
        assertEquals(ProcessingInstructionTest.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThanOrEqual2_krhE1_iagU0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        ProcessingInstructionTest result = (ProcessingInstructionTest) treeCompiler.processingInstructionTest(">= 2");
        assertEquals(ProcessingInstructionTest.class, result.getClass());
    }
}