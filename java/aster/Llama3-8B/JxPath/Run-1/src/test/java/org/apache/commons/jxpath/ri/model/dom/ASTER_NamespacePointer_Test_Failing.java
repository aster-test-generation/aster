/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private String prefix;
    @Mock
    private NamespacePointer namespacepointer;
    @Mock
    private Object value;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Object object;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NamespacePointer namespacePointer;
    private String namespaceURI;
    @Mock
    private Object mockRoot;
    @Mock
    private QName mockQName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Test equals with same object
        // Test equals with different object
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Test equals with null
        // Test equals with different prefix
        other = new NamespacePointer(null, "differentPrefix");
        assertEquals(namespacepointer, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        namespacepointer = new NamespacePointer(null, "prefix");
        // Arrange
        when(value.toString()).thenReturn("testValue");
        // Act
        namespacepointer.setValue(value);
        // Assert
        verify(value, times(1)).toString();
        verify(namespacepointer, times(1)).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_LziE0() {
        QName prefix = new QName("prefix", "localName");
        NamespacePointer namespacePointer = new NamespacePointer(new DOMNodePointer(null, null, null), prefix.getPrefix());
        QName result = namespacePointer.getName();
        assert result.getPrefix().equals("prefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_fid1() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Arrange
        when(parent.isCollection()).thenReturn(true);
        // Act
        boolean result = namespacepointer.isCollection();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_mCHC0_fid1() {
        MockitoAnnotations.initMocks(this);
        NodeTypeTest nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = namespacepointer.isLeaf();
        assertTrue(result);
    }
}