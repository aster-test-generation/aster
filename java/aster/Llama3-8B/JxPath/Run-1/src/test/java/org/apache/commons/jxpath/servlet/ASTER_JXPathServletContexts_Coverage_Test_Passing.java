/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_JXPathServletContexts_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_kxAc0() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        assertEquals(context, result);
        verify(servletContext).setAttribute(Constants.JXPATH_CONTEXT, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContextContextAlreadyExists_SzHz1() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = mock(JXPathContext.class);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(context);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        assertEquals(context, result);
        verify(servletContext, never()).setAttribute(Constants.JXPATH_CONTEXT, context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContextServletContextIsNull_pGwS6() throws Exception {
        ServletContext servletContext = null;
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContextServletContextIsNotNull_rufc7() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_wgTy8() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_Fadi0() {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext context = JXPathServletContexts.getSessionContext(session, servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ContextIsNotNull_SessionAttribute_Context_Variables_KeywordVariables_SessionScope_HttpSessionAndServletContext_HttpSessionAndServletContext_HttpSessionAndServletContext_ALtT10() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContextFactoryIsNull_wXXb2_nyvM0() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContextVariablesIsNotNull_eSvB5_ypkv0() throws Exception {
        ServletContext servletContext = mock(ServletContext.class);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(null, servletContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_mYSV3_iDoO0() throws Exception {
        ServletContext servletContext = new MockServletContext();
        MockHttpServletRequest request = new MockHttpServletRequest();
        JXPathContextFactory factory = JXPathContextFactory.newInstance();
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContextParentContext_XOfW5_JPgE0() throws Exception {
        ServletContext servletContext = new MockServletContext();
        HttpServletRequest request = new MockHttpServletRequest();
        JXPathContextFactory factory = JXPathContextFactory.newInstance();
        JXPathContext parentContext = factory.newContext(null, new ServletRequestAndContext(request, servletContext));
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(parentContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContextAlreadyInitialized_UnEy4_TTLS0() throws Exception {
        ServletContext servletContext = new MockServletContext();
        HttpServletRequest request = new MockHttpServletRequest();
        JXPathContextFactory factory = JXPathContextFactory.newInstance();
        JXPathContext context = factory.newContext(null, new ServletRequestAndContext(request, servletContext));
        request.setAttribute(Constants.JXPATH_CONTEXT, context);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(context, result);
    }
}