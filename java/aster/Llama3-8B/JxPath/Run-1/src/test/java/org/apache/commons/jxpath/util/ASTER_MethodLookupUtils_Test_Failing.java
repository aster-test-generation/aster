/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullParameter_Nads1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoConstructor_XBWD2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatchWithPrimitive_UoWZ4() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(int.class, new Object[]{1});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatchWithArray_mpAH5() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(int[].class, new Object[]{new int[]{1, 2}});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoMatch_QxeQ7() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"hello", "world", "java"});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoMatch_yvOr2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullParameter_cQwJ4() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, null);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorMultipleParameters_JUZN7() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"hello", "world"});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodWithNullTargetClass_pilY5() {
        try {
            MethodLookupUtils.lookupStaticMethod(null, "methodName", new Object[]{Integer.class});
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("targetClass", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodSingleParameter_RzMZ2() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[]{"test"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMultipleParameters_ITXs3() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[]{"test", 1, "test2"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodAmbiguousMatch_AVwD5() {
        try {
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodStaticMethod_yXrh7() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "forName", new Object[]{"test"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNonStaticMethod_uzdS8() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "toString", new Object[0]);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMultipleMatches_uAkE9() {
        try {
            MethodLookupUtils.lookupMethod(Class.class, "getMethods", new Object[]{});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodExactMatch_cwlq4_RhHb0() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getName", new Object[]{null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNonMatchingParameterTypes_ZTux9_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{1});
        assertNotNull(constructor);
    }
}