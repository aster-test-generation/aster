/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private CollectionPointer collectionPointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private ValueUtils valueUtils;
    private Object collection;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodeNameTest nodeNameTest;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer valuePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private NodePointer startWith;
    @Mock
    private Object baseValue;
    CollectionPointer collectionpointer;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private CollectionPointer getValuePointer;
    @Mock
    private Object value;
    @Mock
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_yejR0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        collectionPointer.setIndex(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_CjER0() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals(pointer);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_FsMC1() {
        CollectionPointer pointer1 = new CollectionPointer(new Object(), Locale.US);
        CollectionPointer pointer2 = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_PhOa2() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWrongClass_gjLv3() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals(new Object());
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerTrue_NTNv0() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        pointer.setIndex(1);
        boolean result = pointer.isContainer();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerFalse_lUpP1() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        pointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        boolean result = pointer.isContainer();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParentAndIndex_RRlS1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        collectionPointer.setIndex(1);
        assertEquals("/.[2]", collectionPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_pzxT3() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        assertEquals("/", collectionPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_rzPa0_fid2() {
        DOMNodePointer collectionPointer = new DOMNodePointer(null, null, null);
        when(nodePointer1.getIndex()).thenReturn(1);
        when(nodePointer2.getIndex()).thenReturn(2);
        int result = collectionPointer.compareChildNodePointers(nodePointer1, nodePointer2);
    }
}