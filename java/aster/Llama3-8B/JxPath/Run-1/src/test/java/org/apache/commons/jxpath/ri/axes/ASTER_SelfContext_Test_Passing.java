/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1_yVRY0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        selfContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition2_GAZm1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        selfContext.setPosition(2);
        assert !selfContext.setPosition(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition3_KxUa2() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        selfContext.setPosition(1);
        assert selfContext.getPosition() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position0_SetPositionFailed_ReturnsNull_FrbD0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        NodePointer result = selfContext.getCurrentNodePointer();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition5_tUyn4_utWh0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, null), null);
        selfContext.setPosition(1);
        assert selfContext != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_VzeU0_steR0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        selfContext.reset();
        assertEquals(false, selfContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_iity0() throws Exception {
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0));
        SelfContext selfcontext = new SelfContext(parentContext, new NodeTypeTest(0));
        NodePointer nodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(new NodeTypeTest(0))).thenReturn(true);
        boolean result = selfcontext.nextNode();
        assertEquals(true, result);
        verify(nodePointer, times(1)).testNode(new NodeTypeTest(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionNot0_ReturnsNodePointer_JPLR1_fid1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        selfContext.setPosition(1);
        NodePointer result = selfContext.getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_pcme0_fid1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), null), null);
        boolean result = selfContext.nextNode();
    }
}