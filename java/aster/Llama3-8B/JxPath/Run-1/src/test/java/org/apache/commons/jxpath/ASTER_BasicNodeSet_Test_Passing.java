/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNull_ReturnsUnmodifiableList_SKgu0_1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNull_ReturnsUnmodifiableList_SKgu0_2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assertTrue(Collections.unmodifiableList(result).equals(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNotNull_ReturnsSameList_qlpD1_1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getValues(); // call getValues to populate values
        List result = basicNodeSet.getValues();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNotNull_ReturnsSameList_qlpD1_2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getValues(); // call getValues to populate values
        List result = basicNodeSet.getValues();
        assertTrue(Collections.unmodifiableList(result).equals(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenPointersIsEmpty_ReturnsEmptyList_tlVO2_2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_JINq0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        String expected = "[]";
        assertEquals(expected, basicNodeSet.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenNodesIsNull_LUrr0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenNodesIsNotNull_QetZ1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getNodes(); // call getNodes to initialize nodes
        List result = basicNodeSet.getNodes();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenPointersIsEmpty_mAZx2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        assert result.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointersWhenPointersIsNotNull_YqgV1_xhkW0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<Pointer> result = basicNodeSet.getPointers();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePointer_VqOv0_qQEk1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        Pointer pointer = null; // Instantiate null instead of Pointer
        basicNodeSet.remove(pointer);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNull_ReturnsUnmodifiableList_SKgu0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assertNotNull(result);
        assertTrue(Collections.unmodifiableList(result).equals(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenValuesIsNotNull_ReturnsSameList_qlpD1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.getValues(); // call getValues to populate values
        List result = basicNodeSet.getValues();
        assertNotNull(result);
        assertTrue(Collections.unmodifiableList(result).equals(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_WhenPointersIsEmpty_ReturnsEmptyList_tlVO2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getValues();
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
}