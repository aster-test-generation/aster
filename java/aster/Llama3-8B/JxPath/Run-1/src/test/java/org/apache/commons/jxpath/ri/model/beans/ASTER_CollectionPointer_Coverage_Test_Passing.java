/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CollectionPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NbNw0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en", "US"));
        boolean result = collectionPointer.isCollection();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWholeCollection_ODqW0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        Object result = collectionPointer.getImmediateNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWholeCollection_SfTc0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeIterator result = collectionPointer.attributeIterator(new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_otHV1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en", "US"));
        int length = collectionPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicNode_YlGp1() {
        CollectionPointer pointer = new CollectionPointer(new Object(), null);
        boolean result = pointer.isLeaf();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexWholeCollectionNullTest_Vqwk6_fwjC0() {
        DOMNodePointer collectionPointer = new DOMNodePointer(null, Locale.US);
        collectionPointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        NodeTest test = null;
        boolean result = collectionPointer.testNode(test);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexNotWholeCollection_cIqg5_WqXo1() {
        DOMNodePointer collectionPointer = new DOMNodePointer(null, Locale.US, null);
        collectionPointer.setIndex(1);
        boolean result = collectionPointer.testNode(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_JbDY0_syWE0() {
        CollectionPointer pointer1 = new CollectionPointer(new Object(), Locale.US);
        CollectionPointer pointer2 = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer1.equals(pointer2);
        Assertions.assertFalse(result);
    }
}