/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationUnion_Test_Passing {
    @Mock
    private Expression[] expressions;
    @Mock
    private EvalContext evalContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Bclm0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        String symbol = coreOperationUnion.getSymbol();
        assert symbol.equals("|");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_qDkn0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        boolean result = coreOperationUnion.isSymmetric();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_Hgyj0_reyT0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        int result = coreOperationUnion.getPrecedence();
        assert result == 0;
    }
}