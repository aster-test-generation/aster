/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForConcreteClass_wwyg0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForAbstractClass_Pqch1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractCollection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInterface_pcgr2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableClass_Tuqb3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInstantiableClass_CnjM4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_LsHu5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_LsHu5_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableCollectionTypes_TMvb7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(HashSet.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInstantiableCollectionTypes_kDPt8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(ArrayList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForAbstractClass_IcyN2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = AbstractCollection.class;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForList_FSzi3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = List.class;
        Collection<?> result = converter.allocateCollection(type);
        assertEquals(ArrayList.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForCollection_Href4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = Collection.class;
        Collection<?> result = converter.allocateCollection(type);
        assertEquals(ArrayList.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSet_dmXg5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = Set.class;
        Collection<?> result = converter.allocateCollection(type);
        assertEquals(HashSet.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForUnknownType_rNAi6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = String.class;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForException_TAOu7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = Object.class;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForConstructorException_tMfx8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = Integer.class;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_xoyG0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        Assertions.assertEquals(10, result.byteValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_JrWz1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        Assertions.assertEquals(10, result.shortValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_nbUd2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        Assertions.assertEquals(10, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_eRCM3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        Assertions.assertEquals(10, result.longValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_pLgS4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        Assertions.assertEquals(10.0, result.floatValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_ARvH5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        Assertions.assertEquals(10.0, result.doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_cmZl6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        Assertions.assertEquals(BigInteger.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimitiveType_QNrV1_QQgb0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.convertStringToPrimitive("true", Boolean.class) == Boolean.TRUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberType_nQYU2_WEFk0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.convertStringToPrimitive("1", Integer.class) != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_jZMp5_WCuY0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPointer_ULlg7_wDxQ0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object pointer = new Object();
        assertTrue(converter.canConvert(pointer, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayToArray_EHhQ17_pkge0() {
        Object[] array = new Object[]{1, 2, 3};
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(String.valueOf(array), Object[].class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToNull_gMVy21_rRYY0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, Object.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToCollection_wFFY26_Zwyx0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, Collection.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToNodeSet_viBC27_qvno0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, NodeSet.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullToPointer_lOQJ28_OpMx0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertNull(converter.convertStringToPrimitive(null, Pointer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_PrrD8_lLAY0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer result = (Integer) converter.convertStringToPrimitive("10", Integer.class);
        Assertions.assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_CeEk9_vDsv0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Long result = (Long) converter.convertStringToPrimitive("10", Long.class);
        Assertions.assertEquals(10L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableList_UwEY0_YECz0() {
        List<String> list = new ArrayList<>();
        list.add("Test");
        Collection<String> unmodifiableList = Collections.unmodifiableCollection(list);
        assert !list.equals(unmodifiableList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSortedSet_vyIY1_UwjR0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("Test");
        Collection<String> unmodifiableSortedSet = Collections.unmodifiableCollection(sortedSet);
        assert !sortedSet.equals(unmodifiableSortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableSet_khCk2_zlmf0() {
        Set<String> set = new HashSet<>();
        set.add("Test");
        Collection<String> unmodifiableSet = Collections.unmodifiableCollection(set);
        assert !set.equals(unmodifiableSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollection_Trcj3_ENGw0() {
        Collection<String> collection = new ArrayList<>();
        collection.add("Test");
        Collection<String> unmodifiableCollection = Collections.unmodifiableCollection(collection);
        assert !collection.equals(unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableListFromList_iAdg4_yBjt1() {
        List<String> list = new ArrayList<>();
        list.add("Test");
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> unmodifiableList = Collections.unmodifiableCollection(list);
        assert unmodifiableList instanceof Collection;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_hVXK0_IXQy0() {
        BasicTypeConverter converter = new BasicTypeConverter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToArray_Mmet16_eChX0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToString_OIIw18_FCuc0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(Boolean.TRUE.toString(), Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNodeSetToArray_ZJBJ19_nKtf0() {
        List<String> nodeSet = new ArrayList<>();
        nodeSet.add("value1");
        nodeSet.add("value2");
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(nodeSet, String[].class);
        String[] expected = new String[]{"value1", "value2"};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollectionTypes_LsHu5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
        assertTrue(converter.canCreateCollection(Collection.class));
        assertTrue(converter.canCreateCollection(Set.class));
    }
}