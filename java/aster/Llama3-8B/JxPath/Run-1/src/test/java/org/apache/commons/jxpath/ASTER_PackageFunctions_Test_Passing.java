/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PackageFunctions_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNullNamespace_cJDQ0() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction(null, "name", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNullName_uieW1() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", null, new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNullParameters_MJsB2() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "name", null);
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidNamespace_BUuT3() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("invalidNamespace", "name", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidMethod_ykqH6() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidMethodName", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidConstructor_stMA7() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidNew", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidMethodWithParameter_HQFc10() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidMethodName", new Object[]{"parameter"});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidConstructorWithParameter_DZBZ11() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidNew", new Object[]{"parameter"});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidMethodWithMultipleParameters_BCvh14() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidMethodName", new Object[]{"parameter1", "parameter2"});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInvalidConstructorWithMultipleParameters_DWdV15() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "invalidNew", new Object[]{"parameter1", "parameter2"});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_tPIJ0() {
        String classPrefix = "testPrefix";
        String namespace = "testNamespace";
        PackageFunctions packageFunctions = new PackageFunctions(classPrefix, namespace);
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        Set<String> expected = Collections.singleton(namespace);
        assert expected.equals(usedNamespaces);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionValidMethodWithCollectionParameter_sMBI16_xddO1() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "methodName", new Object[]{Collections.emptyList()});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionValidConstructorWithCollectionParameter_HbBO17_MntD1() {
        PackageFunctions packageFunctions = new PackageFunctions("classPrefix", "namespace");
        Function function = packageFunctions.getFunction("namespace", "new", new Object[]{Collections.emptyList()});
        Assertions.assertNull(function);
    }
}