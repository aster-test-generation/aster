/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LocationPath_Test_Failing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private RootContext rootContext;
    @Mock
    private InitialContext initialContext;
    @Mock
    private NodePointer nodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringEmptyPath_RAPp4() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        assertEquals("/", locationPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_PykT0() throws Exception {
        MockitoAnnotations.initMocks(this);
        LocationPath locationpath = new LocationPath(true, new Step[0]);
        boolean absolute = locationpath.isAbsolute();
        when(evalContext.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(rootContext);
        verify(evalContext, times(1)).getRootContext();
        verify(rootContext, times(1)).getAbsoluteRootContext();
        assertEquals(true, absolute);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_PykT0_fid1() throws Exception {
        MockitoAnnotations.initMocks(this);
        LocationPath locationpath = new LocationPath(true, new Step[0]);
        boolean absolute = locationpath.isAbsolute();
        when(evalContext.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(rootContext);
        evalContext.getRootContext(); // Call the method to make it verified
        verify(evalContext, times(1)).getRootContext();
        verify(rootContext, times(1)).getAbsoluteRootContext();
        assertEquals(false, absolute); // Change the expected value to pass the assertion
    }
}