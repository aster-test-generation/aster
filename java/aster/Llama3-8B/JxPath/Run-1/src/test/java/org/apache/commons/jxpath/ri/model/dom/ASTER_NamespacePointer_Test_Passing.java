/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private String prefix;
    @Mock
    private NamespacePointer namespacepointer;
    @Mock
    private Object value;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Object object;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NamespacePointer namespacePointer;
    private String namespaceURI;
    @Mock
    private Object mockRoot;
    @Mock
    private QName mockQName;

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        nodePointer1 = mock(NodePointer.class);
        nodePointer2 = mock(NodePointer.class);
        // Arrange
        when(nodePointer1.compareChildNodePointers(any(NodePointer.class), any(NodePointer.class))).thenReturn(1);
        when(nodePointer2.compareChildNodePointers(any(NodePointer.class), any(NodePointer.class))).thenReturn(-1);
        // Act
        int result = namespacepointer.compareChildNodePointers(nodePointer1, nodePointer2);
        // Assert
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Test equals with same object
        // Test equals with different object
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Test equals with null
        // Test equals with different prefix
        other = new NamespacePointer(null, "differentPrefix");
        assertEquals(namespacepointer, namespacepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Test equals with same object
        // Test equals with different object
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Test equals with null
        // Test equals with different prefix
        other = new NamespacePointer(null, "differentPrefix");
        assertNotEquals(namespacepointer, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Test equals with same object
        // Test equals with different object
        NamespacePointer other = new NamespacePointer(null, prefix);
        // Test equals with null
        // Test equals with different prefix
        other = new NamespacePointer(null, "differentPrefix");
        assertNotEquals(namespacepointer, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNull_Idxr0() {
        boolean result = new NamespacePointer(null, "prefix").testNode(null);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Arrange
        when(parent.isCollection()).thenReturn(false);
        // Act
        boolean result = namespacepointer.isCollection();
        // Assert
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        // Act
        int result = namespacepointer.hashCode();
        // Assert
        assertEquals(prefix.hashCode(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        QName expected = new QName(prefix);
        QName actual = namespacepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceURI = "http://example.com";
        prefix = "prefix";
        when(parent.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        namespacepointer = new NamespacePointer(parent, prefix, namespaceURI);
        assertEquals(namespaceURI, namespacepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNamespaceURI_ouIt0() {
        QName qName = new QName("prefix", "localName");
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        NamespacePointer namespacePointer = new NamespacePointer(parent, qName.getPrefix());
        String result = namespacePointer.getNamespaceURI();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NotNullNamespaceURI_apBA1() {
        QName qName = new QName("prefix", "localName");
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        String namespaceURI = "namespaceURI";
        NamespacePointer namespacePointer = new NamespacePointer(parent, qName.getPrefix(), namespaceURI);
        String result = namespacePointer.getNamespaceURI();
        assertEquals(namespaceURI, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(parent, prefix);
        // Arrange
        when(parent.asPath()).thenReturn("path");
        // Act
        String result = namespacepointer.asPath();
        // Assert
        assertEquals("path/namespace::testPrefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_MQXo0() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Arrange
        when(parent.getLength()).thenReturn(1);
        // Act
        int length = namespacepointer.getLength();
        // Assert
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        namespacepointer = new NamespacePointer(parent, "prefix");
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = namespacepointer.isLeaf();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_mCHC0() {
        MockitoAnnotations.initMocks(this);
        NodeTypeTest nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = namespacepointer.isLeaf();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullNodeTest_guaX3_zVOO0() {
        boolean result = new NamespacePointer(new DOMNodePointer(null, Locale.US, "id"), "prefix").isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_pUim0() throws Exception {
        namespacepointer = new NamespacePointer(domNodePointer, "prefix");
        String namespaceURI = "namespaceURI";
        when(namespacepointer.getNamespaceURI()).thenReturn(namespaceURI);
        Object immediateNode = namespacepointer.getImmediateNode();
        assertEquals(namespaceURI, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        prefix = "testPrefix";
        namespacepointer = new NamespacePointer(null, prefix);
        // Test equals with same object
        assertEquals(namespacepointer, namespacepointer);
        // Test equals with different object
        NamespacePointer other = new NamespacePointer(null, prefix);
        assertEquals(namespacepointer, other);
        // Test equals with null
        assertNotEquals(namespacepointer, null);
        // Test equals with different prefix
        other = new NamespacePointer(null, "differentPrefix");
        assertNotEquals(namespacepointer, other);
    }
}