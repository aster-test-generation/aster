/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Failing {
    private static JXPathContextFactory factory;
    @Mock
    private ServletContext servletContext;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private HttpSession httpSession;
    private PageContext pageContext;
    private JXPathServletContexts jxpathservletcontexts;
    @Mock
    private JXPathContext context;
    @Mock
    private ServletRequest request;
    @Mock
    private HttpSession session;
    @Mock
    private HttpServletRequest httpServletRequest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetApplicationContext() throws Exception {
        factory = mock(JXPathContextFactory.class);
        when(factory.newContext(null, servletContext)).thenReturn(jxpathContext);
        jxpathservletcontexts = new JXPathServletContexts();
        // Given
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        // When
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        // Then
        verify(servletContext).setAttribute(Constants.JXPATH_CONTEXT, jxpathContext);
        assertEquals(jxpathContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSessionContext() throws Exception {
        factory = mock(JXPathContextFactory.class);
        when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(jxpathContext);
        jxpathservletcontexts = new JXPathServletContexts();
        // Arrange
        when(httpSession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        // Act
        JXPathContext result = JXPathServletContexts.getSessionContext(httpSession, servletContext);
        // Assert
        verify(factory).newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class));
        assertEquals(jxpathContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequestContext() throws Exception {
        jxpathservletcontexts = new JXPathServletContexts();
        when(factory.newContext(any(JXPathContext.class), any(ServletRequestAndContext.class))).thenReturn(context);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(session != null).thenReturn(true);
        when(httpServletRequest.getSession(false)).thenReturn(session);
        when(context.getContextBean()).thenReturn(new ServletRequestAndContext(request, servletContext));
        when(context.getContextBean()).thenReturn(new ServletRequestAndContext(request, servletContext));
        when(factory.newContext(any(JXPathContext.class), any(ServletRequestAndContext.class))).thenReturn(context);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(context, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_xlvB0_rGQX0() {
        ServletContext servletContext = new MockServletContext();
        JXPathContext context = JXPathServletContexts.getRequestContext(new MockHttpServletRequest(), servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContextNullServletContext_rafI2_GmbH0() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        JXPathContext context = JXPathServletContexts.getRequestContext(request, null);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContextParentContext_JKwo3_oHxP0() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        ServletContext servletContext = Mockito.mock(ServletContext.class);
        JXPathContext parentContext = Mockito.mock(JXPathContext.class);
        JXPathContext context = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(parentContext, context.getParentContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContextNullServletContext_rafI2_GmbH0_fid2() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        JXPathContext context = JXPathServletContexts.getRequestContext(request, null);
        assertNull(context);
    }
}