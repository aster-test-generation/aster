/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private Object superObject;
    private boolean setStarted = false;
    @Mock
    private DescendantContext descendantcontext;
    @Mock
    private NodePointer nodePointer;
    private DescendantContext descendantContext;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private NodePointer currentNodePointer = null;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_EmptyStack_ogPc0() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, null), null), false, new NodeTypeTest(0));
        boolean result = context.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisChildOrderingRequired() {
        descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        // Act
        boolean result = descendantContext.isChildOrderingRequired();
        // Assert
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired_ajuc0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, nodeTest), nodeTest);
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(null, nodeTest), true, nodeTest);
        boolean result = descendantContext.isChildOrderingRequired();
        assert result == true;
    }
}