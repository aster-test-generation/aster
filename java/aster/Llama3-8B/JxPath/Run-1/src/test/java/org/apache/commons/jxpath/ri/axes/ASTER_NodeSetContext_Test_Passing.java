/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NodeSetContext_Test_Passing {
    @Mock
    private BasicNodeSet nodeSet;
    @Mock
    private NodeSet nodeSetMock;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodePointer nodePointerMock;
    @Mock
    private NodePointer nodePointerMock2;
    @InjectMocks
    private NodeSetContext nodesetcontext;
    @Mock
    private BasicNodeSet basicNodeSet;
    private NodeSetContext nodeSetContext;
    private boolean startedSet = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionInvalidPositionLessThanOne_TcBw1() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        nodeSetContext.setPosition(0);
        assert !nodeSetContext.setPosition(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionInvalidPositionGreaterThanSize_xcAi2() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        nodeSetContext.setPosition(10);
        assert !nodeSetContext.setPosition(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZero_ReturnsNull_qnUR0() {
        NodeSetContext nodeSetContext = new NodeSetContext(new NamespaceContext(new SelfContext(null, null), null), new BasicNodeSet());
        NodePointer result = nodeSetContext.getCurrentNodePointer();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_XFiV0() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        boolean result = nodeSetContext.nextNode();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeSet_sgcE0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        BasicNodeSet nodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(parentContext, nodeSet);
        NodeSet result = nodeSetContext.getNodeSet();
        assertEquals(nodeSet, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetTrue_NDue0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        BasicNodeSet nodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(parentContext, nodeSet);
        boolean result = nodeSetContext.nextSet();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetFalse_ZzID1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        BasicNodeSet nodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(parentContext, nodeSet);
        nodeSetContext.nextSet();
        boolean result = nodeSetContext.nextSet();
        Assertions.assertFalse(result);
    }
}