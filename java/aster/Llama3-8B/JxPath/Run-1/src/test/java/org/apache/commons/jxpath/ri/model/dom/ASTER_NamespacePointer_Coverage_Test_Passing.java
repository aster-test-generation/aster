/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NamespacePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullNode_NHYW0() {
        NodeTest nodeTest = null;
        boolean result = new NamespacePointer(null, "prefix").testNode(nodeTest);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_BufferLengthIsZero_Veqr0() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        String result = namespacePointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_BufferLengthIsNotZeroAndLastCharIsNotSlash_zLwN1() {
        NamespacePointer namespacePointer = new NamespacePointer(new NamespacePointer(null, "parentPrefix"), "prefix");
        String result = namespacePointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValueReturnsNull_UaWT0() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        Object result = namespacePointer.getBaseValue();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_skQb0_LwgL0() {
        DOMNodePointer nodePointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer nodePointer2 = new DOMNodePointer(null, null, null);
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(0, result);
    }
}