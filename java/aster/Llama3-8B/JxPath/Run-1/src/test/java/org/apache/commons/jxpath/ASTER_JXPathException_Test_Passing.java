/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathException_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCauseWithNestedException_ohRd1_1() {
        JXPathException exception = new JXPathException("test message", new Exception("nested exception"));
        Throwable cause = exception.getCause();
        assertNotNull(cause);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCauseWithNestedException_ohRd1_2() {
        JXPathException exception = new JXPathException("test message", new Exception("nested exception"));
        Throwable cause = exception.getCause();
        assertEquals("nested exception", cause.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCauseWithNoCause_HMvQ2() {
        JXPathException exception = new JXPathException();
        Throwable cause = exception.getCause();
        assertNull(cause);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCauseWithWrappedException_Wntk3_1() {
        JXPathException exception = new JXPathException(new Exception("wrapped exception"));
        Throwable cause = exception.getCause();
        assertNotNull(cause);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCauseWithWrappedException_Wntk3_2() {
        JXPathException exception = new JXPathException(new Exception("wrapped exception"));
        Throwable cause = exception.getCause();
        assertEquals("wrapped exception", cause.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExceptionWithMessageAndCause_aETo2_1() {
        JXPathException exception = new JXPathException("test cause", new Exception("test cause"));
        Throwable result = exception.getException();
        assertEquals("test cause", result.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNullException_YMAh0() {
        JXPathException exception = new JXPathException("Test message");
        assertEquals("Test message", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNonNullException_YfeM1() {
        JXPathException exception = new JXPathException("Test message", new Exception("Inner exception"));
        assertEquals("Test message; Inner exception", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNullMessageAndNonNullException_kNra2() {
        JXPathException exception = new JXPathException(new Exception("Inner exception"));
        assertEquals("java.lang.Exception: Inner exception; Inner exception", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMessageWithNullMessageAndNullException_IkEC3() {
        JXPathException exception = new JXPathException();
        assertEquals(null, exception.getMessage());
    }
}