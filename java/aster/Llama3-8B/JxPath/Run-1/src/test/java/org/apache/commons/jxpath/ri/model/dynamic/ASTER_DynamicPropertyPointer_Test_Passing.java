/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Passing {
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private QName qName;
    @Mock
    private Object root;
    private DynamicPropertyPointer dynamicPropertyPointer;
    @Mock
    private Locale locale;
    private String[] names;
    private String name;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private AbstractFactory abstractFactory;
    private String requiredPropertyName;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private Object bean;
    @Mock
    private String propertyName;
    @Mock
    private DOMNodePointer immediateParentPointer;
    private DynamicPropertyPointer dynamicpropertypointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWholeCollection_gthv0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        NodePointer result = dynamicPropertyPointer.createPath(context, value);
        assertEquals(dynamicPropertyPointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathIndex_nTng1() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
        JXPathContext context = JXPathContext.newContext(new Object());
        Object value = new Object();
        int index = 0;
        NodePointer result = dynamicPropertyPointer.createPath(context, value);
        assertEquals(dynamicPropertyPointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        MockitoAnnotations.initMocks(this);
        dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        // Act
        boolean result = dynamicpropertypointer.isContainer();
        // Assert
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        MockitoAnnotations.initMocks(this);
        dynamicpropertypointer = new DynamicPropertyPointer(immediateParentPointer, handler);
        String expectedPath = "/.[@name='test']";
        when(immediateParentPointer.asPath()).thenReturn("/.");
        assertEquals(expectedPath, dynamicpropertypointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EmptyParentPointer_qSIR0() {
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(null, new PageContextHandler());
        String result = pointer.asPath();
        Assertions.assertEquals("/.[@name='']]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        // Arrange
        when(handler.getProperty(any(), any())).thenReturn("expectedValue");
        // Act
        Object baseValue = dynamicpropertypointer.getBaseValue();
        // Assert
        assertEquals("expectedValue", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex() throws Exception {
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        int newIndex = 10;
        dynamicpropertypointer.setPropertyIndex(newIndex);
        Mockito.verify(dynamicpropertypointer).setPropertyIndex(newIndex);
        Assertions.assertEquals(newIndex, dynamicpropertypointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty() {
        dynamicpropertypointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = dynamicpropertypointer.isActualProperty();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_DfcY0() throws Exception {
        dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, null, null), pageContextHandler);
        when(handler.getProperty(bean, propertyName)).thenReturn("value");
        when(valueUtils.getValue("value")).thenReturn("expectedValue");
        int actual = dynamicPropertyPointer.getPropertyCount();
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndex_PJKc0() throws Exception {
        MockitoAnnotations.initMocks(this);
        String[] names = new String[]{"name1", "name2", "name3"};
        String name = "name2";
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        when(dynamicPropertyPointer.getPropertyNames()).thenReturn(names);
        int result = dynamicPropertyPointer.getPropertyCount();
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_SIkb0() throws Exception {
        String[] names = new String[]{"name1", "name2", "name3"};
        String requiredPropertyName = "requiredName";
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
        when(handler.getPropertyNames(any())).thenReturn(names);
        String[] result = dynamicPropertyPointer.getPropertyNames();
        assertEquals(names, result);
        verify(handler, times(1)).getPropertyNames(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullCollection_jwsF0_SDhu0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(new DOMNodePointer(null, Locale.US, "id"), new PageContextHandler());
        JXPathContext context = JXPathContext.newContext(new Object());
        NodePointer result = dynamicPropertyPointer.createPath(context);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_gAfs0_1() throws Exception {
        String[] names = new String[]{"prop1", "prop2"};
        String name = "prop3";
        String requiredPropertyName = "prop3";
        DynamicPropertyPointer dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        dynamicpropertypointer.setPropertyName(name);
        assertEquals(requiredPropertyName, dynamicpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_gAfs0_2() throws Exception {
        String[] names = new String[]{"prop1", "prop2"};
        String name = "prop3";
        String requiredPropertyName = "prop3";
        DynamicPropertyPointer dynamicpropertypointer = new DynamicPropertyPointer(parent, pageContextHandler);
        dynamicpropertypointer.setPropertyName(name);
        assertArrayEquals(names, dynamicpropertypointer.getPropertyNames());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_COLLECTION_wUrQ0() {
        dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        dynamicPropertyPointer.setIndex(1);
        dynamicPropertyPointer.remove();
        verify(handler).setProperty(any(), any(), any());
    }
}