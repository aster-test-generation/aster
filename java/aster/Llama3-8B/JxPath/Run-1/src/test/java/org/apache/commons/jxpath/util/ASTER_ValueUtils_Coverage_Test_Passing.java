/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    private Object value;

    private Method getAccessibleMethod(Method method) {
        try {
            return method;
        } catch (Exception e) {
            return null;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_LlIa0() {
        Object[] array = new Object[]{"a", "b", "c"};
        assertEquals("b", ValueUtils.getValue(array, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_OutOfBounds_FQMr1() {
        Object[] array = new Object[]{"a", "b", "c"};
        assertNull(ValueUtils.getValue(array, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_rEML2() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        assertEquals("b", ValueUtils.getValue(list, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_OutOfBounds_FKZA3() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        assertNull(ValueUtils.getValue(list, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_ZRlx6() {
        assertNull(ValueUtils.getValue(null, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyArray_yJti7() {
        Object[] array = new Object[0];
        assertNull(ValueUtils.getValue(array, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyList_JNLN8() {
        List<String> list = new ArrayList<>();
        assertNull(ValueUtils.getValue(list, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_Array_zOIo10() {
        Object[] array = new Object[]{"a", "b", "c"};
        assertNull(ValueUtils.getValue(array, -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_List_TDrP11() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        assertNull(ValueUtils.getValue(list, -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonContainer_ZBGQ1() {
        String nonContainer = "Test Value";
        Object result = ValueUtils.getValue(nonContainer);
        assertEquals("Test Value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFinalClass_QMZg1() {
        assertEquals(0, ValueUtils.getCollectionHint(ValueUtils.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInterfaceAndFinal_ZWSY2() {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotInterfaceNorFinal_hffI3() {
        assertEquals(1, ValueUtils.getCollectionHint(ArrayList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InstanceOfPropertyDescriptor_ThrowsJXPathException_Recursive_JNlI9() {
        Object bean = new Object();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_BpcL1() {
        List<String> list = new ArrayList<>();
        list.add("test1");
        list.add("test2");
        ValueUtils.setValue(list, 1, "test");
        assertEquals("test", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_eJPk3_1() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 2);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_eJPk3_2() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 2);
        assertEquals(1, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_eJPk3_3() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 2);
        assertEquals(2, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4_1() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4_2() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(2, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4_3() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(3, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4_4() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(4, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4_5() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5_1() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5_2() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(1, list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5_3() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(2, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5_4() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(3, list.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5_5() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(4, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_GZXn6_1() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 2);
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_GZXn6_2() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 2);
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(1, collection.iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndex0_KIOS7_1() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 0);
        collection.iterator().next();
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexLast_rUYw8_1() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 4);
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexLast_rUYw8_2() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 4);
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(1, collection.iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexOutOfRange_lLzj10() {
        Object collection = new Object[]{1, 2, 3, 4, 5};
        try {
            ValueUtils.remove(collection, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArrayIndexOutOfRange_tKND11() {
        Object array = new Object[]{1, 2, 3, 4, 5};
        try {
            ValueUtils.remove(array, 5);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodNullMethod_xWrE0() {
        Method method = null;
        Method result = ValueUtils.getAccessibleMethod(method);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_bqaX0_fflv0() {
        Object array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.expandCollection(array, 5);
        assertArrayEquals(new Object[]{1, 2, 3, 4, 5}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndex0_Rpqq4() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 0);
        assertEquals(4, list.size());
        assertEquals(2, list.get(0));
        assertEquals(3, list.get(1));
        assertEquals(4, list.get(2));
        assertEquals(5, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexLast_NtSA5() {
        List list = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(list, 4);
        assertEquals(4, list.size());
        assertEquals(1, list.get(0));
        assertEquals(2, list.get(1));
        assertEquals(3, list.get(2));
        assertEquals(4, list.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_GZXn6() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 2);
        assertEquals(4, collection.size());
        assertEquals(1, collection.iterator().next());
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndex0_KIOS7() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 0);
        assertEquals(4, collection.size());
        collection.iterator().next();
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexLast_rUYw8() {
        Collection collection = new ArrayList(Arrays.asList(1, 2, 3, 4, 5));
        ValueUtils.remove(collection, 4);
        assertEquals(4, collection.size());
        assertEquals(1, collection.iterator().next());
        collection.iterator().next();
        collection.iterator().next();
        assertEquals(4, collection.size());
    }
}