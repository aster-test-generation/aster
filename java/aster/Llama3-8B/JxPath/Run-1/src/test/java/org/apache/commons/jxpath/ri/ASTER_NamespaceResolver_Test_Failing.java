/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Failing {
    @Mock
    private NamespaceResolver parent;
    private boolean sealed;
    @Mock
    private NodePointer nodePointer;
    private NamespaceResolver namespaceResolver;
    @Mock
    private NodeIterator nodeIterator;
    private NamespaceResolver namespaceresolver;
    @Mock
    private Map<String, String> namespaceMap;
    @Mock
    private Map<String, String> reverseMap;
    @Mock
    private NamespaceResolver pointer;
    @Mock
    private Object mockSuper;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal() throws Exception {
        sealed = false;
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        Assertions.assertTrue(sealed);
        verify(parent).seal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodePointer.namespaceIterator()).thenReturn(nodeIterator);
        QName qName = new QName("prefix", "localName");
        NodePointer childNodePointer = Mockito.mock(NodePointer.class);
        when(childNodePointer.getName()).thenReturn(qName);
        when(childNodePointer.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeIterator.getNodePointer()).thenReturn(childNodePointer);
        String prefix = NamespaceResolver.getPrefix(nodePointer, "namespaceURI");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceSealed_ssYT1() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver());
        try {
            resolver.registerNamespace("prefix", "namespaceURI");
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
            assertEquals("Cannot register namespaces on a sealed NamespaceResolver", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNotNull_iDPN0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String namespaceURI = "http://example.com";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNotNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        MockitoAnnotations.initMocks(this);
        when(pointer.getNamespaceURI(anyString())).thenReturn("mock-namespace-uri");
        String prefix = "prefix";
        String expectedUri = "mock-namespace-uri";
        String actualUri = namespaceresolver.getNamespaceURI(prefix);
        assertEquals(expectedUri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NullPointerAndNotNullParent_HWNm0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assert pointer != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NotNullPointerAndNotNullParent_piks2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assert pointer != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_notFoundInMap_foundInParent_IvkU0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getExternallyRegisteredNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_foundInMap_eTaW0_fid2() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceMap.get(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getExternallyRegisteredNamespaceURI(prefix));
    }
}