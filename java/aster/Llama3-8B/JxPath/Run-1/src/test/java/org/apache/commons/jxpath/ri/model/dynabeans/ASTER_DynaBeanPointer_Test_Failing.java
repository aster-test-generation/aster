/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Failing {
    @Mock
    private QName name;
    @Mock
    private DynaBean dynaBean;
    @Mock
    private DynaBeanPointer parent;
    private DynaBeanPointer dynabeanpointer;
    @Mock
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with null object
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // Arrange
        when(name.hashCode()).thenReturn(1);
        // Act
        int result = dynabeanpointer.hashCode();
        // Assert
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = dynabeanpointer.getName();
        // Assert
        Mockito.verify(name).getName();
        assertEquals(expectedName, actualName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        dynabeanpointer = new DynaBeanPointer(null, dynaBean, null);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = dynabeanpointer.isLeaf();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        // Test equals with same object
        assertEquals(dynabeanpointer, dynabeanpointer);
        // Test equals with different object
        DynaBeanPointer other = new DynaBeanPointer(parent, name, dynaBean);
        assertNotEquals(dynabeanpointer, other);
        // Test equals with null object
        assertNotEquals(dynabeanpointer, null);
        // Test equals with different parent
        DynaBeanPointer otherWithDifferentParent = new DynaBeanPointer(Mockito.mock(DynaBeanPointer.class), name, dynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentParent);
        // Test equals with different name
        QName differentName = Mockito.mock(QName.class);
        DynaBeanPointer otherWithDifferentName = new DynaBeanPointer(parent, differentName, dynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentName);
        // Test equals with different dynaBean
        DynaBean differentDynaBean = Mockito.mock(DynaBean.class);
        DynaBeanPointer otherWithDifferentDynaBean = new DynaBeanPointer(parent, name, differentDynaBean);
        assertNotEquals(dynabeanpointer, otherWithDifferentDynaBean);
    }
}