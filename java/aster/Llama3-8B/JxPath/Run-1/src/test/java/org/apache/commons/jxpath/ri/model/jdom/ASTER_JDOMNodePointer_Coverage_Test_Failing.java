/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMNodePointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyNode_SAew4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.US);
        QName result = pointer.getName();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_ElementWithoutContent_aZvh1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.US);
        assertFalse(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_DocumentWithoutContent_Faqz3() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Document(), Locale.US);
        assertTrue(pointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithValidParent_puiO0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithRootElement_ZEIJ2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"), "root");
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithParent_uPPa3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"), "parent");
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNode_Gqgk4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"), "node");
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_xJwq0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Object result = jdn.getBaseValue();
        assertEquals(new Object(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_TsNw4() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new Element("element"));
        assertEquals("parent/element", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_gdSL12() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new Text("text"));
        assertEquals("parent/text()[1]", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_CDATA_AeOr13() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new CDATA("cdata"));
        assertEquals("parent/text()[1]", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ProcessingInstruction_dnab14() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new ProcessingInstruction("target", "content"));
        assertEquals("parent/processing-instruction('target')", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePositionByQName_EsfB15() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new Element("element"));
        assertEquals("parent/element[1]", jdn.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_WHOLE_COLLECTION_rNfK0_qUNE0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        NodePointer result = jdn.createChild(context, name, NodePointer.WHOLE_COLLECTION);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_indexZero_tGSf1_MDdI0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        NodePointer result = jdn.createChild(context, name, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_indexOne_mvZJ2_QJnz0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        NodePointer result = jdn.createChild(context, name, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_indexNegative_Gsel3_vTFy0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        try {
            jdn.createChild(context, name, -1);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_success_dJCG4_WOHh0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        jdn.createChild(context, name, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_failure_utoH5_WsSJ0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", "test");
        try {
            jdn.createChild(context, name, 0);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_prefixNull_kmyH9_yHRv0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName(null, "test");
        NodePointer result = jdn.createChild(context, name, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_namespaceURINull_cKEy10_cHAx0() {
        DOMNodePointer jdn = new DOMNodePointer(null, Locale.US);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("test", null);
        NodePointer result = jdn.createChild(context, name, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNode_fVmH3_mttL0() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.US);
        QName result = pointer.getName();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_AttributeWithPrefix_Hfuo2_dXKn0() {
        QName qName = new QName("prefix", "localName");
        String prefix = JDOMNodePointer.getPrefix(qName);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNotMatch_CFFx2_VslZ0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        jdn.setNamespaceResolver(jdn.getNamespaceResolver());
        boolean result = jdn.isLanguage("en");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeNonElementNode_InSf1_YROe1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        QName qname = new QName("name");
        NodePointer result = jdn.createAttribute(null, qname);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributePrefixNotNull_racx4_XrQy0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("element"), Locale.US);
        QName qname = new QName("prefix", "name");
        NodePointer result = jdn.createAttribute(JXPathContext.newContext(null), qname);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Attribute_Dqyj1_aPev0() {
        QName qName = new QName("namespace", "localName");
        String localName = JDOMNodePointer.getLocalName(qName);
        assertEquals("localName", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_aoNE0_YMtp0() {
        DOMNodePointer jdn = new DOMNodePointer(null, null, null);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        NodePointer result = jdn.createChild(context, name, index, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithValue_EHFE1_hwuw0() {
        DOMNodePointer jdn = new DOMNodePointer(null, null, null);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        NodePointer result = jdn.createChild(context, name, index, value);
        assertEquals(value, result.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithIndex_JVSY2_lcwx0() {
        DOMNodePointer jdn = new DOMNodePointer(null, null, null);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("testName");
        int index = 1;
        Object value = "testValue";
        NodePointer result = jdn.createChild(context, name, index, value);
        assertEquals(index, result.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ParentNotNull_oufB2_EXmk0() {
        JDOMNodePointer parent = new JDOMNodePointer(null, Locale.US, "parent");
        DOMNodePointer jdn = new DOMNodePointer(parent, null);
        assertEquals("parent", jdn.asPath());
    }
}