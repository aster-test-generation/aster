/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NodeSetContext_Test_Failing {
    @Mock
    private BasicNodeSet nodeSet;
    @Mock
    private NodeSet nodeSetMock;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodePointer nodePointerMock;
    @Mock
    private NodePointer nodePointerMock2;
    @InjectMocks
    private NodeSetContext nodesetcontext;
    @Mock
    private BasicNodeSet basicNodeSet;
    private NodeSetContext nodeSetContext;
    private boolean startedSet = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        nodeSetMock = Mockito.mock(NodeSet.class);
        when(nodeSetMock.getPointers()).thenReturn(new ArrayList<>());
        nodesetcontext = new NodeSetContext(namespaceContext, nodeSetMock);
        // Arrange
        int position = 1;
        // Act
        boolean result = nodesetcontext.setPosition(position);
        // Assert
        Mockito.verify(nodesetcontext).setPosition(position);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        nodeSetMock = Mockito.mock(NodeSet.class);
        when(nodeSetMock.getPointers()).thenReturn(new ArrayList<>());
        nodesetcontext = new NodeSetContext(namespaceContext, nodeSetMock);
        // Arrange
        int position = 1;
        // Act
        boolean result = nodesetcontext.setPosition(position);
        // Assert
        Mockito.verify(nodesetcontext).setPosition(position);
        assertEquals(position, nodesetcontext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionValidPosition_LIrc0() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        nodeSetContext.setPosition(5);
        assert nodeSetContext.setPosition(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_1() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeSet.getPointers()).thenReturn(new ArrayList<>());
        when(nodeSet.getPointers().get(0)).thenReturn(nodePointer);
        when(nodeSet.getPointers().get(1)).thenReturn(nodePointerMock);
        when(nodeSet.getPointers().get(2)).thenReturn(nodePointerMock2);
        when(nodeSet.getPointers().size()).thenReturn(0);
        when(nodeSet.getPointers().size()).thenReturn(1);
        when(nodeSet.getPointers().size()).thenReturn(3);
        assertEquals(nodePointer, nodesetcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_2() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeSet.getPointers()).thenReturn(new ArrayList<>());
        when(nodeSet.getPointers().get(0)).thenReturn(nodePointer);
        when(nodeSet.getPointers().get(1)).thenReturn(nodePointerMock);
        when(nodeSet.getPointers().get(2)).thenReturn(nodePointerMock2);
        when(nodeSet.getPointers().size()).thenReturn(0);
        when(nodeSet.getPointers().size()).thenReturn(1);
        when(nodeSet.getPointers().size()).thenReturn(3);
        assertNull(nodesetcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_3() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeSet.getPointers()).thenReturn(new ArrayList<>());
        when(nodeSet.getPointers().get(0)).thenReturn(nodePointer);
        when(nodeSet.getPointers().get(1)).thenReturn(nodePointerMock);
        when(nodeSet.getPointers().get(2)).thenReturn(nodePointerMock2);
        when(nodeSet.getPointers().size()).thenReturn(0);
        when(nodeSet.getPointers().size()).thenReturn(1);
        when(nodeSet.getPointers().size()).thenReturn(3);
        assertEquals(nodePointerMock, nodesetcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_4() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeSet.getPointers()).thenReturn(new ArrayList<>());
        when(nodeSet.getPointers().get(0)).thenReturn(nodePointer);
        when(nodeSet.getPointers().get(1)).thenReturn(nodePointerMock);
        when(nodeSet.getPointers().get(2)).thenReturn(nodePointerMock2);
        when(nodeSet.getPointers().size()).thenReturn(0);
        when(nodeSet.getPointers().size()).thenReturn(1);
        when(nodeSet.getPointers().size()).thenReturn(3);
        assertEquals(nodePointerMock2, nodesetcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        MockitoAnnotations.initMocks(this);
        nodeSetMock = Mockito.mock(NodeSet.class);
        when(nodeSetMock.getPointers()).thenReturn(new ArrayList<>());
        nodesetcontext = new NodeSetContext(namespaceContext, nodeSetMock);
        // Arrange
        int position = 1;
        // Act
        boolean result = nodesetcontext.setPosition(position);
        // Assert
        Mockito.verify(nodesetcontext).setPosition(position);
        assertEquals(true, result);
        assertEquals(position, nodesetcontext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(nodeSet.getPointers()).thenReturn(new ArrayList<>());
        when(nodeSet.getPointers().get(0)).thenReturn(nodePointer);
        when(nodeSet.getPointers().get(1)).thenReturn(nodePointerMock);
        when(nodeSet.getPointers().get(2)).thenReturn(nodePointerMock2);
        assertEquals(nodePointer, nodesetcontext.getCurrentNodePointer());
        when(nodeSet.getPointers().size()).thenReturn(0);
        assertNull(nodesetcontext.getCurrentNodePointer());
        when(nodeSet.getPointers().size()).thenReturn(1);
        assertEquals(nodePointerMock, nodesetcontext.getCurrentNodePointer());
        when(nodeSet.getPointers().size()).thenReturn(3);
        assertEquals(nodePointerMock2, nodesetcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_XFiV0_fid2() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        boolean result = nodeSetContext.nextNode();
        assertEquals(true, result);
    }
}