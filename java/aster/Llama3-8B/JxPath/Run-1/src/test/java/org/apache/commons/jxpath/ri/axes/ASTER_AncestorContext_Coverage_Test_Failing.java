/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AncestorContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionLessThanGetCurrentPosition_iAok0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertEquals(5, ancestorContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionGreaterThanGetCurrentPosition_WDbq1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(10);
        assertEquals(10, ancestorContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_Obnr3() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        ancestorContext.reset();
        assertEquals(0, ancestorContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_whQG4_1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertTrue(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_whQG4_2() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertEquals(6, ancestorContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeFalse_jmgS5_1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_JxMw0_xvgA0() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(1));
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(1));
        ancestorContext.nextNode();
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedTrue_MmNY1_aAsi0() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(1));
        context.nextNode();
        boolean result = context.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelfFalse_UKwj3_ybBQ0() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), false, new NodeTypeTest(1));
        context.nextNode();
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_CurrentNodePointerNotTested_mZGO5_vVMu0() {
        AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(1));
        context.nextNode();
        boolean result = context.nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_whQG4() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertTrue(ancestorContext.nextNode());
        assertEquals(6, ancestorContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeFalse_jmgS5() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, null);
        ancestorContext.setPosition(5);
        assertFalse(ancestorContext.nextNode());
        assertEquals(5, ancestorContext.getCurrentPosition());
    }
}