/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Failing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName name;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private Locale locale;
    @Mock
    private BeanPointer beanpointer;
    private Object bean;
    private BeanPointer beanPointer;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject() throws Exception {
        bean = new Object();
        name = Mockito.mock(QName.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        // Act
        boolean result = beanpointer.equals(beanpointer);
        // Assert
        Mockito.verifyNoMoreInteractions();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull() throws Exception {
        bean = new Object();
        name = Mockito.mock(QName.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        // Act
        boolean result = beanpointer.equals(null);
        // Assert
        Mockito.verifyNoMoreInteractions();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass() throws Exception {
        bean = new Object();
        name = Mockito.mock(QName.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        // Act
        boolean result = beanpointer.equals(new Object());
        // Assert
        Mockito.verifyNoMoreInteractions();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanAndName() throws Exception {
        bean = new Object();
        name = Mockito.mock(QName.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        // Act
        boolean result = beanpointer.equals(new BeanPointer(parent, name, bean, beanInfo));
        // Assert
        Mockito.verifyNoMoreInteractions();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanPointerDifferentParent_gWSY8() {
        DOMNodePointer parent1 = new DOMNodePointer(null, null, null);
        DOMNodePointer parent2 = new DOMNodePointer(null, null, null);
        QName name = new QName("name", "localName");
        BeanPointer beanPointer1 = new BeanPointer(parent1, name, null, null);
        BeanPointer beanPointer2 = new BeanPointer(parent2, name, null, null);
        assertEquals(false, beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonNullParent_Svek1() {
        BeanPointer beanPointer = new BeanPointer(new DOMNodePointer(null, null, null), null, null, null);
        assertEquals("/null()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_yOQE1() {
        QName name = new QName("test", "test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.US);
        boolean result = beanPointer.isLeaf();
        assert (result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        when(name.hashCode()).thenReturn(1);
        BeanPointer beanpointer = new BeanPointer(name, null, null, null);
        int result = beanpointer.hashCode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentBean_sqVq0() throws Exception {
        Object bean = new Object();
        QName name = Mockito.mock(QName.class);
        JXPathBasicBeanInfo beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        Locale locale = Mockito.mock(Locale.class);
        BeanPointer beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        boolean result = beanpointer.equals(new BeanPointer(parent, name, bean, beanInfo));
        Mockito.verifyNoMoreInteractions();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_Rudn0() throws Exception {
        bean = new Object();
        name = Mockito.mock(QName.class);
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        locale = Mockito.mock(Locale.class);
        beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        QName differentName = Mockito.mock(QName.class);
        boolean result = beanpointer.equals(new BeanPointer(parent, differentName, bean, beanInfo));
        Mockito.verifyNoMoreInteractions();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_Number_ZvbS0() {
        bean = "test";
        beanPointer = new BeanPointer(null, new QName("test"), bean, new JXPathBasicBeanInfo(Class.class, false));
        bean = 10.0;
        beanPointer = new BeanPointer(null, new QName("test"), bean, new JXPathBasicBeanInfo(Class.class, false));
        String result = beanPointer.asPath();
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonNullParent_Svek1_fid2() {
        BeanPointer beanPointer = new BeanPointer(new DOMNodePointer(null, null, null), null, null, null);
        assertEquals(0, beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentBean_sqVq0_fid2() throws Exception {
        Object bean = new Object();
        QName name = Mockito.mock(QName.class);
        JXPathBasicBeanInfo beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        Locale locale = Mockito.mock(Locale.class);
        BeanPointer beanpointer = new BeanPointer(parent, name, bean, beanInfo);
        boolean result = beanpointer.equals(new BeanPointer(parent, Mockito.mock(QName.class), Mockito.mock(Object.class), Mockito.mock(JXPathBasicBeanInfo.class)));
        Mockito.verifyNoMoreInteractions(parent, name, beanInfo);
        Assertions.assertTrue(result);
    }
}