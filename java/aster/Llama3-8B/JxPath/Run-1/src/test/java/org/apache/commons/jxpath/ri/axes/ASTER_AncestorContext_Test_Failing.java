/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Failing {
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private AncestorContext ancestorContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private Object superObject;
    private boolean setStarted = false;
    @Mock
    private NodePointer nodePointer;
    private NodePointer currentNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_CurrentNodePointerIsNull_ReturnsFalse_wwuq4() {
        AncestorContext ancestorContext = new AncestorContext(null, true, new NodeTypeTest(1));
        assertFalse(ancestorContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_WfuE0() throws Exception {
        MockitoAnnotations.initMocks(this);
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        AncestorContext ancestorcontext = new AncestorContext(namespaceContext, true, new NodeTypeTest(0));
        when(ancestorContext.getCurrentPosition()).thenReturn(5);
        when(ancestorContext.nextNode()).thenReturn(true);
        for (int i = 5;i < 10;i++) {
            while (ancestorcontext.nextNode()) ;
        }
        assertTrue(true);
        verify(ancestorContext, times(0)).reset();
        verify(ancestorContext, times(5)).nextNode();
    }
}