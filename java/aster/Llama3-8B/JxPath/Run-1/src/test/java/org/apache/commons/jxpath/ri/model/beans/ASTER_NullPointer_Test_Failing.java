/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
    @Mock
    private QName name;
    private NullPointer nullpointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    @Mock
    private Locale locale;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private Variables variables;
    @Mock
    private Pointer pointer;
    @Mock
    private NullPointer nullPointer;
    @Mock
    private QName qname;
    private String id;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_jcpf1() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US", ""), "id");
        NullPointer pointer2 = new NullPointer(new Locale("fr", "FR", ""), "id2");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_IEJu3() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US", ""), "id");
        NullPointer pointer2 = new NullPointer(new Locale("en", "US", ""), "id2");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Arrange
        String expectedName = "expectedName";
        // Act
        QName actualName = nullpointer.getName();
        // Assert
        Mockito.verify(name, Mockito.times(1)).getName();
        Assertions.assertEquals(expectedName, actualName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_nWcV2() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        QName result = nullPointer.getName();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_2() {
        id = "testId";
        nullpointer = new NullPointer(locale, id);
        // Test when id is not null
        String expectedPath = "id(testId)";
        // Test when id is null
        nullpointer = new NullPointer(parent, name);
        assertNull(id);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        nullpointer = new NullPointer(locale, "id");
        // Arrange
        when(nullpointer.getLength()).thenReturn(5);
        // Act
        int length = nullpointer.getLength();
        // Assert
        assertEquals(5, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        NullPointer nullpointer = new NullPointer(locale, "id");
        Mockito.when(nullpointer.getBaseValue()).thenReturn("baseValue");
        Object baseValue = nullpointer.getBaseValue();
        assertEquals("baseValue", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        NullPointer nullpointer = new NullPointer(locale, "id");
        Mockito.when(nullpointer.isActual()).thenReturn(false);
        boolean actual = nullpointer.isActual();
        Assertions.assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() {
        nullpointer = new NullPointer(locale, "id");
        // Arrange
        when(nullpointer.isLeaf()).thenReturn(true);
        // Act
        boolean result = nullpointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_X_vdXo0() throws Exception {
        MockitoAnnotations.initMocks(this);
        NullPointer nullpointer = new NullPointer(Locale.US, "id");
        JXPathContext jXPathContext = mock(JXPathContext.class);
        Variables variables = mock(Variables.class);
        when(jXPathContext.getVariables()).thenReturn(variables);
        NodePointer nodePointer = mock(NodePointer.class);
        when(jXPathContext.getVariables()).thenReturn(variables);
        when(nodePointer.createPath(jXPathContext)).thenReturn(nodePointer);
        NodePointer result = nullpointer.createPath(jXPathContext);
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullParent_GAas1_lKnr0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        NullPointer parent = null;
        Object value = new Object();
        try {
            parent.createPath(context, value);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_I_tuxm0() {
        Locale locale = Locale.US;
        NullPointer nullpointer = new NullPointer(locale, "id");
        MockitoAnnotations.initMocks(this);
        Mockito.when(nullpointer.isLeaf()).thenReturn(true);
        Assertions.assertTrue(nullpointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_qMcA0() {
        MockitoAnnotations.initMocks(this);
        when(name.hashCode()).thenReturn(1);
        QName qname = new QName("prefix", "localName");
        NullPointer nullpointer = new NullPointer(null, qname);
        int result = nullpointer.hashCode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_DyGs0_vnOs0() {
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName(null, null);
        NodePointer result = nullPointer.createChild(context, name, 0, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentLocale_qfAV5_fid1() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US", ""), "id");
        NullPointer pointer2 = new NullPointer(new Locale("fr", "FR", ""), "id");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_1_fid1() {
        id = "testId";
        nullpointer = new NullPointer(locale, id);
        // Test when id is not null
        String expectedPath = "id(testId)";
        // Test when id is null
        nullpointer = new NullPointer(parent, name);
        assertEquals(expectedPath, nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_3_fid1() {
        id = "testId";
        nullpointer = new NullPointer(locale, id);
        // Test when id is not null
        String expectedPath = "id(testId)";
        // Test when id is null
        nullpointer = new NullPointer(parent, name);
        assertEquals("null()", nullpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutId_hGsP1_JuPy0_fid1() {
        QName qName = new QName("testName");
        NullPointer nullPointer = new NullPointer(null, qName);
        String result = nullPointer.asPath();
        assertEquals("null[testName]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParent_nAWD2_LISA0_fid1() {
        QName qName = new QName("testPrefix", "testLocalName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NullPointer nullPointer = new NullPointer(variablePointer, qName);
        String result = nullPointer.asPath();
        assertEquals("testPrefix:testLocalName/testName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual3_heKF2_YFIU0_fid1() {
        QName qName = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(qName, new Locale("en", "US"));
        assertFalse(nullPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        id = "testId";
        nullpointer = new NullPointer(locale, id);
        // Test when id is not null
        String expectedPath = "id(testId)";
        assertEquals(expectedPath, nullpointer.asPath());
        // Test when id is null
        nullpointer = new NullPointer(parent, name);
        assertNull(id);
        assertEquals("null()", nullpointer.asPath());
    }
}