/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private ContainerPointer containerpointer;
    @Mock
    private Container container;
    @Mock
    private Locale locale;
    private ContainerPointer containerPointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    @Mock
    private Object value;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private ContainerPointer parent;
    @Mock
    private Object baseValue;
    @Mock
    private VariablePointer variablePointer;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(domNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = containerpointer.testNode(nodeTest);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(container.hashCode()).thenReturn(1);
        ContainerPointer containerPointer = new ContainerPointer(null, container);
        int expectedHashCode = 1;
        int actualHashCode = containerPointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(domNodePointer.getValuePointer()).thenReturn(domNodePointer);
        when(domNodePointer.attributeIterator(Mockito.any(QName.class))).thenReturn(nodeIterator);
        QName qName = Mockito.mock(QName.class);
        NodeIterator actual = containerpointer.attributeIterator(qName);
        assertEquals(nodeIterator, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        nodePointer = mock(NodePointer.class);
        nodeTest = mock(NodeTest.class);
        // Arrange
        NodeIterator nodeIterator = mock(NodeIterator.class);
        when(nodePointer.childIterator(nodeTest, false, null)).thenReturn(nodeIterator);
        // Act
        NodeIterator result = containerpointer.childIterator(nodeTest, false, null);
        // Assert
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        MockitoAnnotations.initMocks(this);
        when(parent.asPath()).thenReturn("parentPath");
        String expectedPath = "/parentPath";
        String actualPath = containerpointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        MockitoAnnotations.initMocks(this);
        // Arrange
        Mockito.when(containerPointer.getBaseValue()).thenReturn(container);
        // Act
        Object baseValue = containerPointer.getBaseValue();
        // Assert
        Mockito.verify(containerPointer, Mockito.times(1)).getBaseValue();
        assertEquals(container, baseValue);
    }
}