/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.JXPathTypeConversionException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForConcreteClass_xySu0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = Integer.class;
        Collection<?> result = converter.allocateCollection(type);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForInterface_btRC1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = List.class;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForNullType_rqdX9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class<?> type = null;
        try {
            converter.allocateCollection(type);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_Gmve7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10);
        Assertions.assertEquals(new BigDecimal("10.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberException_VzRB10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateNumber(Object.class, 10.0);
            Assertions.fail("Expected JXPathTypeConversionException");
        } catch (JXPathTypeConversionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableClass_Tuqb3_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForInstantiableClass_CnjM4_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonCollectionTypes_rIWr6_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForNonInstantiableCollectionTypes_TMvb7_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(HashSet.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_Gmve7_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.0);
        Assertions.assertEquals(new BigDecimal("10.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_jZMp5_WCuY0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        assertTrue(converter.convertStringToPrimitive(collection.toString(), List.class) != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringToArray_Elrm12_SrJW0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] expected = new String[]{"hello"};
        Object result = converter.convertStringToPrimitive("hello", String[].class);
        assertArrayEquals(expected, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNodeSetToArray_ZJBJ19_nKtf0_fid1() {
        List<String> nodeSet = new ArrayList<>();
        nodeSet.add("value1");
        nodeSet.add("value2");
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(nodeSet, String[].class);
        String[] expected = new String[]{"value1", "value2"};
        assertEquals(expected, result);
    }
}