/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
    private int jj_endpos;
    @Mock
    private Compiler compiler;
    private XPathParser xpathparser;
    private int[] jj_la1 = new int[39];
    private int jj_gen;
    @Mock
    private XPathParserTokenManager tokenManager;
    @Mock
    private SimpleCharStream charStream;
    @Mock
    private Compiler compilerMock;
    private Token jj_scanpos, jj_lastpos;
    private XPathParserTokenManager tm;
    @Mock
    private Token token;
    @Mock
    private Token nextToken;
    @Mock
    private SimpleCharStream simpleCharStream;
    @Mock
    private java.io.InputStream inputStream;
    @Mock
    private java.io.Reader reader;
    @Mock
    private XPathParserTokenManager tokenManagerMock;
    @Mock
    private SimpleCharStream streamMock;
    @Mock
    private SimpleCharStream stream;
    @Mock
    static private int[] jj_la1_0;
    private int[] jj_expentry;
    private final java.util.Vector jj_expentries = new java.util.Vector();
    private int jj_kind = -1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_1;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExpr_ueHk0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1 or 2".getBytes()));
        Object result = parser.OrExpr();
        assertEquals("1 or 2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprWithMultipleConditions_UOLz1() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1 or 2 or 3".getBytes()));
        Object result = parser.OrExpr();
        assertEquals("1 or 2 or 3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilterExpr_bsAe0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader("input"));
        Object result = parser.FilterExpr();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFilterExpr2_bFXY1() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        Object result = parser.FilterExpr();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_ZNac0() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_GZkD0() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_RAct0() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        ParseException e = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_PuNY0() {
        XPathParser parser = new XPathParser(new java.io.StringReader("")); // Initialize with empty string
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_ErJX1() {
        XPathParser parser = new XPathParser(new java.io.StringReader("a")); // Initialize with string "a"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_RCWW2() {
        XPathParser parser = new XPathParser(new java.io.StringReader("ab")); // Initialize with string "ab"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_NBaS3() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abc")); // Initialize with string "abc"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_CWbz4() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcd")); // Initialize with string "abcd"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_FjyQ5() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcde")); // Initialize with string "abcde"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_MVjq6() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdef")); // Initialize with string "abcdef"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_Ibxx7() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdefg")); // Initialize with string "abcdefg"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_lghY8() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdefgh")); // Initialize with string "abcdefgh"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_IzSV9() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdefghi")); // Initialize with string "abcdefghi"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_wZzt10() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdefghij")); // Initialize with string "abcdefghij"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_uwrr11() {
        XPathParser parser = new XPathParser(new java.io.StringReader("abcdefghijk")); // Initialize with string "abcdefghijk"
        ParseException exception = parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnableTracing_utLm0() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.enable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnableTracingReader_fAUS2() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        parser.enable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnableTracingTokenManager_ufVs3() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("test"), 1, 1), 1);
        XPathParser parser = new XPathParser(tokenManager);
        parser.enable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr_OVha0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1=2".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1=2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr2_aZNf1() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1<>2".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1<>2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr3_gmmB2() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1!=2".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1!=2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr4_kHVF3() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1==2".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1==2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr5_jvWY4() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1<>1".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1<>1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr6_PsIw5() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1!=1".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1!=1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr7_GOix6() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1==1".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1==1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr8_biuX7() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1<>3".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1<>3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr9_JAIa8() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1!=3".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1!=3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr10_RHyP9() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("1==3".getBytes()));
        Object result = parser.EqualityExpr();
        assertEquals("1==3", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetToken_iZpK0() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        assertNotNull(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTokenIndexZero_sbvf1() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        assertEquals(token, parser.getToken(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTokenIndexNegative_VGmm3() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        try {
            parser.getToken(-1);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr_SLRm0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader("pathExpr"));
        Object result = parser.PathExpr();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExpr2_bRKT1() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader("pathExpr2"));
        Object result = parser.PathExpr();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExprWithoutUnionKeyword_JDZF2() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("path1 path2".getBytes()));
        try {
            parser.UnionExpr();
            assert false;
        } catch (Exception e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentList() throws Exception {
        xpathparser = new XPathParser(tokenManager);
        // Arrange
        ArrayList expectedArgs = new ArrayList();
        expectedArgs.add("arg1");
        expectedArgs.add("arg2");
        // Act
        ArrayList actualArgs = xpathparser.ArgumentList();
        // Assert
        assertEquals(expectedArgs, actualArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_uECT0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        Object result = parser.QName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseExpression_dIKN0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("expression".getBytes()));
        Object result = parser.parseExpression();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTokenInputStream_RwMn0() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("test".getBytes()));
        assertNotNull(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTokenReader_eUvC1() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        assertNotNull(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing_TisY0() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        parser.disable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing2_KRLo1() {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        parser.disable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing3_zkmE2() {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1);
        XPathParser parser = new XPathParser(tm);
        parser.disable_tracing();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_umqp0() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("test".getBytes()));
        parser.ReInit(new java.io.InputStreamReader(new java.io.ByteArrayInputStream("test".getBytes())));
        assertEquals(1, parser.token_source.getNextToken().beginLine);
        assertEquals(1, parser.token_source.getNextToken().beginColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitReader_COHj1() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        parser.ReInit(new java.io.StringReader("test"));
        assertEquals(1, parser.token_source.getNextToken().beginLine);
        assertEquals(1, parser.token_source.getNextToken().beginColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath() throws Exception {
        xpathparser = new XPathParser(tokenManager);
        // Set up the mock objects
        when(jj_la1).thenReturn(new int[39]);
        when(jj_gen).thenReturn(0);
        // Set up the expected result
        Object expected = "Expected result";
        // Call the method under test
        Object result = xpathparser.LocationPath();
        // Assert the result
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCall() throws Exception {
        xpathparser = new XPathParser(tokenManager);
        when(compiler.function(any(), any())).thenReturn("Mocked function result");
        Object name = "Mocked function name";
        ArrayList args = new ArrayList();
        when(xpathparser.FunctionName()).thenReturn(name);
        when(xpathparser.ArgumentList()).thenReturn(args);
        Object result = xpathparser.FunctionCall();
        verify(compiler).function(name, args.toArray());
        assertEquals("Mocked function result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions() throws Exception {
        compiler = compilerMock;
        xpathparser = new XPathParser(tokenManagerMock);
        // Arrange
        String nc1 = "test1";
        String nc2 = "test2";
        // Act
        Object result = xpathparser.QName_Without_CoreFunctions();
        // Assert
        assertEquals(compiler.qname(null, nc1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_Error_CTNf2() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("Invalid input".getBytes()));
        try {
            parser.QName_Without_CoreFunctions();
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_umqp0_1() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("test".getBytes()));
        parser.ReInit(new java.io.InputStreamReader(new java.io.ByteArrayInputStream("test".getBytes())));
        assertEquals(1, parser.token_source.getNextToken().beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitInputStream_umqp0_2() {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("test".getBytes()));
        parser.ReInit(new java.io.InputStreamReader(new java.io.ByteArrayInputStream("test".getBytes())));
        assertEquals(1, parser.token_source.getNextToken().beginColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitReader_COHj1_1() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        parser.ReInit(new java.io.StringReader("test"));
        assertEquals(1, parser.token_source.getNextToken().beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitReader_COHj1_2() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
        parser.ReInit(new java.io.StringReader("test"));
        assertEquals(1, parser.token_source.getNextToken().beginColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprWithNoConditions_gkRq2_rHQm0() throws ParseException {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        try {
            parser.QName_Without_CoreFunctions();
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing return statement in function", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_jIKo1_AdAO0() {
        XPathParser parser = new XPathParser(new java.io.StringReader("test"));
    }
}