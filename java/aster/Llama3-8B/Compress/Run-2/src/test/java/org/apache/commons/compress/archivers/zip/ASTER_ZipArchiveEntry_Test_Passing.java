/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private GeneralPurposeBit generalPurposeBit;
private ZipArchiveEntry ziparchiveentry;
    private ZipArchiveEntry otherZipArchiveEntry;
@Mock
    private UnparseableExtraFieldData unparseableExtra;
private long time = -1;
@Mock
    private ZipArchiveEntry superMock;
@Mock
private byte[] rawName;
private int alignment;
@Mock
    private ZipArchiveEntry superZipArchiveEntry;
@Mock
    private ZipExtraField[] extraFields;
@Mock
    private ZipArchiveEntry entry;
@Mock
    private Path path;
@Mock
private int versionMadeBy;
@Mock
    private ZipArchiveEntry zipArchiveEntryMock;
@Mock
    private ZipArchiveEntry mockZipArchiveEntry;
private int method = ZipMethod.UNKNOWN_CODE;
@Mock
    private ZipShort zipShort;
@Mock
    private ZipExtraField zipExtraField;
@Mock
    private ZipArchiveEntry superEntry;
private boolean lastModifiedDateSet;
@Mock
private static String ZIP_DIR_SEP = "/";
private int rawFlag;
private static int SHORT_MASK = 0xFFFF;
@Mock
    private ExtraFieldParsingBehavior extraFieldParsingBehavior;
byte[] expectedBytes;
@Mock
    private UnixStat unixStat;
    private int versionRequired;
    private int internalAttributes;
    private long diskNumberStart;
    private boolean isStreamContiguous;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the expected version required
        Mockito.when(zipArchiveEntry.getVersionRequired()).thenReturn(1);
        // Call the method to test
        int actualVersionRequired = zipArchiveEntry.getVersionRequired();
        // Assert the result
        Mockito.verify(zipArchiveEntry).getVersionRequired();
        assertEquals(1, actualVersionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired_TAwU0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired1_ZWuu1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetGeneralPurposeBit() {
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry.setGeneralPurposeBit(generalPurposeBit);
        // Arrange
        GeneralPurposeBit expectedGeneralPurposeBit = new GeneralPurposeBit();
        // Act
        ziparchiveentry.setGeneralPurposeBit(expectedGeneralPurposeBit);
        // Assert
        assertEquals(expectedGeneralPurposeBit, ziparchiveentry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_HISg1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode_kgnE0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.isDirectory();
        entry.setUnixMode(0x1ff);
        assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode1_TWWo1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(0x1ff);
        assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes_sEcn0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributesWithFile_gMYB4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Act and Assert
        assertTrue(ziparchiveentry.equals(ziparchiveentry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Act and Assert
        assertFalse(ziparchiveentry.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Act and Assert
        assertFalse(ziparchiveentry.equals("Not a ZipArchiveEntry"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setName("Different Name");
        // Act and Assert
        assertFalse(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameName() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setName(ziparchiveentry.getName());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentComment() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setComment("Different Comment");
        // Act and Assert
        assertFalse(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameComment() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setComment(ziparchiveentry.getComment());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameLastModifiedTime() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setLastModifiedTime(ziparchiveentry.getLastModifiedTime());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameLastAccessTime() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setLastAccessTime(ziparchiveentry.getLastAccessTime());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameCreationTime() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setCreationTime(ziparchiveentry.getCreationTime());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameInternalAttributes() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        ZipArchiveEntry otherZipArchiveEntry = new ZipArchiveEntry();
        otherZipArchiveEntry.setInternalAttributes(ziparchiveentry.getInternalAttributes());
        // Act and Assert
        assertTrue(ziparchiveentry.equals(otherZipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_OGaq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(true, entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_RilQ1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(false, entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_VGii2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(false, entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentExternalAttributes_iKjo18() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        Date expectedDate = new Date();
        Mockito.when(ziparchiveentry.getTime()).thenReturn(expectedDate.getTime());
        // Act
        Date actualDate = ziparchiveentry.getLastModifiedDate();
        // Assert
        Mockito.verify(ziparchiveentry, Mockito.times(1)).getTime();
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_TpzC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        Date lastModifiedDate = entry.getLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes_SOtK0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        int result = zipArchiveEntry.getInternalAttributes();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag() throws Exception{
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the rawFlag value
        zipArchiveEntry.setRawFlag(1);
        // Verify the getRawFlag method returns the set value
        Mockito.when(zipArchiveEntry.getRawFlag()).thenReturn(1);
        // Assert the getRawFlag method returns the set value
        assertEquals(1, zipArchiveEntry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag_JuOM0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag1_obuY1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_qCZH0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_pYMi0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1234567890L);
    ZipEntry result = zipArchiveEntry.setCreationTime(time);
    Assertions.assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetDiskNumberStart() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        long diskNumberStart = 10;
        // Act
        ziparchiveentry.setDiskNumberStart(diskNumberStart);
        // Assert
        Mockito.verify(ziparchiveentry, Mockito.times(1)).setDiskNumberStart(diskNumberStart);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        Mockito.when(ziparchiveentry.getDiskNumberStart()).thenReturn(diskNumberStart);
        Assertions.assertEquals(diskNumberStart, ziparchiveentry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStart_Iqio0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(1);
        assertEquals(1, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithNegativeValue_zGIa1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(-1);
        assertEquals(-1, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithZeroValue_YQok2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(0);
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithLargeValue_oOHZ3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_Vsrq1_1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", "rawName".getBytes());
        assertEquals("newName", zipArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_Vsrq1_2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", "rawName".getBytes());
        assertArrayEquals("rawName".getBytes(), zipArchiveEntry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignment() throws Exception{
        alignment = 10;
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getAlignment()).thenReturn(alignment);
        assertEquals(alignment, ziparchiveentry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_khOl0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment2_llKi1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_GGjh0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullExtraFields_uaiU2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithZipEntry_OBzY1() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
    zipArchiveEntry.setExtra();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithString_hNlw3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveEntry.setExtra();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithPrivateMethodCalls_XRCa4() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setExtra();
    assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_fNhF2() {
        File file = new File("file");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", "Expected result");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithX000A_NTFS_dCbF4() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", "Expected result");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra2_uVFM1() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra3_conT2() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipEntry("entryName"));
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra4_HCfF3() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra5_ybWs4() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipEntry("entryName"));
        byte[] data = new byte[10];
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra6_iiPP5() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        byte[] data = new byte[10];
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffset_TfYy0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setDataOffset(10L);
        assertEquals(10L, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithFile_kCLX3() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        entry.setDataOffset(10L);
        assertEquals(10L, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsNull_ynxY0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtraFields(null);
        assertEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, zipArchiveEntry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsEmpty_zihK1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField[] fields = new ZipExtraField[0];
        zipArchiveEntry.setExtraFields(fields);
        assertEquals(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY, zipArchiveEntry.getExtraFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_HntV0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertEquals(null, unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData4_UYxc3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertEquals(null, unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData5_JLrx4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertEquals(null, unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        String testName = "testName";
        ziparchiveentry.setName(testName);
        Mockito.verify(ziparchiveentry).setName(testName);
        Assertions.assertEquals(testName, ziparchiveentry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNull_aLFY0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName(null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameFatPlatform_SgUB1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_FAT);
    entry.setName("C:\\test");
    assertEquals("C:/test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNotFatPlatform_qXvQ2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    entry.setName("C:\\test");
    assertEquals("C:\\test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNoSep_aiZw3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisStreamContiguous() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the expected value for isStreamContiguous
        Mockito.when(zipArchiveEntry.isStreamContiguous()).thenReturn(true);
        // Call the method under test
        boolean result = zipArchiveEntry.isStreamContiguous();
        // Assert the result
        Mockito.verify(zipArchiveEntry, Mockito.times(1)).isStreamContiguous();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_ySbe0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertTrue(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousFalse_JZSK1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(false);
        assertFalse(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousBoolean_DXSy3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(true);
        assertTrue(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_nKtn0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_vbnl3() {
        File file = new File("test");
        ZipArchiveEntry entry = new ZipArchiveEntry(file, "test");
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        int newPlatform = 1;
        // Act
        ziparchiveentry.setPlatform(newPlatform);
        // Assert
        Mockito.verify(ziparchiveentry).setPlatform(newPlatform);
        assertEquals(newPlatform, ziparchiveentry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform_cbpf0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setPlatform(1);
        assertEquals(1, zipArchiveEntry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionMadeBy() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int expectedVersionMadeBy = 123;
        ziparchiveentry.setVersionMadeBy(expectedVersionMadeBy);
        Mockito.verify(ziparchiveentry).setVersionMadeBy(expectedVersionMadeBy);
        Mockito.when(ziparchiveentry.getVersionMadeBy()).thenReturn(expectedVersionMadeBy);
        Assertions.assertEquals(expectedVersionMadeBy, ziparchiveentry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy_cRcs0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionMadeBy(1);
        assertEquals(1, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeByWithFile_isdX3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        zipArchiveEntry.setVersionMadeBy(1);
        assertEquals(1, zipArchiveEntry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset_kNww0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    long localHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
    assertEquals(0, localHeaderOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocalHeaderOffset_oRWy0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setLocalHeaderOffset(10L);
    assertEquals(10L, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExternalAttributes() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        long externalAttributes = 1234567890L;
        ziparchiveentry.setExternalAttributes(externalAttributes);
        Mockito.verify(ziparchiveentry).setExternalAttributes(externalAttributes);
        Assertions.assertEquals(externalAttributes, ziparchiveentry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_DNhC0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExternalAttributes(123L);
        assertEquals(123L, zipArchiveEntry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_ZJrk9() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        byte[] extra = new byte[10];
        entry.setExtra(extra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod() throws Exception{
        MockitoAnnotations.initMocks(this);
        when(entry.getMethod()).thenReturn(method);
        assertEquals(method, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod_VCju0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldNull_dNVY0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipShort type = new ZipShort((byte[]) null, 0);
        ZipExtraField result = zipArchiveEntry.getExtraField(type);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldEmpty_zqRe1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipShort type = new ZipShort(new byte[0], 0);
        ZipExtraField result = zipArchiveEntry.getExtraField(type);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTime_notLastModifiedDateSet() throws Exception {
        lastModifiedDateSet = false;
        time = -1;
        ziparchiveentry = new ZipArchiveEntry(superEntry);
        when(superEntry.getTime()).thenReturn(987654321L);
        assertEquals(987654321L, ziparchiveentry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_fUII0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        FileTime fileTime = FileTime.fromMillis(123456789);
        ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
        assertEquals(zipArchiveEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionMadeBy() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getVersionMadeBy()).thenReturn(versionMadeBy);
        versionMadeBy = 123;
        assertEquals(versionMadeBy, ziparchiveentry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy_QmtB0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy2_XOAr1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        String expectedName = "expectedName";
        when(ziparchiveentry.getName()).thenReturn(expectedName);
        // Act
        String actualName = ziparchiveentry.getName();
        // Assert
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_NullName_JOKN0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
    assertEquals("entryName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra() throws Exception{
        entry = new ZipArchiveEntry();
        // Arrange
        byte[] extra = new byte[10];
        when(entry.getExtra()).thenReturn(extra);
        // Act
        byte[] result = entry.getLocalFileDataExtra();
        // Assert
        assertEquals(extra, result);
        verify(entry, times(1)).getExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDirectory() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        String entryName = "someDir";
        when(ziparchiveentry.getName()).thenReturn(entryName);
        // Act
        boolean result = ziparchiveentry.isDirectory();
        // Assert
        Mockito.verify(ziparchiveentry, Mockito.times(1)).getName();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRawFlag() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int expectedRawFlag = 123;
        ziparchiveentry.setRawFlag(expectedRawFlag);
        Mockito.verify(ziparchiveentry).setRawFlag(expectedRawFlag);
        Mockito.when(ziparchiveentry.getRawFlag()).thenReturn(expectedRawFlag);
        Assertions.assertEquals(expectedRawFlag, ziparchiveentry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag_fvmb0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(1);
        assertEquals(1, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag2_jJdt1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(2);
        assertEquals(2, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag3_QTmP2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(3);
        assertEquals(3, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag4_iifN3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(4);
        assertEquals(4, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag5_iWQF4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(5);
        assertEquals(5, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag6_jQmk5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(6);
        assertEquals(6, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag7_MHBb6() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(7);
        assertEquals(7, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag8_KUXK7() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(8);
        assertEquals(8, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag9_wPlB8() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(9);
        assertEquals(9, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag10_KnjY9() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(10);
        assertEquals(10, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag11_CVxC10() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(11);
        assertEquals(11, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag12_cJil11() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(12);
        assertEquals(12, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag13_ENaf12() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(13);
        assertEquals(13, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag14_lgeR13() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(14);
        assertEquals(14, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag15_OZsw14() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(15);
        assertEquals(15, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag16_txyc15() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(16);
        assertEquals(16, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag17_dljq16() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(17);
        assertEquals(17, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag18_Nlok17() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(18);
        assertEquals(18, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag19_UBAf18() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(19);
        assertEquals(19, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStart() throws Exception {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the expected value for diskNumberStart
        Mockito.when(zipArchiveEntry.getDiskNumberStart()).thenReturn(10L);
        // Call the method to test
        long result = zipArchiveEntry.getDiskNumberStart();
        // Assert the result
        Mockito.verify(zipArchiveEntry).getDiskNumberStart();
        assertEquals(10L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_xOky0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart1_HkGo1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnixMode_PlatformNotUnix_ReturnsZero() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Act
        int result = ziparchiveentry.getUnixMode();
        // Assert
        Assertions.assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixModeOnNonUnixPlatform_rBSB0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test");
    int result = zipEntry.getUnixMode();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsNullParsingBehavior_ugTe2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ExtraFieldParsingBehavior parsingBehavior = null;
    try {
        zipArchiveEntry.getExtraFields(parsingBehavior);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNull_iWcS3() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry();
    byte[] result = zipEntry.getRawName();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra2_TejV1() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra3_jEDb2() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra4_xABu3() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
        byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveExtraField() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        when(zipShort.getValue()).thenReturn(1);
        // Act
        ziparchiveentry.removeExtraField(zipShort);
        // Assert
        verify(zipShort, times(1)).getValue();
        verify(ziparchiveentry, times(1)).setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraField_SLJq0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        ZipShort type = new ZipShort(new byte[2], 0);
        zipArchiveEntry.removeExtraField(type);
        assertEquals(null, zipArchiveEntry.getExtraField(type));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraFieldNull_xKSS1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.removeExtraField(null);
        assertEquals(null, zipArchiveEntry.getExtraField(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionRequired() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int versionRequired = 1;
        ziparchiveentry.setVersionRequired(versionRequired);
        Mockito.verify(ziparchiveentry).setVersionRequired(versionRequired);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        Assertions.assertEquals(versionRequired, ziparchiveentry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequired_dPxg0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionRequired(1);
        assertEquals(1, zipArchiveEntry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequired_jWbm1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setVersionRequired(1);
        assertEquals(1, zipArchiveEntry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAlignment() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int validAlignment = 8; // a valid power of two
        ziparchiveentry.setAlignment(validAlignment);
        Mockito.verify(ziparchiveentry).setAlignment(validAlignment);
        assertEquals(validAlignment, ziparchiveentry.getAlignment());
        int invalidAlignment = 3; // not a power of two
        try {
            ziparchiveentry.setAlignment(invalidAlignment);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // expected
        }
        int tooLargeAlignment = 0x10000; // larger than 0xffff
        try {
            ziparchiveentry.setAlignment(tooLargeAlignment);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // expected
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentPowerOfTwo_GOfV0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setAlignment(8);
        assertEquals(8, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentGreaterThan16Bits_Fauy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(0x10000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentNotPowerOfTwo_XAkr2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(5);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetMethod() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        int validMethod = 1;
        int invalidMethod = -1;
        // Act
        ziparchiveentry.setMethod(validMethod);
        ziparchiveentry.setMethod(invalidMethod);
        // Assert
        Mockito.verify(ziparchiveentry).setMethod(validMethod);
        Mockito.verify(ziparchiveentry).setMethod(invalidMethod);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        // Assert for invalid method
        try {
            ziparchiveentry.setMethod(invalidMethod);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("ZIP compression method can not be negative: " + invalidMethod, e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldNull_ROtK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.addAsFirstExtraField(null);
    assertEquals(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldUnparseableExtraFieldData_Nhsp1_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze);
    assertEquals(1, zipArchiveEntry.getExtraFields().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldUnparseableExtraFieldData_Nhsp1_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze);
    assertEquals(ze, zipArchiveEntry.getExtraFields()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_ltOM0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        ZipExtraField[] expected = new ZipExtraField[0];
        ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsFromFile_XFSR2() {
        File file = new File("test");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "test");
        ZipExtraField[] expected = new ZipExtraField[0];
        ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit() {
        MockitoAnnotations.initMocks(this);
        // Act
        GeneralPurposeBit actual = ziparchiveentry.getGeneralPurposeBit();
        // Assert
        Mockito.verify(generalPurposeBit, Mockito.times(1)).hashCode();
        assertEquals(generalPurposeBit, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit2_tBCA1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_sYgW0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithEntry_NhAS1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        Mockito.when(zipArchiveEntry.getSize()).thenReturn(100L);
        // Act
        long result = zipArchiveEntry.getSize();
        // Assert
        Mockito.verify(zipArchiveEntry, Mockito.times(1)).getSize();
        Assertions.assertEquals(100L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_ipcL0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithEntry_BjoV1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform_ozMU0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform2_vvib1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetInternalAttributes() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int internalAttributes = 10;
        ziparchiveentry.setInternalAttributes(internalAttributes);
        Mockito.verify(ziparchiveentry, Mockito.times(1)).setInternalAttributes(internalAttributes);
        Assertions.assertEquals(internalAttributes, ziparchiveentry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes_NszK0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(1);
        assertEquals(1, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes2_vpgE1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(2);
        assertEquals(2, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes3_kUkV2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(3);
        assertEquals(3, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes4_SLyR3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(4);
        assertEquals(4, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes5_CdmJ4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(5);
        assertEquals(5, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes6_UIbX5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(6);
        assertEquals(6, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes7_GijW6() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(7);
        assertEquals(7, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes8_jgxx7() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(8);
        assertEquals(8, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes9_WKOU8() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(9);
        assertEquals(9, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes10_rhAC9() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(10);
        assertEquals(10, zipArchiveEntry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_CWHj0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(true);
        assertEquals(true, zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguousFalse_Ksmn1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(false);
        assertEquals(false, zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributesWithPath_Cjrx3_bjCH0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new java.io.File("test"), "test");
    assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_dAjN3_PuvL1() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry(new File("test1"), "test1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry(new File("test2"), "test2");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_nqOO4_wJcK1() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry(new File("test"), "test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry(new File("test"), "test");
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentCreationTime_mGGN12_maGz0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry(new File("test"), "test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry(new File("test"), "test");
    entry2.setCreationTime(FileTime.fromMillis(1));
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_ZMrR0_OMyl1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1000));
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithUnrecognizedExtraField_CAjm2_JwyT0() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputPath"), "entryName");
    byte[] extra = new byte[0];
    zipArchiveEntry.setExtra(extra);
    byte[] result = zipArchiveEntry.getExtra();
    assertEquals(Arrays.equals(extra, result), true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidSize_Utoc1_plBo1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    try {
        entry.setSize(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_ZJMm0_aiZa1() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
    byte[] b = new byte[10];
    zipArchiveEntry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetLastAccessTime_wicu0() throws Exception{
    ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
    FileTime fileTime = Mockito.mock(FileTime.class);
    ziparchiveentry.setLastAccessTime(fileTime);
    Mockito.verify(ziparchiveentry).setLastAccessTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_tEFi0_xOwM0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("dir"), "dir");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotDirectory_gUVj1_UNyl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("file"), "file");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeNonDosTime_toJJ1_vRmV1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setTime(System.currentTimeMillis());
    assertEquals(System.currentTimeMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldExistingExtraFieldWithUnparseableExtraFieldData_XPxv4_qGbP0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze1 = new UnparseableExtraFieldData();
    zipArchiveEntry.addExtraField(ze1);
    ZipExtraField ze2 = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze2);
    assertEquals(1, zipArchiveEntry.getExtraFields().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldExistingExtraFieldWithUnparseableExtraFieldData_XPxv4_qGbP0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze1 = new UnparseableExtraFieldData();
    zipArchiveEntry.addExtraField(ze1);
    ZipExtraField ze2 = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze2);
    assertEquals(ze2, zipArchiveEntry.getExtraFields()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithPath_ybLy3_kqng1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new java.io.File("test"), "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired3_VUaG3_ryqF0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getVersionRequired());
    } catch (ZipException e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributesWithZipEntry_hYlk2_NPMN1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getExternalAttributes());
    } catch (java.util.zip.ZipException e) {
        fail("Unexpected java.util.zip.ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag3_AhHp3_jsUy0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getRawFlag());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag4_twui4_dEAS1() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        assertEquals(0, zipArchiveEntry.getRawFlag());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment4_jMdN3_Aope0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getAlignment());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment5_czjr4_GnDG0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getAlignment());
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffsetWithZipEntry_VTfj1_GXic0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        entry.setDataOffset(10L);
        assertEquals(10L, entry.getDataOffset());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithZipEntry_yAOF2_CrDT0() {
    java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test");
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        int result = entry.hashCode();
        assertEquals(zipEntry.getName().hashCode(), result);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy3_MIRk2_DJRz0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getVersionMadeBy());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart3_HRPn3_oPpD0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart4_QRzl4_gGWB1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsFromZipEntry_kbxX1_CPrS0() {
    ZipEntry zipEntry = new ZipEntry("test");
    ZipArchiveEntry zipArchiveEntry = null;
    try {
        zipArchiveEntry = new ZipArchiveEntry(zipEntry);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneralPurposeBit_gvdp2_AKth0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    } catch (ZipException e) {
        fail("ZipException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffsetWithZipEntry_nqBf2_tXcB0() {
    java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry("test");
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(zipEntry);
        assertEquals(0, entry.getDataOffset());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithZipEntry_wdrx2_YNcA0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getSize());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform3_leGr2_XdoB1() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry((java.util.zip.ZipEntry)null);
        assertEquals(0, zipArchiveEntry.getPlatform());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_Vsrq1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", "rawName".getBytes());
        assertEquals("newName", zipArchiveEntry.getName());
        assertArrayEquals("rawName".getBytes(), zipArchiveEntry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldUnparseableExtraFieldData_Nhsp1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze);
    assertEquals(1, zipArchiveEntry.getExtraFields().length);
    assertEquals(ze, zipArchiveEntry.getExtraFields()[0]);
}
}