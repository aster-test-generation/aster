/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition;
import org.apache.commons.compress.harmony.pack200.IcBands.IcTuple;
import org.objectweb.asm.Label;
import org.objectweb.asm.Opcodes;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ClassBands_Test_Passing {
@Mock
    private CPClass cpClass1;
@Mock
    private CPClass cpClass2;
@Mock
    private CPClass cpClass3;
@Mock
    private CPClass cpClass4;
@Mock
    private CPClass cpClass5;
@Mock
    private Segment segment;
@Mock
    private CPUTF8 cputf8;
@Mock
    private CPClass cpClass;
private ClassBands classbands;
    private final Map<CPClass, Set<CPClass>> classReferencesInnerClass = new HashMap<>();
    private final CPClass[] class_this;
    private int index;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnySyntheticClasses_CEVl0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, true);
        boolean result = classBands.isAnySyntheticClasses();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute1_UDee0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    NewAttribute attribute = new NewAttribute("test", "test", 1);
    classBands.addFieldAttribute(attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute2_BcGV1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    NewAttribute attribute = new NewAttribute("test1", "test1", 1);
    classBands.addFieldAttribute(attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute3_KGhY2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    NewAttribute attribute = new NewAttribute("test2", "test2", 1);
    classBands.addFieldAttribute(attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMaxStack_sikT0() throws IOException {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMaxStack(10, 5);
        assert classBands.tempMethodFlags.size() == 1;
        assert classBands.codeMaxStack.size() == 1;
        assert classBands.codeMaxLocals.size() == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAnnotationDefault_GqpG0() throws IOException {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        List<String> nameRU = new ArrayList<>();
        nameRU.add("test");
        List<String> tags = new ArrayList<>();
        tags.add("tag");
        List<Object> values = new ArrayList<>();
        values.add("value");
        List<Integer> caseArrayN = new ArrayList<>();
        caseArrayN.add(1);
        List<String> nestTypeRS = new ArrayList<>();
        nestTypeRS.add("nestType");
        List<String> nestNameRU = new ArrayList<>();
        nestNameRU.add("nestName");
        List<Integer> nestPairN = new ArrayList<>();
        nestPairN.add(1);
        classBands.addAnnotationDefault(nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_MPZv0() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullCPClasses_LWZI1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[] cpClasses = new CPClass[1];
        cpClasses[0] = null;
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyCPClasses_KURH2() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[] cpClasses = new CPClass[1];
        classBands.getInts(cpClasses);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithOneCPClass_UQbu3() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[] cpClasses = new CPClass[1];
        cpClasses[0] = new CPClass();
        classBands.getInts(cpClasses);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithMultipleCPClasses_aFQN4() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[] cpClasses = new CPClass[2];
        cpClasses[0] = new CPClass();
        cpClasses[1] = new CPClass();
        classBands.getInts(cpClasses);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassInterface_JPzF5() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[][] classInterface = new CPClass[1][1];
        classInterface[0][0] = null;
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassInterface_QBsR6() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[][] classInterface = new CPClass[1][1];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithOneClassInterface_DQNm7() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[][] classInterface = new CPClass[1][1];
        classInterface[0][0] = new CPClass();
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithMultipleClassInterfaces_bhTq8() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        CPClass[][] classInterface = new CPClass[2][1];
        classInterface[0][0] = new CPClass();
        classInterface[1][0] = new CPClass();
        classBands.pack(System.out);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullSegment_LYcW1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(null, 1, 1, false);
        try {
            classBands.pack(System.out);
            assert false;
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithZeroNumClasses_XGdk2() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 0, 1, false);
        try {
            classBands.pack(System.out);
            assert false;
        } catch (ArithmeticException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNegativeEffort_CEzz3() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, -1, false);
        try {
            classBands.pack(System.out);
            assert false;
        } catch (ArithmeticException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithStripDebugTrue_skiU5() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, true);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyIntsArray_qpRm6() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] ints = new int[0];
        classBands.sum(ints);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithOneElementIntsArray_raXs7() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] ints = new int[1];
        ints[0] = 1;
        classBands.sum(ints);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithMultipleElementsIntsArray_WUni8() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] ints = new int[5];
        for (int i = 0; i < ints.length; i++) {
            ints[i] = i;
        }
        classBands.sum(ints);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_RhcJ0() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack1_kLTJ1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 2, 2, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack2_tfLh2() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 3, 3, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack3_mNae3() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 4, 4, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack4_WbvC4() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 5, 5, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack5_ruTo5() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 6, 6, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack6_dAWb6() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 7, 7, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack7_xKIX7() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 8, 8, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack8_EFyB8() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 9, 9, false);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        classBands.pack(out);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_kLtL0() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassThis_KeOq1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setClassThis(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassSuper_nndI2() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setClassSuper(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassInterface_yquU3() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setClassInterface(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassFieldCount_jJzm4() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setClassFieldCount(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullClassMethodCount_YLRD5() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setClassMethodCount(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullFieldDescr_UIzT6() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setFieldDescr(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullMethodDescr_XjIf7() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.setMethodDescr(null);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        classBands.pack(bos);
        byte[] encodedBand = bos.toByteArray();
        assert encodedBand.length > 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithNullOutputStream_KHcd1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        try {
            classBands.pack(null);
        } catch (IOException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassThis_zMEk2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] classThis = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassSuper_oPdG3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] classSuper = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassInterfaceCount_LVQg4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] classInterfaceCount = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassFieldCount_luXN5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] classFieldCount = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyClassMethodCount_uQeW6() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] classMethodCount = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyFieldDescr_JNzB7() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] fieldDescr = new int[0];
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWithEmptyMethodDescr_xHft8() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] methodDescr = new int[0];
        classBands.pack(System.out);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_suhz0_1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] class_this = new int[]{1, 2, 3};
        int[] class_super = new int[]{4, 5, 6};
        int[] class_interface_count = new int[]{7, 8, 9};
        CPClass[] class_interface = new CPClass[]{new CPClass(10), new CPClass(11), new CPClass(12)};
        int[] class_field_count = new int[]{13, 14, 15};
        int[] class_method_count = new int[]{16, 17, 18};
        CPNameAndType[] field_descr = new CPNameAndType[]{new CPNameAndType(19), new CPNameAndType(20), new CPNameAndType(21)};
        CPNameAndType[] method_descr = new CPNameAndType[]{new CPNameAndType(22), new CPNameAndType(23), new CPNameAndType(24)};
        classBands.pack(System.out);
        byte[] expected = encodeBandInt("class_this", class_this, Codec.DELTA5);
        expected = encodeBandInt("class_super", class_super, Codec.DELTA5);
        expected = encodeBandInt("class_interface_count", class_interface_count, Codec.DELTA5);
        expected = encodeBandInt("class_interface", class_interface, Codec.DELTA5);
        expected = encodeBandInt("class_field_count", class_field_count, Codec.DELTA5);
        expected = encodeBandInt("class_method_count", class_method_count, Codec.DELTA5);
        expected = encodeBandInt("field_descr", field_descr, Codec.DELTA5);
        expected = encodeBandInt("method_descr", method_descr, Codec.MDELTA5);
        assertArrayEquals(expected, System.out.toByteArray());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPackWriteCodeBands_wIWa1_1() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        int[] codeHeaders = new int[]{1, 2, 3};
        int[] codeMaxStack = new int[]{4, 5, 6};
        int[] codeMaxLocals = new int[]{7, 8, 9};
        int[] codeHandlerCount = new int[]{10, 11, 12};
        int[] codeHandlerStartP = new int[]{13, 14, 15};
        int[] codeHandlerEndPO = new int[]{16, 17, 18};
        int[] codeHandlerCatchPO = new int[]{19, 20, 21};
        CPEntry[] codeHandlerClass = new CPEntry[]{new CPEntry(22), new CPEntry(23), new CPEntry(24)};
        classBands.writeCodeBands(System.out);
        byte[] expected = encodeBandInt("codeHeaders", codeHeaders, Codec.BYTE1);
        expected = encodeBandInt("codeMaxStack", codeMaxStack, Codec.UNSIGNED5);
        expected = encodeBandInt("codeMaxLocals", codeMaxLocals, Codec.UNSIGNED5);
        expected = encodeBandInt("codeHandlerCount", codeHandlerCount, Codec.UNSIGNED5);
        expected = encodeBandInt("codeHandlerStartP", codeHandlerStartP, Codec.BCI5);
        expected = encodeBandInt("codeHandlerEndPO", codeHandlerEndPO, Codec.BRANCH5);
        expected = encodeBandInt("codeHandlerCatchPO", codeHandlerCatchPO, Codec.BRANCH5);
        expected = encodeBandInt("codeHandlerClass", codeHandlerClass, Codec.UNSIGNED5);
        assertArrayEquals(expected, System.out.toByteArray());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack1_JMyZ1() {
        ClassBands classBands = new ClassBands(new Segment(), 2, 2, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack2_sMEo2() {
        ClassBands classBands = new ClassBands(new Segment(), 3, 3, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack3_TXYe3() {
        ClassBands classBands = new ClassBands(new Segment(), 4, 4, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack4_kDnW4() {
        ClassBands classBands = new ClassBands(new Segment(), 5, 5, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack5_OBCh5() {
        ClassBands classBands = new ClassBands(new Segment(), 6, 6, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack6_AsKb6() {
        ClassBands classBands = new ClassBands(new Segment(), 7, 7, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack7_qqiA7() {
        ClassBands classBands = new ClassBands(new Segment(), 8, 8, false);
        classBands.pack(System.out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack8_iTFf8() {
        ClassBands classBands = new ClassBands(new Segment(), 9, 9, false);
        classBands.pack(System.out);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLocalVariable_xYRZ0() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLocalVariable("name", "desc", "signature", new Label(), new Label(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLocalVariableNullSignature_ukXW1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLocalVariable("name", "desc", null, new Label(), new Label(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLocalVariableNullName_ScEf2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLocalVariable(null, "desc", "signature", new Label(), new Label(), 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeAttribute_vpev0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        NewAttribute attribute = new NewAttribute("code", "layout", 1);
        classBands.addCodeAttribute(attribute);
        assertEquals("code", attribute.getLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeAttributeUnknownAttribute_hESY1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        NewAttribute attribute = new NewAttribute("unknown", "layout", 1);
        try {
            classBands.addCodeAttribute(attribute);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("No suitable definition for unknown", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeAttributeExistingAttribute_QQKl2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        NewAttribute attribute = new NewAttribute("code", "layout", 1);
        classBands.addCodeAttribute(attribute);
        classBands.addCodeAttribute(attribute);
        assertEquals(2, classBands.getCodeAttributeBands().size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethod_rFgP0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addEnclosingMethod("owner", "name", "desc");
    assertEquals(true, classBands.class_flags[index] == (1 << 18));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethod_rFgP0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addEnclosingMethod("owner", "name", "desc");
    assertEquals("owner", classBands.cpBands.getCPClass("owner").getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethod_rFgP0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addEnclosingMethod("owner", "name", "desc");
    assertEquals("name", classBands.cpBands.getCPNameAndType("name", "desc").getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodNull_mrPp1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addEnclosingMethod(null, "name", "desc");
    assertEquals(true, classBands.class_flags[index] == (1 << 18));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodNull_mrPp1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addEnclosingMethod(null, "name", "desc");
    assertEquals(null, classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute1_Qfza0() {
    Segment segment = new Segment();
    NewAttribute attribute = new NewAttribute("method", "layout", 1);
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethodAttribute(attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands_SyVy0() {
        Segment segment = new Segment();
        int numClasses = 5;
        int effort = 10;
        boolean stripDebug = true;
        ClassBands classBands = new ClassBands(segment, numClasses, effort, stripDebug);
        classBands.finaliseBands();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands1_tItW1() {
        Segment segment = new Segment();
        int numClasses = 0;
        int effort = 10;
        boolean stripDebug = true;
        ClassBands classBands = new ClassBands(segment, numClasses, effort, stripDebug);
        classBands.finaliseBands();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands2_nwcR2() {
        Segment segment = new Segment();
        int numClasses = 5;
        int effort = 0;
        boolean stripDebug = true;
        ClassBands classBands = new ClassBands(segment, numClasses, effort, stripDebug);
        classBands.finaliseBands();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands3_PMrE3() {
        Segment segment = new Segment();
        int numClasses = 5;
        int effort = 10;
        boolean stripDebug = false;
        ClassBands classBands = new ClassBands(segment, numClasses, effort, stripDebug);
        classBands.finaliseBands();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethod_ACSQ0() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_PUBLIC, "testMethod", "testDesc", "testSignature", new String[] {"testException"});
        assertEquals(Opcodes.ACC_PUBLIC, classBands.getMethodFlags().longValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithSignature_GAtI1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_PUBLIC, "testMethod", "testDesc", "testSignature", new String[] {"testException"});
        assertEquals("testSignature", classBands.getMethodSignature().get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithExceptions_BSBy2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_PUBLIC, "testMethod", "testDesc", "testSignature", new String[] {"testException1", "testException2"});
        assertEquals(2, classBands.getMethodExceptionNumber().get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithDeprecated_eOBZ3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_DEPRECATED, "testMethod", "testDesc", "testSignature", new String[] {"testException"});
        assertEquals(Opcodes.ACC_DEPRECATED, classBands.getMethodFlags().longValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithSynthetic_uYaJ4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_SYNTHETIC, "testMethod", "testDesc", "testSignature", new String[] {"testException"});
        assertEquals(1, classBands.getAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithoutFlags_ULJh5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(0, "testMethod", "testDesc", "testSignature", new String[] {"testException"});
        assertEquals(0, classBands.getMethodFlags().longValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithoutSignature_AWLc6() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_PUBLIC, "testMethod", "testDesc", null, new String[] {"testException"});
        assertEquals(0, classBands.getMethodSignature().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddMethodWithoutExceptions_mNFU7() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addMethod(Opcodes.ACC_PUBLIC, "testMethod", "testDesc", "testSignature", null);
        assertEquals(0, classBands.getMethodExceptionNumber().get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_ysKB0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("type", "layout", 1);
    classBands.addClassAttribute(attribute);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttributeUnknownType_mrTS1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("unknown", "layout", 1);
    try {
        classBands.addClassAttribute(attribute);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttributeExistingType_QTQX2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("type", "layout", 1);
    classBands.addClassAttribute(attribute);
    for (NewAttributeBands bands : classBands.getClassAttributeBands()) {
        if (bands.getAttributeName().equals(attribute.type)) {
            bands.addAttribute(attribute);
            int flagIndex = bands.getFlagIndex();
            boolean result = (classBands.getClass_flags()[0] & (1 << flagIndex)) != 0;
            assertTrue(result);
            return;
        }
    }
    fail("Expected attribute to be added");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_RNbZ0() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addParameterAnnotation(1, "desc", true, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_InEm1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addParameterAnnotation(1, "desc", false, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNullVisible_rhom2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addParameterAnnotation(1, "desc", true, null, null, null, null, null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNullNotVisible_Tzcb3() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addParameterAnnotation(1, "desc", false, null, null, null, null, null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCode_aXLh0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        classBands.addCode();
        assertEquals(1, classBands.getCodeHandlerCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCode_aXLh0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        classBands.addCode();
        assertNull(classBands.getCodeFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCode_aXLh0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        classBands.addCode();
        assertEquals(0, classBands.getCodeLocalVariableTableN());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeStripDebug_RVxk1_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, true);
        classBands.addCode();
        assertEquals(1, classBands.getCodeHandlerCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeStripDebug_RVxk1_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, true);
        classBands.addCode();
        assertNull(classBands.getCodeFlags());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeStripDebug_RVxk1_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, true);
        classBands.addCode();
        assertEquals(0, classBands.getCodeLocalVariableTableN());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass() throws Exception{
        classbands = new ClassBands(segment, 5, 1, false);
        cclass_this};
        cindex0;
        // Arrange
        when(cpClass1.isInnerClass()).thenReturn(true);
        when(cpClass2.isInnerClass()).thenReturn(false);
        when(cpClass3.isInnerClass()).thenReturn(true);
        when(cpClass4.isInnerClass()).thenReturn(false);
        when(cpClass5.isInnerClass()).thenReturn(true);
        // Act
        classbands.currentClassReferencesInnerClass(cpClass);
        // Assert
        assertEquals(2, classbands.classReferencesInnerClass.get(cpClass1).size());
        assertEquals(1, classbands.classReferencesInnerClass.get(cpClass2).size());
        assertEquals(2, classbands.classReferencesInnerClass.get(cpClass3).size());
        assertEquals(0, classbands.classReferencesInnerClass.get(cpClass4).size());
        assertEquals(2, cclassReferencesInnerClass).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassNullInner_ukUH0() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = null;
    classBands.currentClassReferencesInnerClass(inner);
    assertEquals(null, classBands.classReferencesInnerClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassSameClass_LcEI1() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("A"));
    classBands.currentClassReferencesInnerClass(inner);
    assertEquals(null, classBands.classReferencesInnerClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassNotInner_lNyE2() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("B"));
    CPClass outer = new CPClass(new CPUTF8("A"));
    classBands.currentClassReferencesInnerClass(inner);
    assertEquals(null, classBands.classReferencesInnerClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInner_mizd3_1() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("A$B"));
    CPClass outer = new CPClass(new CPUTF8("A"));
    classBands.currentClassReferencesInnerClass(inner);
    assertNotNull(classBands.classReferencesInnerClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInner_mizd3_2() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("A$B"));
    CPClass outer = new CPClass(new CPUTF8("A"));
    classBands.currentClassReferencesInnerClass(inner);
    assertTrue(classBands.classReferencesInnerClass.containsKey(outer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInnerWithSuperClass_PaRZ4_1() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("A$B$C"));
    CPClass outer = new CPClass(new CPUTF8("A$B"));
    classBands.currentClassReferencesInnerClass(inner);
    assertNotNull(classBands.classReferencesInnerClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInnerWithSuperClass_PaRZ4_2() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("A$B$C"));
    CPClass outer = new CPClass(new CPUTF8("A$B"));
    classBands.currentClassReferencesInnerClass(inner);
    assertTrue(classBands.classReferencesInnerClass.containsKey(outer));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassNullInner_zGSr0() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = null;
    classBands.currentClassReferencesInnerClass(inner);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassSameClass_zJYL1() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("com.example.Class"));
    classBands.currentClassReferencesInnerClass(inner);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInnerClass_nzro2() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("com.example.InnerClass"));
    classBands.currentClassReferencesInnerClass(inner);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassNotInnerClass_LdED3() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("com.example.NotInnerClass"));
    classBands.currentClassReferencesInnerClass(inner);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCurrentClassReferencesInnerClassInnerClassOfInnerClass_csvv4() {
    ClassBands classBands = new ClassBands(new Segment(), 0, 0, false);
    CPClass inner = new CPClass(new CPUTF8("com.example.InnerClassOfInnerClass"));
    classBands.currentClassReferencesInnerClass(inner);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumbering_IaUN0() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingEmptyList_vPGc1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingNullBciRenumbering_vOqy2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = null;
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingNullLabelsToOffsets_WKTo3() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    Map<Label, Integer> labelsToOffsets = null;
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingNullList_cxlG2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = null;
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    assertThrows(NullPointerException.class, () -> classBands.doBciRenumbering(bciRenumbering, labelsToOffsets));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingLargeList_sCdO4() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(1000);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithPrivateMethodCall_giiT1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    List<Integer> relative = new ArrayList<>();
    List<Integer> firstOffset = new ArrayList<>();
    List<Object> list = new ArrayList<>();
    Map<Label, Integer> labelsToOffsets2 = new HashMap<>();
    classBands.renumberDoubleOffsetBci(relative, firstOffset, list, bciRenumbering, labelsToOffsets2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithNullArgument_vZLi2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = null;
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    try {
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        Assertions.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithEmptyList_WKlK3() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    bciRenumbering.clear();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithSmallList_aryr4() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    IntList bciRenumbering = new IntList(5);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    for (int i = 0; i < 5; i++) {
        bciRenumbering.add(i);
    }
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumClassesProcessed_ZLQP0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, true);
        int result = classBands.numClassesProcessed();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField1_ayiU0_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(0, "name", "desc", null, null);
        assertEquals(0, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField1_ayiU0_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(0, "name", "desc", null, null);
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField2_ZQWR1_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", null, null);
        assertEquals(0, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField2_ZQWR1_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", null, null);
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField3_OytC2_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", null);
        assertEquals(131072, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField3_OytC2_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", null);
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField3_OytC2_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", null);
        assertEquals("signature", classBands.fieldSignature.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField4_nAiP3_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        assertEquals(131072, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField4_nAiP3_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField4_nAiP3_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        assertEquals("signature", classBands.fieldSignature.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField4_nAiP3_4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        assertEquals("value", classBands.fieldConstantValueKQ.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals(131072, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("signature", classBands.fieldSignature.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("value", classBands.fieldConstantValueKQ.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals(131072, classBands.tempFieldFlags.get(1).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_6() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("desc2", classBands.tempFieldDesc.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_7() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("signature2", classBands.fieldSignature.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField5_xpCe4_8() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name2", "desc2", "signature2", "value2");
        assertEquals("value2", classBands.fieldConstantValueKQ.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals(131072, classBands.tempFieldFlags.get(0).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("desc", classBands.tempFieldDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("signature", classBands.fieldSignature.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("value", classBands.fieldConstantValueKQ.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals(131072, classBands.tempFieldFlags.get(1).longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_6() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("desc2", classBands.tempFieldDesc.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_7() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("signature2", classBands.fieldSignature.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddField6_jDvE5_8() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc", "signature", "value");
        classBands.addField(Opcodes.ACC_DEPRECATED, "name", "desc2", "signature2", "value2");
        assertEquals("value2", classBands.fieldConstantValueKQ.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClass_gylQ0() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithFlags_Nioz1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.class_flags[0] = 1 << 17;
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithFieldFlags_DEsY2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempFieldFlags.add(1 << 19);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodFlags_TPnL3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 19);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithCodeFlags_SotC4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.codeFlags.add(1 << 3);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithCodeLineNumberTableFlags_evPl6() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.codeFlags.add(1 << 1);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodADFlags_cMCa7() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 25);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodRVPAFlags_Unlo8() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 23);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodRIPAFlags_uJON9() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 24);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodRVAFlags_qWnv10() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 21);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodRIABands_xaff11() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempMethodFlags.add(1 << 22);
        classBands.removeCurrentClass();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCurrentClassWithMethodSignature_skZa13() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.methodSignature.add("methodSignature");
        classBands.removeCurrentClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals(1, classBands.getMajorVersions()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals(2, classBands.getClassFlags()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals("className", classBands.getClassThis()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals("superName", classBands.getClassSuper()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_5() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals(2, classBands.getClassInterfaceCount()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_6() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals("interface1", classBands.getClassInterface()[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClass_auBo0_7() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals("interface2", classBands.getClassInterface()[0][1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassWithSignature_ojFZ1_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals(1 << 19, classBands.getClassFlags()[0] & (1 << 19));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassWithSignature_ojFZ1_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertEquals("signature", classBands.getClassSignature()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassWithSyntheticClass_CvkA2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", null, "superName", new String[]{"interface1", "interface2"});
        assertTrue(classBands.isAnySyntheticClasses());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassWithoutSignature_DQPN3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", null, "superName", new String[]{"interface1", "interface2"});
        assertEquals(0, classBands.getClassFlags()[0] & (1 << 19));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddClassWithoutSyntheticClass_EerC4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 5, false);
        classBands.addClass(1, 2, "className", "signature", "superName", new String[]{"interface1", "interface2"});
        assertFalse(classBands.isAnySyntheticClasses());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodNullTempMethodRVPA_GGWR0() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.endOfMethod();
    Assertions.assertNull(classBands.getTempMethodRVPA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodNullTempMethodRIPA_NueT1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.setTempMethodRIPA(new Object());
    classBands.endOfMethod();
    Assertions.assertNull(classBands.getTempMethodRIPA());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodCodeFlagsSizeZero_FDGR2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.endOfMethod();
    Assertions.assertTrue(classBands.getCodeFlags().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodCodeFlagsSizeOne_hANw3() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.getCodeFlags().add(Long.valueOf(1));
    classBands.endOfMethod();
    Assertions.assertTrue(classBands.getCodeFlags().size() == 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodCodeFlagsSizeMoreThanOne_bQUJ4() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.getCodeFlags().add(Long.valueOf(1));
    classBands.getCodeFlags().add(Long.valueOf(2));
    classBands.endOfMethod();
    Assertions.assertTrue(classBands.getCodeFlags().size() == 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_CLASSVisible_sUSG0() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_CLASSNotVisible_bYoz1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", false, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_FIELDVisible_JtHy2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_FIELDNotVisible_RpWV3() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", false, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_METHODVisible_SZJr4() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_METHODNotVisible_VwZO5() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", false, Arrays.asList("nameRU"), Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_CLASSVisibleWithNullNameRU_Ukrj6() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, null, Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_CLASSNotVisibleWithNullNameRU_djQF7() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", false, null, Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMetadataBandGroupCONTEXT_FIELDVisibleWithNullNameRU_ABBx8() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, null, Arrays.asList("tags"), Arrays.asList("values"), Arrays.asList(1), Arrays.asList("nestTypeRS"), Arrays.asList("nestNameRU"), Arrays.asList(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandler_qyRd0_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = "testType";
        classBands.addHandler(start, end, handler, type);
        assertEquals(1, classBands.getCodeHandlerCount().get(classBands.getCodeHandlerCount().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandler_qyRd0_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = "testType";
        classBands.addHandler(start, end, handler, type);
        assertEquals(start, classBands.getCodeHandlerStartP().get(classBands.getCodeHandlerStartP().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandler_qyRd0_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = "testType";
        classBands.addHandler(start, end, handler, type);
        assertEquals(end, classBands.getCodeHandlerEndPO().get(classBands.getCodeHandlerEndPO().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandler_qyRd0_4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = "testType";
        classBands.addHandler(start, end, handler, type);
        assertEquals(handler, classBands.getCodeHandlerCatchPO().get(classBands.getCodeHandlerCatchPO().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandler_qyRd0_5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = "testType";
        classBands.addHandler(start, end, handler, type);
        assertEquals(type == null ? null : classBands.getCpBands().getCPClass(type), classBands.getCodeHandlerClass().get(classBands.getCodeHandlerClass().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandlerNullType_uiAf1_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = null;
        classBands.addHandler(start, end, handler, type);
        assertEquals(1, classBands.getCodeHandlerCount().get(classBands.getCodeHandlerCount().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandlerNullType_uiAf1_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = null;
        classBands.addHandler(start, end, handler, type);
        assertEquals(start, classBands.getCodeHandlerStartP().get(classBands.getCodeHandlerStartP().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandlerNullType_uiAf1_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = null;
        classBands.addHandler(start, end, handler, type);
        assertEquals(end, classBands.getCodeHandlerEndPO().get(classBands.getCodeHandlerEndPO().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandlerNullType_uiAf1_4() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = null;
        classBands.addHandler(start, end, handler, type);
        assertEquals(handler, classBands.getCodeHandlerCatchPO().get(classBands.getCodeHandlerCatchPO().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddHandlerNullType_uiAf1_5() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        Label start = new Label();
        Label end = new Label();
        Label handler = new Label();
        String type = null;
        classBands.addHandler(start, end, handler, type);
        assertEquals(null, classBands.getCodeHandlerClass().get(classBands.getCodeHandlerClass().size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnySyntheticMethods_WynN0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        boolean result = classBands.isAnySyntheticMethods();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddSourceFile1_zieC0() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addSourceFile("path/to/file.java");
        assertEquals("path/to/file.java", classBands.getSourceFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddSourceFile2_Stkn1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addSourceFile("path/to/file$InnerClass.java");
        assertEquals("path/to/file.java", classBands.getSourceFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddSourceFile3_gqAf2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addSourceFile("path/to/otherFile.java");
        assertEquals("path/to/otherFile.java", classBands.getSourceFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumber_rEVa0_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        assertEquals(1, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumber_rEVa0_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        assertEquals(1, classBands.codeLineNumberTableLine.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumber_rEVa0_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        assertEquals("start", classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumberRemoveFlag_RCPd1_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        classBands.addLineNumber(2, new Label("start"));
        assertEquals(1, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumberRemoveFlag_RCPd1_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        classBands.addLineNumber(2, new Label("start"));
        assertEquals(2, classBands.codeLineNumberTableLine.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddLineNumberRemoveFlag_RCPd1_3() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.addLineNumber(1, new Label("start"));
        classBands.addLineNumber(2, new Label("start"));
        assertEquals("start", classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClass_QdCe0_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempFieldDesc.add(new CPNameAndType());
        classBands.tempFieldFlags.add(new Long(1));
        classBands.tempMethodDesc.add(new CPNameAndType());
        classBands.tempMethodFlags.add(new Long(1));
        classBands.endOfClass();
        assertEquals(1, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClass_QdCe0_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.tempFieldDesc.add(new CPNameAndType());
        classBands.tempFieldFlags.add(new Long(1));
        classBands.tempMethodDesc.add(new CPNameAndType());
        classBands.tempMethodFlags.add(new Long(1));
        classBands.endOfClass();
        assertEquals(1, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClassWithNoFieldsAndMethods_nrqJ1_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.endOfClass();
        assertEquals(0, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClassWithNoFieldsAndMethods_nrqJ1_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        classBands.endOfClass();
        assertEquals(0, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClassWithMultipleFieldsAndMethods_qxfk2_1() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        for (int i = 0; i < 5; i++) {
            classBands.tempFieldDesc.add(new CPNameAndType());
            classBands.tempFieldFlags.add(new Long(1));
            classBands.tempMethodDesc.add(new CPNameAndType());
            classBands.tempMethodFlags.add(new Long(1));
        }
        classBands.endOfClass();
        assertEquals(5, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEndOfClassWithMultipleFieldsAndMethods_qxfk2_2() {
        ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
        for (int i = 0; i < 5; i++) {
            classBands.tempFieldDesc.add(new CPNameAndType());
            classBands.tempFieldFlags.add(new Long(1));
            classBands.tempMethodDesc.add(new CPNameAndType());
            classBands.tempMethodFlags.add(new Long(1));
        }
        classBands.endOfClass();
        assertEquals(5, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnySyntheticFields_FCRw0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        boolean result = classBands.isAnySyntheticFields();
        assertTrue(result);
    }
}