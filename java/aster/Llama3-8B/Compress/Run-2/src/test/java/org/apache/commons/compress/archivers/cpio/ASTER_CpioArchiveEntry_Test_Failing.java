/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.Objects;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDevice1_PcNu0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4200);
        assertTrue(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDevice2_RpxW1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4201);
        assertFalse(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime_vulx0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime3_FTlU2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime4_xJHp3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_BTeZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(123);
        assertEquals(123, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID2_LGog1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(456);
        assertEquals(456, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID3_OnYS2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(789);
        assertEquals(789, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID4_elKy3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(0);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary_RMHj0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary1_YsBm1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary5_yXZs5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary6_mcdh6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary7_IyvL7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name",4L);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary8_XvCV8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork1_uzNm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.isNetwork();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork2_qpJG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x8000);
    boolean result = entry.isNetwork();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_digV0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(123);
        assertEquals(123, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode2_NAbe1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(456);
        assertEquals(456, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode3_pRpP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(789);
        assertEquals(789, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode4_oLxk3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(0);
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode5_Cwnt4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(-1);
        assertEquals(-1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode6_nnrz5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode7_Wtml6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setInode(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMaj_rdWt0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajFileInput_fCJx5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMaj_utZB0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(123);
        assertEquals(123, entry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajFile_QZDk3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        entry.setRemoteDeviceMaj(901);
        assertEquals(901, entry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajFileString_ddUG7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
        entry.setRemoteDeviceMaj(444);
        assertEquals(444, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_SaXv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x4000);
    boolean result = entry.isDirectory();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotDirectory_SLCy1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x8000);
    boolean result = entry.isDirectory();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMin_AyuC0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate1_NqyC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate2_RDnd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 1000L);
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate4_AESj3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkTrue_OnFt0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0120000 | 040000));
    boolean result = entry.isSymbolicLink();
    assert (result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkFalse_KEbg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0120000 | 010000));
    boolean result = entry.isSymbolicLink();
    assert (result == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceOldFormat_aUsZ0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceNewFormat_yvdn1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2);
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithSize_ANma3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "test", 1024);
        assertEquals(1024, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithNullName_JYHN4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, null, 1024);
        assertEquals(1024, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceWithPath_fdwL5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID_IlWm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID3_RrHk2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID4_OmMY3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMaj_Hidt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat5_yNkj4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "name");
        assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat10_lkiA9() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_hGtq0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setChksum(0x12345678L);
        assertEquals(0x12345678L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumNegativeValue_TYrl2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setChksum(-1L);
        assertEquals(0xFFFFFFFFL, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumLargeValue_QnbQ3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setChksum(0x1234567890123456L);
        assertEquals(0x12345678L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumZeroValue_iFdI4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setChksum(0L);
        assertEquals(0L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_RPey1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "CPIO_TRAILER", 0);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value =32768, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_TMcU2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)32768, "test", 0);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice_mBnP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceOldFormat_kQAL1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024);
        assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceNoFormat_JsLK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceFile_sfzq4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceSize_VUBt5() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 1024);
        assertEquals(0, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_SPmo0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinNewFormatFile_MHkq3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullName_jgaC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNonNullNameWithCharset_LYsy2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", (short)1);
    assertEquals(0, entry.getHeaderPadCount(Charset.forName("UTF-8")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe1_Smyv0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1000);
    boolean result = entry.isPipe();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe2_XORp1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1001);
    boolean result = entry.isPipe();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMin_HnfC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(123L);
        assertEquals(123L, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinNewFormatFileInput_oYZn6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        entry.setDeviceMin(333L);
        assertEquals(333L, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize6_uita5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize8_oGZz7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_RYqe0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameEmpty_isBz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("");
        assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_fFAL2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName(null);
        assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameSame_EUtg3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile1_rBVh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    boolean result = entry.isRegularFile();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile2_DLFx1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
    boolean result = entry.isRegularFile();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidSize_alpY1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    try {
        entry.setSize(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size <(-1)", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_FAaj0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(1);
        assertSame(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice2_Joxg1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 1);
        entry.setDevice(1);
        assertSame(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice3_GvwK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        entry.setDevice(1);
        assertSame(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice4_dWkD3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        entry.setDevice(1);
        assertSame(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice7_tHNy6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        entry.setDevice(1);
        assertSame(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket1_AEzs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x1200);
    boolean result = entry.isSocket();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket2_PkCB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x1201);
    boolean result = entry.isSocket();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_ZjJZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInode_fxXG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndPath_nVWI4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test").toPath(), "test");
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndFile_IqBS6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_Gslb0() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_uETy1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 10L);
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode4_jPpn3() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount1_zwJT0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_PmLe2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(1, entry.getHeaderPadCount(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_EsRP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_obQZ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount4_ASVn3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDevice_ySsF0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceOldFormat_VfRF1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "test", 10L);
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceShortFormat_XzUA3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "test");
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceFile_QPil4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceString_nSfh5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test");
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceLongSize_FaYd6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test", 10L);
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajNewFormatFile_LtLl5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("path"), "name");
        cpioArchiveEntry.setDeviceMaj(1L);
        assertEquals(1L, cpioArchiveEntry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID_LSeM0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(123);
        assertEquals(123, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID2_mEWU1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(456);
        assertEquals(456, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID3_tWat2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(789);
        assertEquals(789, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID4_qEOG3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(0);
        assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID5_Hlfn4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID6_FvSH5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID7_jbtO6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(1234567890L);
        assertEquals(1234567890L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_Thqn0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        entry.setMode(0x40000);
        assertEquals(0x40000, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeUnknownMode_nuQy1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        try {
            entry.setMode(0x12345678);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_Vpqe0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID3_AUpm2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID4_JWrG3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID5_DPJM4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 123);
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_HyzH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize3_Yixc2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize5_oMLf4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_EmQR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setNumberOfLinks(1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinksForDirectory_Vllc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        entry.isDirectory();
        assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinksForFile_DkcG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice_VVVf0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4200);
        assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCharacterDevice_iZjL1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4201);
        assertFalse(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithNewFormatAndFile_fEFW3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        cpioArchiveEntry.setRemoteDeviceMin(40L);
        assertEquals(40L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithoutNewFormatAndName_FVqF5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "test", 100L);
        cpioArchiveEntry.setRemoteDeviceMin(60L);
        assertEquals(60L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithoutNewFormatAndFileInput_mVKs7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("test"), "test");
        cpioArchiveEntry.setRemoteDeviceMin(80L);
        assertEquals(80L, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksumOldFormat_gdSg2_BPDu0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
    try {
        cpioArchiveEntry.getChksum();
        org.junit.Assert.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        org.junit.Assert.assertTrue(e instanceof UnsupportedOperationException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary3_odQX3_UiQE0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0);
    assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_PGff2_JmvL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)0, "test", 123L);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName4_cgBB3_MVOr1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)0, new File("test"), "123");
    assertEquals("123", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate6_qrvc5_Jiuu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputPath"), "entryName");
    Date lastModifiedDate = entry.getLastModifiedDate();
    assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice5_YDYk4_sBDV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0);
    entry.setDevice(1);
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithInodeAndFileAndNameAndSizeAndPathAndOptionsAndFormat_xQKX11_IIrX0() throws IOException {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test");
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_OBuB2_QYdB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", new File("test").length());
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode6_WLCC5_Rnax0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode7_UmNZ6_DoeK1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test", 10L);
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode8_LInG7_IFDf0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, new File("test"), "test");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_eWSM0_AzpK0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(123456789L);
    assertEquals(123456789L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime2_UgGN1_Tqof1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(987654321L);
    assertEquals(987654321L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime3_eCFJ2_nBvn1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(111111111L);
    assertEquals(111111111L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime4_HzJQ3_otvP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(222222222L);
    assertEquals(222222222L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime5_TagM4_fEPe1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(333333333L);
    assertEquals(333333333L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime6_OwNf5_TYDE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(444444444L);
    assertEquals(444444444L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime7_YYTf6_xMHg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(555555555L);
    assertEquals(555555555L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime8_InLE7_MqZu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(666666666L);
    assertEquals(666666666L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime9_NDic8_fBNC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(777777777L);
    assertEquals(777777777L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime10_xvLr9_SsPt0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(888888888L);
    assertEquals(888888888L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime11_JCUx10_RRLU1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(999999999L);
    assertEquals(999999999L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime12_dfzY11_lnWt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(101010101L);
    assertEquals(101010101L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime14_aiCN13_Ftrf0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(121212121L);
    assertEquals(121212121L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime16_KjgK15_USEI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(141414141L);
    assertEquals(141414141L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize6_bvAi5_NVtz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksForSymbolicLink_CbOd2_tkIP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setRemoteDeviceMin(3);
    assertEquals(3, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDevicePath_bFIC2_NMlb0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("test").toPath(), "test");
        cpioArchiveEntry.setRemoteDevice(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDevice());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMajNewFormatPath_ZLFb2_jwYC0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("path").toPath(), "name");
        cpioArchiveEntry.setRemoteDeviceMin(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDeviceMin());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMajNewFormatPathOptions_WyzX3_HCME0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("path").toPath(), "name", LinkOption.NOFOLLOW_LINKS);
        cpioArchiveEntry.setRemoteDeviceMin(1L);
        assertEquals(1L, cpioArchiveEntry.getRemoteDeviceMin());
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinWithNewFormatAndPath_pmlm2_zruM0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test");
        cpioArchiveEntry.setRemoteDeviceMin(30L);
        assertEquals(30L, cpioArchiveEntry.getRemoteDeviceMin());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary2_sils2_fid1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary7_IyvL7_fid1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_fQeJ2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat9_AxQg8_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123L);
        assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_TMcU2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNonNullName_rJRH1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getHeaderPadCount(Charset.defaultCharset()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNonNullNameWithCharset_LYsy2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", (short) 0);
    assertEquals(0, entry.getHeaderPadCount(Charset.forName("UTF-8")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_aOZX0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize2_Kmia1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 123456L);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize3_NVSQ2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize5_mYOa4_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize7_kKHP6_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123456L);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_azLx1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
        assertEquals(3, entry.getHeaderPadCount(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_PmLe2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_pfFA2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize4_PKIi3_vEWP0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "entryName");
    assertEquals(0, entry.getHeaderSize());
}
}