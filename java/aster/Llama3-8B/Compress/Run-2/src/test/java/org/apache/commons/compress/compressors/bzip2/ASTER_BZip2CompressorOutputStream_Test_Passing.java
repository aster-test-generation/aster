/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorOutputStream_Test_Passing {
    @Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteClosed_yeyD1() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(out);
        compressor.close();
        compressor.write(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStreamAndBlockSorter_CpuA2_0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
        });
        compressor.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStream_NSTT0_0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
        }, 10);
        compressor.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStream_NSTT0_fid2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
        }, 10);
        compressor.finish();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStreamAndBlockSorter_CpuA2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
            @Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void write(int b) throws IOException {
            }
        });
        compressor.finish();
    }
@Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void write(int b) throws IOException {
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStreamAndBlockSorterAndData_bxAl4() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
        }, 10);
        compressor.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSize_kznf0() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100000);
        int blockSize = compressorOutputStream.getBlockSize();
        assert blockSize == 100000;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithoutBlockSize_vqEz1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        int blockSize = compressorOutputStream.getBlockSize();
        assert blockSize == 90000;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteValidInput_gfyo0() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressor.write(buf, 0, buf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteInvalidOffset_ELhd1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    try {
        compressor.write(buf, -1, buf.length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteInvalidLength_bjvQ2() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    try {
        compressor.write(buf, 0, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteExceedingBufferLength_hVOc3() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    try {
        compressor.write(buf, 0, buf.length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteClosedStream_iZcs4() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.close();
    try {
        compressor.write(new byte[] {1, 2, 3}, 0, 3);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEmptyBuffer_NOTN5() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.write(new byte[0], 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteValidData_tXgH0() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressor.write(buf, 0, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteInvalidOffset_gYWh1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    try {
        compressor.write(buf, -1, 5);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteInvalidLength_rVfm2() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    try {
        compressor.write(buf, 0, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_MPRv3() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    byte[] buf = new byte[1024];
    for (int i = 0; i < 1024; i++) {
        buf[i] = (byte) i;
    }
    compressor.write(buf, 0, 1024);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteClosedStream_jYgr4() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    compressor.close();
    try {
        compressor.write(new byte[] {1, 2, 3, 4, 5}, 0, 5);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNullBuffer_LNrj5() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    try {
        compressor.write(null, 0, 5);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_pEag0() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, 0, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeOffset_JBGU1() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        try {
            compressor.write(buf, -1, 5);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeLength_wwYG2() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        try {
            compressor.write(buf, 0, -1);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOffsetPlusLengthGreaterThanBufLength_zjeh3() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        try {
            compressor.write(buf, 3, 5);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteClosedStream_XRZk4() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        compressor.close();
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        try {
            compressor.write(buf, 0, 5);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteZeroLength_JgNe5() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteValidData_EWPR0() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    buf[0] = 1;
    buf[1] = 2;
    buf[2] = 3;
    buf[3] = 4;
    buf[4] = 5;
    buf[5] = 6;
    buf[6] = 7;
    buf[7] = 8;
    buf[8] = 9;
    buf[9] = 10;
    compressor.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNullBuffer_pBJF1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.write(null, 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNegativeOffset_LdbC2() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    compressor.write(buf, -1, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNegativeLength_jMMv3() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    compressor.write(buf, 0, -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeLength_zJJn4() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    compressor.write(buf, 0, 1000);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteClosedStream_kFqO5() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.close();
    byte[] buf = new byte[10];
    compressor.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNullBuf_XiYr1() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        compressor.write(null, 0, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeOffset_lCxt2() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, -1, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeLength_vIig3() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, 0, -1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteLargeLength_SrWQ4() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, 0, 100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteClosedStream_UfnC5() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(bos);
        compressor.close();
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        compressor.write(buf, 0, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_Bcmk0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 0, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_VTOM1() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 0, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_pMKs2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 1, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite4_kPFG3() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 1, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite5_ZZgN4() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite6_pwWy5() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressor.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_PkBG0() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_fxKb1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 1, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_vUDa2() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite4_idFt3() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite5_QuzW4() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 3, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite6_inVl5() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 4);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNullInput_QyMO1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.write(null, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOffsetPlusLengthGreaterThanBufferLength_oNsm4() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    compressor.write(buf, 5, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_rwfk3() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[1000];
    for (int i = 0; i < 1000; i++) {
        buf[i] = (byte) i;
    }
    compressor.write(buf, 0, 1000);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_UndJ0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressor.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_QOlC1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 1, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_nFRD0() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite1_ytBD1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_Errh2() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 5, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_oQwX3() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 5, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite4_KFIQ4() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite5_JfhM5() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite6_QDgA6() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 10, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite7_WugH7() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 10, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite8_fKte8() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite9_UscC9() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite10_ReBl10() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite11_CVRl11() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite12_wOVu12() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite13_wrtw13() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite14_CtrQ14() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
        compressorOutputStream.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteValidInput_vQOj0() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        for (int i = 0; i < 10; i++) {
            buf[i] = (byte) i;
        }
        compressorOutputStream.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNullInput_ZABr1() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        compressorOutputStream.write(null, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeOffset_Aywy2() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        for (int i = 0; i < 10; i++) {
            buf[i] = (byte) i;
        }
        compressorOutputStream.write(buf, -1, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeLength_UKWe3() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        for (int i = 0; i < 10; i++) {
            buf[i] = (byte) i;
        }
        compressorOutputStream.write(buf, 0, -1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOffsetPlusLengthGreaterThanBufferLength_SOZM4() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        for (int i = 0; i < 10; i++) {
            buf[i] = (byte) i;
        }
        compressorOutputStream.write(buf, 0, 100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteClosedStream_Squj5() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        compressorOutputStream.close();
        byte[] buf = new byte[10];
        for (int i = 0; i < 10; i++) {
            buf[i] = (byte) i;
        }
        try {
            compressorOutputStream.write(buf, 0, 10);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_VMPQ0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 0x31;
        buf[1] = (byte) 0x41;
        buf[2] = (byte) 0x59;
        buf[3] = (byte) 0x26;
        buf[4] = (byte) 0x53;
        buf[5] = (byte) 0x59;
        buf[6] = (byte) 0x31;
        buf[7] = (byte) 0x41;
        buf[8] = (byte) 0x59;
        buf[9] = (byte) 0x26;
        compressor.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_UQci1() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        buf[0] = (byte) 0x31;
        buf[1] = (byte) 0x41;
        buf[2] = (byte) 0x59;
        buf[3] = (byte) 0x26;
        buf[4] = (byte) 0x53;
        buf[5] = (byte) 0x59;
        buf[6] = (byte) 0x31;
        buf[7] = (byte) 0x41;
        buf[8] = (byte) 0x59;
        buf[9] = (byte) 0x26;
        compressor.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_kJmK2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 0x31;
        buf[1] = (byte) 0x41;
        buf[2] = (byte) 0x59;
        buf[3] = (byte) 0x26;
        buf[4] = (byte) 0x53;
        buf[5] = (byte) 0x59;
        buf[6] = (byte) 0x31;
        buf[7] = (byte) 0x41;
        buf[8] = (byte) 0x59;
        buf[9] = (byte) 0x26;
        compressor.write(buf, 5, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite4_LgNl3() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream());
        byte[] buf = new byte[10];
        buf[0] = (byte) 0x31;
        buf[1] = (byte) 0x41;
        buf[2] = (byte) 0x59;
        buf[3] = (byte) 0x26;
        buf[4] = (byte) 0x53;
        buf[5] = (byte) 0x59;
        buf[6] = (byte) 0x31;
        buf[7] = (byte) 0x41;
        buf[8] = (byte) 0x59;
        buf[9] = (byte) 0x26;
        compressor.write(buf, 5, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite5_ErCG4() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 0x31;
        buf[1] = (byte) 0x41;
        buf[2] = (byte) 0x59;
        buf[3] = (byte) 0x26;
        buf[4] = (byte) 0x53;
        buf[5] = (byte) 0x59;
        buf[6] = (byte) 0x31;
        buf[7] = (byte) 0x41;
        buf[8] = (byte) 0x59;
        buf[9] = (byte) 0x26;
        compressor.write(buf, 0, -1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithZeroLength_JUKn1() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        compressor.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativeLength_qEOA2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        try {
            compressor.write(buf, 0, -1);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNegativeOffset_VsRf3() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        try {
            compressor.write(buf, -1, 10);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithClosedStream_JfRV5() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        compressor.close();
        byte[] buf = new byte[10];
        try {
            compressor.write(buf, 0, 10);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeOffset_NSgb1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        try {
            compressorOutputStream.write(buf, -1, 10);
            Assertions.fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteNegativeLength_pSpQ2() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        try {
            compressorOutputStream.write(buf, 0, -1);
            Assertions.fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOffsetPlusLengthGreaterThanBufLength_djXz3() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        try {
            compressorOutputStream.write(buf, 5, 15);
            Assertions.fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteClosedStream_YSEu4() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        compressorOutputStream.close();
        byte[] buf = new byte[10];
        try {
            compressorOutputStream.write(buf, 0, 10);
            Assertions.fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteSmallBuffer_jNZG5() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[5];
        compressorOutputStream.write(buf, 0, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteLargeBuffer_KDcb6() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[100];
        compressorOutputStream.write(buf, 0, 100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite6_IXDr5() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_TkMi0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 0, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_jpat1() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 1, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_FrQS2() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 2, 3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite4_hjhm3() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 0, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite5_UVXC4() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 0, 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite6_ydzA5() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = (byte) 1;
        buf[1] = (byte) 2;
        buf[2] = (byte) 3;
        compressor.write(buf, 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_XYyP0() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 0, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite2_pBdf1() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 5, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite3_ejhJ2() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite4_lGOD3() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 5, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite5_vAuE4() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 10, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite6_rlnV5() throws IOException {
    BZip2CompressorOutputStream out = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
    byte[] buf = new byte[10];
    out.write(buf, 0, -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_ITjw2() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
        byte[] buf = new byte[10];
        buf[0] = 1;
        buf[1] = 2;
        buf[2] = 3;
        compressorOutputStream.write(buf, 0, 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNegativeOffset_WMQE1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    try {
        compressor.write(buf, -1, 3);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteNegativeLength_UuNA2() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    try {
        compressor.write(buf, 0, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOffsetPlusLengthGreaterThanBufLength_JSTx3() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    byte[] buf = new byte[10];
    try {
        compressor.write(buf, 0, 11);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteClosedStream_ABND4() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.close();
    try {
        compressor.write(new byte[10], 0, 3);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_DPdi0() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(out);
        compressor.write(10);
        assertEquals(1, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithClosed_DeMc0() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithRunLength_XEXD1() throws IOException {
    BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 100);
    compressor.setRunLength(10);
    compressor.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutPutStream_NSTT0() throws IOException {
        BZip2CompressorOutputStream compressor = new BZip2CompressorOutputStream(new OutputStream() {
            @Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void write(int b) throws IOException {
            }
        }, 10);
        compressor.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChooseBlockSizePositiveInput_TcaL0() {
    long inputLength = 132000 * 10;
    int result = BZip2CompressorOutputStream.chooseBlockSize(inputLength);
    Assertions.assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChooseBlockSizeZeroInput_tIUy1() {
    long inputLength = 0;
    int result = BZip2CompressorOutputStream.chooseBlockSize(inputLength);
    Assertions.assertEquals(BZip2CompressorOutputStream.MAX_BLOCKSIZE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_HoPH0() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
        compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseAlreadyClosed_GnqF1() throws IOException {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 10);
        compressorOutputStream.close();
        assertThrows(IOException.class, () -> compressorOutputStream.close());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseNullOutputStream_UBHX2() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(null, 10);
        assertThrows(NullPointerException.class, compressorOutputStream::close);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseInvalidBlockSize_SqPb3() {
        BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), -1);
        assertThrows(IllegalArgumentException.class, compressorOutputStream::close);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithBlocksize_xhYC0() throws IOException {
    BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(new ByteArrayOutputStream(), 1024);
    compressorOutputStream.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithBlocksize_CqQx2() throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(out, 1024);
    compressorOutputStream.flush();
    assertEquals(true, out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithoutBlocksize_OeYB3() throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    BZip2CompressorOutputStream compressorOutputStream = new BZip2CompressorOutputStream(out);
    compressorOutputStream.flush();
    assertEquals(true, out.size() > 0);
}
}
@Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void write(int b) throws IOException {
            }
}