/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
    private static ZipLong fileTimeToZipLong(final FileTime time)
    {
        return time == null ? null : unixTimeToZipLong(TimeUtils.toUnixTime(time));
    }
    private static ZipLong unixTimeToZipLong(final long unixTime)
    {
        if (!TimeUtils.isUnixTime(unixTime)) {
            throw new IllegalArgumentException("X5455 timestamps must fit in a signed 32 bit integer: " + unixTime);
        }
        return new ZipLong(unixTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_RoQu0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1643723400);
    extendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlags_euRz0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        byte actual = obj.getFlags();
        assertEquals(actual, (byte) 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_bit0_modifyTimePresent_false_ymeO1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        boolean bit0_modifyTimePresent = false;
        ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
        assertEquals(new ZipShort(1), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_wuOI0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        int result = obj.hashCode();
        assertEquals(result, -123 * (0 & 0x07));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_cZEc0() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp obj2 = obj1;
    boolean result = obj1.equals(obj2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_iHoP1() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    boolean result = obj1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_GlVB2() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    String obj2 = new String();
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_BLjT0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date date = new Date();
        obj.setCreateJavaTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_MjiH0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date d = new Date();
        obj.setCreateJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeNull_eAQd1() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        obj.setCreateJavaTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeInvalidUnixTime_KeOd2() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date d = new Date();
        long unixTime = d.getTime() / 1000 + 1;
        obj.setCreateJavaTime(new Date(unixTime * 1000));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_fAbC0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x.setModifyJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_InvalidLength_hoqd0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] data = new byte[0];
        try {
            extendedTimestamp.parseFromLocalFileData(data, 0, 0);
            assert false;
        } catch (ZipException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_ebov0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455_ExtendedTimestamp.setModifyJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeNull_nZiB1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp.setModifyJavaTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTimeInvalidUnixTime_UyiU2() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date d = new Date();
        long unixTime = d.getTime() / 1000 + 1;
        x5455_ExtendedTimestamp.setModifyJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringFlagsOnly_mmdY0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        String result = x.toString();
        assert result.equals("0x5455 Zip Extra Field: Flags=0 ");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_TAEt0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        try {
            extendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTime_pJco0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(1643723400L);
        extendedTimestamp.setCreateFileTime(time);
        assertEquals(fileTimeToZipLong(time), extendedTimestamp.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTime_lInB0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date result = obj.getAccessJavaTime();
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyFileTime_vzhV0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(1234567890);
        x5455_ExtendedTimestamp.setModifyFileTime(time);
        assertEquals(unixTimeToZipLong(TimeUtils.toUnixTime(time)), x5455_ExtendedTimestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyFileTimeNull_TBTw1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp.setModifyFileTime(null);
        assertNull(x5455_ExtendedTimestamp.getModifyFileTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyTimeNull_WCyD0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = null;
        x.setModifyTime(l);
        assert x.getModifyTime() == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyTimeNotNull_GNeM1() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = new ZipLong(new byte[8]);
        x.setModifyTime(l);
        assert x.getModifyTime() != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit2_createTimePresentFalse_eWcC1() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        boolean result = obj.isBit2_createTimePresent();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_btdd0() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) obj.clone();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_eYbY0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x.setAccessJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_wsjK0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date date = new Date();
        obj.setAccessJavaTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeNull_muDY1() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        obj.setAccessJavaTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeInvalidUnixTime_otZU2() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date date = new Date();
        long unixTime = date.getTime() / 1000 + 1;
        obj.setAccessJavaTime(new Date(unixTime * 1000));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_eYHw0_fXup0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    Date d = new Date(System.currentTimeMillis());
    obj.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlags4_ONnM3_atUv0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags((byte) (0x08 | 0x04 | 0x02)); // MODIFY_TIME_BIT, ACCESS_TIME_BIT, CREATE_TIME_BIT
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimeNotPresent_Scdy1_ejUq0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(null);
    byte[] result = obj.getLocalFileDataData();
    Assertions.assertEquals(result[0], (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_AccessTimePresent_UyGV2_ZFSq0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    Assertions.assertEquals(result[0], (byte) 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_PFmp4_cUkh0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentCreateTime_Hcfy5_tbuP0() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp obj2 = new X5455_ExtendedTimestamp();
    obj2.setAccessJavaTime(new Date(System.currentTimeMillis() + 1000));
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentAccessTime_mBaJ6_Cppm0() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp obj2 = new X5455_ExtendedTimestamp();
    obj2.setAccessJavaTime(new Date()); 
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_yOJG0_sbJY0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    Date d = new Date();
    extendedTimestamp.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidLength_VtcL1_Wptm0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[1];
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 1);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimePresent_izUe2_NHee0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[9];
    data[0] = (byte) 1;
    data[1] = 0;
    data[2] = 0;
    data[3] = 0;
    data[4] = 0;
    data[5] = 0;
    data[6] = 0;
    data[7] = 0;
    data[8] = 0;
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 9);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AccessTimePresent_dWdb3_Zhnq0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[9];
    data[0] = (byte) 2;
    data[1] = 0;
    data[2] = 0;
    data[3] = 0;
    data[4] = 0;
    data[5] = 0;
    data[6] = 0;
    data[7] = 0;
    data[8] = 0;
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 9);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_CreateTimePresent_XuDb4_kBNE0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[9];
    data[0] = (byte) 4;
    data[1] = 0;
    data[2] = 0;
    data[3] = 0;
    data[4] = 0;
    data[5] = 0;
    data[6] = 0;
    data[7] = 0;
    data[8] = 0;
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 9);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimeAndAccessTimePresent_Vzfy5_ukoy0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[12];
    data[0] = (byte) 3;
    data[1] = 0;
    data[2] = 0;
    data[3] = 0;
    data[4] = 0;
    data[5] = 0;
    data[6] = 0;
    data[7] = 0;
    data[8] = 0;
    data[9] = 0;
    data[10] = 0;
    data[11] = 0;
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 12);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ModifyTimeAndCreateTimePresent_lgEg6_pndf0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[12];
    data[0] = (byte) 5;
    data[1] = 0;
    data[2] = 0;
    data[3] = 0;
    data[4] = 0;
    data[5] = 0;
    data[6] = 0;
    data[7] = 0;
    data[8] = 0;
    data[9] = 0;
    data[10] = 0;
    data[11] = 0;
    try {
        extendedTimestamp.parseFromLocalFileData(data, 0, 12);
    } catch (java.util.zip.ZipException e) {
    }
}
}