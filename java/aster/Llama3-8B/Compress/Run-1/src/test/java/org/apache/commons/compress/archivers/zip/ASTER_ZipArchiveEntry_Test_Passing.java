/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Passing {
private String zipArchiveFieldArrayToString(ZipExtraField[] extraFields) {
    StringBuilder sb = new StringBuilder();
    for (ZipExtraField extraField : extraFields) {
        sb.append(extraField.toString());
        sb.append("\n");
    }
    return sb.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired_DaXC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired1_wHTb1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_tNRf0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes_joJI0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes2_TuIp1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_RAYq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        Date result = entry.getLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes_WpAz0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        int result = zipArchiveEntry.getInternalAttributes();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_PPnB0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    boolean result = entry.equals(entry);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_xfnp1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_aZiO2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    Object obj = new Object();
    boolean result = entry.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_JETe3() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_iudo4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndInternalAttributes_Ynid11() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setInternalAttributes(entry1.getInternalAttributes());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndPlatform_hZYc12() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setPlatform(entry1.getPlatform());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndExternalAttributes_Qrnq13() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setExternalAttributes(entry1.getExternalAttributes());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag_HvyQ0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag2_nwfs1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_LHqF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    ZipEntry result = zipArchiveEntry.setCreationTime(time);
    assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_EfJo0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(1000);
        zipArchiveEntry.setCreationTime(time);
        assertEquals(time, zipArchiveEntry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_QNQz0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(zipArchiveEntry, zipArchiveEntry.setCreationTime(fileTime));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_eIfh0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(time);
    assertEquals(zipArchiveEntry, zipArchiveEntry.setCreationTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_uxeN0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1643723400);
    zipArchiveEntry.setCreationTime(time);
    assertEquals(zipArchiveEntry, zipArchiveEntry.setCreationTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStart_SOnh1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDiskNumberStart(10);
        assertEquals(10, zipArchiveEntry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_DzXY0_1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", new byte[] {1, 2, 3});
        assertEquals("newName", zipArchiveEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_DzXY0_2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", new byte[] {1, 2, 3});
        assertArrayEquals(new byte[] {1, 2, 3}, zipArchiveEntry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_MssE0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment2_lueu1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra3_BElk2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra4_YCiX3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_xHiQ5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", "Expected result");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_yuwF4_1() {
        File file = new File("path");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) instanceof X5455_ExtendedTimestamp);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_yuwF4_2() {
        File file = new File("path");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X000A_NTFS.HEADER_ID) instanceof X000A_NTFS);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffset_XbAF0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        long dataOffset = 10;
        zipArchiveEntry.setDataOffset(dataOffset);
        assertEquals(dataOffset, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithZipArchiveEntry_TdFG1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        long dataOffset = 10;
        zipArchiveEntry.setDataOffset(dataOffset);
        assertEquals(dataOffset, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsNull_oaCQ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setExtraFields(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsEmpty_ceZD1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField[] fields = new ZipExtraField[0];
    zipArchiveEntry.setExtraFields(fields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNull_NyFL0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setName(null);
    assertEquals("test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameFatPlatform_Eacd1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setPlatform(ZipArchiveEntry.PLATFORM_FAT);
    zipArchiveEntry.setName("C:\\test");
    assertEquals("C:/test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameNonFatPlatform_ynby2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    zipArchiveEntry.setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    zipArchiveEntry.setName("C:\\test");
    assertEquals("C:\\test", zipArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_RolH0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertEquals(null, unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_nilF0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_QeuO1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform_aXLO1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setPlatform(1);
        assertEquals(1, zipArchiveEntry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy_bKMz0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setVersionMadeBy(1);
        assertEquals(1, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy2_WHGA1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setVersionMadeBy(2);
        assertEquals(2, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy3_tvgj2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setVersionMadeBy(3);
        assertEquals(3, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousFalse_VRpP1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(false);
        assertFalse(zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousBoolean_qqbW4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(true);
        assertTrue(zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_rKyP0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setLocalHeaderOffset(10L);
        assertEquals(10L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithZipArchiveEntry_pXAy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        entry.setLocalHeaderOffset(10L);
        assertEquals(10L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_bbxe0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(123L);
        assertEquals(123L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributesWithPath_WHPO2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.io.File("test"), "test");
        entry.setExternalAttributes(123L);
        assertEquals(123L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_OqAR0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        byte[] b = new byte[10];
        zipArchiveEntry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsIncludeUnparseable_BXOI0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] result = zipArchiveEntry.getExtraFields(true);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_rVxz1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] result = zipArchiveEntry.getExtraFields(false);
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsIncludeUnparseable_HgyM0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] result = zipArchiveEntry.getExtraFields(true);
    assert result.length > 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_YHoX0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_pNDs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(1000));
    assertEquals(zipArchiveEntry, zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(1000)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_orgu0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1000);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_GGcT0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    ZipEntry result = zipArchiveEntry.setLastModifiedTime(fileTime);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_BZGL0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1000);
    ZipEntry result = zipEntry.setLastAccessTime(fileTime);
    Assertions.assertEquals(zipEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_QgJE0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1643723400);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    Assertions.assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy2_dXDn1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "entryName");
        assertEquals(0, entry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory2_VmlV1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        assertFalse(zipArchiveEntry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory3_pXGL2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        assertFalse(zipArchiveEntry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime2_EaQf1() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        zipArchiveEntry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime4_siEH3() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        zipArchiveEntry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag_zMyp0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(1);
        assertEquals(1, zipArchiveEntry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_eSTS0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart2_zomV1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNull_khfs1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    byte[] result = entry.getRawName();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_csIz0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    byte[] result = zipArchiveEntry.getCentralDirectoryExtra();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtraWithNullExtraFields_fFwz2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        byte[] expected = new byte[0];
        byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra14_fIOy13() throws IOException, ZipException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequired_mBOu0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setVersionRequired(1);
        assertEquals(1, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequired2_sCRm1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setVersionRequired(2);
        assertEquals(2, entry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentPowerOfTwo_Zrlk0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setAlignment(8);
        assertEquals(8, entry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentBiggerThan0xFFFF_vBqe1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(0x10000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentNotPowerOfTwo_WLXK2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(5);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeNonDosTime_EWud1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setTime(System.currentTimeMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_NTFS_BonJ1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setTime(System.currentTimeMillis());
    assertEquals(FileTime.fromMillis(System.currentTimeMillis()), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeNonDosTime_qkjr1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setTime(1234567890L);
    assertEquals(FileTime.fromMillis(1234567890L), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeDosTime_vQKk0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    long timeEpochMillis = 1234567890L;
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(timeEpochMillis, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeNonDosTime_WkFa1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    long timeEpochMillis = 1234567890L;
    zipArchiveEntry.setTime(timeEpochMillis);
    assertEquals(FileTime.fromMillis(timeEpochMillis), zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_UnixTime_ReTK1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setTime(System.currentTimeMillis());
    assertEquals(System.currentTimeMillis(), zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields3_pypw2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        ZipExtraField[] result = zipArchiveEntry.getExtraFields();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields4_WCiY3() throws IOException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        ZipExtraField[] result = zipArchiveEntry.getExtraFields();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithNullExtraFields_hbox2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField[] expected = ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY;
        ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_ImsJ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        ZipExtraField[] expected = new ZipExtraField[0];
        ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit3_PXwn2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit4_BCvz3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform_KOHu0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform2_tbFN1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes_ESDX0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setInternalAttributes(1);
        assertEquals(1, zipArchiveEntry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_ySRA0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(true);
        assertEquals(true, zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguousFalse_oNEf1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(false);
        assertEquals(false, zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeNonDirectory_eFyJ2_WdpC0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setUnixMode(0x1ff);
    assertEquals(0x1ff, entry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndComment_wsgF5_ONRq0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry(new File("test"), "test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry(new File("test"), "test");
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_EeHs0_VNbI0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(1000);
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_MQCA0_LBNM0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1000));
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_yopB0_YjpT0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setExtra();
    assertEquals(true, zipArchiveEntry.getExtra() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeValid_uZcu0_yQIV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraWithUnparseableExtraFieldData_plDU1_pGKe0() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputPath"), "entryName");
    byte[] b = new byte[10];
    ZipExtraField[] f = new ZipExtraField[1];
    f[0] = new UnparseableExtraFieldData();
    zipArchiveEntry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraSmall_Thve5_zwOl1() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
    byte[] b = new byte[1];
    zipArchiveEntry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtraLarge_KyCE6_BToj1() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
    byte[] b = new byte[1000];
    zipArchiveEntry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraInvalidInput_cFSp3_IzBE0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    byte[] extra = new byte[10];
    for (int i = 0; i < extra.length; i++) {
        extra[i] = (byte) 0xFF;
    }
    entry.setExtra(extra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraLargeInput_kbKV4_SJei0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    byte[] extra = new byte[1024 * 1024 * 10];
    entry.setExtra(extra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraDifferentInputs_ZIwI7_CTkh0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    byte[] extra1 = new byte[10];
    byte[] extra2 = new byte[10];
    for (int i = 0; i < extra1.length; i++) {
        extra1[i] = (byte) (i % 2);
        extra2[i] = (byte) (i % 2);
    }
    entry.setExtra(extra1);
    entry.setExtra(extra2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_dmny0_oubi0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(1000));
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_QYEA0_nAWx0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1L);
    ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(zipArchiveEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_JIHY0_eFjL0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    java.nio.file.attribute.FileTime fileTime = java.nio.file.attribute.FileTime.fromMillis(1234567890000L);
    ZipEntry result = zipEntry.setLastAccessTime(fileTime);
    assertEquals(zipEntry, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameNotNullName_cYWy1_ycfc0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new File("name"), "entryName");
    assertEquals("entryName", zipEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ltMP0_FmGH0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipArchiveEntry clonedEntry = (ZipArchiveEntry) entry.clone();
    ZipExtraField[] extraFields = entry.getExtraFields();
    ZipExtraField[] clonedExtraFields = clonedEntry.getExtraFields();
    for (int i = 0; i < extraFields.length; i++) {
    }
    assertEquals(entry.getInternalAttributes(), clonedEntry.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ltMP0_FmGH0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipArchiveEntry clonedEntry = (ZipArchiveEntry) entry.clone();
    ZipExtraField[] extraFields = entry.getExtraFields();
    ZipExtraField[] clonedExtraFields = clonedEntry.getExtraFields();
    for (int i = 0; i < extraFields.length; i++) {
    }
    assertEquals(entry.getExternalAttributes(), clonedEntry.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_rCYu0_xXWo0_1() throws Exception {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipArchiveEntry clone = (ZipArchiveEntry) zipArchiveEntry.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_rCYu0_xXWo0_2() throws Exception {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipArchiveEntry clone = (ZipArchiveEntry) zipArchiveEntry.clone();
    assertArrayEquals(zipArchiveEntry.getExtraFields(), clone.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_rCYu0_xXWo0_3() throws Exception {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipArchiveEntry clone = (ZipArchiveEntry) zipArchiveEntry.clone();
    assertEquals(zipArchiveEntry.getNameSource(), clone.getNameSource());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethodValidInput_HVCU0_hbRc0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setMethod(8);
    assertEquals(8, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired4_GWmt4_WkQe1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        assertEquals(0, entry.getVersionRequired());
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_DzXY0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setName("newName", new byte[] {1, 2, 3});
        assertEquals("newName", zipArchiveEntry.getName());
        assertArrayEquals(new byte[] {1, 2, 3}, zipArchiveEntry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_yuwF4() {
        File file = new File("path");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) instanceof X5455_ExtendedTimestamp);
        assertEquals(true, zipArchiveEntry.getExtraField(X000A_NTFS.HEADER_ID) instanceof X000A_NTFS);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_zAVz5_1_fid2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(false, zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) instanceof X5455_ExtendedTimestamp);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_Ezps0_fid2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertFalse(zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod2_JlRS1_fid2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(-1, zipArchiveEntry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset2_nKqr1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(-1, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_aXpj1_fid2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(-1, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousNull_SRFE2_UKFc0_fid2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    assertEquals("test", zipArchiveEntry.getName());
}
}