/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_VIKk0() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger obj2 = obj1;
    boolean result = obj1.equals(obj2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_PBwQ1() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger obj2 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 9});
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBigInteger_dnCe1() {
        BigInteger value = BigInteger.valueOf(1);
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        assertEquals("ZipEightByteInteger value: " + value, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLong_iiIw2() {
        long value = 1;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        assertEquals("ZipEightByteInteger value: " + value, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueNull_QMdQ3() {
        try {
            ZipEightByteInteger.getLongValue(null, 0);
            assertEquals(false, true); // This will fail if the method does not throw an exception
        } catch (NullPointerException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithBigInteger_vlfX1() {
        BigInteger value = BigInteger.valueOf(0x0102030405060708L);
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        BigInteger result = zipEightByteInteger.getValue();
        assertEquals(value, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLong_mKqe2() {
        long value = 0x0102030405060708L;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
        BigInteger result = zipEightByteInteger.getValue();
        assertEquals(BigInteger.valueOf(value), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue0_EPxb0() {
    byte[] result = ZipEightByteInteger.getBytes(0);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigIntegerValue_Low_pzYI0() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(0));
    assert result[0] == 0;
    assert result[1] == 0;
    assert result[2] == 0;
    assert result[3] == 0;
    assert result[4] == 0;
    assert result[5] == 0;
    assert result[6] == 0;
    assert result[7] == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigIntegerValue_High_Hkiv1() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(0xFFFFFFFFFFFFFFFFL));
    assert result[0] == (byte) 0xFF;
    assert result[1] == (byte) 0xFF;
    assert result[2] == (byte) 0xFF;
    assert result[3] == (byte) 0xFF;
    assert result[4] == (byte) 0xFF;
    assert result[5] == (byte) 0xFF;
    assert result[6] == (byte) 0xFF;
    assert result[7] == (byte) 0xFF;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigIntegerValue_LeftmostBit_ILzf3() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(1L << 63));
    assert result[0] == 0;
    assert result[1] == 0;
    assert result[2] == 0;
    assert result[3] == 0;
    assert result[4] == 0;
    assert result[5] == 0;
    assert result[6] == 0;
    assert result[7] == (byte) 0x80;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLong_QXRr2_hcwH1() {
    byte[] expected = BigInteger.valueOf(0x0807060504030201L).toByteArray();
    byte[] actual = ZipEightByteInteger.getBytes(BigInteger.valueOf(0x0102030405060708L));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBigInteger_bEla3_fscA0() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(0x0102030405060708L));
    byte[] expected = new byte[]{(byte)0x08, (byte)0x07, (byte)0x06, (byte)0x05, (byte)0x04, (byte)0x03, (byte)0x02, (byte)0x01};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByte_JmLH2() {
        byte[] bytes = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        byte[] expected = bytes;
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteOffset_ocjI3() {
        byte[] bytes = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
        byte[] expected = bytes;
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBigIntegerValue_ApjP0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1));
        int hashCode = zipEightByteInteger.hashCode();
        assertEquals(1, hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithLongValue_LahX1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1);
        int hashCode = zipEightByteInteger.hashCode();
        assertEquals(1, hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueNullBytes_DCcl4() {
    assertThrows(NullPointerException.class, () -> ZipEightByteInteger.getValue(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueShortBytes_DawU6() {
    byte[] bytes = new byte[] {1, 2};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueNegativeOffset_jJPe8() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithBigIntegerValue_epmB0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890123456789L));
        assertEquals(1234567890123456789L, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithLongValue_JeeO1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        assertEquals(1234567890123456789L, zipEightByteInteger.getLongValue());
    }
}