/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_pDKq0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFilename("test.zip.txt");
        assertEquals("test.rar", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFilename_yfXO0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String fileName = "test.txt";
        String result = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("test.rar", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName1_CUhr0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFileName("test.zip.txt");
        assertEquals("test.rar", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName3_CScU2() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFileName("test.rar");
        assertEquals("test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName1_GtdF0() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test.txt");
        assertEquals("test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName2_ZAzz1() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test.gz");
        assertEquals("test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName3_bgtS2() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test.tar.gz");
        assertEquals("test.tar", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName4_glUK3() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test");
        assertEquals("test.txt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName3_bgtS2_fid1() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test.tar.gztxt.gz");
        assertEquals("test.tar.gztxt", result);
    }
}