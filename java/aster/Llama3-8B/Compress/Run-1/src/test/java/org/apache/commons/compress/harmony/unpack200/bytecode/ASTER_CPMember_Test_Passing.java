/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_lUZA0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    List<Attribute> attributes = new ArrayList<>();
    CPMember cpmember = new CPMember(name, descriptor, 0, attributes);
    ClassFileEntry[] result = cpmember.getNestedClassFileEntries();
    assert result.length == 2;
    assert result[0].equals(name);
    assert result[1].equals(descriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OUfN0_CnAy0() {
    CPUTF8 name = new CPUTF8("testName");
    CPUTF8 descriptor = new CPUTF8("testDescriptor");
    CPMember cpmember = new CPMember(name, descriptor, 0, null);
    String result = cpmember.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_IILQ0_oPsP0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    boolean result = cpmember.equals(cpmember);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_dqHc1_Kktx0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    boolean result = cpmember.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_VFko2_jEsz0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    Object obj = new Object();
    boolean result = cpmember.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentDescriptor_GLXN4_yUUI0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPUTF8 otherDescriptor = new CPUTF8("different", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    CPMember other = new CPMember(name, new CPUTF8("different", 0), 0, new ArrayList<>());
    boolean result = cpmember.equals(other);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentAttributes_ABaS3_qdup0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    CPUTF8 otherName = new CPUTF8("name", 0);
    CPUTF8 otherDescriptor = new CPUTF8("descriptor", 0);
    CPMember other = new CPMember(otherName, otherDescriptor, 0, new ArrayList<>());
    boolean result = cpmember.equals(other);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentFlags_BtKj5_LqHY0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    CPMember other = new CPMember(name, descriptor, 1, new ArrayList<>());
    boolean result = cpmember.equals(other);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_etob6_zxyF0() {
    CPUTF8 name = new CPUTF8("name", 0);
    CPUTF8 descriptor = new CPUTF8("descriptor", 0);
    CPMember cpmember = new CPMember(name, descriptor, 0, new ArrayList<>());
    CPUTF8 otherName = new CPUTF8("different", 0);
    CPUTF8 otherDescriptor = new CPUTF8("descriptor", 0);
    CPMember other = new CPMember(otherName, otherDescriptor, 0, new ArrayList<>());
    boolean result = cpmember.equals(other);
    assert !result;
}
}