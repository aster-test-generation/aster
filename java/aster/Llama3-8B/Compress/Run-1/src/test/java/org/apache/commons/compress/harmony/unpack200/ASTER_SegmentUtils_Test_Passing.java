/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs2_gwyA2() {
        int result = SegmentUtils.countArgs("(I)V");
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs3_oXcV3() {
        int result = SegmentUtils.countArgs("(II)V");
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyArray_cKZv0() {
        long[] flags = new long[0];
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoFlagSet_Zqtz1() {
        long[] flags = new long[] {0, 0, 0};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16FlagSet_MCaU2() {
        long[] flags = new long[] {1 << 16, 0, 0};
        assertEquals(1, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyArray_xHbW0() {
        int[] flags = new int[0];
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoBit16Set_iXxX1() {
        int[] flags = new int[]{0, 1, 2, 3, 4};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyFlags_GTFo0() {
        long[][] flags = new long[][]{};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoBit16_uERC1() {
        long[][] flags = new long[][]{{0, 0}, {0, 0}};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16OneBit16_MLVa2() {
        long[][] flags = new long[][]{{1 << 16, 0}, {0, 0}};
        assertEquals(1, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16MultipleBit16_dJAO3() {
        long[][] flags = new long[][]{{1 << 16, 0}, {1 << 16, 0}, {0, 0}};
        assertEquals(2, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs3_eCIZ2() {
        int result = SegmentUtils.countArgs("([Ljava/lang/String;)", 8);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountInvokeInterfaceArgs_GmqE0_fid1() {
        assertEquals(0, SegmentUtils.countInvokeInterfaceArgs("()I"));
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16Bit16Set_XrBW2_fid1() {
        int[] flags = new int[]{65535, 0,0, 2, 3};
        assertEquals(1, SegmentUtils.countBit16(flags));
    }
}