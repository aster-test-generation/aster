/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0_1() {
        assertEquals(true, LZMAUtils.isCompressedFileName("file.lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0_2() {
        assertEquals(false, LZMAUtils.isCompressedFileName("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0_3() {
        assertEquals(false, LZMAUtils.isCompressedFileName("file.lz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0_4() {
        assertEquals(false, LZMAUtils.isCompressedFileName("file"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_DANC0() {
        String fileName = "test.lzma";
        String expected = "test";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_xhGq0() {
        String fileName = "file.lzma";
        boolean result = LZMAUtils.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFilename_janN0() {
        String fileName = "test.txt";
        String expected = "test.txt.lzma";
        String result = LZMAUtils.getCompressedFilename(fileName);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName_qusQ0() {
        String fileName = "test.lzma";
        String expected = "test";
        String actual = LZMAUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesShortSignature_nAFN2_BTfH0() {
    byte[] signature = new byte[] {0x5D, 0x4C, 0x5A, 0x4D, 0x01, 0x00};
    int length = 6;
    boolean result = LZMAUtils.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLZMACompressionAvailable_InternalNotAvailable_FBoi2_vkaL0() {
    LZMAUtils.CachedAvailability cachedResult = LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE;
    boolean result = LZMAUtils.isLZMACompressionAvailable();
    Assertions.assertTrue(result);
}
}