/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_AEDd0() {
    byte[] signature = null;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidLength_xAWK1() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 0;
    int length = 2;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_ErVB2() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureWithNonZeroByte_UwzU3() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 1;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureWithNonZeroByte2_cXsx4() {
    byte[] signature = new byte[3];
    signature[0] = 0x5d;
    signature[1] = 0;
    signature[2] = 1;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureWithNonZeroByte3_tsHv5() {
    byte[] signature = new byte[3];
    signature[0] = 0x5e;
    signature[1] = 0;
    signature[2] = 0;
    int length = 3;
    boolean result = LZMACompressorInputStream.matches(signature, length);
    assert !result;
}
}