/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries1_glqb1() throws IOException {
        TarFile tarFile = new TarFile(new byte[0], "UTF-8");
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assert entries != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries2_bBpY2() throws IOException {
        TarFile tarFile = new TarFile(new byte[0], true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assert entries != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries4_CVEh4() throws IOException {
        TarFile tarFile = new TarFile(new File("file"), true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assert entries != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries6_WJJo6() throws IOException {
        TarFile tarFile = new TarFile(new File("file"), "UTF-8");
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assert entries != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries7_CeTS7() throws IOException {
        TarFile tarFile = new TarFile(new File("file"));
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assert entries != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_wdtJ0_YvLr0() throws IOException {
    TarFile tarFile = new TarFile(new File("path"), true);
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assert entries != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF2_QtxZ1_vRLs1() {
    try {
        TarFile tarFile = new TarFile(new byte[0], true);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF5_iQcM4_MvHU0() {
    try {
        TarFile tarFile = new TarFile(new File("file"), true);
        assertTrue(tarFile.isAtEOF());
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF7_wXlf6_dAvL0() {
    try {
        TarFile tarFile = new TarFile(new File("file"), true);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF8_zxAW7_FNdw1() {
    try {
        TarFile tarFile = new TarFile(new File("file"));
        assertTrue(tarFile.isAtEOF());
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
}