/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_NuOZ0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int result = icTuple.outerClassIndex();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_bKXI0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    boolean result = icTuple.outerIsAnonymous();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSetTrue_YQoP0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    boolean result = icTuple.nestedExplicitFlagSet();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_LLxu0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        int result = icTuple.simpleClassNameIndex();
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNullFields_YGIv0() {
    IcTuple icTuple = new IcTuple(null, 0, null, null, 0, 0, 0, 0);
    int result = icTuple.hashCode();
    assertEquals(17, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNonNullFields_LiWJ1() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
    int result = icTuple.hashCode();
    assertEquals(17 + "C".hashCode() + "C2".hashCode() + "N".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_dyvJ0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    boolean result = icTuple.isAnonymous();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassName_RxzT0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result = icTuple.simpleClassName();
    assertEquals("IcTuple", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_cZCE0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        String result = icTuple.toString();
        assert result.equals("IcTuple (IcTuple in )");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndexWhenPredictedReturnsCIndex_Eioc0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int result = icTuple.thisClassIndex();
    Assertions.assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassStringWhenPredictedReturnsC_cgec0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result = icTuple.thisClassString();
    assertEquals("C", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPredictedFalse_pyXU1_kpqP0() {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    String[] result = icTuple.innerBreakAtDollar("C$N");
    assertFalse(result.length == 2);
}
}