/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadSparseStructsValidInput_RJuZ0() throws IOException {
        byte[] buffer = new byte[1024];
        int offset = 0;
        int entries = 5;
        List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadSparseStructsInvalidNumbytes_TlXK2() throws IOException {
        byte[] buffer = new byte[1024];
        int offset = 0;
        int entries = 5;
        try {
            TarUtils.readSparseStructs(buffer, offset, entries);
        } catch (IOException ex) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBooleanTrue_QjGX0() {
        byte[] buffer = new byte[] {1};
        boolean result = TarUtils.parseBoolean(buffer, 0);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBooleanFalse_yZlC1() {
        byte[] buffer = new byte[] {0};
        boolean result = TarUtils.parseBoolean(buffer, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_qzxH0_1() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse result = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, result.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_qzxH0_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse result = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, result.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidLength_enHx1() {
        byte[] buffer = {(byte) '1', (byte) '2'};
        int offset = 0;
        int length = 1;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidByte_SIIE2() {
        byte[] buffer = {(byte) '1', (byte) '2', (byte) '8'};
        int offset = 0;
        int length = 3;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidByteAtStart_pMSV3() {
        byte[] buffer = {(byte) '8', (byte) '1', (byte) '2'};
        int offset = 0;
        int length = 3;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidByteAtStartWithSpace_WbBr6() {
        byte[] buffer = {(byte) ' ', (byte) '8', (byte) '1'};
        int offset = 0;
        int length = 3;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidByteInMiddleWithSpace_PPwb8() {
        byte[] buffer = {(byte) '1', (byte) ' ', (byte) '8'};
        int offset = 0;
        int length = 3;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalNull_kBDm10() {
        byte[] buffer = {(byte) '0', (byte) '0'};
        int offset = 0;
        int length = 2;
        long result = TarUtils.parseOctal(buffer, offset, length);
        assert(result == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryInvalidLength_wSAI3() {
        byte[] buffer = {(byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x33, (byte) 0x34};
        int offset = 0;
        int length = 5;
        long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
        assertEquals(668L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryOctal_MnRS0() {
        byte[] buffer = {(byte) 0x30, (byte) 0x31, (byte) 0x32};
        int offset = 0;
        int length = 3;
        assertEquals(10, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinary_hIpN1() {
        byte[] buffer = {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        int offset = 0;
        int length = 9;
        assertEquals(0, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinaryLengthLessThan9_QCrU3() {
        byte[] buffer = {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        int offset = 0;
        int length = 4;
        assertEquals(0, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeCheckSum_Qtka0() {
        byte[] buf = new byte[] {1, 2, 3, 4, 5};
        long expected = 1 + 2 + 3 + 4 + 5;
        long actual = TarUtils.computeCheckSum(buf);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeCheckSumEmptyArray_mbip1() {
        byte[] buf = new byte[0];
        long expected = 0;
        long actual = TarUtils.computeCheckSum(buf);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum1_VZBO0() {
    byte[] header = new byte[1024];
   TarUtils.verifyCheckSum(header);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesPositiveValueLessThanMaxId_IEpc0() {
        byte[] buf = new byte[TarConstants.UIDLEN];
        int offset = 0;
        int length = TarConstants.UIDLEN;
        long value = 123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesNegativeValueLessThanMaxId_wSSW1() {
        byte[] buf = new byte[TarConstants.UIDLEN];
        int offset = 0;
        int length = TarConstants.UIDLEN;
        long value = -123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesPositiveValueLessThanMaxSize_ThvV3() {
        byte[] buf = new byte[TarConstants.SIZELEN];
        int offset = 0;
        int length = TarConstants.SIZELEN;
        long value = 123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesNegativeValueLessThanMaxSize_OgIE4() {
        byte[] buf = new byte[TarConstants.SIZELEN];
        int offset = 0;
        int length = TarConstants.SIZELEN;
        long value = -123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesLengthLessThan9_TsXI6() {
        byte[] buf = new byte[8];
        int offset = 0;
        int length = 8;
        long value = 123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesLengthGreaterThan8_BgHZ7() {
        byte[] buf = new byte[16];
        int offset = 0;
        int length = 16;
        long value = 123;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesPositiveValueGreaterThanMaxAsOctalChar_nnhs2() {
        byte[] buf = new byte[TarConstants.UIDLEN];
        int offset = 0;
        int length = TarConstants.UIDLEN;
        long value = 123456;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesNegativeValueGreaterThanMaxAsOctalChar_PAOL3() {
        byte[] buf = new byte[TarConstants.UIDLEN];
        int offset = 0;
        int length = TarConstants.UIDLEN;
        long value = -123456;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesLengthLessThan9_sYhA4() {
        byte[] buf = new byte[8];
        int offset = 0;
        int length = 8;
        long value = 123456;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesLengthGreaterThan9_qVmq5() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 123456;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesNegativeValueLengthGreaterThan9_ygQL6() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = -123456;
        int result = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseName_JywJ0() throws IOException {
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 5;
        String result = TarUtils.parseName(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidSparseHeadersNegativeOffset_nFna1() {
    String sparseMap = "123,-456,789,101112,131415";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidSparseHeadersNegativeNumbytes_bZKU2() {
    String sparseMap = "123,456,-789,101112,131415";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidSparseHeadersOddLength_fEPf3() {
    String sparseMap = "123,456,789,101112";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithNullBuffer_oMjL1_kaqW0() {
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    try {
        TarUtils.parseFromPAX01SparseHeaders("");
        fail("IOException was not thrown");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_qzxH0() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse result = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, result.getOffset());
    assertEquals(0, result.getNumbytes());
}
}