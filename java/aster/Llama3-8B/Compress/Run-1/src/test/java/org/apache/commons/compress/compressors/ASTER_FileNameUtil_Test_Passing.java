/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_ErnX0() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "unzip");
        uncompressSuffix.put("rar", "unrar");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String fileName = "test.zip";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName2_lGuO1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFileName("test.txt");
        assertEquals("test.txt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName4_zwvb3() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFileName("test");
        assertEquals("test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_pDKq0_fid1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFilename("test.zip.txt");
        assertEquals("test.zip.txt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFilename_yfXO0_fid1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String fileName = "test.txt";
        String result = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("test.txttxt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName1_CUhr0_fid1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "rar");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String result = fileNameUtil.getUncompressedFileName("test.zip.txt");
        assertEquals("test.zip.txt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName4_glUK3_fid1() {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
        String result = fileNameUtil.getCompressedFileName("test");
        assertEquals("testtxt", result);
    }
}