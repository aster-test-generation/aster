/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CountingInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountPositiveRead_IIJm0() {
        CountingInputStream countingInputStream = new CountingInputStream(null);
        countingInputStream.count(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountNegativeRead_qsvp1() {
        CountingInputStream countingInputStream = new CountingInputStream(null);
        countingInputStream.count(-1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadPartialLength_FXKv2_CkoH0() throws IOException {
    CountingInputStream countingInputStream = new CountingInputStream(new java.io.ByteArrayInputStream(new byte[10]));
    byte[] b = new byte[5];
    int len = 5;
    int result = countingInputStream.read(b, 0, len);
    assert result == 5;
}
}