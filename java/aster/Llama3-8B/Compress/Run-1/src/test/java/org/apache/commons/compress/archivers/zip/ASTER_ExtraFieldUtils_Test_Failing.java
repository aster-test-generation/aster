/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_QCim0() {
        assertThrows(IllegalArgumentException.class, () -> ExtraFieldUtils.register(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraField_vGlS0() {
        ZipShort headerId = new ZipShort(new byte[0], 0);
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldUnrecognized_Ubzl1() {
        ZipShort headerId = new ZipShort(new byte[0], 0);
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertEquals(UnrecognizedExtraField.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_tFwe0() throws ZipException {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        ZipExtraField[] expected = new ZipExtraField[]{/* your expected result */};
        ZipExtraField[] actual = ExtraFieldUtils.parse(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_fHxw0_JTvd1() throws ZipException {
    byte[] data = new byte[10];
    boolean local = true;
    ZipExtraField[] expected = new ZipExtraField[1];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data, local);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_AllElementsUnparseable_wIwR4_NYHN0() {
    ZipExtraField[] data = new ZipExtraField[] {new UnparseableExtraFieldData(), new UnparseableExtraFieldData()};
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    Assertions.assertArrayEquals(new byte[(2 * 16) + 2], result);
}
}