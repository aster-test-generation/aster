/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_CZMS0() {
        byte[] buf = new byte[8];
        ZipLong.putLong(0x1234567890ABCDEFL, buf, 0);
        byte[] expected = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9A, (byte) 0xBC, (byte) 0xDE, (byte) 0xFF};
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_APTq0() {
        ZipLong zipLong = new ZipLong(new byte[10], 0);
        String result = zipLong.toString();
        assert result.equals("ZipLong value: ");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_ALnt3() {
        ZipLong zipLong = new ZipLong(new byte[10]);
        String result = zipLong.toString();
        assert result.equals("ZipLong value: ");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_SXem2() {
        byte[] bytes = new byte[] {(byte) 10};
        ZipLong zipLong = new ZipLong(bytes);
        assertEquals(10L, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayOffset_zIul3() {
        byte[] bytes = new byte[] {(byte) 10};
        ZipLong zipLong = new ZipLong(bytes, 0);
        assertEquals(10L, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayValue_VYyP2() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes);
        byte[] resultBytes = zipLong.getBytes();
        assertArrayEquals(bytes, resultBytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayAndOffsetValue_hDhv3() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes, 2);
        byte[] resultBytes = zipLong.getBytes();
        byte[] expectedBytes = new byte[3];
        System.arraycopy(bytes, 2, expectedBytes, 0, 3);
        assertArrayEquals(expectedBytes, resultBytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithByteArray_nRRK3() {
        byte[] bytes = new byte[1];
        bytes[0] = (byte) 10;
        ZipLong zipLong = new ZipLong(bytes);
        assertEquals(10, zipLong.getIntValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithByteArrayOffset_rmGO4() {
        byte[] bytes = new byte[1];
        bytes[0] = (byte) 10;
        ZipLong zipLong = new ZipLong(bytes, 0);
        assertEquals(10, zipLong.getIntValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithByteArrayNoOffset_Mdyy5() {
        ZipLong zipLong = new ZipLong(new byte[0]);
        assertEquals(0, zipLong.getIntValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytes_ylal0() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes);
    Assertions.assertEquals(result, 0x0102030405L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffset_ipcV1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes, 2);
    Assertions.assertEquals(result, 0x02040005L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffsetZero_QENg9() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes, 0);
    Assertions.assertEquals(result, 0x0102030405L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_zlSK1() {
    byte[] result = ZipLong.getBytes(1);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_gMsg2() {
    byte[] result = ZipLong.getBytes(2);
    assert Arrays.equals(result, new byte[]{0, 0, 1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_nRTO3() {
    byte[] result = ZipLong.getBytes(3);
    assert Arrays.equals(result, new byte[]{0, 0, 1, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_KUUQ4() {
    byte[] result = ZipLong.getBytes(4);
    assert Arrays.equals(result, new byte[]{0, 1, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_ApEF5() {
    byte[] result = ZipLong.getBytes(5);
    assert Arrays.equals(result, new byte[]{0, 1, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes6_LdcU6() {
    byte[] result = ZipLong.getBytes(6);
    assert Arrays.equals(result, new byte[]{0, 1, 1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes7_XwGg7() {
    byte[] result = ZipLong.getBytes(7);
    assert Arrays.equals(result, new byte[]{0, 1, 1, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes8_Agpr8() {
    byte[] result = ZipLong.getBytes(8);
    assert Arrays.equals(result, new byte[]{1, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes9_GBWo9() {
    byte[] result = ZipLong.getBytes(9);
    assert Arrays.equals(result, new byte[]{1, 0, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_fSIV0() {
        ZipLong zipLong = new ZipLong((byte[]) null, 0);
        byte[] buf = new byte[8];
        zipLong.putLong(0, buf, 0);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, buf);
    }
}