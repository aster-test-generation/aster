/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_rZNP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x4200);
    boolean result = entry.isBlockDevice();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotBlockDevice_MFwz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x4200);
    entry.setMode((short) (entry.getMode() & ~0x0003));
    boolean result = entry.isBlockDevice();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_YdtI0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(123);
        assertEquals(123, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID2_iGWF1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(456);
        assertEquals(456, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID3_UeVg2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(789);
        assertEquals(789, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID4_kuRN3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(0);
        assertEquals(0, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID5_kEyy4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(-1);
        assertEquals(-1, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary_oxqH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary2_tbid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 123456L);
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary6_ZHUp5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "entryName");
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary8_LWYY7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime_wCnS0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(0, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime3_CubT2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        entry.setTime(987654321);
        assertEquals(987654321, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime5_FCjo4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        entry.setTime(123456789);
        assertEquals(123456789, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork1_pFMI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.isNetwork();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork2_IueO1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x8000);
    boolean result = entry.isNetwork();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_yqBd0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
    boolean result = entry.equals(entry);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_IFro1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_nUdI2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
    boolean result = entry.equals(new Object());
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_xWDm3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0L);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "test", 0L);
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_zbam4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0L);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "different", 0L);
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameNull_fuPi5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0L);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, null, 0L);
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory1_WvQE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.isDirectory();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory2_bxxa1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x4000);
    boolean result = entry.isDirectory();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinNewFormatThrowException_HQXA2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        try {
            cpioArchiveEntry.getRemoteDeviceMin();
        } catch (UnsupportedOperationException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkTrue_PlOW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "file", 1024);
    entry.setMode((short) (0120000 | 0000011));
    boolean result = entry.isSymbolicLink();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkFalse_MrfR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "file", 1024);
    entry.setMode((short) (0120000 | 0000000));
    boolean result = entry.isSymbolicLink();
    assert(result == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate1_yXPo0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate2_nnWq1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate6_vgUn5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate7_WdXn6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate9_XyKq8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceOldFormat_NDue0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceNullFormat_mFcr2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(null);
        assertThrows(NullPointerException.class, () -> cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceNullName_WLNX3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, null, 100);
        assertThrows(NullPointerException.class, () -> cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceNullPath_lMrV4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, null, "name");
        assertThrows(NullPointerException.class, () -> cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMajOldFormat_BNVc2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        try {
            cpioArchiveEntry.getDeviceMaj();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID_EcXL0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID3_FcdW2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID4_WFIk3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID9_HkZL8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024L);
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat6_ulfY5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat8_XPUL7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_vYlT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_zcqO1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "CPIO_TRAILER", 0);
    assertEquals((int) CpioArchiveEntry.C_ISREG, entry.getMode());
}
@Test
@Timeout(value =32768, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_LABc2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)32768, "test", 0);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceOldFormat_SKEJ0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceNewFormat_QxUJ1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 123456L);
        assertEquals(0, cpioArchiveEntry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinOldFormat_sqSx2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        try {
            cpioArchiveEntry.getDeviceMin();
        } catch (UnsupportedOperationException e) {
            assertEquals("checkNewFormat", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullName_PiBm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullCharset_RHIS1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
    assertEquals(entry.getHeaderPadCount(entry.getName().length()), entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeWithValidInput_xZbO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) (0x0001 | 0x1000));
    boolean result = entry.isPipe();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeWithInvalidInput_OGDT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x0000);
    boolean result = entry.isPipe();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_cwvl0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFileTrue_XEgt0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x8000);
    boolean result = entry.isRegularFile();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFileFalse_sEjP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x4000);
    boolean result = entry.isRegularFile();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidValue_ZePT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    try {
        entry.setSize(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size <-1>", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_SnTJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName2_QCwO1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName4_cZWe3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName5_OmCv4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName19_OQCd18() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        entry.setName("newTest");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_YjOe0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        cpioArchiveEntry.setDevice(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_JlWl0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1200);
    boolean result = entry.isSocket();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotSocket_EHkz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1000);
    boolean result = entry.isSocket();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_TkQq0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInode_ThpA1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndPath_OUUD4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndName_JRdJ12() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountNullName_LhDy0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountNonZeroNameSize_pGfs1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 10L);
        assertEquals(3, entry.getHeaderPadCount(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountZeroNameSize_yQQw2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        assertEquals(0, entry.getHeaderPadCount(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountAlignmentBoundary_nKGC3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short)0);
        assertEquals(4, entry.getHeaderPadCount(8));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDevice_OtbZ0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertThrows(UnsupportedOperationException.class, () -> cpioArchiveEntry.setRemoteDevice(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceOldFormat_InAh1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 0L);
        cpioArchiveEntry.setRemoteDevice(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMajUnsupportedFormat_iAOs2() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
    assertThrows(UnsupportedOperationException.class, () -> cpioArchiveEntry.setDeviceMaj(1L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_vKCd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_DASx1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_DDnq2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount4_istu3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID_rbxc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(123);
        assertEquals(123, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID2_QmVP1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(456);
        assertEquals(456, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID3_PyED2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(789);
        assertEquals(789, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID4_NAui3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(0);
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID5_SaBd4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(-123);
        assertEquals(-123, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID6_ljqn5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize4_UJPG3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_yoTx0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0x4000);
        assertEquals(0x4000, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeUnknownMode_ShOP1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        try {
            entry.setMode(0x1000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinks1_SIey0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfLinks2_wDJz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        entry.isDirectory();
        assertEquals(2, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_oODG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(entry.getGID(), entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID3_SmhN2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(entry.getGID(), entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID4_AeTF3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(entry.getGID(), entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice_tPZf0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4200);
        assertTrue(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCharacterDevice_CvYz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0x4201);
        assertFalse(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks_OMVg0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(1);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks2_jDEA1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(2);
        assertEquals(2, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks3_VuPK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(0);
        assertEquals(0, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks4_cwxm3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(-1);
        assertEquals(-1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks5_kPnQ4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks6_MEsJ5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks7_joXJ6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(1234567890L);
        assertEquals(1234567890L, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfLinks8_kNTR7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setNumberOfLinks(0L);
        assertEquals(0L, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary4_mgBL3_Jktp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "entryName");
    assertEquals(0, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime2_htQM1_kOrP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setNumberOfLinks(123456789);
    assertEquals(123456789, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat4_twUZ3_QWQT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("path"), "entryName");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceNewFormatWithCheck_iCqn4_gYFe1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 123456L);
    cpioArchiveEntry.setDevice(0);
    assertEquals(0, cpioArchiveEntry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeValidValue_meJv0_KOWX1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setNumberOfLinks(123456L);
    assertEquals(123456L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMaxValue_PRGr2_tmak0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setNumberOfLinks(4294967296L);
    assertEquals(4294967296L, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceOldFormat3_NLFu3_pkTy0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 0L);
    cpioArchiveEntry.setDevice(0L);
    cpioArchiveEntry.setNumberOfLinks(0L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_IdVT0_iMln0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    long time = System.currentTimeMillis();
    entry.setNumberOfLinks(time); 
    assertEquals(time, entry.getNumberOfLinks()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeDifferentPaths_vNlf10_iSfX0_1() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0);
    int hash1 = entry1.hashCode();
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "different", 0);
    int hash2 = entry2.hashCode();
    assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeDifferentPaths_vNlf10_iSfX0_2() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0);
    int hash1 = entry1.hashCode();
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "different", 0);
    int hash2 = entry2.hashCode();
    assertNotEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime3_wTmw2_pgqi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
    long time = System.currentTimeMillis();
    entry.setNumberOfLinks(time);
    assertEquals(time, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime4_iUuo3_AmGY1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
    long time = System.currentTimeMillis();
    entry.setNumberOfLinks(time); 
    assertEquals(time, entry.getNumberOfLinks()); 
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks3_YtBf2_roWH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary3_yoYQ2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary7_QlAo6_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123456L);
        assertEquals(0, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_PSJh2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat7_CNNP6_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123456L);
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_LABc2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatAndName_kVyl1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024L);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithName_JruG2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithPath_KNdG3_fid1() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test", LinkOption.NOFOLLOW_LINKS);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameAndSize_Dcja5_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 1024L);
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFile_IcsZ6_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCountAlignmentBoundary_nKGC3_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 4);
        assertEquals(4, entry.getHeaderPadCount(8));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sgYQ0() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentNames_HTqT1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry("different");
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_OggD2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry(null);
        int hash = entry.hashCode();
        assertEquals(0, hash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeEmptyName_fwqp3_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        int hash = entry.hashCode();
        assertEquals(0, hash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentSizes_gVMq5() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 2);
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameSize_jrPV6() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 1);
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameFormat_pCFM7() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentFormats_rSWE8() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        assertEquals(11209022, hash1);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2, "test");
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sgYQ0_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sgYQ0_2_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentNames_HTqT1_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("different");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentSizes_gVMq5_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 2);
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameSize_jrPV6_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 1);
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameSize_jrPV6_2_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 1);
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameFormat_pCFM7_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameFormat_pCFM7_2_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentFormats_rSWE8_1_fid2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2, "test");
        int hash2 = entry2.hashCode();
        assertEquals(11209022, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount1_QqZC0_GjJb1_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(10);
    assertEquals(2, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount2_lLZE1_pikM0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 12);
    entry.setNumberOfLinks(0);
    assertEquals(4, entry.getDataPadCount());
}
}