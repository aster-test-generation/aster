/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassPoolEntryNull_yixG1() {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry entry = segmentConstantPool.getClassPoolEntry("class4");
        assertNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_DAQB0() {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[]{"test1", "test2", "test3"};
        String compareString = "test2";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex1_xMBb0() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String[] primaryArray = new String[]{"a", "b", "c"};
    String[] secondaryArray = new String[]{"d", "e", "f"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "d";
    int desiredIndex = 0;
    int result = pool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex2_DLdO1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String[] primaryArray = new String[]{"a", "b", "c"};
    String[] secondaryArray = new String[]{"d", "e", "f"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "e";
    int desiredIndex = 1;
    int result = pool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    Assertions.assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex3_TnWn2() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String[] primaryArray = new String[]{"a", "b", "c"};
    String[] secondaryArray = new String[]{"d", "e", "f"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "f";
    int desiredIndex = 2;
    int result = pool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    Assertions.assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex4_cLmI3() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String[] primaryArray = new String[]{"a", "b", "c"};
    String[] secondaryArray = new String[]{"d", "e", "f"};
    String primaryCompareString = "a";
    String secondaryCompareRegex = "g";
    int desiredIndex = 0;
    int result = pool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
    Assertions.assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitMethodPoolEntryNotCP_METHOD_CZOx1() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
    int cp = 1;
    long value = 1;
    String desiredClassName = "test.Class";
    try {
        segmentConstantPool.getInitMethodPoolEntry(cp, value, desiredClassName);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
    }
}
}