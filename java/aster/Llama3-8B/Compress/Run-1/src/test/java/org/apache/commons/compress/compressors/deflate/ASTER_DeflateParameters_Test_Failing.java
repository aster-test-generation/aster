/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateParameters_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressionLevel_stOB0() {
        DeflateParameters deflateParameters = new DeflateParameters();
        int expected = 0;
        int actual = deflateParameters.getCompressionLevel();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidCompressionLevelBelowMin_TLeY1() {
    DeflateParameters deflateParameters = new DeflateParameters();
    try {
        deflateParameters.setCompressionLevel(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid Deflate compression level: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidCompressionLevelAboveMax_gPKQ2() {
    DeflateParameters deflateParameters = new DeflateParameters();
    try {
        deflateParameters.setCompressionLevel(7);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid Deflate compression level: 7", e.getMessage());
    }
}
}