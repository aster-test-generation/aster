/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveFileOptions_ASgF1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_options();
        assert result == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultMajorVersion_YtDI0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        int result = segmentHeader.getDefaultMajorVersion();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchive_modtime_vpfU0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        int expected = 0; // replace with your expected value
        int actual = segmentHeader.getArchive_modtime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveCodeFlagsHi_hyFK0_fid1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_code_flags_hi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveClassFlagsHi_KhLq0_naYd1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    boolean result = segmentHeader.have_field_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHave_field_flags_hi_ViSS0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    assertEquals(true, segmentHeader.have_field_flags_hi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtimeTrue_TBKC0_BAOX0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    boolean result = segmentHeader.have_field_flags_hi();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtimeFalse_TyPI1_hpai0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(false);
    boolean result = segmentHeader.have_field_flags_hi();
    assert(result == false);
}
}