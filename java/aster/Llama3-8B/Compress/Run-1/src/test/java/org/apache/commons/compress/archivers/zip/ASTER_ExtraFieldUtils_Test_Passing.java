/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefault_BaTX0() {
        ZipShort headerId = new ZipShort(new byte[] {1, 2});
        ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefaultWithValue_qfor1() {
        ZipShort headerId = new ZipShort(1);
        ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterZipExtraField_ZHIR1() {
        assertThrows(IllegalArgumentException.class, () -> ExtraFieldUtils.register(ZipExtraField.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullClass_lPdc3() {
        assertThrows(NullPointerException.class, () -> ExtraFieldUtils.register(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMergeLocalFileDataData_EmptyArray_wSkv0() {
        byte[] result = ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[0]);
        assertArrayEquals(new byte[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_EmptyArray_zFmR0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    Assertions.assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_fHxw0_JTvd1_fid2() throws ZipException {
    byte[] data = new byte[10];
    boolean local = true;
    ZipExtraField[] expected = new ZipExtraField[1];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data, local);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_AllElementsUnparseable_wIwR4_NYHN0_fid2() {
    ZipExtraField[] data = new ZipExtraField[] {new UnparseableExtraFieldData(), new UnparseableExtraFieldData()};
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
}
}