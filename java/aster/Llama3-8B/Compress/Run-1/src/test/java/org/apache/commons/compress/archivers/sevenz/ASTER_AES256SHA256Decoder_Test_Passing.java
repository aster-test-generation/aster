/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Password_sQvH0() throws Exception {
        byte[] password = "password".getBytes();
        int numCyclesPower = 4;
        byte[] salt = "salt".getBytes();
        byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assert result.length == 32;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordNullPassword_FLGH1() throws Exception {
        byte[] password = null;
        int numCyclesPower = 4;
        byte[] salt = "salt".getBytes();
        try {
            AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256PasswordNullSalt_UtjD2() throws Exception {
        byte[] password = "password".getBytes();
        int numCyclesPower = 4;
        byte[] salt = null;
        try {
            AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16DecodeNullInput_nsyC0() {
        char[] chars = null;
        byte[] result = AES256SHA256Decoder.utf16Decode(chars);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16DecodeEmptyInput_xmlC2() {
        char[] chars = new char[0];
        byte[] result = AES256SHA256Decoder.utf16Decode(chars);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    }
}