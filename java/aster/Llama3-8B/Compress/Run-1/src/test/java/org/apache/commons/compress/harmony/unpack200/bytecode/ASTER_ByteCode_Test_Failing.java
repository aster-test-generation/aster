/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteCode_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperand2Bytes_XBnV0() {
        ByteCode byteCode = new ByteCode(1);
        byteCode.setOperand2Bytes(0, 0);
        assertEquals(0, byteCode.getByteCodeForm().getRewrite()[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperand2Bytes2_fQhz1() {
        ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
        byteCode.setOperand2Bytes(255, 1);
        assertEquals(0xFF, byteCode.getByteCodeForm().getRewrite()[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperand2Bytes3_nbRq2() {
        ByteCode byteCode = new ByteCode(1);
        try {
            byteCode.setOperand2Bytes(0, 2);
            fail("Expected Error");
        } catch (Error e) {
            assertEquals("Trying to rewrite " + byteCode + " with an int at position 2 but this won't fit in the rewrite array", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes1_Imek0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandBytes(new int[] {1, 2, 3});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes2_fZzW1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[] {});
    byteCode.setOperandBytes(new int[] {1, 2, 3});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes3_oFhh2() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandBytes(new int[] {});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes4_Cmga3() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandBytes(new int[] {1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedMustStartClassPool_yqyM0() {
        ByteCode byteCodeForm = new ByteCode(1);
        boolean result = byteCodeForm.nestedMustStartClassPool();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeNoArgByteCodeAlreadyCreated_NuLZ2() {
    ByteCode byteCode = ByteCode.getByteCode(0x00);
    ByteCode byteCode2 = ByteCode.getByteCode(0x00);
    assertEquals(byteCode, byteCode2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteWithinLimits_iJtg0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandByte(0x12, 0);
    byteCode.setOperandByte(0x34, 1);
    byteCode.setOperandByte(0x56, 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteAtFirstPosition_bSPz1() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandByte(0x12, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteAtLastPosition_PjOq2() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandByte(0x12, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_RJuH0() {
    ByteCode byteCode = new ByteCode(1);
    String result = byteCode.getName();
    assertEquals("getByteCodeForm().getName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_jCDd0() {
    ByteCode byteCode = new ByteCode(1);
    int length = byteCode.getLength();
    assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_TsZS1() {
        ByteCode byteCode = new ByteCode(1);
        int[] rewrite = byteCode.getRewrite();
        int[] expected = new int[0];
        assertArrayEquals(expected, rewrite);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_MYEU0() {
        ByteCode byteCode = new ByteCode(1);
        int[] result = byteCode.getNestedPosition(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_Jxhn0() {
        ByteCode byteCode = new ByteCode(1);
        int[][] expected = new int[][]{{1, 2}};
        byteCode = new ByteCode(1, new ClassFileEntry[]{});
        int[][] actual = byteCode.getNestedPositions();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_sYHD0() {
    ByteCode byteCode = new ByteCode(1);
    String result = byteCode.toString();
    assertEquals("ByteCode", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_ozsN0() {
    ByteCode byteCode = new ByteCode(1);
    int[] result = byteCode.getByteCodeTargets();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_aYot0() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertEquals(ByteCodeForm.class, byteCodeForm.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex_blBB0() {
    ByteCode byteCode = new ByteCode(1);
    int result = byteCode.getByteCodeIndex();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandSigned2BytesPositiveOperand_tCcd0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandSigned2Bytes(0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandSigned2BytesNegativeOperand_ckct1() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandSigned2Bytes(-1, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolveWithTwoNestedEntries_KsXs1_GDwx0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    ClassConstantPool pool = new ClassConstantPool();
    byteCode.setByteCodeIndex(0);
    byteCode.resolve(pool);
    assertEquals(-1, pool.indexOf(byteCode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_uaCf0_SGSx0_fid2() {
    ByteCode byteCode = new ByteCode(1);
    int result = byteCode.hashCode();
    assertEquals(538, result);
}
}