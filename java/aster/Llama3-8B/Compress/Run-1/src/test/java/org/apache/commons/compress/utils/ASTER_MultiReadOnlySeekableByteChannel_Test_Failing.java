/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncate_BsQN0() {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
        SeekableByteChannel channel = multiChannel.truncate(10L);
        assertThrows(NonWritableChannelException.class, () -> {
            channel.truncate(10L);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateNegative_bdBI2() {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
        SeekableByteChannel channel = multiChannel.truncate(-10L);
        assertThrows(NonWritableChannelException.class, () -> {
            channel.truncate(-10L);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpen_pzxA0() {
        List<SeekableByteChannel> channels = new ArrayList<>();
        SeekableByteChannel channel1 = null;
        SeekableByteChannel channel2 = null;
        channels.add(channel1);
        channels.add(channel2);
        MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
        assertTrue(multiChannel.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClosed_oDXu1() {
        List<SeekableByteChannel> channels = new ArrayList<>();
        SeekableByteChannel channel1 = null;
        SeekableByteChannel channel2 = null;
        channels.add(channel1);
        channels.add(channel2);
        MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
        assertFalse(multiChannel.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPathsNullPaths_uWCC2() {
    try {
        MultiReadOnlySeekableByteChannel.forPaths((Path[]) null);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("paths must not be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateNull_VyqM1_Snyv0() {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
    assertThrows(NullPointerException.class, () -> {
        multiChannel.close();
    });
}
}