/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnparseableExtraFieldData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataValidInput_yyGt0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
    assertEquals(10, unparseableExtraFieldData.getCentralDirectoryData().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_NullCentralDirectoryData_RUZX0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] result = unparseableExtraFieldData.getCentralDirectoryData();
    byte[] expected = unparseableExtraFieldData.getLocalFileDataData();
    assert Arrays.equals(result, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_LocalFileDataIsNull_Kvra0() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        ZipShort result = unparseableExtraFieldData.getLocalFileDataLength();
        assertEquals(0, result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataInvalidInput_HReP1_fid1() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 10;
    unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_xXED0_QsOe0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    ZipShort actual = unparseableExtraFieldData.getCentralDirectoryLength();
    byte[] expected = ZipShort.getBytes(actual.getValue());
    assertArrayEquals(new byte[]{0, 0}, expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_LocalFileDataLengthReturned_CoNe0_QiqK0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    ZipShort result = unparseableExtraFieldData.getCentralDirectoryLength();
    assertEquals(unparseableExtraFieldData.getLocalFileDataLength().getValue(), result.getValue());
}
}