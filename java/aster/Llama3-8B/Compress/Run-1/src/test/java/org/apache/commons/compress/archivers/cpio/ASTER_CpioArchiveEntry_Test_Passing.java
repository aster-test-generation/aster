/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksum_uifM0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        long result = cpioArchiveEntry.getChksum();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary3_yoYQ2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(4, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary7_QlAo6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123456L);
        assertEquals(4, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_SdeK0() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_QQHb2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 123);
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMaj_MkYU0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMaj_yVZx0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setRemoteDeviceMaj(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMajNewFormat_yWkk1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2);
    cpioArchiveEntry.setRemoteDeviceMaj(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_mDuZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        entry.setInode(123);
        assertEquals(123, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode2_ESDC1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(456);
        assertEquals(456, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode3_ejQU2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        entry.setInode(789);
        assertEquals(789, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode4_oUqF3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        entry.setInode(901);
        assertEquals(901, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode6_Hewy5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(567);
        assertEquals(567, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode7_GnmT6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(890);
        assertEquals(890, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode8_LJtw7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        entry.setInode(111);
        assertEquals(111, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode9_zOQt8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(222);
        assertEquals(222, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode10_KPOe9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(333);
        assertEquals(333, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode11_CMlm10() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(444);
        assertEquals(444, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode12_HnaV11() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(555);
        assertEquals(555, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode13_pwai12() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(666);
        assertEquals(666, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode14_UZds13() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(777);
        assertEquals(777, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode15_FxSG14() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(888);
        assertEquals(888, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode16_vJoU15() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(999);
        assertEquals(999, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode17_pOBB16() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setInode(1010);
        assertEquals(1010, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMin_fPDs0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinNewFormat_mSxn1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate3_RGyD2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate8_INep7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceNewFormat_IizE1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 100);
        assertThrows(UnsupportedOperationException.class, () -> cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMaj_XLoC0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMajNewFormat_WlIZ1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 100);
        assertEquals(0, cpioArchiveEntry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID5_BhrY4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat_tPQn0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat2_PTSl1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 123456L);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_PSJh2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat5_gTjR4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat7_CNNP6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123456L);
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_nVlK0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 0);
        cpioArchiveEntry.setChksum(1234567890L);
        assertEquals(1234567890L, cpioArchiveEntry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceNullFormat_qdpD2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(null);
        try {
            cpioArchiveEntry.getDevice();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_PVdo0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinNewFormat_JxpT1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "test", 100);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMin_pCVf0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatAndName_kVyl1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 111024L);
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithName_JruG2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithPath_KNdG3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test", LinkOption.NOFOLLOW_LINKS);
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameAndSize_Dcja5() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 111024L);
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFile_IcsZ6() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndName_cGeO2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test");
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInodeWithInodeAndNameAndSize_dCPy3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test", 100);
        assertEquals(0, cpioArchiveEntry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sgYQ0_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sgYQ0_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentNames_HTqT1_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("different");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentNames_HTqT1_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("different");
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_OggD2() {
        CpioArchiveEntry entry = new CpioArchiveEntry(null);
        int hash = entry.hashCode();
        assertEquals(31, hash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeEmptyName_fwqp3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        int hash = entry.hashCode();
        assertEquals(31, hash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentSizes_gVMq5_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 2);
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentSizes_gVMq5_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 2);
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameSize_jrPV6_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 1);
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameSize_jrPV6_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry("test", 1);
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry("test", 1);
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameFormat_pCFM7_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeSameFormat_pCFM7_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentFormats_rSWE8_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2, "test");
        int hash2 = entry2.hashCode();
        assertEquals(3556529, hash1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentFormats_rSWE8_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test");
        int hash1 = entry1.hashCode();
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2, "test");
        int hash2 = entry2.hashCode();
        assertNotEquals(11209022, hash2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMaj_iOqf0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setDeviceMaj(1L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMajNewFormat_mLZW1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2);
    cpioArchiveEntry.setDeviceMaj(1L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize1_YwjQ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 123L);
        assertEquals(123L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_AlcV1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID20_sUqv19() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_oait0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    cpioArchiveEntry.setRemoteDeviceMin(123L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinNewFormat_ewZj1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "test", 123L);
    cpioArchiveEntry.setRemoteDeviceMin(123L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName10_AtTr9_cVsg1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceOldFormat2_BZgo2_elkK1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 0L);
    cpioArchiveEntry.setNumberOfLinks(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount1_QqZC0_GjJb1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setNumberOfLinks(10);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount2_lLZE1_pikM0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 12);
    entry.setNumberOfLinks(0);
}
}