/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_rUgH0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsLastModifiedDate = 1234567890L;
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate), entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_dyrI1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsAccessDate = 1234567890L;
        entry.setAccessDate(ntfsAccessDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsAccessDate), entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_Bfqq0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date creationDate = sevenZArchiveEntry.getCreationDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_nULA0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date lastModifiedDate = sevenZArchiveEntry.getLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTimeNull_kiLR1() {
        Date date = null;
        long result = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDate_tXvl0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date accessDate = sevenZArchiveEntry.getAccessDate();
        System.out.println("return FileTimes.toDate(getAccessTime());");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationTimeWithoutCreationDate_MpFl1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime result = entry.getCreationTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_OjDQ0_fid2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_JvNz3_fid2() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_mcoD0_fid2() {
        SevenZArchiveEntry archiveEntry = new SevenZArchiveEntry();
        boolean result = archiveEntry.hasStream();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasAccessDate_iJpu0_fid2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasAccessDate();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDate_pGRG0_fid2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasCreationDate();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCrc_jFDC0_fid2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasCrc();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasWindowsAttributes_ymGt0_fid2() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc9_XIrQ8_ddCb0_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0x1E2401F9L, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNotNullTime_rVIy1_VTyS0_1_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1234567890L);
    entry.setAccessTime(time);
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNullTimeAgain_vYtz2_WTZP0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    entry.setAccessTime(FileTime.fromMillis(1234567890L));
    assertTrue(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_EkZG0_SMDk0() {
    SevenZArchiveEntry archiveEntry = new SevenZArchiveEntry();
    SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "options");
    SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
    archiveEntry.setContentMethods(method1, method2);
    assert Arrays.asList(archiveEntry.getContentMethods()).contains(method1.getMethod());
    assert Arrays.asList(archiveEntry.getContentMethods()).contains(method2.getMethod());
}
}