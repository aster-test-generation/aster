/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUsesEncryption_IrMI0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        boolean result = generalPurposeBit.usesEncryption();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlag_MpLn4() {
        byte[] data = new byte[1];
        data[0] = (byte) 0x40;
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(8192, b.getSlidingDictionarySize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlagDefault_Gnek5() {
        byte[] data = new byte[1];
        data[0] = (byte) 0x00;
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, b.getSlidingDictionarySize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlag_djnZ6() {
        byte[] data = new byte[1];
        data[0] = (byte) 0x06;
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(3, b.getNumberOfShannonFanoTrees());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlagDefault_ZDPu7() {
        byte[] data = new byte[1];
        data[0] = (byte) 0x00;
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, b.getNumberOfShannonFanoTrees());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUsesUTF8ForNamesTrue_BnSR0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        boolean result = generalPurposeBit.usesUTF8ForNames();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseUTF8ForNamesFlag_GjmO1_cSbk0_1() {
    byte[] data = new byte[1];
    data[0] = (byte) 0x02;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertTrue(b instanceof GeneralPurposeBit);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseUTF8ForNamesFlag_GjmO1_cSbk0_2() {
    byte[] data = new byte[1];
    data[0] = (byte) 0x02;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertTrue(b.clone() instanceof GeneralPurposeBit);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseStrongEncryptionFlag_vugI2_Kemy0() {
    byte[] data = new byte[1];
    data[0] = (byte) 0x04;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEncryptionFlag_WfbB3_ASAS0() {
    byte[] data = new byte[1];
    data[0] = (byte) 0x08;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertTrue(b instanceof GeneralPurposeBit && ((GeneralPurposeBit)b).clone() instanceof GeneralPurposeBit);
}
}