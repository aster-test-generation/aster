/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytes_iPia0() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        assertEquals("ZipEightByteInteger value: " + bytes, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytesOffset_BbNQ3() {
        byte[] bytes = new byte[8];
        int offset = 0;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
        assertEquals("ZipEightByteInteger value: " + bytes, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueBigInteger_xaaO1() {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        assertEquals(bigInteger.longValue(), ZipEightByteInteger.getLongValue(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08}, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueLong_lKjM2() {
        assertEquals(0x010203040507080L, ZipEightByteInteger.getLongValue(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08}, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueOffset_aEmS4() {
        assertEquals(0x020304050607080L, ZipEightByteInteger.getLongValue(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08}, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_xHGn0() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long result = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(0x0102030405060708L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_Mmuo0() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        BigInteger result = zipEightByteInteger.getValue();
        assertEquals(BigInteger.valueOf(0x0102030405060708L), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayOffset_CNvk3() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
        BigInteger result = zipEightByteInteger.getValue();
        assertEquals(BigInteger.valueOf(0x0102030405060708L), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithByteArray_shOb2() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        assertEquals(0x1234567890abcdefL, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithByteArrayAndOffset_sXec3() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
        assertEquals(0x1234567890abcdefL, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue1_lzUF1() {
    byte[] result = ZipEightByteInteger.getBytes(1);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue2_IYuC2() {
    byte[] result = ZipEightByteInteger.getBytes(2);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0, 0, 0, 1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue3_qMFN3() {
    byte[] result = ZipEightByteInteger.getBytes(3);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0, 0, 1, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue4_unYq4() {
    byte[] result = ZipEightByteInteger.getBytes(4);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0, 1, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue5_oSJf5() {
    byte[] result = ZipEightByteInteger.getBytes(5);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 1, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue6_aiYe6() {
    byte[] result = ZipEightByteInteger.getBytes(6);
    assert Arrays.equals(result, new byte[]{0, 0, 1, 0, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue7_nfLo7() {
    byte[] result = ZipEightByteInteger.getBytes(7);
    assert Arrays.equals(result, new byte[]{0, 1, 0, 0, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue8_Eais8() {
    byte[] result = ZipEightByteInteger.getBytes(8);
    assert Arrays.equals(result, new byte[]{1, 0, 0, 0, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_jOqX0() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    bytes[2] = (byte) 0x03;
    bytes[3] = (byte) 0x04;
    bytes[4] = (byte) 0x05;
    bytes[5] = (byte) 0x06;
    bytes[6] = (byte) 0x07;
    bytes[7] = (byte) 0x08;
    assertEquals(BigInteger.valueOf(0x0102030405060708L).setBit(63), ZipEightByteInteger.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithBitSet_WAwQ1() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    bytes[2] = (byte) 0x03;
    bytes[3] = (byte) 0x04;
    bytes[4] = (byte) 0x05;
    bytes[5] = (byte) 0x06;
    bytes[6] = (byte) 0x07;
    bytes[7] = (byte) 0x80;
    assertEquals(BigInteger.valueOf(0x0102030405060800L).setBit(63), ZipEightByteInteger.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigIntegerValue_Middle_gozP2() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(0x1234567890ABCDEFL));
    assert result[0] == (byte) 0x12;
    assert result[1] == (byte) 0x34;
    assert result[2] == (byte) 0x56;
    assert result[3] == (byte) 0x78;
    assert result[4] == (byte) 0x90;
    assert result[5] == (byte) 0xAB;
    assert result[6] == (byte) 0xCD;
    assert result[7] == (byte) 0xEF;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_BigIntegerValue_RightmostBit_mOqF4() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(1L));
    assert result[0] == 0;
    assert result[1] == 0;
    assert result[2] == 0;
    assert result[3] == 0;
    assert result[4] == 0;
    assert result[5] == 0;
    assert result[6] == 0;
    assert result[7] == (byte) 0x01;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_fDGl0_xHgm0() {
    ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08});
    assertEquals(0x010203040507080L, ZipEightByteInteger.getBytes(BigInteger.valueOf(0x010203040507080L)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_uYNv0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1));
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLong_qSap1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1);
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithByteArrayValue_BaMx2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[0]);
        int hashCode = zipEightByteInteger.hashCode();
        assertEquals(0, hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithByteArrayValueAndOffset_IGEH3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[0], 0);
        int hashCode = zipEightByteInteger.hashCode();
        assertEquals(0, hashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytes_rOLq0() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(BigInteger.valueOf(0x0102030405060708L), ZipEightByteInteger.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffset_XQiS1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(BigInteger.valueOf(0x0204030506070809L), ZipEightByteInteger.getValue(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueEmptyBytes_Epzv5() {
    assertThrows(NullPointerException.class, () -> ZipEightByteInteger.getValue(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLongBytes_vMji7() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLargeBytes_zbNF9() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLong_QXRr2_hcwH1_fid1() {
    assertEquals(BigInteger.valueOf(0x0102030405060708L).toByteArray(), ZipEightByteInteger.getBytes(BigInteger.valueOf(0x0102030405060708L)));
}
}