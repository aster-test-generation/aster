/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Passing {
private byte[] concatenateBytes(byte[] bytes1, byte[] bytes2) {
    byte[] result = new byte[bytes1.length + bytes2.length];
    System.arraycopy(bytes1, 0, result, 0, bytes1.length);
    System.arraycopy(bytes2, 0, result, bytes1.length, bytes2.length);
    return result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength8_CQAv0() {
        byte[] signature = new byte[] {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
        boolean result = ArArchiveInputStream.matches(signature, 8);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength7_JmUp1() {
        byte[] signature = new byte[] {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e};
        boolean result = ArArchiveInputStream.matches(signature, 7);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureNotEqual_UUHk3() {
        byte[] signature = new byte[] {0x20, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
        boolean result = ArArchiveInputStream.matches(signature, 8);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength0_JwRJ6() {
        boolean result = ArArchiveInputStream.matches(new byte[0], 0);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength1_OdAG7() {
        boolean result = ArArchiveInputStream.matches(new byte[] {0x20}, 1);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength2_iRBM8() {
        boolean result = ArArchiveInputStream.matches(new byte[] {0x20, 0x30}, 2);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength3_jWgu9() {
        boolean result = ArArchiveInputStream.matches(new byte[] {0x20, 0x30, 0x40}, 3);
        assert !result;
    }
}