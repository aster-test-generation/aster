/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0016_CertificateIdForCentralDirectory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryDataWithInvalidData_QtGg1() throws ZipException {
        X0016_CertificateIdForCentralDirectory obj = new X0016_CertificateIdForCentralDirectory();
        byte[] data = new byte[] {(byte) 0x01, (byte) 0x02};
        int offset = 0;
        int length = 2;
        try {
            obj.parseFromCentralDirectoryData(data, offset, length);
            assert false;
        } catch (ZipException e) {
            assertEquals("org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory is too short, only 2 bytes, expected at least 4", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCount_qfzq0() {
        X0016_CertificateIdForCentralDirectory obj = new X0016_CertificateIdForCentralDirectory();
        int result = obj.getRecordCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordCount_vnPS0_RqSn1() {
    X0016_CertificateIdForCentralDirectory obj = new X0016_CertificateIdForCentralDirectory();
    int result = obj.getRecordCount();
    System.out.println("return " + result + ";");
}
}