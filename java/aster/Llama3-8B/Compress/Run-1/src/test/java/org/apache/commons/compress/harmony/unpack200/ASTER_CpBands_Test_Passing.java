/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8ValueExistingStringSearchForIndexFalse_wTSs4() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("test", false);
        Assertions.assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8ValueNonExistingStringSearchForIndexFalse_iAma5() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("nonExisting", false);
        Assertions.assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPool_RucF0_lfTY0() {
    Segment segment = new Segment(); 
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool actual = cpBands.getConstantPool();
    assert actual != null;
}
}