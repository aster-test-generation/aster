/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalFileHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_YutX0() {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        String result = localFileHeader.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_QuQu0() {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        assertEquals(0, localFileHeader.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNotNullName_yHsT1() {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        String name = "test";
        localFileHeader.name = name;
        assertEquals(name.hashCode(), localFileHeader.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_aZbC0() {
    LocalFileHeader localFileHeader = new LocalFileHeader();
    boolean result = localFileHeader.equals(localFileHeader);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_nGWF1() {
    LocalFileHeader localFileHeader = new LocalFileHeader();
    boolean result = localFileHeader.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_LBEx2() {
    LocalFileHeader localFileHeader = new LocalFileHeader();
    Object obj = new Object();
    boolean result = localFileHeader.equals(obj);
    assert !result;
}
}