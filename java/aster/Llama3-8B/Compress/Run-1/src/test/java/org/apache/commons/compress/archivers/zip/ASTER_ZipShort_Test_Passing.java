/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_BERl0() {
    ZipShort zipShort1 = new ZipShort(new byte[] {1, 2, 3});
    ZipShort zipShort2 = zipShort1;
    boolean result = zipShort1.equals(zipShort2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_uABW1() {
    ZipShort zipShort1 = new ZipShort(new byte[] {1, 2, 3});
    ZipShort zipShort2 = new ZipShort(new byte[] {4, 5, 6});
    boolean result = zipShort1.equals(zipShort2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_hvhp2() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
    boolean result = zipShort.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithInt_zPbX1() {
        ZipShort zipShort = new ZipShort(123);
        assertEquals("ZipShort value: 123", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytesOffset_VMcC2() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
        assertEquals("ZipShort value: 770", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIntConstructor_yQDl1() {
        ZipShort zipShort = new ZipShort(1);
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithIntValue_zIhV0() {
        ZipShort zipShort = new ZipShort(0x1234);
        byte[] result = zipShort.getBytes();
        byte[] expected = new byte[] {(byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueNullBytes_kDXs3() {
    byte[] bytes = null;
    try {
        ZipShort.getValue(bytes);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_sNjU0() {
        ZipShort zipShort = new ZipShort(new byte[10]);
        Object clone = zipShort.clone();
        assert clone instanceof ZipShort;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneInt_fLcD1() {
        ZipShort zipShort = new ZipShort(10);
        Object clone = zipShort.clone();
        assert clone instanceof ZipShort;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes0_RMLH0() {
    byte[] result = ZipShort.getBytes(0);
    assert Arrays.equals(result, new byte[] {0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_lWBM1() {
    byte[] result = ZipShort.getBytes(1);
    assert Arrays.equals(result, new byte[] {1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes256_NGav3() {
    byte[] result = ZipShort.getBytes(256);
    assert Arrays.equals(result, new byte[] {0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes65536_ZFnW5() {
    byte[] result = ZipShort.getBytes(65536);
    assert Arrays.equals(result, new byte[] {0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_lDio0() {
        byte[] bytes = new byte[]{0x00, 0x01};
        int offset = 0;
        int expected = 256;
        int result = ZipShort.getValue(bytes, offset);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithByteArray_cBpp0_GMQs0() {
    ZipShort zipShort = new ZipShort(new byte[10], 0);
    assertEquals(zipShort.hashCode(), ((ZipShort) zipShort).getValue(zipShort.getBytes()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithIntValue_GifD1_UPgd1() {
    ZipShort zipShort = new ZipShort(10);
    assertEquals(zipShort.getValue(zipShort.getBytes(), 0), zipShort.getValue(zipShort.getBytes(), 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithByteArray_UJoO2_bePI0() {
    ZipShort zipShort = new ZipShort(new byte[10]);
    assertEquals(0, zipShort.hashCode()); // Assuming the default value of zipShort.value is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes255_KXwh2_RsTl0() {
    byte[] result = ZipShort.getBytes(255);
    assert Arrays.equals(result, new byte[] {(byte)255, (byte)0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes65535_HYcd4_cGHn0() {
    byte[] result = ZipShort.getBytes(65535);
    assert Arrays.equals(result, new byte[] {(byte)255, (byte)255});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIntegerMaxValue_MSrr6_rXpk0() {
    byte[] result = ZipShort.getBytes(Integer.MAX_VALUE);
    assert Arrays.equals(result, new byte[] {(byte)255, (byte)255});
}
}