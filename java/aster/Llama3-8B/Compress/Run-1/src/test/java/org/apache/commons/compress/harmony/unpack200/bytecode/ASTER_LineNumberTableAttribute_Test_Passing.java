/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LineNumberTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_AlyV0() {
    LineNumberTableAttribute attribute1 = new LineNumberTableAttribute(10, new int[]{1, 2, 3}, new int[]{1, 2, 3});
    boolean result = attribute1.equals(attribute1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_rWmo1() {
    LineNumberTableAttribute attribute1 = new LineNumberTableAttribute(10, new int[]{1, 2, 3}, new int[]{1, 2, 3});
    LineNumberTableAttribute attribute2 = new LineNumberTableAttribute(10, new int[]{1, 2, 4}, new int[]{1, 2, 3});
    boolean result = attribute1.equals(attribute2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Dagh0() {
        int lineNumberTableLength = 5;
        int[] startPcs = {1, 2, 3, 4, 5};
        int[] lineNumbers = {10, 20, 30, 40, 50};
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
        String result = lineNumberTableAttribute.toString();
        assertEquals("LineNumberTable: 5 lines", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_iWUH0() {
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(10, new int[]{1}, new int[]{2});
        ClassFileEntry[] expected = new ClassFileEntry[] { lineNumberTableAttribute.getAttributeName() };
        ClassFileEntry[] actual = lineNumberTableAttribute.getNestedClassFileEntries();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_sGQI0() {
        int lineNumberTableLength = 10;
        int[] startPcs = {1, 2, 3};
        int[] lineNumbers = {4, 5, 6};
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
        int[] result = lineNumberTableAttribute.getStartPCs();
        assertArrayEquals(startPcs, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_WUmW1() {
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(5, new int[]{1}, new int[]{2});
        int length = lineNumberTableAttribute.getLength();
        assertEquals(2 + 4 * 5, length);
    }
}