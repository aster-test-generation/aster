/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_exum0_cUXf0_1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos);
    compressorOutputStream.write(10);
    assertEquals(1, bos.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_exum0_cUXf0_2() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos);
    compressorOutputStream.write(10);
    assertEquals(1, bos.toByteArray().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_exum0_cUXf0_3() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos);
    compressorOutputStream.write(10);
    assertEquals((byte)10, bos.toByteArray()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithPreset_xPkB1_Txlt0_1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos, 1);
    compressorOutputStream.write(10);
    assertEquals(1, bos.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithPreset_xPkB1_Txlt0_2() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos, 1);
    compressorOutputStream.write(10);
    assertEquals(1, bos.toByteArray().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithPreset_xPkB1_Txlt0_3() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos, 1);
    compressorOutputStream.write(10);
    assertEquals((byte)10, bos.toByteArray()[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_zGIw0_XgPd0() throws IOException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(out);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressorOutputStream.write(buf, 0, 5);
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5}, out.toByteArray());
    compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithPreset_STNN2_webG0() throws IOException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(out, 1);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressorOutputStream.write(buf, 0, 5);
    compressorOutputStream.close();
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5}, out.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_mQfu0_rCBb1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    XZCompressorOutputStream compressorOutputStream = new XZCompressorOutputStream(bos, 1);
    assertThrows(IOException.class, () -> compressorOutputStream.close());
}
}