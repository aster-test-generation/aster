/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNonNullFileTime_rvpf0() {
        FileTime fileTime = FileTime.from(Instant.now());
        long unixTime = TimeUtils.toUnixTime(fileTime);
        assertEquals(fileTime.to(TimeUnit.SECONDS), unixTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNullFileTime_BUhj1() {
        long unixTime = TimeUtils.toUnixTime(null);
        assertEquals(0, unixTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_avJf0() {
        Instant instant = Instant.now();
        FileTime fileTime = FileTime.from(Instant.now());
        boolean result = TimeUtils.isUnixTime(fileTime);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeValidRange_QuyP0() {
        assertTrue(TimeUtils.isUnixTime(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange_iJgj1() {
        assertTrue(TimeUtils.isUnixTime(Integer.MIN_VALUE - 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange2_SLqx2() {
        assertTrue(TimeUtils.isUnixTime(Integer.MAX_VALUE + 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_tFbv0() {
        Date date = new Date();
        long result = TimeUtils.toNtfsTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_KVBP0() {
        Date date = new Date();
        FileTime result = TimeUtils.toFileTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTimeNull_BKcK1() {
        Date date = null;
        FileTime result = TimeUtils.toFileTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_bbxy0_EzhU0() {
    Instant instant = Instant.now();
    long ntfsTime = instant.toEpochMilli();
    Date expected = TimeUtils.ntfsTimeToDate(ntfsTime);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
    assertEquals(expected, actual);
}
}