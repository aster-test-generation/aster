/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeName_baUM0() {
        CPUTF8 cpUTF8Value = new CPUTF8("test");
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{0}, new int[]{1}, new CPUTF8[]{cpUTF8Value}, new CPUTF8[]{cpUTF8Value}, new int[]{0});
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
        assertSame("UTF-8:test", cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_oqjg0_nNnG0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(3, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3")}, new int[]{7, 8, 9});
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KUht0_nfFQ0() {
    int localVariableTypeTableLength = 10;
    int[] startPcs = new int[10];
    int[] lengths = new int[10];
    String[] names = new String[10];
    CPUTF8[] cpUTF8Values = new CPUTF8[10];
    CPUTF8[] cpUTF8Signatures = new CPUTF8[10];
    int[] indexes = new int[10];
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, cpUTF8Values, cpUTF8Signatures, indexes);
    String result = attribute.toString();
    assert result.equals("LocalVariableTypeTable: 10 variables");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesEmpty_oLNT1_GWzI0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeName_baUM0_fid1() {
        CPUTF8 cpUTF8Value = new CPUTF8("test");
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[]{0}, new int[]{1}, new CPUTF8[]{cpUTF8Value}, new CPUTF8[]{cpUTF8Value}, new int[]{0});
        LocalVariableTypeTableAttribute.setAttributeName(cpUTF8Value);
        assertSame("attributeName", cpUTF8Value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCodeLength_oSlz0_FDzv0_fid2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    attribute.setAttributeName(null); // attribute does not have a method called setCodeLength
    assertEquals(null, attribute.getAttributeName());
}
}