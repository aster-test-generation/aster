/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
private byte[] getBytes(String data) {
    return data.getBytes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLFH_SIG_saED0() {
        byte[] signature = ZipArchiveOutputStream.LFH_SIG;
        boolean result = ZipArchiveInputStream.matches(signature, signature.length);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesEOCD_SIG_gIGn1() {
        byte[] signature = ZipArchiveOutputStream.EOCD_SIG;
        boolean result = ZipArchiveInputStream.matches(signature, signature.length);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesDD_SIG_jQMI2() {
        byte[] signature = ZipArchiveOutputStream.DD_SIG;
        boolean result = ZipArchiveInputStream.matches(signature, signature.length);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSingleSegmentSplitMarker_sfUM3() {
        byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
        boolean result = ZipArchiveInputStream.matches(signature, signature.length);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesShortSignature_PXVr4() {
        byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length - 1];
        boolean result = ZipArchiveInputStream.matches(signature, signature.length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesNullSignature_nEvG5() {
        boolean result = ZipArchiveInputStream.matches(null, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_Cxxx0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    long skipped = zipArchiveInputStream.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipEndOfStream_snMQ4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    long skipped = zipArchiveInputStream.skip(10);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_UeGO0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithEncoding_GnHP1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    zipArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntry_EmptyArchive_LmAS0() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount_TNWT0() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), "UTF-8");
        long result = zipArchiveInputStream.getUncompressedCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount2_dNYr1() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), "UTF-8", true);
        long result = zipArchiveInputStream.getUncompressedCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount3_hENt2() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
        long result = zipArchiveInputStream.getUncompressedCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount4_egSG3() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        long result = zipArchiveInputStream.getUncompressedCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedCount7_gGDU6() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), "UTF-8", true, false);
        long result = zipArchiveInputStream.getUncompressedCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataWithoutZipArchiveEntry_FLcD1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ArchiveEntry archiveEntry = new ZipArchiveEntry();
    boolean result = zipArchiveInputStream.canReadEntryData(archiveEntry);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidParameters_IeVl0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
    Assertions.assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithClosedStream_Bjbl6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 0, 10);
        Assertions.fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithDeflatedEntry_bOyT0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullBuffer_qlrE3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    int read = zipArchiveInputStream.read(null, 0, 10);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeLength_RCSY4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, -1);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetGreaterThanBufferLength_StcH5() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, buffer.length, 10);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLengthGreaterThanBufferLength_zouL6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length + 1);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetLessThanZero_hUFm7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, -1, 10);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullInputStream_HpnQ8() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithStoredEntry_UzNo8_txpR0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.read(new byte[10], 0, 10);
    Assertions.assertEquals(-1, zipArchiveInputStream.read(new byte[10], 0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_eOYI0_wPTx0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_Vnlg0_gKEb0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_EmptyArchive_uKor0_ITkW0() {
    try {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_InvalidSignature_zDVR7_Lvwx0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_NameWithEFSFlag_fpzo9_JBFa0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}), "UTF-8", true, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_InvalidSignature_Fhla5_jrkk0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4c, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_EOFException_eVot3_GJhS0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4B, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_Prue0_uGZh0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assert zipArchiveEntry == null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferLengthZero_fBmT0_PTzs0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[0];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, buffer.length);
        assertEquals(0, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferOffsetGreaterThanBufferLength_bvMQ1_CYdz0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int result = zipArchiveInputStream.read(buffer, 5, buffer.length);
        assertEquals(-1, result);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferLengthGreaterThanBufferLength_cCvO2_PfhN0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[15];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, buffer.length);
        assertEquals(-1, result);
    } catch (IOException e) {
        assertEquals("Truncated ZIP file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferOffsetLessThanZero_GFNE3_VhLR0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, buffer.length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferLengthZero_ReturnZero_dHwj0_sWdM0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, 0);
        assertEquals(0, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_CurrentEntryNull_ReturnMinusOne_avre5_bxuW0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, 0);
    } catch (IOException e) {
        assertEquals(-1, e.getMessage().hashCode());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZeroLength_RpTF1_UlgU0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, 0);
        assertEquals(0, read);
    } catch (IOException e) {
        fail("IOException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInvalidOffset_bhfm4_IBLY0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int read = zipArchiveInputStream.read(buffer, 10, 5);
        assertEquals(-1, read);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNoCurrentEntry_Djgn10_CJkt0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, 5);
        assertEquals(-1, read);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored4_oUpx3_CIzI0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 0;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(0, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored5_iMGB4_Yddu0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 10;
    int length = 5;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflated_DUkB5_ubRi0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflated2_gVEO6_xUUg0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflated3_TELi7_wfMu0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflated4_QUaD8_WMgd0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 0;
    try {
        int result = zip.read(buffer, offset, length);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadValidInput_XOZW0_DkKv0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        int read = zipArchiveInputStream.read(buffer,-1, buffer.length);
        Assertions.assertEquals(read,-1);
    } catch (IOException e) {
        throw new AssertionError("IOException was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZeroLength_BiHm1_Vbzy0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, 0);
        Assertions.assertEquals(read, 0);
    } catch (IOException e) {
        throw new AssertionError(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_CnFk3_IkGw0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        int read = zipArchiveInputStream.read(null, 0, 10);
    } catch (IOException e) {
        Assertions.assertTrue(true);
    }
}
}