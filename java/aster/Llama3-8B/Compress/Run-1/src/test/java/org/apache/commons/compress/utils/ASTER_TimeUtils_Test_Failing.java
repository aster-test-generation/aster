/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToDate_VKPR0() {
        long ntfsTime = 1234567890L;
        Date expectedDate = new Date(1234567890000L);
        Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
        assert actualDate.equals(expectedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange_iJgj1_fid1() {
        assertFalse(TimeUtils.isUnixTime(Integer.MIN_VALUE - 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange2_SLqx2_fid1() {
        assertFalse(TimeUtils.isUnixTime(Integer.MAX_VALUE + 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_kGHV1() {
        long javaTime = 1643723400 * 1000000000;
        long result = TimeUtils.toNtfsTime(javaTime);
        assertEquals(0, result);
    }
}