/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_ZvBu0_gwGy0() {
    byte[] signature = new byte[] {0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A};
    int length = 10;
    boolean result = LZMAUtils.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0() {
        assertEquals(true, LZMAUtils.isCompressedFileName("file.lzma"));
        assertEquals(false, LZMAUtils.isCompressedFileName("file.txt"));
        assertEquals(true, LZMAUtils.isCompressedFileName("file.lz"));
        assertEquals(false, LZMAUtils.isCompressedFileName("file"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ESaL0_3_fid2() {
        assertEquals(true, LZMAUtils.isCompressedFileName("file.lz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLZMACompressionAvailable_InternalNotAvailable_FBoi2_vkaL0_fid2() {
    LZMAUtils.CachedAvailability cachedResult = LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE;
    boolean result = LZMAUtils.isLZMACompressionAvailable();
    Assertions.assertFalse(result);
}
}