/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Failing {
private String zipArchiveFieldArrayToString(ZipExtraField[] extraFields) {
    StringBuilder sb = new StringBuilder();
    for (ZipExtraField extraField : extraFields) {
        sb.append(extraField.toString());
        sb.append("\n");
    }
    return sb.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndLastModifiedTime_flgg8() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setLastModifiedTime(entry1.getLastModifiedTime());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndLastAccessTime_mcqP9() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setLastAccessTime(entry1.getLastAccessTime());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndCreationTime_rAQU10() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setCreationTime(entry1.getCreationTime());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndMethod_WaZb14() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setMethod(entry1.getMethod());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndSize_UzLL15() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setSize(entry1.getSize());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndCrc_aKRm16() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    entry2.setCrc(entry1.getCrc());
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeNull_yQmI1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setCreationTime(null);
        assertEquals(null, zipArchiveEntry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithUnparseableExtra_AVow1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(null, "entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", "Expected result");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_zAVz5_1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) instanceof X5455_ExtendedTimestamp);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_zAVz5_2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X000A_NTFS.HEADER_ID) instanceof X000A_NTFS);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra2_kKtp1() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", zipArchiveEntry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra3_Fiof2() throws IOException, ZipException {
        ZipEntry zipEntry = new ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(zipEntry);
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", zipArchiveEntry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra4_KpjW3() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", zipArchiveEntry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra5_jGpc4() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Expected result", zipArchiveEntry.getExtra());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_Ezps0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertTrue(zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset_EDeP0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    long localHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
    assertEquals(0, localHeaderOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_KevN1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] result = zipArchiveEntry.getExtraFields(false);
    assert result.length == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod_ZRww0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod2_JlRS1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldNull_Ohjg0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipShort type = new ZipShort((byte[]) null, 0);
        ZipExtraField result = zipArchiveEntry.getExtraField(type);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameNullName_JolU0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(null, "entryName");
    assertEquals("entryName", zipEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtraWithoutExtra_AIIK1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
    byte[] result = zipArchiveEntry.getLocalFileDataExtra();
    assert result == ByteUtils.EMPTY_BYTE_ARRAY;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime3_Ttqi2() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        zipArchiveEntry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsNullParsingBehavior_DgPh2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ExtraFieldParsingBehavior parsingBehavior = null;
    try {
        zipArchiveEntry.getExtraFields(parsingBehavior);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtraWithUnparseableExtra_uzlW1() throws IOException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        byte[] expected = new byte[10];
        byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtraWithUnparseableExtraAndNullExtraFields_yWCN3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        byte[] expected = new byte[0];
        byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtraWithMergedFields_GlpM4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        byte[] expected = new byte[10];
        byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra3_ilqW2() throws IOException, ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        byte[] expected = new byte[10];
        byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldNull_EdyK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.addAsFirstExtraField(null);
    assert zipArchiveEntry.getExtraFields() == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields2_GNqU1() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        ZipExtraField[] result = zipArchiveEntry.getExtraFields();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithParseableExtraFields_RGTg1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        ZipExtraField[] expected = new ZipExtraField[1];
        ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_ynyb0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset2_nKqr1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_hUZY0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_aXpj1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameAndCommentDifferent_yWDg7_OsAE0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry(new File("test"), "test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry(new File("test"), "test");
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithUnparseableExtraFieldData_qvvl1_PDUX0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] extraFields = new ZipExtraField[1];
    extraFields[0] = new UnparseableExtraFieldData();
    ((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) zipArchiveEntry).setExtraFields(extraFields);
    ZipExtraField[] allExtraFields = ((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) zipArchiveEntry).getExtraFields();
    assertEquals(allExtraFields[0], extraFields[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithUnrecognizedExtraField_BXaV3_gVJw0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ZipExtraField[] extraFields = new ZipExtraField[1];
    extraFields[0] = new UnrecognizedExtraField();
    zipArchiveEntry.setExtraFields(extraFields);
    ZipExtraField[] actualExtraFields = zipArchiveEntry.getExtraFields();
    assertEquals(Arrays.asList(actualExtraFields), Arrays.asList(extraFields));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousNull_SRFE2_UKFc0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    assertNull(zipArchiveEntry.getNameSource());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraSameInputNull_jAEE9_yWFd0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    byte[] extra = new byte[10];
    entry.setExtra(extra);
    entry.setExtra(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixModeUnix_PHcx0_XPJj0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new File("path"), "entryName");
    zipEntry.setExternalAttributes(0x1a2b3c);
    assertEquals((short) ((0x1a2b3c >> 16) & 0xFF), zipEntry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_pomF0_EgHl0() throws IOException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputPath"), "entryName");
    byte[] expected = new byte[10];
    byte[] actual = zipArchiveEntry.getCentralDirectoryExtra();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired2_GFam2_ZFwe0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getVersionRequired());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributes3_uzef2_Gsgy0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag3_JXrT2_Rvvn0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getRawFlag());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment4_cVRe3_wFQb1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getAlignment());
    } catch (java.util.zip.ZipException e) {
        fail("Unexpected java.util.zip.ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode4_vnti3_sPJI0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode5_ijnc4_lLpo1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        int result = entry.hashCode();
        assertEquals("test".hashCode(), result);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExternalAttributesWithZipEntry_WtCs1_lNBP0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        entry.setExternalAttributes(123L);
        assertEquals(123L, entry.getExternalAttributes());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod3_GLcX2_dFFd1() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getMethod());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy3_vzHI2_wBIK0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        assertEquals(0, entry.getVersionMadeBy());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory4_AKHA3_ofiV0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        assertFalse(zipArchiveEntry.isDirectory());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart4_SSIz3_eIcJ0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithZipEntry_oTow2_sAKp0() {
    ZipEntry zipEntry = new ZipEntry("test");
    ZipArchiveEntry zipArchiveEntry = null;
    try {
        zipArchiveEntry = new ZipArchiveEntry(zipEntry);
    } catch (ZipException e) {
    }
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] actual = zipArchiveEntry.getExtraFields();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneralPurposeBit2_exHP1_qQyc0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset4_MoyB3_ZWBW0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getDataOffset());
    } catch (ZipException e) {
        fail("Unexpected ZipException: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize3_tiad2_ShJL0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getSize());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize5_zbSz4_PSVY1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getSize());
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform3_iDaw2_bMNS0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getPlatform());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_zAVz5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) instanceof X5455_ExtendedTimestamp);
        assertEquals(true, zipArchiveEntry.getExtraField(X000A_NTFS.HEADER_ID) instanceof X000A_NTFS);
    }
}