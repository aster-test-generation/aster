/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayIsCachedNull_LlWw2() {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = null;
        boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArray_ILUr0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    cache.cacheArray(array);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArrayAlreadyCached_GMBM1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    cache.cacheArray(array);
    try {
        cache.cacheArray(array);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_UnCachedArray_kAnx1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    String key = "key";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(new ArrayList<Integer>(), indexes);
}
}