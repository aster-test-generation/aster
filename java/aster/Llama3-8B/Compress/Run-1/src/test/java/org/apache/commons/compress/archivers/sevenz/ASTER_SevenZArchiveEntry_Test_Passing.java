/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_gzGM0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> result = sevenZArchiveEntry.getContentMethods();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTime_WAid0() {
        long ntfsTime = 1234567890L;
        Date expectedDate = FileTimes.ntfsTimeToDate(ntfsTime);
        Date actualDate = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        assert actualDate.equals(expectedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_OjDQ0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc1_ATfI0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(12345);
    assertEquals(12345, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc2_ZsvQ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(67890);
    assertEquals(67890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc3_Cpzw2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc4_YXSB3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-12345);
    assertEquals(-12345, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc5_TJny4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc6_phPL5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc7_hsAB6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(1234567890);
    assertEquals(1234567890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc8_KeDg7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-1234567890);
    assertEquals(-1234567890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_bEbg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertTrue(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_VVvk0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(true, entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_BXKB1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(false, entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_jPnU2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(false, entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_JvNz3() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_kBCn4() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name");
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_XNUL5() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name1");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name2");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasStream_QlUA6() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasStream_tisn7() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasCreationDate_zbKL12() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasCreationDate_phcs13() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasLastModifiedDate_TUos14() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasLastModifiedDate_KuGL15() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasAccessDate_PpAf16() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasAccessDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasAccessDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_DYtU0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date date = new Date();
        sevenZArchiveEntry.setCreationDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_mcoD0() {
        SevenZArchiveEntry archiveEntry = new SevenZArchiveEntry();
        boolean result = archiveEntry.hasStream();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasAccessDate_iJpu0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasAccessDate();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime_NoLastModifiedDate_avwz1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        try {
            entry.getLastModifiedTime();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedSize_JPYD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long compressedSize = entry.getCompressedSize();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamTrue_wJRD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
        assert entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStreamFalse_Zpgs1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(false);
        assert !entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_BkbL0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("TestName");
        assertEquals("TestName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_vuKt0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(123456789L);
        assertEquals(123456789L, entry.getCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_hXyG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(123L);
        assert entry.getCompressedSize() == 123L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_IXcS0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(123L);
        assertEquals(123L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNullName_bWKu0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int result = entry.hashCode();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNotNullName_qbDV3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    int result = entry.hashCode();
    Assertions.assertEquals("test".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_JnqA0() {
        Date date = new Date();
        long result = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_JXiX0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date date = new Date();
        sevenZArchiveEntry.setAccessDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrc_hYRh0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(123);
        assertEquals(123, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDate_pGRG0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasCreationDate();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValue_qjJk0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long crc = 1234567890L;
        entry.setCompressedCrcValue(crc);
        assert entry.getCompressedCrc() == crc;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_AZEA0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date date = new Date();
        sevenZArchiveEntry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc1_dnmn0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCrc_jFDC0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasCrc();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_Jeeg1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(true);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_hGyf0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long expectedSize = 10;
        entry.setSize(expectedSize);
        long actualSize = entry.getSize();
        assertEquals(expectedSize, actualSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_LIyz0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsCreationDate = 1234567890L;
        entry.setCreationDate(ntfsCreationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrc_drZw1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int crc = 12345;
        entry.setCrc(crc);
        assertEquals(crc, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTimeWithoutAccessDate_EcMZ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasAccessDate(false);
        try {
            entry.getAccessTime();
            assert false;
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedCrcValue_hwhr0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        long result = sevenZArchiveEntry.getCompressedCrcValue();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedCrcValueNonZero_nsgS1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setCompressedCrc(123456789);
        long result = sevenZArchiveEntry.getCompressedCrcValue();
        assert result == 123456789;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_FKav1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        int expected = 0;
        int actual = sevenZArchiveEntry.getWindowsAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributes_vJoq0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setWindowsAttributes(1);
        assertEquals(1, sevenZArchiveEntry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasWindowsAttributes_ymGt0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc9_XIrQ8_ddCb0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrc_bRun0_vwBV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributes_zvlm0_xbgG1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertEquals(true, entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_zqhN0_KUYN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 1234567890L;
    entry.setCrcValue(expectedCrc); 
    long actualCrc = entry.getCrcValue();
    assertEquals(expectedCrc, actualCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_FvEO1_RKnd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String expectedName = "testName";
    entry.setName(expectedName);
    String actualName = entry.getName();
    assertEquals(expectedName, actualName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateTrue_yGno0_roAO0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    boolean result = entry.getHasWindowsAttributes();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateFalse_jfbo1_iMYf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    boolean result = entry.getHasWindowsAttributes();
    assert(result == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDate_gwQk0_RkNH1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDate_Zrvs1_IqMK1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryFalse_KBoz1_Jcgf1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameIsDirectory_Rmyj8_ccne0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(true);
    assertEquals(true, entry1.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentIsDirectory_QObi9_mBkT0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_WgUs1_PwJb1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assert !entry.getHasWindowsAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_HasLastModifiedDate_RofC0_UkfY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertEquals(entry.getHasWindowsAttributes(), true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNullTime_yEvv0_GUaY1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNotNullTime_rVIy1_VTyS0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1234567890L);
    entry.setAccessTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNotNullTime_rVIy1_VTyS0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1234567890L);
    entry.setAccessTime(time);
    assertEquals(time, entry.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNullTimeAgain_vYtz2_WTZP0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    entry.setAccessTime(FileTime.fromMillis(1234567890L));
    assertFalse(entry.getHasWindowsAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributesFalse_RUpp1_YYDU1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assert !entry.getHasWindowsAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItemTrue_vlHP0_VriI1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    assertTrue(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_AAVx9_wVtg1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    Assertions.assertTrue(result);
}
}