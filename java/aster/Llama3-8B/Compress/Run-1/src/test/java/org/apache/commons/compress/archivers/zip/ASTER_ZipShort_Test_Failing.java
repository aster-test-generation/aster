/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort_jiYY0() {
        byte[] buf = new byte[4];
        ZipShort.putShort(0x1234, buf, 0);
        byte[] expected = new byte[] {(byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytes_FFkj0() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
        assertEquals("ZipShort value: " + 1 + 2 + 3, zipShort.toString());
    }
@Test
@Timeout(value =513, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayConstructor_nlWA0() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value =770, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayAndOffsetConstructor_Wgsp2() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3},770);
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayValue_mLXe1() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34};
        ZipShort zipShort = new ZipShort(bytes);
        byte[] result = zipShort.getBytes();
        byte[] expected = new byte[] {(byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayAndOffsetValue_xgrO2() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        ZipShort zipShort = new ZipShort(bytes, 2);
        byte[] result = zipShort.getBytes();
        byte[] expected = new byte[] {(byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytes_BHJY0() {
    byte[] bytes = new byte[] {1, 2, 3};
    int result = ZipShort.getValue(bytes);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffset_vFcq1() {
    byte[] bytes = new byte[] {1, 2, 3};
    int result = ZipShort.getValue(bytes, 1);
    assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueEmptyBytes_fihM4() {
    byte[] bytes = new byte[0];
    int result = ZipShort.getValue(bytes);
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueSingleByte_CVro5() {
    byte[] bytes = new byte[] {(byte) 1};
    int result = ZipShort.getValue(bytes, 0);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLargeValue_ZgMx7() {
    byte[] bytes = new byte[] {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
    int result = ZipShort.getValue(bytes);
    assert result == 0x8000;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueNegativeValue_farG8() {
    byte[] bytes = new byte[] {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
    int result = ZipShort.getValue(bytes);
    assert result == -0x8001;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueMaxValue_ouaj9() {
    byte[] bytes = new byte[] {(byte) 0x7f, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff};
    int result = ZipShort.getValue(bytes);
    assert result == 0x7ffff;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIntegerMinValue_ORCB7() {
    byte[] result = ZipShort.getBytes(Integer.MIN_VALUE);
    assert Arrays.equals(result, new byte[] {0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIntegerMinValuePlusOne_jbyA9() {
    byte[] result = ZipShort.getBytes(Integer.MIN_VALUE + 1);
    assert Arrays.equals(result, new byte[] {0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueInt_FWiI2_yPZx0() {
    byte[] bytes = new byte[2];
    bytes[0] = (byte) ((123 >> 8) & 0xFF);
    bytes[1] = (byte) (123 & 0xFF);
    int result = ZipShort.getValue(bytes, 0);
    assert result == 123;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytesOffset_VMcC2_fid1() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
        assertEquals("ZipShort value: 2", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayAndOffsetConstructor_Wgsp2_fid1() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueSingleByte_CVro5_fid1() {
    byte[] bytes = new byte[] {1};
    int result = ZipShort.getValue(bytes);
    assert result == 1;
}
}