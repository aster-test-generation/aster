/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadSparseStructsInvalidOffset_wzKr1() throws IOException {
        byte[] buffer = new byte[1024];
        int offset = -1;
        int entries = 5;
        try {
            TarUtils.readSparseStructs(buffer, offset, entries);
        } catch (IOException ex) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadSparseStructsEmptyBuffer_nmJj3() throws IOException {
        byte[] buffer = new byte[0];
        int offset = 0;
        int entries = 5;
        try {
            TarUtils.readSparseStructs(buffer, offset, entries);
        } catch (IOException ex) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePAX01SparseHeaders_LNRB0() {
        String sparseMap = "sparseMap";
        List<TarArchiveStructSparse> result = TarUtils.parsePAX01SparseHeaders(sparseMap);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalValidInput_TZVD0() {
        byte[] buffer = {(byte) '1', (byte) '2', (byte) '3'};
        int offset = 0;
        int length = 3;
        long result = TarUtils.parseOctal(buffer, offset, length);
        assert(result == 123);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalInvalidByteAtEndWithSpace_WjTr7() {
        byte[] buffer = {(byte) '1', (byte) '2', (byte) ' '};
        int offset = 0;
        int length = 3;
        assertThrows(IllegalArgumentException.class, () -> TarUtils.parseOctal(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalZero_tIlE9() {
        byte[] buffer = {(byte) '0'};
        int offset = 0;
        int length = 1;
        long result = TarUtils.parseOctal(buffer, offset, length);
        assert(result == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinaryLong_hoHW0() {
        byte[] buffer = {(byte) 0x80, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        int offset = 0;
        int length = 3;
        long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
        assertEquals(0x010203L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinaryLongNegative_GcPw1() {
        byte[] buffer = {(byte) 0x80, (byte) 0xff, (byte) 0x01, (byte) 0x02, (byte) 0x03};
        int offset = 0;
        int length = 4;
        long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
        assertEquals(-0x010203L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryOctal_yebB2() {
        byte[] buffer = {(byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x33};
        int offset = 0;
        int length = 4;
        long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
        assertEquals(0x3123L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytes_YDvw0() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 123456789L;
        int expectedLength =TarUtils.formatOctalBytes(value, buf, offset, length);
        byte[] expected = new byte[] {(byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9'};
        assertArrayEquals(expected, java.util.Arrays.copyOfRange(buf, 0, expectedLength));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatCheckSumOctalBytes_Ykvz0() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 8;
        long value = 1234567890L;
        int expected = 8;
        int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesValueGreaterThanMaxId_bXKv2() {
        byte[] buf = new byte[TarConstants.UIDLEN];
        int offset = 0;
        int length = TarConstants.UIDLEN;
        long value = TarConstants.MAXID + 1;
        try {
            TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytesValueGreaterThanMaxSize_vNAN5() {
        byte[] buf = new byte[TarConstants.SIZELEN];
        int offset = 0;
        int length = TarConstants.SIZELEN;
        long value = TarConstants.MAXSIZE + 1;
        try {
            TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringZero_EgPu0() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(0, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '0'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringSingleDigit_rbeX1() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(1, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '1'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringTwoDigits_pNUk2() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(8, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '0', (byte) '8'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringThreeDigits_gVUA3() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(12, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '1', (byte) '2'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringFourDigits_Oxzi4() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(123, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '1', (byte) '2', (byte) '3'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalStringFiveDigits_mGdi5() {
        byte[] buffer = new byte[10];
        TarUtils.formatUnsignedOctalString(1234, buffer, 0, 10);
        byte[] expected = new byte[] {(byte) '1', (byte) '2', (byte) '3', (byte) '4'};
        assertArrayEquals(expected, buffer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalBytes_NSjS0() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 5;
        long value = 123456789L;
        int result = TarUtils.formatLongOctalBytes(value, buf, offset, length);
        assertEquals(offset + length, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNameWithEmptyBuffer_yraU2_DhjH1() {
    try {
        List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders("");
        assertEquals(0, result.size());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEmptySparseHeaders_FWLD4_oGZf0() {
    String sparseMap = "";
    try {
        List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        assertEquals(0, result.size());
    } catch (IOException e) {
        fail("IOException was expected to be thrown but was not");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryInvalidLength_wSAI3_fid2() {
        byte[] buffer = {(byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x33, (byte) 0x34};
        int offset = 0;
        int length = 5;
        long result = TarUtils.parseOctalOrBinary(buffer, offset, length);
        assertEquals(-1L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryOctal_MnRS0_fid2() {
        byte[] buffer = {(byte) 0x30, (byte) 0x31, (byte) 0x32};
        int offset = 0;
        int length = 3;
        assertEquals(512, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinary_hIpN1_fid2() {
        byte[] buffer = {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        int offset = 0;
        int length = 9;
        assertEquals(-1, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinaryNegative_tDeh2() {
        byte[] buffer = {(byte) 0x80, (byte) 0xff, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        int offset = 0;
        int length = 9;
        assertEquals(1, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinaryBinaryLengthLessThan9_QCrU3_fid2() {
        byte[] buffer = {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        int offset = 0;
        int length = 4;
        assertEquals(-256, TarUtils.parseOctalOrBinary(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvalidSparseHeadersOddLength_fEPf3_fid2() {
    String sparseMap = "123,456,789,101112";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
}