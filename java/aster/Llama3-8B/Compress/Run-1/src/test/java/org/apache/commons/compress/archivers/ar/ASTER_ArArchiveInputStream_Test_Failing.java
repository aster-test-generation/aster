/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Failing {
private byte[] concatenateBytes(byte[] bytes1, byte[] bytes2) {
    byte[] result = new byte[bytes1.length + bytes2.length];
    System.arraycopy(bytes1, 0, result, 0, bytes1.length);
    System.arraycopy(bytes2, 0, result, bytes1.length, bytes2.length);
    return result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLength9_LuVe2() {
        byte[] signature = new byte[] {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a, 0x0b};
        boolean result = ArArchiveInputStream.matches(signature, 9);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureNull_Ynmv5() {
        boolean result = ArArchiveInputStream.matches(null, 8);
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextArEntryNullInputStream_kCNb0() {
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
        try {
            ArArchiveEntry arArchiveEntry = arArchiveInputStream.getNextArEntry();
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextArEntryNullInputStream_lMwU0_eFdQ1() {
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
    try {
        arArchiveInputStream.getNextArEntry();
    } catch (IOException e) {
        Assertions.assertThrows(IOException.class, () -> arArchiveInputStream.getNextArEntry());
    }
}
}