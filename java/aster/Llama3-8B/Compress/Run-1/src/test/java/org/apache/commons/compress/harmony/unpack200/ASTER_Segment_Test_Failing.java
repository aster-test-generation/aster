/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.ArrayList;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSuperInts_iYrs2() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] classSuperInts = classBands.getClassSuperInts();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassMethodCount_qncY3() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] classMethodCount = classBands.getClassMethodCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassThisInts_FHqs4() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] classThisInts = classBands.getClassThisInts();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFlags_FcCL5() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        long[] classFlags = classBands.getClassFlags();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_QPmu6() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldAttributes_dSst7() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodAttributes_nKEF8() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_ToBL9() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        IcTuple[][] icLocal = classBands.getIcLocal();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_mFDO10() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCount_Jhym11() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] codeHandlerCount = classBands.getCodeHandlerCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFieldCount_WHMe12() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] classFieldCount = classBands.getClassFieldCount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_MeMi13() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[][] methodDescrInts = classBands.getMethodDescrInts();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_Nyuj14() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[] classVersionMajor = classBands.getClassVersionMajor();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_Ackk15() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHasAttributes_EufX16() {
        Segment segment = new Segment();
        ClassBands classBands = segment.getClassBands();
        boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcBands_DBxt0() {
        Segment segment = new Segment();
        IcBands icBands = segment.getIcBands();
        assertNotNull(icBands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_UfPB0_ZbtD0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    IcTuple[] icTuples = icBands.getIcTuples();
    assertNotNull(icTuples);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOverrideDeflateHint_moxr0_fFXG0_1() {
    Segment segment = new Segment();
    segment.overrideDeflateHint(true);
    assertEquals(true, segment.getIcBands().getIcTuples().length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOverrideDeflateHint_moxr0_fFXG0_2() {
    Segment segment = new Segment();
    segment.overrideDeflateHint(true);
    assertEquals(true, segment.getIcBands().getRelevantIcTuples("className", new ClassConstantPool()).length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPreRead_hwtb1_zGcx0() {
    Segment segment = new Segment();
    segment.setPreRead(true);
    assertEquals(true, segment.getIcBands().getIcTuples().length > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogLevelHigherThanCurrentLogLevel_auAu0_PIKk0() {
    Segment segment = new Segment();
    segment.log(2, "Test message");
    String output = System.out.toString();
    assert output.contains("Test message");
}
}