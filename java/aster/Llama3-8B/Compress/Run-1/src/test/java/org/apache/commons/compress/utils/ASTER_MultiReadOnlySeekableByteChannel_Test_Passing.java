/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithOneFile_Njbh0() throws IOException {
    SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forFiles(new File("test.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithMultipleFiles_jKcH1() throws IOException {
    SeekableByteChannel result = MultiReadOnlySeekableByteChannel.forFiles(new File("test1.txt"), new File("test2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSizeWithEmptyChannels_eLPf2() throws IOException {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(channels);
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionAfterSeek_kjgy1_rocI0() throws IOException {
    List<SeekableByteChannel> channels = new ArrayList<>();
    SeekableByteChannel channel1 = org.mockito.Mockito.mock(SeekableByteChannel.class);
    SeekableByteChannel channel2 = org.mockito.Mockito.mock(SeekableByteChannel.class);
    channels.add(channel1);
    channels.add(channel2);
    MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
    org.mockito.Mockito.when(channel1.position()).thenReturn(10L);
    org.mockito.Mockito.when(channel2.position()).thenReturn(20L);
    long position = multiChannel.position();
    assertEquals(20, position);
}
}