/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableSeekableByteChannel_oaQp2() throws IOException {
        SeekableByteChannel channel = null;
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(channel);
        boolean result = zip.isSeekable();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableOutputStream_eGvs3() {
        OutputStream out = null;
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);
        boolean result = zip.isSeekable();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNormal_NUnU0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_JWmC1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_tOkp2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroyWithOutputStream_ohuw0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroyWithFile_wtWq1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut5_vjkS4() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        byte[] data = new byte[10];
        zipArchiveOutputStream.writeOut(data, 0, data.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut6_RrmP5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        byte[] data = new byte[10];
        zipArchiveOutputStream.writeOut(data, 0, data.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithOutputStream_gDOh0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zipArchiveOutputStream.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreamble5_MdRD4() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreamble6_MOGB5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithOutputStream_RJBo2() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble, 0, preamble.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_CYMj3_oAaH0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_MWxQ3_PpGk0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_UznN4_jdVB0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.setFallbackToUTF8(true);
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithSplitZip_yrmI1_LXlH0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 65536);
    zipArchiveOutputStream.setFallbackToUTF8(true); 
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncodingWithoutCharset_Eevt1_iEgh0() {
    try {
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"));
    } catch (IOException e) {
    }
}
}