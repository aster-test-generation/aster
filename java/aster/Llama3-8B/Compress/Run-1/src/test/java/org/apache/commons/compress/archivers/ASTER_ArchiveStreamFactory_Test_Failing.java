/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProviders_nHzK0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assert providers != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProvidersDefault_VGIP1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assert providers != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStreamSevenZ_dHZR8() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream("SEVEN_Z", in, null);
            Assertions.fail();
        } catch (StreamingNotSupportedException e) {
            Assertions.assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStreamUnknownArchiverName_FIhm11() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream("UNKNOWN", in, null);
            Assertions.fail();
        } catch (ArchiveException e) {
            Assertions.assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNames_GFqw0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> result = factory.getInputStreamArchiveNames();
        assertEquals(new HashSet<>(Arrays.asList("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z")), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNamesWithEncoding_FxHt1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        Set<String> result = factory.getInputStreamArchiveNames();
        assertEquals(new HashSet<>(Arrays.asList("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z")), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_opux0() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_jjNz0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> actual = factory.getOutputStreamArchiveNames();
        Set<String> expected = Sets.newHashSet("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z");
        assertEquals(expected, actual);
        assertNotNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_vxBV0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(Collections.emptySortedMap(), providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_mHoW1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("encoding");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
    assertEquals(Collections.emptySortedMap(), providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncodingDefault_yPSI1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        String encoding = factory.getEntryEncoding();
        assertEquals("", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIOExceptionWhileReadingSignature_ZdfL10() throws ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    try {
        ArchiveStreamFactory.detect(in);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("IOException while reading signature.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_TOvO0() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_jjNz0_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> actual = factory.getOutputStreamArchiveNames();
        Set<String> expected = Sets.newHashSet("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z");
        assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamArj_qmoy1_cZEx0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Object result = factory.createArchiveInputStream("ARJ", in);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamNullEncoding_wpjv12_osBl0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveInputStream result = factory.createArchiveInputStream("ARJ", in, null);
    org.junit.Assert.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamUnknownArchiverName_ewpD8_cbgw0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        factory.createArchiveOutputStream("Unknown", null, null);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamNullOutputStream_UMvO7_ifxY0_fid3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        factory.createArchiveOutputStream("AR", null, null);
        fail("Expected ArchiveException");
    } catch (IllegalArgumentException | ArchiveException e) {
        assertEquals("outputStream cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullInputStream_Bici8_ZCDe0() {
    try {
        ArchiveStreamFactory.putAll(null, null, null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("names, provider, map cannot be null.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputStreamWithoutMarkSupport_TDlP9_OkiI0_fid3() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    try {
        try {
            ArchiveStreamFactory.detect(in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertEquals("Mark is not supported.", e.getMessage());
        }
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
}