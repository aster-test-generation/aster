/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Set;
import java.util.TreeMap;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStreamNullArchiverName_ipon9() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            factory.createArchiveInputStream(null, in, null);
            Assertions.fail();
        } catch (IllegalArgumentException e) {
            Assertions.assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStreamNullInputStream_TJkQ10() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        try {
            factory.createArchiveInputStream("AR", null, null);
            Assertions.fail();
        } catch (IllegalArgumentException e) {
            Assertions.assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding_MKzb0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithNull_caxz1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding(null);
        assertEquals(null, factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithEmptyString_ovKk2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("");
        assertEquals("", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithNonEmptyString_zKWs3() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("ISO-8859-1");
        assertEquals("ISO-8859-1", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncoding_dwti0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("utf-8");
        String encoding = factory.getEntryEncoding();
        assertEquals("utf-8", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNoArchiverFound_AWwU11() throws ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    try {
        ArchiveStreamFactory.detect(in);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("No Archiver found for the stream signature", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_jjNz0_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> actual = factory.getOutputStreamArchiveNames();
        Set<String> expected = Sets.newHashSet("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z");
        assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncodingDefault_yPSI1_fid1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        String encoding = factory.getEntryEncoding();
    assertNull(encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamZip_zTMB2_Btcz0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveInputStream result = (ArchiveInputStream) factory.createArchiveInputStream("ZIP", in, null);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamCpio_VdaE6_DXHZ0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveInputStream result = factory.createArchiveInputStream("CPio", in, null);
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_gcVz0_KIFi0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    Set<String> names = new java.util.HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamFactory.putAll(names, factory, map);
    assert map.size() == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamNullOutputStream_UMvO7_ifxY0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        factory.createArchiveOutputStream("AR", null, null);
        fail("Expected ArchiveException");
    } catch (IllegalArgumentException | ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputStreamWithoutMarkSupport_TDlP9_OkiI0() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    try {
        try {
            ArchiveStreamFactory.detect(in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
        }
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
}