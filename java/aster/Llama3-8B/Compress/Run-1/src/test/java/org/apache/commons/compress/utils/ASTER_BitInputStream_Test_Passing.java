/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteOrder;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BitInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_ChkO0() throws IOException {
        InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
        BitInputStream bitInputStream = new BitInputStream(in, ByteOrder.BIG_ENDIAN);
        bitInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBitsAvailable_RXHo0_yGke0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.OutputStream os = bos;
    ByteOrder byteOrder = ByteOrder.nativeOrder();
    BitInputStream bis = new BitInputStream(new java.io.ByteArrayInputStream(new byte[0]), byteOrder);
    bis.bitsAvailable();
    assertEquals(0, bis.bitsAvailable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesRead_onJi0_YHYd0() {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    BitInputStream bitInputStream = new BitInputStream(in, null);
    long bytesRead = bitInputStream.getBytesRead();
    assert bytesRead == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBitsAvailableAvailable_ZMef1_nfWZ0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    ByteOrder byteOrder = ByteOrder.nativeOrder();
    BitInputStream bis = new BitInputStream(new java.io.ByteArrayInputStream(new byte[0]), byteOrder);
    bis = new BitInputStream(new java.io.ByteArrayInputStream(new byte[1]), byteOrder);
    assertEquals(8, bis.bitsAvailable());
}
}