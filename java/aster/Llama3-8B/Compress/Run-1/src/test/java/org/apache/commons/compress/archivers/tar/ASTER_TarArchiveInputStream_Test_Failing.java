/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesPosix_MgEA0() {
    byte[] signature = new byte[] {(byte) 'u', (byte) 's', (byte) 't', (byte) 'a', (byte) 'r', (byte) ' ', (byte) '0', (byte) '0', (byte) '0', (byte) '1'};
    boolean result = TarArchiveInputStream.matches(signature, signature.length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesGnuSpace_ieSB1() {
    byte[] signature = new byte[] {(byte) 'u', (byte) 's', (byte) 't', (byte) 'a', (byte) 'r', (byte) ' ', (byte) '0', (byte) '0', (byte) '0', (byte) '2'};
    boolean result = TarArchiveInputStream.matches(signature, signature.length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesGnuZero_pYEc2() {
    byte[] signature = new byte[] {(byte) 'u', (byte) 's', (byte) 't', (byte) 'a', (byte) 'r', (byte) ' ', (byte) '0', (byte) '0', (byte) '0', (byte) '0'};
    boolean result = TarArchiveInputStream.matches(signature, signature.length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesAnt_YdZl3() {
    byte[] signature = new byte[] {(byte) 'u', (byte) 's', (byte) 't', (byte) 'a', (byte) 'r', (byte) ' ', (byte) '1', (byte) '0', (byte) '0', (byte) '1'};
    boolean result = TarArchiveInputStream.matches(signature, signature.length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize_rGnT0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]),512);
        assertEquals(1024, tarArchiveInputStream.getRecordSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize_rGnT0_fid2() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), 1024);
        assertEquals(1024, tarArchiveInputStream.getRecordSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize2_Usiq1_fid2() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]));
        assertEquals(0, tarArchiveInputStream.getRecordSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize9_nHLC8_fid2() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new java.io.ByteArrayInputStream(new byte[0]), 1024);
        assertEquals(0, tarArchiveInputStream.getRecordSize());
    }
}