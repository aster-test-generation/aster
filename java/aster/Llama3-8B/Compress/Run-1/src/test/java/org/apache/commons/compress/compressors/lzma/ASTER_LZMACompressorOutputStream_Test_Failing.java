/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_Wvrn0_gsIM0() throws IOException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream compressorOutputStream = new LZMACompressorOutputStream(out);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressorOutputStream.write(buf, 0, 5);
    compressorOutputStream.close();
    assert Arrays.equals(out.toByteArray(), buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePartial_TfRe1_QEci0() throws IOException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream compressorOutputStream = new LZMACompressorOutputStream(out);
    byte[] buf = new byte[] {1, 2, 3, 4, 5};
    compressorOutputStream.write(buf, 1, 3);
    assert java.util.Arrays.equals(out.toByteArray(), new byte[] {0, 1, 2, 3, 4, 5});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEmpty_JkzV2_mTMC0() throws IOException {
    java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream compressorOutputStream = new LZMACompressorOutputStream(out);
    byte[] buf = new byte[0];
    compressorOutputStream.write(buf, 0, 0);
    assert Arrays.equals(out.toByteArray(), new byte[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_iuxa0_veuq0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream lzmaCompressorOutputStream = new LZMACompressorOutputStream(bos);
    lzmaCompressorOutputStream.write(10);
    assertThrows(IOException.class, () -> lzmaCompressorOutputStream.close());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteIOException_Wosf1_Iwhu1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream lzmaCompressorOutputStream = new LZMACompressorOutputStream(bos);
    try {
        lzmaCompressorOutputStream.close();
        fail("IOException was not thrown");
    } catch (IOException e) {
        // expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_aptU0_wwzm0() throws IOException {
    java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream lzmaCompressorOutputStream = new LZMACompressorOutputStream(byteArrayOutputStream);
    assertThrows(IOException.class, () -> lzmaCompressorOutputStream.close());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteIOException_Wosf1_Iwhu1_fid3() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    LZMACompressorOutputStream lzmaCompressorOutputStream = new LZMACompressorOutputStream(bos);
    assertThrows(IOException.class, () -> lzmaCompressorOutputStream.close());
}
}