/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Failing {
private byte[] getBytes(String data) {
    return data.getBytes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntry_qpGs0() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assert zipArchiveEntry != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCountUnknownMethod_Lbsw6() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    assertEquals(-1, zipArchiveInputStream.getCompressedCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadNullBuffer_ueob11() {
        ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        byte[] buffer = null;
        int offset = 0;
        int length = 10;
        try {
            zip.read(buffer, offset, length);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullBuffer_pDLt1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = null;
    try {
        zipArchiveInputStream.read(buffer, 0, 10);
        Assertions.fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeLength_ufJf2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 0, -1);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetGreaterThanBufferLength_fSLH3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, buffer.length, 10);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLengthGreaterThanBufferLength_JMMK4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 0, buffer.length + 1);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetLessThanZero_yyRE5() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, -1, 10);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullInputStream_JnVC7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 0, 10);
        Assertions.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUnshrinkedEntry_hTyN10() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.read(new byte[10], 0,-1);
    Assertions.assertEquals(10, zipArchiveInputStream.read(new byte[10], 0,-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithClosedStream_qFoa2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryGeneralPurposeBit_BBEL11_Niku0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = null;
    try {
        zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    } catch (IOException e) {
    }
    Assertions.assertNotNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithDeflatedEntry_RmGO9_SheR0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0,-1);
    Assertions.assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_WgHI1_UgWZ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        zipArchiveInputStream.skip(-10);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryUTF8Flag_zmoT7_mGza0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNotUTF8Flag_kGMw8_XfDI0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryFirstEntry_UPgY3_ziQu0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_SingleEntry_flWq1_HeBV0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_MultipleEntries_Pwox2_hsxp0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x50, 0x4b, 0x03, 0x04}), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream.getNextZipEntry();
        ZipArchiveEntry zipArchiveEntry2 = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry1);
        assertNotNull(zipArchiveEntry2);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_SingleEntry_nFyi1_feyI0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_MultipleEntries_MokI2_pZli0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x50, 0x4b, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream.getNextZipEntry();
        ZipArchiveEntry zipArchiveEntry2 = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry1);
        Assertions.assertNotNull(zipArchiveEntry2);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_InvalidExtraData_rcSz6_wvzc0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04, 0x01, 0x02, 0x03}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        Assertions.assertThrows(IOException.class, () -> zipArchiveInputStream.getNextZipEntry());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_SingleEntry_LpLM1_favH0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4B, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_MultipleEntries_gEeL2_FjMR0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4B, 0x03, 0x04, 0x50, 0x4B, 0x03, 0x04}), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream.getNextZipEntry();
        ZipArchiveEntry zipArchiveEntry2 = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry1);
        Assertions.assertNotNull(zipArchiveEntry2);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryUseUnicodeExtraFields_aAMy10_zgya0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assert zipArchiveEntry != null;
    } catch (IOException e) {
        assert false : "IOException was thrown";
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNoUseUnicodeExtraFields_YDBl11_Cilo0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assert zipArchiveEntry != null;
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_vbFU0_ZKAd0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryUTF8Flag_Nxbc7_UAHl0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    GeneralPurposeBit gpFlag = new GeneralPurposeBit();
    gpFlag.usesUTF8ForNames();
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferOffsetNegative_ThrowsArrayIndexOutOfBoundsException_cKks2_OnNg0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        zipArchiveInputStream.read(buffer, -1, 0);
        fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException | IOException e) {
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> zipArchiveInputStream.read(buffer, -1, 0));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadValidInput_WMeY0_kHBk0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int read = zipArchiveInputStream.read(buffer, 0,-1);
        assertEquals(5, read);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_aiMt3_RVMi0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    try {
        int read = zipArchiveInputStream.read(null, 0, 5);
        fail("IOException was expected");
    } catch (IOException e) {
        assertEquals(-1, e.getMessage().indexOf("ArrayIndexOutOfBoundsException"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored_kuyw0_Kvfb0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length =-1;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored2_cueG1_uLww0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length =-1;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(5, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored3_nGzi2_uIew0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset =-1;
    int length =-1;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(5, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInvalidLength_sdye5_lDSr0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, -10);
        Assertions.assertThrows(IOException.class, () -> zipArchiveInputStream.read(buffer, 0, -10));
    } catch (IOException e) {
        Assertions.fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_Cxxx0_fid1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    long skipped = zipArchiveInputStream.skip(10);
    assertEquals(10, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipLargeValue_Ddyf3_fid1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    long skipped = zipArchiveInputStream.skip(100000);
    assertEquals(100000, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUnshrinkedEntry_hTyN10_fid1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.read(new byte[10], 0, 10);
    Assertions.assertEquals(10, zipArchiveInputStream.read(new byte[10], 0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryEOFException_zVYe4_ENli0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        zipArchiveInputStream.getNextZipEntry();
        Assertions.fail("Expected EOFException");
    } catch (IOException e) {
        Assertions.assertTrue(e instanceof EOFException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithDeflatedEntry_RmGO9_SheR0_fid1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int read = zipArchiveInputStream.read(buffer, 0, 10);
    Assertions.assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_NameWithEFSFlag_fpzo9_JBFa0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04}), "UTF-8", true, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_BufferOffsetNegative_ThrowsArrayIndexOutOfBoundsException_cKks2_OnNg0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        zipArchiveInputStream.read(buffer, -1, 0);
        fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException | IOException e) {
        throw new AssertionError("Expected ArrayIndexOutOfBoundsException", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_CurrentEntryNull_ReturnMinusOne_avre5_bxuW0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        int result = zipArchiveInputStream.read(buffer, 0, 0);
        assertEquals(-1, result);
    } catch (IOException e) {
        assertEquals(-1, e.getMessage().hashCode());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadValidInput_WMeY0_kHBk0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    byte[] buffer = new byte[5];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, 5);
        assertEquals(5, read);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored_kuyw0_Kvfb0_fid1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored2_cueG1_uLww0_fid1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(5, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStored3_nGzi2_uIew0_fid1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 5;
    int length = 5;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(5, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflated4_QUaD8_WMgd0_fid1() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 0;
    try {
        int result = zip.read(buffer, offset, length);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadValidInput_XOZW0_DkKv0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
        Assertions.assertEquals(read, 0);
    } catch (IOException e) {
        throw new AssertionError("IOException was thrown", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_CnFk3_IkGw0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        int read = zipArchiveInputStream.read(null, 0, 10);
        Assertions.fail("IOException was not thrown");
    } catch (IOException e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInvalidLength_sdye5_lDSr0_fid1() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, -10);
        Assertions.fail("IOException was not thrown");
    } catch (IOException e) {
        Assertions.assertTrue(true);
    }
}
}