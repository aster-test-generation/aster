/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_muKh0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> result = classConstantPool.entries();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddNestedEntries_EmptyEntries_eYpo0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    classConstantPool.addNestedEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddWithNestedEntriesNull_QraH1() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    ClassFileEntry entry = null;
    try {
        classConstantPool.addWithNestedEntries(entry);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_MEbO0() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int expectedSize = 0;
        int actualSize = classConstantPool.size();
        assertEquals(expectedSize, actualSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexOfNullEntry_PbjW0_npqR1() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    int result = classConstantPool.size();
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSortClassPoolEmptyList_RDuf0_hIPe0() {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    assertEquals(0, classConstantPool.size());
}
}