/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import java.io.IOException;
import java.io.InputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureLengthLessThan3_ndJf0() {
    byte[] signature = new byte[2];
    boolean result = DeflateCompressorInputStream.matches(signature, 2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithoutParameters_VTGf1_MAmP0() throws IOException {
    DeflateParameters parameters = new DeflateParameters();
    InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    DeflateCompressorInputStream compressorInputStream = new DeflateCompressorInputStream(inputStream, parameters);
    compressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureNotMatchingMagic1_pPaT1_FhBH0() {
    byte[] signature = new byte[3];
    signature[0] = (byte) 0x12;
    signature[1] = (byte) 0x5A; 
    signature[2] = (byte) 0x5A; 
    boolean result = DeflateCompressorInputStream.matches(signature, 3);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureMatchingMagic1ButNotMatchingMagic2_OMjx2_xlda0() {
    byte[] signature = new byte[3];
    signature[0] = (byte) 0x03;
    signature[1] = (byte) 0x12;
    signature[2] = (byte) 0x02;
    boolean result = DeflateCompressorInputStream.matches(signature, 3);
    assert !result;
}
}