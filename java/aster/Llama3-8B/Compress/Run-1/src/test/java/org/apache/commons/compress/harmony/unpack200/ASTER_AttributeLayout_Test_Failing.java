/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AttributeLayout_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_xlcX0_ouLC0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.UTF_8, 3L), attributeLayout.getValue(3L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_vosE2_kGxS0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.UTF_8, 5L), attributeLayout.getValue(5L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_aAol3_jeIG0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.CP_INT, 6L), attributeLayout.getValue(6L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_upOr4_TVAt0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.UTF_8, 7L), attributeLayout.getValue(7L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_xsFy5_MzjT0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.CP_LONG, 8L), attributeLayout.getValue(8L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue7_EOVy6_iQOf0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.CP_DOUBLE, 9L), attributeLayout.getValue(9L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDefaultLayoutDefault_qlFU0_pJLn0() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
        boolean result = attributeLayout.isDefaultLayout();
        assert (!result);
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameNull_ContextNotNull_LayoutNotNull_IndexNotNull_KJQN0_XEdr0() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout(null, 1, "layout", 1);
        int result = attributeLayout.hashCode();
        Assertions.assertEquals(result, 1);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCodec5_eIbk4_gzwb0() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "OS", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.UNSIGNED5, codec);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCodec6_jgta5_UHXh0() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "PS", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.UNSIGNED5, codec);
    } catch (Pack200Exception e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_wxyj1_pCPg0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(cpBands);
    assertEquals(pool.getValue(SegmentConstantPool.SIGNATURE, 4L), attributeLayout.getValue(4L, pool));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringDefault_AXUl1_HxnB0_fid2() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 0);
        assertEquals("contextNames[1]: name", attributeLayout.toString());
    } catch (Pack200Exception e) {
        fail("Unexpected Pack200Exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NameNotNull_ContextNotNull_LayoutNotNull_IndexNotNull_YocE1_ncmI0_fid2() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        int result = attributeLayout.hashCode();
        Assertions.assertEquals(result, 1);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
}