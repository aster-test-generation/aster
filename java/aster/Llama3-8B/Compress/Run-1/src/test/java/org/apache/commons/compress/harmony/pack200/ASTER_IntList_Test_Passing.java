/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyWhenListIsNotCreated_ORUd0() {
    IntList list = new IntList();
    boolean result = list.isEmpty();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmptyWhenListIsCreatedWithCapacity_oAPa1() {
    IntList list = new IntList(10);
    boolean result = list.isEmpty();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_pxtZ0() {
    IntList intList = new IntList();
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    intList.addAll(list);
    assertEquals(2, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAllLargeList_ypHM1() {
    IntList intList = new IntList();
    IntList list = new IntList();
    for (int i = 0; i < 100; i++) {
        list.add(i);
    }
    intList.addAll(list);
    assertEquals(100, intList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToEmptyList_eqof0() {
    IntList list = new IntList();
    list.add(1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToNonEmptyList_uwut1_1() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToNonEmptyList_uwut1_2() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAtFirstIndex_uywG0() {
        IntList list = new IntList(10);
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        int result = list.remove(0);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAtLastIndex_OJJa1() {
        IntList list = new IntList(10);
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        int result = list.remove(4);
        assert result == 5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAtMiddleIndex_CrZU2() {
        IntList list = new IntList(10);
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        int result = list.remove(2);
        assert result == 3;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAtInvalidIndex_jLuu6() {
        IntList list = new IntList(10);
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        try {
            list.remove(5);
            assert false;
        } catch (IndexOutOfBoundsException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginning_XJhR0() {
    IntList list = new IntList();
    list.add(0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginningWithGrow_fAnw3() {
    IntList list = new IntList(1);
    list.add(0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginning_mfhC0() {
    IntList list = new IntList();
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtEnd_laZc1() {
    IntList list = new IntList();
    list.add(0, 10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInMiddle_VIJo2() {
    IntList list = new IntList();
    list.add(0, 10);
    list.add(1, 20);
    list.add(1, 30);
    assertEquals(30, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginningWithGrow_EZMv3() {
    IntList list = new IntList(1);
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtEndWithGrow_WFyJ4() {
    IntList list = new IntList(1);
    list.add(0, 10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInMiddleWithGrow_YRoI5() {
    IntList list = new IntList(1);
    list.add(0, 10);
    list.add(1, 20);
    list.add(1, 30);
    assertEquals(30, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_lEyf0() {
        IntList list = new IntList(10);
        int result = list.size();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeAfterAdd_KGTJ1() {
        IntList list = new IntList();
        list.size();
        list.size();
        int result = list.size();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginningWithArrayLength_TkUn3() {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtEndWithArrayLength_Pxwp4() {
    IntList list = new IntList(10);
    list.add(0, 10);
    list.add(1, 20);
    assertEquals(20, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtMiddleWithArrayLength_iypA5() {
    IntList list = new IntList(10);
    list.add(0, 10);
    list.add(1, 20);
    list.add(1, 30);
    assertEquals(30, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtEndWithArrayLengthAndGrowAtEnd_kzje7() {
    IntList list = new IntList(1);
    list.add(0, 10);
    list.add(1, 20);
    list.add(2, 30);
    assertEquals(30, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtBeginningWithArrayLengthAndGrowAtFront_giFd9() {
    IntList list = new IntList(1);
    list.add(0, 10);
    list.add(0, 20);
    assertEquals(20, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtMiddleWithArrayLengthAndGrowAtFront_HDvV11() {
    IntList list = new IntList(1);
    list.add(0, 10);
    list.add(1, 20);
    list.add(0, 30);
    assertEquals(30, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtEndWithGrow_QQBI4_QuGB1() {
    IntList list = new IntList();
    list.add(list.size(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearNonEmptyList_rTlb1_AcYA0() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    list.add(3);
    list.clear();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementOutOfRange_rKJH2_UfVd0() {
    IntList list = new IntList(10);
    try {
        list.add(100, 0);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddToNonEmptyList_uwut1() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
}
}