/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethodConfiguration_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameMethodDifferentOptions_yBCm4() {
    SevenZMethodConfiguration obj1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "test");
    SevenZMethodConfiguration obj2 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameMethodSameOptions_Tgyd5() {
    SevenZMethodConfiguration obj1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "test");
    SevenZMethodConfiguration obj2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "test");
    boolean result = obj1.equals(obj2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMethodAndOptions_vxdb0() {
        SevenZMethod method = SevenZMethod.LZMA;
        Object options = new Object();
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method, options);
        Object result = configuration.getOptions();
        assertEquals(options, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodWithOptions_EIFk1() {
        SevenZMethod method = SevenZMethod.LZMA;
        Object options = new Object();
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method, options);
        assertEquals(method, configuration.getMethod());
    }
}