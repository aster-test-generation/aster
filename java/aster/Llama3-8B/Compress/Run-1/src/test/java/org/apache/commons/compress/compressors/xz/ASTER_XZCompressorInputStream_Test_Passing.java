/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import org.tukaani.xz.XZ;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_xqXj0() {
    byte[] signature = XZ.HEADER_MAGIC;
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_Rkcc1() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length + 1];
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesShortSignature_koEK2() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length - 1];
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_vjXl3() {
    byte[] signature = null;
    int length = XZ.HEADER_MAGIC.length;
    try {
        XZCompressorInputStream.matches(signature, length);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
}