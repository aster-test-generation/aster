/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AttributeLayoutMap_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout_JmnW0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(0, 1);
    Assertions.assertNotNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_EmptyMap_ogvy4() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_SameLayoutNameCombinationDoesNotExist_VcPQ1_gTBr0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout1", 1, "layout", 1);
    AttributeLayout layout2 = new AttributeLayout("layout2", 1, "layout", 2);
    map.put(1, layout1);
    map.put(2, layout2);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_MapWithOneElement_Jpsm5_FZqE0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout = new AttributeLayout("name1", 1, "layout1", 1);
    map.put(1, layout);
    attributeLayoutMap.add(layout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_SameLayoutNameCombinationExistsTwiceForDifferentContexts_rebD2_ipOH0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout1", 1, "name1", 1);
    AttributeLayout layout2 = new AttributeLayout("layout1", 2, "name1", 2);
    map.put(1, layout1);
    map.put(2, layout2);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_MapWithMultipleElements_qrHr6_BTnA0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout1", 1, "layout", 1);
    AttributeLayout layout2 = new AttributeLayout("layout2", 1, "layout", 2);
    AttributeLayout layout3 = new AttributeLayout("layout3", 3, "layout", 3, false);
    map.put(1, layout1);
    map.put(2, layout2);
    map.put(3, layout3);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.add(layout3);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout1_Wfns0_Ygcv0() {
    try {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout("name1", 1);
        Assertions.assertNull(attributeLayout);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
}