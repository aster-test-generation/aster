/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenFalse_yvLp3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    boolean result = channel.isOpen();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithData_EWVv2_CZDo1_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    channel.close();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBeyondLimit_xJyF1_xnEY0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[15]);
    try {
        int result = channel.write(buffer);
        assertEquals(10, result);
    } catch (IOException e) {
        assertEquals("Write beyond limit", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteResize_oonV2_KGDQ0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
    try {
        int result = channel.write(buffer);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_VUKj1_Mhfx0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[100]);
    try {
        int result = channel.write(buffer);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataThatExceedsCapacityAndResizes_NJJe3_DPNp0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[15]);
    try {
        int result = channel.write(buffer);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionWithDataAndSeek_jnJM2_snld0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    try {
        channel.position(5);
    } catch (IOException e) {
    }
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFullBuffer_svnE0_dXsw0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(10);
    try {
        channel.read(buf);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
    assertEquals(10, buf.remaining());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadLessThanBuffer_oRys1_RWFx0_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    try {
        channel.read(buf);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
    assertEquals(5, buf.remaining());
}
}