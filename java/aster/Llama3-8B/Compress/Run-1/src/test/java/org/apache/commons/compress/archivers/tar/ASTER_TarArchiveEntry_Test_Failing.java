/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDevice_uRzx0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertTrue(tarArchiveEntry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTime5_TuWJ4() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        Date date = new Date();
        tarArchiveEntry.setModTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime5_LGil4() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        Date modTime = tarArchiveEntry.getModTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarUtilsParseOctalOrBinary_kRGw7() {
        byte[] header = new byte[0];
        int offset = 0;
        int length = 0;
        long result = TarUtils.parseOctalOrBinary(header, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFIFOTrue_nJOk0() {
    TarArchiveEntry entry = new TarArchiveEntry("file", (byte) 0, true);
    boolean result = entry.isFIFO();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedNullBoolean3_iQhs7() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, true);
        assertNull(tarArchiveEntry.isExtended());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedNullBoolean4_CpeQ8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, false);
        assertNull(tarArchiveEntry.isExtended());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteEntryHeader5_AlfC4() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        byte[] outbuf = new byte[1024];
        tarArchiveEntry.writeEntryHeader(outbuf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_OeXs2() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"), "test");
        assertEquals("test", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName6_oQLp5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        String linkName = tarArchiveEntry.getLinkName();
        assertEquals("fileName", linkName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_SnXl0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0x1ff);
        assertEquals(511, tarArchiveEntry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset6_JMrF5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "file");
        assertEquals(0, tarArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime3_qOPb2_jdYG0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, true);
    Date date = new Date();
    tarArchiveEntry.setModTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime4_QuWx3_Xxys0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, true, 0L);
    Date date = new Date();
    tarArchiveEntry.setModTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime2_jbys1_FXIt0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null);
    Date modTime = tarArchiveEntry.getModTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime3_zdES2_usrp0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, true);
    Date modTime = tarArchiveEntry.getModTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime4_nswz3_sJPE0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, true, 1L);
    Date modTime = tarArchiveEntry.getModTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentNull_qDxz2_ejSK1() {
    TarArchiveEntry parent = new TarArchiveEntry("parent");
    assertNull(parent.isDescendent(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_LinkFlagNotDirAndNoSlash_HPfO4_sIlH0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, "file");
    assertTrue(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsExtendedNullBoolean6_VHtW10_UJrp0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", false);
    assertNull(tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderTarGnuSparseKeysSIZE_iBXi10_IyCD1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "name");
    tarArchiveEntry.addPaxHeader(TarGnuSparseKeys.SIZE, "100");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_NotPaxHeader_uUTQ3_LqVG1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_VXmJ0_TaYC0() {
    try {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(Collections.emptyMap(), new byte[0], TarUtils.DEFAULT_ENCODING, false);
        tarArchiveEntry.parseTarHeader(new byte[0]);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_aZfW0_Hwbb0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], TarUtils.DEFAULT_ENCODING, false);
    tarArchiveEntry.parseTarHeader(new byte[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderOldStyle_sENh1_fRcX0() throws IOException {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], TarUtils.DEFAULT_ENCODING);
    tarArchiveEntry.parseTarHeader(new byte[0], TarUtils.DEFAULT_ENCODING);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName_EVfb0_fJdb1_fid3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertEquals("groupName", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsExtended_gyRL0_ISPN0_fid3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertTrue(tarArchiveEntry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_FileNotNull_nFRV0_CFlq0_fid3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file"), "fileName");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName_OuPv0_TZpl0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    String userName = tarArchiveEntry.getUserName();
    assertEquals("", userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderOldStyle_rTJf1_kTMn0() {
    try {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(Collections.emptyMap(), new byte[0], TarUtils.DEFAULT_ENCODING, true);
        tarArchiveEntry.parseTarHeader(new byte[0]);
    } catch (IOException e) {
    }
}
}