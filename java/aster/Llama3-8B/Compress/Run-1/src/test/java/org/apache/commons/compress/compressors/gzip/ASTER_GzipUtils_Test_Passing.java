/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_tdme1() {
        String fileName = "test.gz";
        boolean result = GzipUtils.isCompressedFileName(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCompressedFileName_XIqq2() {
        String fileName = "test.txt";
        boolean result = GzipUtils.isCompressedFileName(fileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_UNaK0() {
        String fileName = "test.gz";
        String expected = "test";
        String result = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_AIkT0() {
        String fileName = "test.gz";
        boolean result = GzipUtils.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotCompressedFilename_ahOA1() {
        String fileName = "test.txt";
        boolean result = GzipUtils.isCompressedFilename(fileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFilename_CUgu0() {
        String fileName = "test.txt";
        String expected = "test.txt.gz";
        String actual = GzipUtils.getCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedFileName_dBLZ0() {
        String fileName = "test.txt";
        String expected = "test.txt.gz";
        String actual = GzipUtils.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
}