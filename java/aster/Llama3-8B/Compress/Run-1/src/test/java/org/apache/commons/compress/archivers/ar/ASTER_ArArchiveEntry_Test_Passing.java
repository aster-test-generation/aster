/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_XKSk0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(entry);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_gkGy1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_ilCm2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(new Object());
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_ntla3() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    ArArchiveEntry other = new ArArchiveEntry("other", 10);
    boolean result = entry.equals(other);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_hsWj4() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    ArArchiveEntry other = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(other);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectWithDifferentName_YKOQ5() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    ArArchiveEntry other = new ArArchiveEntry("test2", 10);
    boolean result = entry.equals(other);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory1_icLR0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory3_KFyC2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory4_fGfh3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate4_fSCq3() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 1000, 1, 2, 3, 1000);
        Date result = entry.getLastModifiedDate();
        assertEquals(new Date(1000 * 1000), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize1_EMId0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize3_lHfM2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize4_RBKI3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_Bkrz0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
    assertEquals(1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId2_ECbU1() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_nJrR0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(2, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId2_jvAc1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_xxmJ0() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10);
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_OJUx2() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 2, 3, 4);
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName4_JptQ3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_DrAR0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength2_ZCgh1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100, 1, 1, 1, 1000000);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength3_AsUV2() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
    assertEquals(0, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified2_tMLs1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100, 1, 2, 3, 4);
    assertEquals(4, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified3_vqjt2() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
    assertEquals(0, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_PXfv0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
        assertEquals(3, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_zBQM0_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10);
        assertEquals(3556529, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_cbeN1_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 2, 3, 4);
        assertEquals(3556529, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode3_SWRj2_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
        assertEquals(3556529, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode2_lnXl1_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 133188);
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory2_mMrI1_ubCv0() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("path"), "entryName");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize2_BPCK1_OXwk1() throws IOException {
    ArArchiveEntry entry = new ArArchiveEntry(new File("path"), "entryName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId4_ekhJ3_IHIy1() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100L, 1, 1, 0, 0);
    assertEquals(1, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId5_jnmD4_QEJB0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 0, System.currentTimeMillis());
    assertEquals(2, entry.getGroupId());
}
}