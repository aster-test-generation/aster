/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import java.io.IOException;
import java.io.InputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_WGnw0() {
    byte[] signature = new byte[] {31, -117};
    int length = 2;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidLength_bmgC1() {
    byte[] signature = new byte[] {31, -117};
    int length = 1;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_jxsm2() {
    byte[] signature = new byte[] {32, -116};
    int length = 2;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_fnjJ3() {
    byte[] signature = null;
    int length = 2;
    try {
        GzipCompressorInputStream.matches(signature, length);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithSystemInputStream_XfoB2() throws IOException {
        GzipCompressorInputStream gzipCompressorInputStream = new GzipCompressorInputStream(System.in, false);
        gzipCompressorInputStream.close();
    }
}