/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableFile_NoLd1() throws IOException {
        File file = new File("test");
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(file, 1000);
        boolean result = zip.isSeekable();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNormal_mDiu0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_fqXm1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntry_SuaH2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_YeNt4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNullComment_PMEW4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.setComment(null);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNormal_RRGj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_iBbZ1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_ZEzo2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_geDi4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setComment("Test comment");
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_AHai3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_SruB4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut3_VeTl2() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        byte[] data = new byte[10];
        zipArchiveOutputStream.writeOut(data, 0, data.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry3_Ndle2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry6_PAlZ5() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_sJIf0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithDeflated_uBzW1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1000);
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_KSbm0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024L);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithPhased_ZAxs1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithEntryTooBigForZip32AndZip64ModeDefaultAndThrowException_GtAz15() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        try {
            zipArchiveOutputStream.closeArchiveEntry();
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry3_VOkE2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000000);
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithFile_tjpv1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut_Yrzp0() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(bos);
        byte[] data = new byte[] {1, 2, 3};
        zip.writeOut(data);
        assert bos.toByteArray().equals(data);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOutFile_yGhi1() throws IOException {
        File file = new File("test.txt");
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(file, 1024);
        byte[] data = new byte[] {1, 2, 3};
        zip.writeOut(data);
        assert true; // todo: implement assertion
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_ytTQ0() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    byte[] b = new byte[10];
    zip.write(b, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeflateWithFile_LDkJ1() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        zipArchiveOutputStream.deflate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRawArchiveEntryWithNullInputStream_ysZB3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        try {
            zipArchiveOutputStream.addRawArchiveEntry(entry, null);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals("Stream cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithFile_gZlg1() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("file"), 1024);
    zip.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreamble2_gbzB1() throws IOException {
        SeekableByteChannel channel = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(channel);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreamble3_xhyh2() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEnd_iIZh0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithComment_ICRx3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.setComment("comment");
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithFileAndZipSplitSize_iDyz1() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        byte[] preamble = new byte[10];
        zipArchiveOutputStream.writePreamble(preamble, 0, preamble.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryFinished_BdlF1_XNrZ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
    zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_KRpp4_qrbV0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.setFallbackToUTF8(true);
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ZToO0_dPbN0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_TQdG3_Jbxy0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.setComment("comment");
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_PHYd3_Ksby0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_wCgw4_vZqp0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.setFallbackToUTF8(true);
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Zip split segment size should between 64K and 4,294,967,295", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_HoSQ2_rPck0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.write("test.txt".getBytes());
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntries_DEyK2_uQrE0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithNullComment_fcGX4_eDCM0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setComment(null);
    try {
        zipArchiveOutputStream.finish();
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_ehQt0_iuFR0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_npWB0_AqZk0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullArchiveEntry_pzSB2_bzIW0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.putArchiveEntry(null);
    assertEquals("Stream has already been finished", zipArchiveOutputStream.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullEntry_UKoc2_DHVZ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.putArchiveEntry(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullName_vAAY9_QtAa0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullPath_ONOs3_FzIv0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 0);
    try {
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry());
        fail("Expected IOException");
    } catch (IOException e) {
        zipArchiveOutputStream.setFallbackToUTF8(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullPath_rbmj3_AKRp0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 0);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setName("test");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry2_iVHq1_ADnD0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry2_IEsM1_jInj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entry");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_DTql0_VFtG0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithOpenOption_LTtB7_QhUB1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 0);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_RzFg0_mTlf0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.write(new byte[1024]);
    zipArchiveOutputStream.closeArchiveEntry();
    zipArchiveOutputStream.setFallbackToUTF8(true); // Added method call
    zipArchiveOutputStream.close(); // Added method call
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithDeflated_nUro1_nGFl0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithStored_ZhfI2_cGnz0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithEntryTooBigForZip32AndZip64ModeNeverAndThrowException_ERJq12_WPzO0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    try {
        zipArchiveOutputStream.setFallbackToUTF8(true);
        zipArchiveOutputStream.closeArchiveEntry();
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Tyrw0_nAYu0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000000);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry8_XIUu7_CnrX0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry11_Lhcx10_nekt0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_qJJk0_sehX0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.writeLocalFileHeader(zipArchiveEntry);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_azwA0_KYkh0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.writeLocalFileHeader(zipArchiveEntry);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryNullEntry_CAkw1_MXkd0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    try {
        zipArchiveOutputStream.addRawArchiveEntry(null, null);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_EpFY0_WReM0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
    assert zipArchiveEntry != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithTooManyEntriesOnDisk_wqWB2_xtwI0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralDirectoryEndWithLargeEntries_SHZQ4_WiDT0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.writeCentralDirectoryEnd();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding2_WSWm1_fIRD0() {
    try {
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"));
        zip.setEncoding("ISO-8859-1");
        assertEquals(Charset.forName("ISO-8859-1"), zip.getEncoding());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryDataNull_mmtZ4_zCdF0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"), 1024);
        ArchiveEntry archiveEntry = null;
        assertFalse(zipArchiveOutputStream.canWriteEntryData(archiveEntry));
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryNever_PSnW0_tair0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
        zipArchiveOutputStream.setFallbackToUTF8(true);
        try {
            zipArchiveOutputStream.writeZip64CentralDirectory();
        } catch (IOException e) {
        }
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_CYMj3_oAaH0_fid1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.setFallbackToUTF8(true);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_wCgw4_vZqp0_fid1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.setFallbackToUTF8(true);
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncodingWithoutCharset_Eevt1_iEgh0_fid1() {
    try {
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    } catch (IOException e) {
    }
}
}