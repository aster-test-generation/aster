/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_wzHu1() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipLong(new byte[8]));
        ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
        assertEquals(ZipShort.getValue(new byte[2]), headerId.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_SizeNotNull_axCd28() {
        Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipLong(new byte[4]));
        ZipShort result = zip64.getCentralDirectoryLength();
        assertEquals(ZipShort.getValue(new byte[4]), result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_SizeAndCompressedSizeNotNull_RSyr2() {
        Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipEightByteInteger(new byte[8]), new ZipLong(new byte[4]));
        ZipShort result = zip64.getCentralDirectoryLength();
        assertEquals(ZipShort.getValue(new byte[6]), result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataSizeNullCompressedSizeNotNull_kbQz1_yACY0() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8]);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, compressedSize);
    byte[] result = zip64ExtendedInformationExtraField.getLocalFileDataData();
    assertArrayEquals(new byte[8], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataSizeNotNullCompressedSizeNull_nEhq2_ziZc0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8]);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, null);
    byte[] result = zip64ExtendedInformationExtraField.getLocalFileDataData();
    assertArrayEquals(new byte[8], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataSizeNotNullCompressedSizeNotNull_ExCi3_NKmr0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8]);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] result = zip64ExtendedInformationExtraField.getLocalFileDataData();
    assertArrayEquals(new byte[24], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLengthNotNullSize_XMnx1_fid2() {
        ZipEightByteInteger size = new ZipEightByteInteger(1);
        Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(size, new ZipEightByteInteger(0), new ZipEightByteInteger(0), new ZipLong(0));
        ZipShort result = zip64.getLocalFileDataLength();
        assertEquals(2, result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataSizeAndCompressedSize_FoBz4_anGg0_fid2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8]);
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize, new ZipEightByteInteger(new byte[8]), diskStart);
    byte[] result = zip64ExtendedInformationExtraField.getLocalFileDataData();
    assertArrayEquals(new byte[24], result);
}
}