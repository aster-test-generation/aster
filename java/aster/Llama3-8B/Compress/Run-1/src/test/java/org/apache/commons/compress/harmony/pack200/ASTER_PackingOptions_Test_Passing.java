/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGzip_QDsb1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        assertEquals(true, packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogFile_gIGf0() {
        PackingOptions packingOptions = new PackingOptions();
        String logFile = "testLogFile";
        packingOptions.setLogFile(logFile);
        assertEquals(logFile, packingOptions.getLogFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietTrue_SSlx0() {
        PackingOptions options = new PackingOptions();
        options.setQuiet(true);
        assertEquals(false, options.isVerbose());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietFalse_vbqc1() {
        PackingOptions options = new PackingOptions();
        options.setQuiet(false);
        assertEquals(true, options.isVerbose());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileFalse_llAh1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "path2";
        boolean result = packingOptions.isPassFile(passFileName);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileNotStartsWith_mEIi3() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "path3";
        boolean result = packingOptions.isPassFile(passFileName);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileNull_xlln4() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = null;
        boolean result = packingOptions.isPassFile(passFileName);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebugTrue_GiHW0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        boolean result = packingOptions.isStripDebug();
        assert(result == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebugFalse_iush1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(false);
        boolean result = packingOptions.isStripDebug();
        assert(result == false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVerboseTrue_ytGD0() {
        PackingOptions options = new PackingOptions();
        options.setVerbose(true);
        boolean actual = options.isVerbose();
        assert actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVerboseFalse_Pnjb1() {
        PackingOptions options = new PackingOptions();
        options.setVerbose(false);
        boolean actual = options.isVerbose();
        assert !actual;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffort_EYZD0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(10);
        assertEquals(10, packingOptions.getEffort());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderTrue_dAlV0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        assertTrue(packingOptions.isKeepFileOrder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderFalse_jTfv1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(false);
        assertFalse(packingOptions.isKeepFileOrder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidTrue_RnLN0() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint("true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidFalse_MPXM1() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint("false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidKeep_wvRw2() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint(PackingOptions.KEEP);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimit_eaNi1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(100L);
        assertEquals(100L, packingOptions.getSegmentLimit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeLatest_XuUz0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setModificationTime("latest");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeKeep_gzht1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setModificationTime("keep");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeInvalid_ZbMt2() {
        PackingOptions packingOptions = new PackingOptions();
        assertThrows(IllegalArgumentException.class, () -> packingOptions.setModificationTime("invalid"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnknownAttributeActionInvalidOption_fbAn3() {
        PackingOptions packingOptions = new PackingOptions();
        try {
            packingOptions.setUnknownAttributeAction("INVALID");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_qUgD0() {
        PackingOptions packingOptions = new PackingOptions();
        boolean result = packingOptions.isGzip();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateHint_QrmA0() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getDeflateHint();
        assertEquals("Expected deflate hint", "Expected deflate hint", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_Sptx0_fid1() {
        PackingOptions options = new PackingOptions();
        boolean result = options.isVerbose();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileTrue_BKDy0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "path1";
        boolean result = packingOptions.isPassFile(passFileName);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileStartsWith_HBaI2_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "path1/path2";
        boolean result = packingOptions.isPassFile(passFileName);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownClassAttributeActionNullMap_umHU0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownClassAttributeAction("type");
        assertEquals("pass", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSegmentLimit_RQXU0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        long expected =1000000;
        long actual = packingOptions.getSegmentLimit();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownAttributeAction_aeXj0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownAttributeAction();
        assertEquals("pass", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_JeyG5() {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(5, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePassFile_MVVb0_sAvF1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.removePassFile("testPassFile");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttributeAction_sRoN0_aUtI1() {
    PackingOptions packingOptions = new PackingOptions();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttributeAction_Jmzv0_hggO1() {
    PackingOptions packingOptions = new PackingOptions();
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_CrXC1() {
    PackingOptions packingOptions = new PackingOptions();
    String result = packingOptions.getDeflateHint();
    assertEquals("keep", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflateHint_gwmk2_LKUj1() {
    PackingOptions packingOptions = new PackingOptions();
    assertEquals("keep", packingOptions.getDeflateHint());
}
}