/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_AZfr0_XqSj0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 10);
    int available = lzmaCompressorInputStream.available();
    assert available == inputStream.available();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithoutMemoryLimit_ddcl1_gWXr0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
    int available = lzmaCompressorInputStream.available();
    assert available == inputStream.available();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInputStreamWithMemoryLimitInKb_uyIb0_IFHL0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[] {1, 2, 3});
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
    assertEquals(-1, lzmaCompressorInputStream.read());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInputStreamWithoutMemoryLimitInKb_QTmJ1_jRNV0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[] {1, 2, 3});
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
    assertEquals(inputStream.read(), lzmaCompressorInputStream.read());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead2_TQoy1_huMS0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[] {1, 2, 3, 4, 5});
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
    byte[] buf = new byte[5];
    int ret = lzmaCompressorInputStream.read(buf, 0, 5);
    assert ret == 5;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInputStreamWithMemoryLimitInKb_uyIb0_IFHL0_fid2() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[] {1, 2, 3});
    LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 10);
    assertEquals(inputStream.read(), lzmaCompressorInputStream.read());
}
}