/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
    private int detect(InputStream in) {
        return 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_kjzN0() {
        assertEquals("bzip2", CompressorStreamFactory.getBzip2());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_Xysy0() {
    assertEquals("lz4-framed", CompressorStreamFactory.getLZ4Framed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_XkqC0() {
        assertEquals("lzma", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_hduc0() {
    CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
    assert singleton instanceof CompressorStreamFactory;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedDefaultConstructor_vIzn0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        boolean result = factory.getDecompressConcatenated();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedSingleParameterConstructor_rUWE1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        boolean result = factory.getDecompressConcatenated();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedTwoParameterConstructor_nmAd2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 10);
        boolean result = factory.getDecompressConcatenated();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedSingleParameterConstructorFalse_klkm4() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        boolean result = factory.getDecompressConcatenated();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedTwoParameterConstructorFalse_dqkK5() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 10);
        boolean result = factory.getDecompressConcatenated();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSnappyRaw_uHoV0() {
        assertEquals("snappy-raw", CompressorStreamFactory.getSnappyRaw());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithBooleanParameter_kamH1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        assertTrue(compressorStreamFactory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithBooleanAndIntParameter_VBMy2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 10);
        assertTrue(compressorStreamFactory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFFalse_uTrJ3() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
        assertFalse(compressorStreamFactory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenatedFalse_EJVe1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    compressorStreamFactory.setDecompressConcatenated(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4Block_unlN0() {
        assertEquals("lz4-block", CompressorStreamFactory.getLZ4Block());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate_oxFA0() {
        assertEquals("deflate", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_VKua0() {
    assertEquals("snappy-framed", CompressorStreamFactory.getSnappyFramed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate64_qvwv0() {
        assertEquals("deflate64", CompressorStreamFactory.getDeflate64());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_rPDq0() {
    String result = CompressorStreamFactory.getBrotli();
}
}