/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJar_xIMJ0() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        assertNotNull(outputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithEntries_tjQT1() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        Enumeration<JarEntry> entries = jarFile.entries();
        while (entries.hasMoreElements()) {
            JarEntry jarEntry = entries.nextElement();
            byte[] expectedBytes = new byte[16384];
            int bytesRead;
            try (InputStream inputStream = jarFile.getInputStream(jarEntry)) {
                bytesRead = inputStream.read(expectedBytes);
            }
            byte[] actualBytes = outputStream.toByteArray();
            assertArrayEquals(expectedBytes, actualBytes);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithComment_IHic2() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        String comment = outputStream.toString();
        assertEquals("PACK200", comment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithLog_ZEmh3() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        String logMessage = "Packed " + jarFile.getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithIOException_lxhe4() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PackingUtils.copyThroughJar(jarFile, outputStream);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPackingFileListFromJar_wKnt0() throws IOException {
        JarFile jarFile = new JarFile("test.jar");
        List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
        assert packingFileList.size() > 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPackingFileListFromJarWithKeepFileOrderFalse_sueU3() throws IOException {
        JarFile jarFile = new JarFile("test.jar");
        List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
        assert packingFileList.size() > 0;
    }
}