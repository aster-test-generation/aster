/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_Bxdp1() {
    byte[] signature = new byte[] {0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48};
    boolean result = Pack200CompressorInputStream.matches(signature, signature.length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesShortSignature_KzXE2() {
    byte[] signature = new byte[] {0x43, 0x41, 0x46, 0x45, 0x44, 0x4f, 0x4f, 0x00};
    boolean result = Pack200CompressorInputStream.matches(signature, signature.length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFile_euki3() throws IOException {
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<>());
        byte[] b = new byte[10];
        int result = compressorInputStream.read(b);
        assert result >= 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFileMode_oEXY4() throws IOException {
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<>());
        byte[] b = new byte[10];
        int result = compressorInputStream.read(b);
        assert result >= 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFileFile_iRPS7() throws IOException {
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(new File("test.txt"));
        byte[] b = new byte[10];
        int result = compressorInputStream.read(b);
        assert result >= 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFileFileMode_jdjH9() throws IOException {
        Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
        byte[] b = new byte[10];
        int result = compressorInputStream.read(b);
        assert result >= 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseFile_QyFO1() throws IOException {
    Pack200CompressorInputStream compressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<>());
    compressorInputStream.close();
}
}