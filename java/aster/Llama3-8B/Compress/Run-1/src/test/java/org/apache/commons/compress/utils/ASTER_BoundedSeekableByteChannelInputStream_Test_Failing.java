/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BoundedSeekableByteChannelInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_SCjU0() throws IOException {
        SeekableByteChannel channel = null;
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
        ByteBuffer buf = ByteBuffer.allocate(5);
        int read = boundedSeekableByteChannelInputStream.read(0, buf);
        assert read > 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadAtEnd_iaKG1() throws IOException {
        SeekableByteChannel channel = null;
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
        ByteBuffer buf = ByteBuffer.allocate(5);
        int read = boundedSeekableByteChannelInputStream.read(10, buf);
        assert read == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_SgXN2() throws IOException {
        SeekableByteChannel channel = null;
        BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream = new BoundedSeekableByteChannelInputStream(0, 10, channel);
        ByteBuffer buf = ByteBuffer.allocate(5);
        int read = boundedSeekableByteChannelInputStream.read(15, buf);
        assert read == 0;
    }
}