/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_ZYWd0() {
    ConstantValueAttribute obj1 = new ConstantValueAttribute(new ByteCode(1));
    boolean result = obj1.equals(obj1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_pHwP1() {
    ConstantValueAttribute obj1 = new ConstantValueAttribute(new ByteCode(1));
    ByteCode obj2 = new ByteCode(1);
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_zjdC2() {
    ConstantValueAttribute obj1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute obj2 = new ConstantValueAttribute(new ByteCode(2));
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_QNli4() {
    ConstantValueAttribute obj1 = new ConstantValueAttribute(new ByteCode(1));
    boolean result = obj1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DhuX0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        String result = attribute.toString();
        assertEquals("Constant:" + byteCode, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_KPFm0() {
        ByteCode entry = new ByteCode(1);
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
        ClassFileEntry[] expected = new ClassFileEntry[] { constantValueAttribute.getAttributeName(), entry };
        ClassFileEntry[] actual = constantValueAttribute.getNestedClassFileEntries();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_MyqL0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        int length = attribute.getLength();
        assert length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_sAuZ0() throws IOException {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        DataOutputStream dos = new DataOutputStream(new java.io.ByteArrayOutputStream());
        attribute.writeBody(dos);
        dos.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_EntryIsNull_qmvK0() {
    ByteCode byteCode = new ByteCode(0);
    ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
    int result = attribute.hashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_EntryIsNotNull_Nwcp1() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
    int result = attribute.hashCode();
}
}