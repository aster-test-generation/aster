/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ezVW0() throws Pack200Exception {
    PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)), 1, new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)));
    int[] favoured = new int[]{1, 2, 3};
    int[] tokens = new int[]{4, 5};
    int[] unfavoured = new int[]{6, 7, 8};
    byte[] result = populationCodec.encode(favoured, tokens, unfavoured);
    assert result.length == 3 * 1 + 2 * 1 + 3 * 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnfavouredCodec_muNg0_mhul0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4)), 5, new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10)));
        Codec unfavouredCodec = populationCodec.getUnfavouredCodec();
        assert unfavouredCodec != null;
    } catch (Pack200Exception e) {
        fail("Expected no Pack200Exception but got one");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredCodec_qyTC0_QHRy0() {
    int k = 1;
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    try {
        RunCodec runCodec = new RunCodec(k, aCodec, bCodec);
        PopulationCodec populationCodec = new PopulationCodec(runCodec, 5, runCodec);
        Codec actual = populationCodec.getFavouredCodec();
        Codec expected = runCodec;
        assertEquals(expected, actual);
    } catch (Pack200Exception e) {
        fail("Unexpected Pack200Exception");
    }
}
}