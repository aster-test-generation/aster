/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_OQIp0() {
    byte[] signature = new byte[] {(byte) 0x1a, (byte) 0x07};
    boolean result = ArjArchiveInputStream.matches(signature, 2);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveName_kDld0() throws IOException, ArchiveException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        String archiveName = arjArchiveInputStream.getArchiveName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveNameWithCharset_bLMO1() throws IOException, ArchiveException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        String archiveName = arjArchiveInputStream.getArchiveName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveComment_HDjt0() throws IOException, ArchiveException {
        InputStream inputStream = new ByteArrayInputStream("comment".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        String archiveComment = arjArchiveInputStream.getArchiveComment();
        assertEquals("comment", archiveComment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveCommentWithCharset_zMtl1() throws IOException, ArchiveException {
        InputStream inputStream = new ByteArrayInputStream("comment".getBytes());
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        String archiveComment = arjArchiveInputStream.getArchiveComment();
        assertEquals("comment", archiveComment);
    }
}