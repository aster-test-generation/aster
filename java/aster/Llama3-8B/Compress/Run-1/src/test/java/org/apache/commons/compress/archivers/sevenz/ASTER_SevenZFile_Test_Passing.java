/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureLengthLessThanSevenZSignatureLength_kzSj0() {
        byte[] signature = new byte[5];
        boolean result = SevenZFile.matches(signature, 5);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignatureLengthGreaterThanSevenZSignatureLength_ipRq3_sSFR0() {
    byte[] sevenZSignature = new byte[7]; // Assuming the length of sevenZSignature is 7
    byte[] signature = new byte[7]; // Assuming the length of signature is 7
    boolean result = SevenZFile.matches(signature, sevenZSignature.length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamInvalidEntry_sOOB1_lRcZ0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("testFile"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        sevenZFile.getEntries();
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        sevenZFile.getInputStream(entry);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamInvalidEntry_npag1_nlVd0() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("path"), new char[]{'p'});
        sevenZFile.getEntries(); // Added this line to initialize the SevenZFile
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        sevenZFile.getInputStream(entry);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDefaultNameNull_xnos0_GfVF1() {
    try {
        SevenZFile sevenZFile = new SevenZFile(new File("test"), new char[]{'p'});
        assertEquals("null", sevenZFile.getDefaultName());
    } catch (IOException e) {
    }
}
}