/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0017_StrongEncryptionHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCount_XIBf0() {
        X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
        long expected = 0;
        long actual = obj.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHashAlgorithm_xeyi0_swoD0() {
    X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
    long actual = obj.getRecordCount();
    org.junit.Assert.assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncryptionAlgorithm_jeGf0_hrRw1() {
    X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
    long result = obj.getRecordCount();
    System.out.println("return " + result + ";");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFileFormat1_oHLj0_XXrA0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[100];
    int offset = 0;
    int length = 100;
    try {
        x0017_StrongEncryptionHeader.parseFileFormat(data, offset, length);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseCentralDirectoryFormatInvalidData_JDxu1_pMvu0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[10];
    try {
        x0017_StrongEncryptionHeader.parseCentralDirectoryFormat(data, 0, 10);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseCentralDirectoryFormatValidData_utip0_jvzR0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[20];
    data[0] = 0x01;
    data[1] = 0x02;
    data[2] = 0x03;
    data[3] = 0x04;
    data[4] = 0x05;
    data[5] = 0x06;
    data[6] = 0x07;
    data[7] = 0x08;
    data[8] = 0x09;
    data[9] = 0x0A;
    data[10] = 0x0B;
    data[11] = 0x0C;
    data[12] = 0x0D;
    data[13] = 0x0E;
    data[14] = 0x0F;
    data[15] = 0x10;
    data[16] = 0x11;
    data[17] = 0x12;
    data[18] = 0x13;
    data[19] = 0x14;
    try {
        x0017_StrongEncryptionHeader.parseCentralDirectoryFormat(data, 0, 20);
    } catch (java.util.zip.ZipException e) {
    }
}
}