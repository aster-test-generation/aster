/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlush_tDET0_LEsm0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(bos);
    zstdCompressorOutputStream.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushWithLevelAndCloseFrameOnFlushAndChecksum_Xhdb3_nwlu0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(bos, 1, true, true);
    zstdCompressorOutputStream.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithLevel_zuTU1_zgsh0() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    ZstdCompressorOutputStream zstdCompressorOutputStream = new ZstdCompressorOutputStream(bos, 1);
    try {
        zstdCompressorOutputStream.close();
    } catch (IOException e) {
        assertEquals("ZstdCompressorOutputStream is closed", e.getMessage());
    }
}
}