/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2longOddLength_tEuK2() {
        byte[] number = {0x12, 0x34, 0x56};
        try {
            CpioUtil.byteArray2long(number, false);
            assertEquals(false, true);
        } catch (UnsupportedOperationException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2longNull_UmCR3() {
        byte[] number = null;
        try {
            CpioUtil.byteArray2long(number, false);
            assertEquals(false, true);
        } catch (NullPointerException e) {
            assertEquals(true, true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayLengthLessThan2_HUsE2() {
        try {
            CpioUtil.long2byteArray(1, 1, false);
            assert false;
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayLengthNotMultipleOf2_eDUO3() {
        try {
            CpioUtil.long2byteArray(1, 3, false);
            assert false;
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArrayLongValue0_zYVm4() {
        byte[] result = CpioUtil.long2byteArray(0, 4, false);
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        assertArrayEquals(expected, result);
    }
}