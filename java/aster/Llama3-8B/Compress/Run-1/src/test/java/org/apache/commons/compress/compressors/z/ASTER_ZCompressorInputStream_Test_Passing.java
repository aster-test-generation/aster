/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.z;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidLength_mSRj1() {
    byte[] signature = new byte[] {(byte) 0x78, (byte) 0x01};
    boolean result = ZCompressorInputStream.matches(signature, 2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_Bzob2() {
    byte[] signature = new byte[] {(byte) 0x79, (byte) 0x01};
    boolean result = ZCompressorInputStream.matches(signature, signature.length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignatureWithLength_bmJt3_fid1() {
    byte[] signature = new byte[] {(byte) 0x78, (byte) 0x01};
    boolean result = ZCompressorInputStream.matches(signature, signature.length);
}
}