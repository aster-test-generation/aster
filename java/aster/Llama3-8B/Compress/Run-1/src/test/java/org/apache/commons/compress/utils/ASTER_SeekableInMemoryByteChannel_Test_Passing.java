/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateValidSize_LnNl0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        SeekableByteChannel result = channel.truncate(5);
        assertEquals(channel, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateInvalidSize_AxGz1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        try {
            channel.truncate(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateSizeGreaterThanMaxValue_iQpm2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        try {
            channel.truncate(Integer.MAX_VALUE + 1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenTrue_eCDe0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    boolean result = channel.isOpen();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionInvalidPosition_KUZH1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(-1L);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionLargePosition_FALs2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MAX_VALUE + 1L);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_HCWf0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithData_yyqZ1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_MlvO0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithByteData_xthw1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[20]);
        assertEquals(20, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNoArgument_nxXH2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenFalse_yvLp3_fid1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    boolean result = channel.isOpen();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateSizeLessThanCurrentPosition_cUsw3_YZUa0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(8);
    assertEquals(8, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_HBNb0_KkWs1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    channel.close();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithData_EWVv2_CZDo1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    channel.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithinLimit_HBPm0_PeKv0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[5]);
    try {
        int result = channel.write(buffer);
        assertEquals(5, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBeyondLimit_xJyF1_xnEY0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[15]);
    try {
        int result = channel.write(buffer);
    } catch (IOException e) {
        assertEquals("Write beyond limit", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteResize_oonV2_KGDQ0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(20);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
    try {
        int result = channel.write(buffer);
        assertEquals(20, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteResizeMax_AwxW3_UeIv0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[Integer.MAX_VALUE]);
    try {
        int result = channel.write(buffer);
        assertEquals(Integer.MAX_VALUE - 10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteSmallData_pjqL0_QmpP0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[] {1, 2, 3});
    try {
        int result = channel.write(buffer);
        assertEquals(3, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_VUKj1_Mhfx0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[100]);
    try {
        int result = channel.write(buffer);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataThatExceedsCapacityAndResizes_NJJe3_DPNp0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[15]);
    try {
        int result = channel.write(buffer);
        assertEquals(15, result);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionValidPosition_fnTf0_ICko1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(10L);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionWithDataAndSeek_jnJM2_snld0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    try {
        channel.position(10);
    } catch (IOException e) {
    }
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFullBuffer_svnE0_dXsw0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
    ByteBuffer buf = ByteBuffer.allocate(0);
    try {
        channel.read(buf);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
    assertEquals(0, buf.remaining());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadLessThanBuffer_oRys1_RWFx0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(0);
    try {
        channel.read(buf);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
    assertEquals(0, buf.remaining());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZero_uOJu2_zloV0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(0);
    try {
        channel.read(buf);
    } catch (IOException e) {
    }
    assertEquals(0, buf.remaining());
}
}