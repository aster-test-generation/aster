/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCacheZstdAvailablityFalse_JkJt0() {
        ZstdUtils.setCacheZstdAvailablity(false);
        assertEquals(ZstdUtils.getCachedZstdAvailability(), ZstdUtils.CachedAvailability.DONT_CACHE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCacheZstdAvailablityTrueNoZstd_lVjW1() {
        ZstdUtils.setCacheZstdAvailablity(true);
        assertEquals(ZstdUtils.getCachedZstdAvailability(), ZstdUtils.CachedAvailability.CACHED_UNAVAILABLE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_Aohn5() {
    byte[] signature = null;
    int length = 0;
    boolean result = ZstdUtils.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesEmptySignature_XrMf6() {
    byte[] signature = new byte[0];
    int length = signature.length;
    boolean result = ZstdUtils.matches(signature, length);
    assert !result;
}
}