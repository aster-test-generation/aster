/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.IdentityHashMap;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.IdentityHashMap;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayIsCachedFalse_Jtfd1() {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = new String[5];
        boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
        Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayIsCachedNull_cNUS2() {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = null;
        boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArray_MaUG0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    cache.cacheArray(array);
    assertEquals(true, cache.knownArrays.containsKey(array));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArrayAlreadyCached_yssq1() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[] {"a", "b", "c"};
    cache.cacheArray(array);
    cache.cacheArray(array);
    assertEquals(true, cache.knownArrays.containsKey(array));
    try {
        cache.cacheArray(array);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCachedTrue_YyCf0_MEaC0() {
    SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
    String[] array = new String[5];
    segmentConstantPoolArrayCache.cacheArray(array);
    boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_jtWC0_NGHH0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    String key = "key";
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(indexes, cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKeyNoCache_HmXr1_TNIx0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    String key = "key";
    cache.cacheArray(array);
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(indexes, cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKeySameArrayAndKey_mhhX2_rVAJ0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = new String[]{"a", "b", "c"};
    String key = "key";
    cache.indexesForArrayKey(array, key);
    List<Integer> indexes = cache.indexesForArrayKey(array, key);
    assertEquals(indexes, cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKeyDifferentArrayAndKey_SXEl3_dzgX0() {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array1 = new String[]{"a", "b", "c"};
    String[] array2 = new String[]{"d", "e", "f"};
    String key1 = "key1";
    String key2 = "key2";
    cache.indexesForArrayKey(array1, key1);
    List<Integer> indexes1 = cache.indexesForArrayKey(array1, key1);
    List<Integer> indexes2 = cache.indexesForArrayKey(array2, key2);
    assertEquals(indexes1, indexes2);
}
}