/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountInvokeInterfaceArgs_FWFN0() {
        assertEquals(2, SegmentUtils.countInvokeInterfaceArgs("()I"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_DLXr0() {
        assertEquals(1, SegmentUtils.countArgs("I"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyArray_gXmN0() {
        long[] flags = new long[0];
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoBit16Set_LvKU1() {
        long[] flags = new long[] {0, 1, 2, 3};
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16Bit16Set_kHmV2() {
        long[] flags = new long[] {1 << 16, 1 << 16, 0, 1 << 16};
        assertEquals(3, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyArray_kRnD0() {
        int[] flags = new int[0];
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoBit16Set_yOLL1() {
        int[] flags = new int[] {0, 1, 2, 3, 4, 5, 6, 7};
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16Bit16Set_Ntxz2() {
        int[] flags = new int[] {0x10000, 0x10000, 0, 0, 0, 0, 0, 0};
        assertEquals(2, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16EmptyFlags_BrQE0() {
        long[][] flags = new long[][]{};
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16NoBit16_GxXm1() {
        long[][] flags = new long[][]{{0, 0, 0, 0}, {0, 0, 0, 0}};
        assertEquals(0, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16SomeBit16_tsmv2() {
        long[][] flags = new long[][]{{1 << 16, 0, 0, 0}, {0, 0, 0, 0}};
        assertEquals(1, SegmentUtils.countBit16(flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16MultipleBit16_Dhdz3() {
        long[][] flags = new long[][]{{1 << 16, 1 << 16, 0, 0}, {0, 0, 0, 0}};
        assertEquals(2, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs1_WZWP0() {
        assertEquals(0, SegmentUtils.countArgs("I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs2_dKcs1() {
        assertEquals(1, SegmentUtils.countArgs("I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs3_tkXN2() {
        assertEquals(2, SegmentUtils.countArgs("II", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs4_kLRb3() {
        assertEquals(3, SegmentUtils.countArgs("III", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs5_YdjJ4() {
        assertEquals(4, SegmentUtils.countArgs("IIII", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs6_AUto5() {
        assertEquals(1, SegmentUtils.countArgs("L", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs7_dlNL6() {
        assertEquals(2, SegmentUtils.countArgs("LL", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs8_btnJ7() {
        assertEquals(3, SegmentUtils.countArgs("LLL", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs9_bQTp8() {
        assertEquals(4, SegmentUtils.countArgs("LLLL", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs10_klHc9() {
        assertEquals(1, SegmentUtils.countArgs("[I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs11_brkp10() {
        assertEquals(2, SegmentUtils.countArgs("[I[I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs12_TtPc11() {
        assertEquals(3, SegmentUtils.countArgs("[I[I[I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs13_Gmsi12() {
        assertEquals(4, SegmentUtils.countArgs("[I[I[I[I", 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs14_fNmU13() {
        assertEquals(5, SegmentUtils.countArgs("[I[I[I[I[I", 4));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountMatches_uZiK0_VjNy0() {
    long[][] flags = new long[][]{{1, 2, 3}, {4, 5, 6}};
    int result = SegmentUtils.countArgs("Llong[][]", 8);
    Assertions.assertEquals(2, result);
}
}