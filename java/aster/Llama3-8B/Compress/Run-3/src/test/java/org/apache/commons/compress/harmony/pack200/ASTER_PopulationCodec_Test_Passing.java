/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UVbp0() throws Pack200Exception {
        final int[] favoured = {1, 2, 3};
        final int[] tokens = {4, 5};
        final int[] unfavoured = {6, 7, 8};
        final RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(1, 2, 3, 4));
        final RunCodec tokenCodec = new RunCodec(2, new BHSDCodec(2, 3), new BHSDCodec(2, 3, 4));
        final RunCodec unfavouredCodec = new RunCodec(3, new BHSDCodec(3, 4), new BHSDCodec(3, 4, 5));
        final PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 1, unfavouredCodec);
        final byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        final byte[] result = populationCodec.encode(favoured, new int[0], unfavoured);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnfavouredCodec_TNBG0_TsZa0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(1, 2)), 1, new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(1, 2)));
        Codec unfavouredCodec = populationCodec.getUnfavouredCodec();
        assertEquals(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(1, 2)), unfavouredCodec);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_qQfw0_cLCG0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4)), 5, new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10)));
        try {
            Codec result = populationCodec.getFavouredCodec();
            assert result != null;
        } catch (Exception e) {
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavoured_fNga0_bXiw0() {
    RunCodec aCodec = null;
    try {
        aCodec = new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4));
    } catch (Pack200Exception e) {
    }
    RunCodec bCodec = null;
    try {
        bCodec = new RunCodec(5, new BHSDCodec(6, 7), new BHSDCodec(8, 9));
    } catch (Pack200Exception e) {
    }
    PopulationCodec populationCodec = new PopulationCodec(aCodec, 10, bCodec);
    Codec favouredCodec = populationCodec.getFavouredCodec();
    assert (favouredCodec instanceof Codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_epgy0_RSPP0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4)), 5, new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10)));
        byte[] result = populationCodec.encode(11);
        Assertions.assertNotNull(result);
    } catch (Exception e) {
        Assertions.fail(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTokenCodec_tmbX0_xurB0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(0, new BHSDCodec(0, 0), new BHSDCodec(0, 0)), 0, new RunCodec(0, new BHSDCodec(0, 0), new BHSDCodec(0, 0)));
        Codec actual = populationCodec.getTokenCodec();
        Codec expected = new RunCodec(0, new BHSDCodec(0, 0, 0, 0), new BHSDCodec(0, 0, 0, 0));
        assertEquals(expected, actual);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredCodec_wYDG0_gKzZ0() {
    try {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4)), 5, new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10)));
        Codec actual = populationCodec.getFavouredCodec();
        try {
            RunCodec expected = new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4));
            assertEquals(expected, actual);
        } catch (Pack200Exception e) {
            fail("Pack200Exception was thrown");
        }
    } catch (Pack200Exception e) {
        fail("Pack200Exception was thrown");
    }
}
}