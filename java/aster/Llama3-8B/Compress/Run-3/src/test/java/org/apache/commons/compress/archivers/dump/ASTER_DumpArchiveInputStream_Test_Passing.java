/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DumpArchiveInputStream_Test_Passing {
private long filepos;
@Mock
    private InputStream is;
@Mock
    private DumpArchiveEntry dumpArchiveEntry;
@Mock
    private DumpArchiveConstants dumpArchiveConstants;
private DumpArchiveInputStream dumparchiveinputstream;
@Mock
    private InputStream inputStream;
    private int recordOffset;
    private long entryOffset;
    private int readIdx;
    private final byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];
    private DumpArchiveEntry active;
    private boolean hasHitEOF;
    private final Map<Integer, Dirent> names = new HashMap<>();
    private long entrySize;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSmallBuffer_BLdE0() {
        byte[] buffer = new byte[20];
        boolean result = DumpArchiveInputStream.matches(buffer, buffer.length);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLargeBuffer_LLuD1() {
        byte[] buffer = new byte[DumpArchiveConstants.TP_SIZE + 1];
        boolean result = DumpArchiveInputStream.matches(buffer, buffer.length);
        assertTrue(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesNFSMagic_VUbQ2() {
        byte[] buffer = new byte[32];
        buffer[24] = (byte) DumpArchiveConstants.NFS_MAGIC;
        for (int i = 0; i < 24; i++) {
            buffer[i] = (byte) 0;
        }
        boolean result = DumpArchiveInputStream.matches(buffer, buffer.length);
        assertTrue(DumpArchiveConstants.NFS_MAGIC == DumpArchiveUtil.convert32(buffer, 24));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesNotNFSMagic_nHbq3() {
        byte[] buffer = new byte[32];
        buffer[24] = (byte) 0x12345678;
        for (int i = 0; i < 24; i++) {
            buffer[i] = (byte) 0;
        }
        boolean result = DumpArchiveInputStream.matches(buffer, buffer.length);
        assertFalse(DumpArchiveConstants.NFS_MAGIC == DumpArchiveUtil.convert32(buffer, 24));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummary_SUDT0() throws IOException, ArchiveException {
        InputStream is = null;
        DumpArchiveInputStream dumpArchiveInputStream = new DumpArchiveInputStream(is);
        DumpArchiveSummary summary = dumpArchiveInputStream.getSummary();
        assert summary != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryWithEncoding_dilu1() throws IOException, ArchiveException {
        InputStream is = null;
        DumpArchiveInputStream dumpArchiveInputStream = new DumpArchiveInputStream(is, "UTF-8");
        DumpArchiveSummary summary = dumpArchiveInputStream.getSummary();
        assert summary != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextDumpEntry_RJcO0_dHet1() throws IOException, ArchiveException {
    InputStream is = null;
    try {
        DumpArchiveInputStream dumpArchiveInputStream = new DumpArchiveInputStream(is);
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextDumpEntryWithEncoding_gorY1_HUQG0() throws IOException, ArchiveException {
    InputStream is = null;
    String encoding = "UTF-8";
    try {
        DumpArchiveInputStream dumpArchiveInputStream = new DumpArchiveInputStream(is, encoding);
        DumpArchiveEntry dumpArchiveEntry = dumpArchiveInputStream.getNextDumpEntry();
        dumpArchiveInputStream.close();
    } catch (ArchiveException e) {
    }
}
}