/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttributeName_XvBa0() {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
        CPUTF8 cpUTF8Value = new CPUTF8("Test", 0);
        LocalVariableTableAttribute.setAttributeName(cpUTF8Value);
        assertEquals(cpUTF8Value, attribute.getAttributeName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_kmPX0_tLOL0() {
    int localVariableTableLength = 5;
    int[] startPcs = new int[]{1, 2, 3, 4, 5};
    int[] lengths = new int[]{1, 2, 3, 4, 5};
    CPUTF8[] names = new CPUTF8[5];
    for (int i = 0; i < 5; i++) {
        names[i] = new CPUTF8("name" + (i + 1), i);
    }
    CPUTF8[] descriptors = new CPUTF8[5];
    for (int i = 0; i < 5; i++) {
        descriptors[i] = new CPUTF8("descriptor" + (i + 1), i);
    }
    int[] indexes = new int[]{1, 2, 3, 4, 5};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    String result = attribute.toString();
    assert result.equals("LocalVariableTable: 5 variables");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_obBh0_qLKw0() {
    int localVariableTableLength = 1;
    int[] startPcs = new int[]{1};
    int[] lengths = new int[]{1};
    CPUTF8[] names = new CPUTF8[]{new CPUTF8("name", 0)};
    CPUTF8[] descriptors = new CPUTF8[]{new CPUTF8("descriptor", 0)};
    int[] indexes = new int[]{1};
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    int[] result = attribute.getStartPCs();
    assert Arrays.equals(result, startPcs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_YqZE0_HOEo0() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{0}, new int[]{1}, new CPUTF8[]{new CPUTF8("name", 0)}, new CPUTF8[]{new CPUTF8("descriptor", 0)}, new int[]{0});
    assertEquals(12, localVariableTableAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber4_Oaqh3_arra0() {
    LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(10, new int[]{0, 1, 2}, new int[]{3, 4, 5}, new CPUTF8[] {new CPUTF8("a"), new CPUTF8("b"), new CPUTF8("c")}, new CPUTF8[] {new CPUTF8("d"), new CPUTF8("e"), new CPUTF8("f")}, new int[]{0, 1, 2});
    List<Integer> byteCodeOffsets = new ArrayList<>();
    try {
        attribute.renumber(byteCodeOffsets);
    } catch (Pack200Exception e) {
    }
}
}