/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffers_QZNB0() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnequalBuffers_ZGPi1() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnequalBuffersWithTrailingNulls_jiqN2() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5, 0};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithTrailingNulls_MEEp3() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5, 0};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5, 0};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnequalBuffersWithoutTrailingNulls_xbBX4() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithoutTrailingNulls_rCCt5() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnequalBuffersWithDifferentLengths_jmgA6() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 4, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnequalBuffersWithDifferentLengthsWithoutTrailingNulls_srIp8() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 4, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffers_WlBO0() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffers_ISEc1() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeNull_GaSv0() {
        assertEquals("", ArchiveUtils.sanitize(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeEmptyString_kggM1() {
        assertEquals("", ArchiveUtils.sanitize(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeShortString_DeLw2() {
        assertEquals("Hello", ArchiveUtils.sanitize("Hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeLongString_AdpR3() {
        assertEquals("Hello...", ArchiveUtils.sanitize("HelloWorld"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeStringWithSpecialChars_QNlh4() {
        assertEquals("Hello?!", ArchiveUtils.sanitize("Hello!"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeStringWithControlChars_yRYG5() {
        assertEquals("Hello??", ArchiveUtils.sanitize("Hello\r\n"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitizeStringWithNonLatinChars_JAzg6() {
        assertEquals("Hello?", ArchiveUtils.sanitize("Hello\u00E9"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffers_MAbc0() {
        byte[] buffer1 = new byte[] {1, 2, 3};
        byte[] buffer2 = new byte[] {1, 2, 3};
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffers_BwYI1() {
        byte[] buffer1 = new byte[] {1, 2, 3};
        byte[] buffer2 = new byte[] {4, 5, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithTrailingNulls_hCxd2() {
        byte[] buffer1 = new byte[] {1, 2, 3, 0};
        byte[] buffer2 = new byte[] {1, 2, 3, 0};
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffersWithTrailingNulls_yDJO3() {
        byte[] buffer1 = new byte[] {1, 2, 3, 0};
        byte[] buffer2 = new byte[] {1, 2, 3};
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithDifferentLengths_iaYW4() {
        byte[] buffer1 = new byte[] {1, 2, 3};
        byte[] buffer2 = new byte[] {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBuffer_wFyO0() {
        String expected = "Hello";
        byte[] buffer = "Hello".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 0, buffer.length);
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayZero_fkxe0() {
        byte[] a = new byte[5];
        for (int i = 0; i < a.length; i++) {
            a[i] = 0;
        }
        assertTrue(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayNotZero_uRxt1() {
        byte[] a = new byte[5];
        for (int i = 0; i < a.length; i++) {
            a[i] = 1;
        }
        assertFalse(ArchiveUtils.isArrayZero(a, a.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayNotZeroSize_Uoqe2() {
        byte[] a = new byte[5];
        for (int i = 0; i < a.length; i++) {
            a[i] = 0;
        }
        a[0] = 1;
        assertFalse(ArchiveUtils.isArrayZero(a, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffers_pIuL0() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffers_mSAN1() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithDifferentOffsets_omFe2() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
        assertTrue(ArchiveUtils.isEqual(buffer1, 1, 4, buffer2, 1, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffersWithDifferentOffsets_PfXU3() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {6, 7, 8, 9, 10};
        assertFalse(ArchiveUtils.isEqual(buffer1, 1, 4, buffer2, 1, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualBuffersWithDifferentLengths_aRTB4() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4};
        assertTrue(ArchiveUtils.isEqual(buffer1, 0, 4, buffer2, 0, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqualBuffersWithDifferentLengths_erNw5() {
        byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
        byte[] buffer2 = new byte[] {1, 2, 3, 4, 5, 6};
        assertFalse(ArchiveUtils.isEqual(buffer1, 0, 4, buffer2, 0, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBuffer_mGMc0() {
        String expected = "Hello";
        byte[] buffer = "Hello".getBytes();
        assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferFail_PpZc1() {
        String expected = "Hello";
        byte[] buffer = "World".getBytes();
        assertFalse(ArchiveUtils.matchAsciiBuffer(expected, buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_mXxQ0() {
        byte[] inputBytes = "Hello World".getBytes();
        String result = ArchiveUtils.toAsciiString(inputBytes, 0, 11);
        assertEquals("Hello World", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualWithNull_qNmb0() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = null;
        boolean result = ArchiveUtils.isEqualWithNull(buffer1, 0, 10, buffer2, 0, 0);
        assertFalse(result);
    }
}