/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.util.zip.CRC32;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
@Mock
    private SeekableByteChannel channel;
@Mock
    private ByteArrayOutputStream headerBaos;
@Mock
    private DataOutputStream header;
@Mock
    private CRC32 crc32Mock;
private SevenZOutputFile sevenzoutputfile;
private boolean finished;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentCompression_SBda0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"));
        sevenZOutputFile.setContentCompression(SevenZMethod.COPY);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentCompressionWithPassword_pgmj1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"), "password".toCharArray());
        sevenZOutputFile.setContentCompression(SevenZMethod.LZMA);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentCompressionWithChannel_DFWm2() throws IOException {
        SeekableByteChannel channel = null;
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
        sevenZOutputFile.setContentCompression(SevenZMethod.DEFLATE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentCompressionWithChannelAndPassword_KCOZ3() throws IOException {
        SeekableByteChannel channel = null;
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel, "password".toCharArray());
        sevenZOutputFile.setContentCompression(SevenZMethod.BZIP2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteFile_xulA0() throws IOException {
    SevenZOutputFile file = new SevenZOutputFile(new File("testFile"));
    byte[] b = new byte[10];
    file.write(b, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithFile_SNzr0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
    byte[] b = new byte[10];
    sevenZOutputFile.write(b, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_UUID0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("testFile"));
    byte[] b = new byte[10];
    sevenZOutputFile.write(b, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithFileAndPassword_dhnn0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("testFile"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_LqkD1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("testFile"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZOutputFile.finish();
    try {
        sevenZOutputFile.finish();
        Assertions.fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithFile_LicX0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("testFile"), new char[] {});
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithNullOutputStream_KpHy0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
        sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithSeekableByteChannel_LOXR2() throws IOException {
        SeekableByteChannel channel = java.nio.file.Files.newByteChannel(new File("test.txt").toPath());
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
        sevenZOutputFile.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithSeekableByteChannelAndPassword_DcPU3() throws IOException {
        SeekableByteChannel channel = java.nio.file.Files.newByteChannel(new File("test.txt").toPath());
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel, new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
        sevenZOutputFile.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testclose_WePq0() throws Exception {
    SevenZOutputFile sevenzoutputfile = new SevenZOutputFile(channel);
    finished = false;
    sevenzoutputfile.close();
    verify(channel, times(1)).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentCompressionWithoutFile_lDWf4_RYuP0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test"), new char[0]);
    sevenZOutputFile.setContentCompression(SevenZMethod.AES256SHA256);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_XZpl0_RDhZ0() throws IOException {
    File file = new File("test.txt");
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(file);
    sevenZOutputFile.write(65);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithPassword_bwsq1_XBjk0() throws IOException {
    File file = new File("test.txt");
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(file, "password".toCharArray());
    sevenZOutputFile.write(65);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithNullArguments_XDEd1_GlbO0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"), new char[]{'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    assertThrows(NullPointerException.class, () -> sevenZOutputFile.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setExtraField(String key, String value) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_cxLz0_ffNb1() throws IOException {
    SevenZOutputFile file = new SevenZOutputFile(new File("test.txt"));
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    file.write(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePassword_ZgUk1_LAAQ0() throws IOException {
    SevenZOutputFile file = new SevenZOutputFile(new File("test.txt"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    file.write(inputStream);
}
}