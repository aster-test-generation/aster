/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_mcRK0() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    ArjArchiveEntry entry2 = entry1;
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_AfXb1() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    Object obj = new Object();
    boolean result = entry1.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_emyT2() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    Object obj = null;
    boolean result = entry1.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_tKDl3() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    ArjArchiveEntry entry2 = new ArjArchiveEntry();
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateUnix_YeAo0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        Date lastModifiedDate = entry.getLastModifiedDate();
        System.out.println("final long ts = isHostOsUnix() ? localFileHeader.dateTimeModified * 1000L : ZipUtil.dosToJavaTime(0xFFFFFFFFL & localFileHeader.dateTimeModified);");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHostOs_vCkW0() {
        ArjArchiveEntry arjArchiveEntry = new ArjArchiveEntry();
        int expected = 0;
        int actual = arjArchiveEntry.getHostOs();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_mlfs0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixModeNonUnix_vmVk1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        assertEquals(0, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamePathSym_cuVt0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        String name = entry.getName();
        assertEquals("expected name", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod_KUAP0() {
        ArjArchiveEntry arjArchiveEntry = new ArjArchiveEntry();
        int expected = 0; // replace with your expected value
        int actual = arjArchiveEntry.getMethod();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_Wtle0() {
        ArjArchiveEntry arjArchiveEntry = new ArjArchiveEntry();
        int mode = arjArchiveEntry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_UppZ0_zcCu1() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int mode = entry.getMode();
    org.junit.Assert.assertEquals(0, mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsHostOsUnix_NEXT_rpPM1_iCbU0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertTrue(entry.isHostOsUnix());
}
}