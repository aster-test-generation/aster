/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_hWWh0() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(bos);
        compressor.write(0x12);
        byte[] expected = new byte[] {(byte) 0x12};
        assertArrayEquals(expected, bos.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteTwoBytes_AXPi1() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(bos);
        compressor.write(0x1234);
        byte[] expected = new byte[] {(byte) 0x12, (byte) 0x34};
        assertArrayEquals(expected, bos.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_AhWY0() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(out);
        compressor.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteSmallData_KAOW0_VZED0() throws IOException {
    FramedSnappyCompressorOutputStream compressorOutputStream = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[5];
    compressorOutputStream.write(data, 0, 3);
    compressorOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_PpyY1_gYHC0() throws IOException {
    FramedSnappyCompressorOutputStream compressorOutputStream = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[100];
    compressorOutputStream.write(data, 0, 50);
    compressorOutputStream.write(data, 50, 50);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteSmallData_UdNj0_zYOW0() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[5];
    compressor.write(data, 0, 3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_xbjW1_YmPa0() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[100];
    compressor.write(data, 0, 50);
    compressor.write(data, 50, 50);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataAtBoundary_PzYG2_MnGu0() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[100];
    compressor.write(data, 0, 100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteSmallData_Uual0_nuoQ0() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[] {1, 2, 3};
    compressor.write(data, 0, 3);
    compressor.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_mdlV1_bLQd0() throws IOException {
    FramedSnappyCompressorOutputStream compressor = new FramedSnappyCompressorOutputStream(new ByteArrayOutputStream());
    byte[] data = new byte[100];
    for (int i = 0; i < 100; i++) {
        data[i] = (byte) i;
    }
    compressor.write(data, 0, 100);
    compressor.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask_JZHI0_NJUW0() {
    long x = 0x12345678L;
    long result = 0x1234567FL;
    assertEquals(result, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask2_rINP1_qltk0() {
    long x = 0x87654321L;
    long result = 0x8765431FL; // Assuming this is the correct mask operation
    assertEquals(0x8765431FL, result);
}
}