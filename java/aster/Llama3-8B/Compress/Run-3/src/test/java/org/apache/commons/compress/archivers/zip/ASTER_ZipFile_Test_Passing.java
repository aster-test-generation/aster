/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Passing {
@Mock
    private File file;
@Mock
    private ZipArchiveOutputStream zipArchiveOutputStream;
private ZipEncoding zipEncoding;
@Mock
    private byte[] bytes;
@Mock
    private boolean ignoreLocalFileHeader;
@Mock
    private String encoding;
@Mock
    private ZipArchiveEntryPredicate zipArchiveEntryPredicate;
@Mock
    private SeekableByteChannel channel;
@Mock
    private InputStream in;
@Mock
    private Path path;
@Mock
    private String name;
@Mock
    private boolean useUnicodeExtraFields;
private static byte[] ONE_ZERO_BYTE = new byte[1];
@Mock
    private ZipArchiveEntry entry;
private ZipFile zipfile;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose1_Irkz1() throws IOException {
        String name = "name";
        ZipFile zipFile = new ZipFile(name);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose2_zaQb2() throws IOException {
        SeekableByteChannel channel = null;
        ZipFile zipFile = new ZipFile(channel, "encoding");
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose3_PLuX3() throws IOException {
        File file = new File("file");
        ZipFile zipFile = new ZipFile(file, "encoding", true);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose4_gTNG4() throws IOException {
        SeekableByteChannel channel = null;
        String channelDescription = "channelDescription";
        ZipFile zipFile = new ZipFile(channel, channelDescription, "encoding", true, true);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose6_IHSG6() throws IOException {
        File file = new File("file");
        ZipFile zipFile = new ZipFile(file, "encoding", true, true);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose7_azAM7() throws IOException {
        SeekableByteChannel channel = null;
        ZipFile zipFile = new ZipFile(channel);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose8_MkSz8() throws IOException {
        SeekableByteChannel channel = null;
        String channelDescription = "channelDescription";
        ZipFile zipFile = new ZipFile(channel, channelDescription, "encoding", true);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose10_NLRn10() throws IOException {
        String name = "name";
        ZipFile zipFile = new ZipFile(name, "encoding");
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose11_JcPk11() throws IOException {
        File file = new File("file");
        ZipFile zipFile = new ZipFile(file, "encoding");
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose12_Hols12() throws IOException {
        File file = new File("file");
        ZipFile zipFile = new ZipFile(file);
        zipFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntriesInPhysicalOrder_NxKu0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
        Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
        while (entries.hasMoreElements()) {
            ZipArchiveEntry entry = entries.nextElement();
            System.out.println(entry.getName());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinalize_dZzQ0() throws Throwable {
        ZipFile zipFile = new ZipFile("test.zip");
        zipFile.finalize();
}
}