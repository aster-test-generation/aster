/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGzip_ogVZ1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        assertEquals(true, packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModificationTime_pkMh0() {
        PackingOptions packingOptions = new PackingOptions();
        String modificationTime = packingOptions.getModificationTime();
        assertEquals("Expected modification time", modificationTime, "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_Revd0() {
        PackingOptions packingOptions = new PackingOptions();
        boolean result = packingOptions.isVerbose();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogFile_MUMv1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setLogFile("testLogFile");
        assertEquals("testLogFile", packingOptions.getLogFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietTrue_lwrD0() {
        PackingOptions options = new PackingOptions();
        options.setQuiet(true);
        assert !options.isVerbose();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuietFalse_YvYn1() {
        PackingOptions options = new PackingOptions();
        options.setQuiet(false);
        assert options.isVerbose();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile1_oRwE0() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test.class";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile2_aBCK1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test";
        boolean result = packingOptions.isPassFile(passFileName);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile3_ywkw2() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test/";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogFile_ObXQ0() {
        PackingOptions packingOptions = new PackingOptions();
        String logFile = packingOptions.getLogFile();
        assertEquals("", logFile);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebugTrue_ajur0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        assertTrue(packingOptions.isStripDebug());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebugFalse_BIBM1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(false);
        assertFalse(packingOptions.isStripDebug());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownClassAttributeAction_pfGk0() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownClassAttributeAction("type");
        assertEquals("defaultValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownClassAttributeActionMapNotNull_mGxk1() {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        map.put("type", "value");
        String result = packingOptions.getUnknownClassAttributeAction("type");
        assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownFieldAttributeAction_iiCt1() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownFieldAttributeAction("test");
        assertEquals("unknownAttributeAction", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownFieldAttributeActionNull_YirU2() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownFieldAttributeAction(null);
        assertEquals("unknownAttributeAction", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSegmentLimit_BlGI0() {
        PackingOptions packingOptions = new PackingOptions();
        long expected = 0; // replace with your expected value
        long actual = packingOptions.getSegmentLimit();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownAttributeAction_ywjW0() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownAttributeAction();
        assertEquals("Unknown attribute action", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVerbose_nACm1() {
        PackingOptions options = new PackingOptions();
        options.setVerbose(true);
        assertEquals(true, options.isVerbose());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffort_NdOy0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(5);
        assertEquals(5, packingOptions.getEffort());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_PVrn0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        assertTrue(packingOptions.isKeepFileOrder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownMethodAttributeAction_DFHK1() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownMethodAttributeAction("test");
        assertEquals("unknownAttributeAction", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_ktlK0() {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(0, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidTrue_yucX0() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint("true");
        assertEquals("true", options.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidFalse_BPIj1() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint("false");
        assertEquals("false", options.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintValidKeep_vWVE2() {
        PackingOptions options = new PackingOptions();
        options.setDeflateHint("keep");
        assertEquals("keep", options.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintInvalid_MlTH3() {
        PackingOptions options = new PackingOptions();
        try {
            options.setDeflateHint("invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Bad argument: -H invalid ? deflate hint should be either true, false or keep (default)", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepDeflateHintTrue_AUBI0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("KEEP");
        assertTrue(packingOptions.isKeepDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepDeflateHintFalse_eAlq1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("NOT_KEEP");
        assertFalse(packingOptions.isKeepDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimit_BNjH0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(10L);
        assertEquals(10L, packingOptions.getSegmentLimit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeValidLatest_reQA0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setModificationTime("latest");
        assertEquals("latest", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeValidKeep_iSOc1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setModificationTime("keep");
        assertEquals("keep", packingOptions.getModificationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTimeInvalid_StzA2() {
        PackingOptions packingOptions = new PackingOptions();
        try {
            packingOptions.setModificationTime("invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnknownAttributeActionInvalidOption_XswV3() {
    PackingOptions packingOptions = new PackingOptions();
    try {
        packingOptions.setUnknownAttributeAction("InvalidOption");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownCodeAttributeAction_KOXg0() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownCodeAttributeAction("test");
        assertEquals("unknownAttributeAction", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_Gphl0() {
        PackingOptions packingOptions = new PackingOptions();
        boolean result = packingOptions.isGzip();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateHint_ELCr0() {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getDeflateHint();
        assertEquals("Your expected result", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttributeAction_yHCB0_CNRd1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.addCodeAttributeAction("attributeName", "action");
    assertEquals("action", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttributeActionNullAttributeName_rKoc1_Rfrr1() {
    PackingOptions packingOptions = new PackingOptions();
    assertNull(packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetKeepFileOrder_HzxV0_yqtG0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setKeepFileOrder(true);
    boolean result = packingOptions.getDeflateHint() != null;
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPassFileWindows_kuQS0_bZyl0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setDeflateHint("C:\\path\\to\\file.txt");
    assertEquals("C:\\path\\to\\file.txt", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStripDebug_IjtA1_EZaw0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setStripDebug(true);
    assertEquals(true, packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStripDebugFalse_rKMH2_VkPm1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setStripDebug(false);
    assertEquals("false", packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttributeAction_cHnv0_eFjh1() {
    PackingOptions packingOptions = new PackingOptions();
    assertEquals(null, packingOptions.getDeflateHint());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnknownAttributeActionStrip_gBGW2_yhxA1() {
    PackingOptions packingOptions = new PackingOptions();
    String deflateHint = packingOptions.getDeflateHint();
    packingOptions.setUnknownAttributeAction(deflateHint);
}
}