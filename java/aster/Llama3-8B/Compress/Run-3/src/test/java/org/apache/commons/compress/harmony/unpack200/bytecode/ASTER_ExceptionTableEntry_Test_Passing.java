/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExceptionTableEntry_Test_Passing {
private int endPcRenumbered;
private int handlerPC;
private int handlerPcRenumbered;
private int startPC;
private int startPcRenumbered;
private int endPC;
@Mock
    private List<Integer> byteCodeOffsets;
private ExceptionTableEntry exceptiontableentry;
@Mock
    private ClassConstantPool classConstantPool;
private int catchTypeIndex;
@Mock
    private DataOutputStream dataOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testwrite() throws Exception{
        endPcRenumbered = 1;
        handlerPcRenumbered = 2;
        catchTypeIndex = 3;
        startPcRenumbered = 4;
        exceptiontableentry = new ExceptionTableEntry(startPcRenumbered, endPcRenumbered, handlerPcRenumbered, null);
        exceptiontableentry.write(dataOutputStream);
        verify(dataOutputStream, times(1)).writeShort(startPcRenumbered);
        verify(dataOutputStream, times(1)).writeShort(endPcRenumbered);
        verify(dataOutputStream, times(1)).writeShort(handlerPcRenumbered);
        verify(dataOutputStream, times(1)).writeShort(catchTypeIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolveNullCatchType_FNel0_TAkD0() {
    ExceptionTableEntry entry = new ExceptionTableEntry(0, 1, 2, null);
    ClassConstantPool pool = new ClassConstantPool();
    entry.resolve(pool);
    assertEquals(null, entry.getCatchType());
}
}