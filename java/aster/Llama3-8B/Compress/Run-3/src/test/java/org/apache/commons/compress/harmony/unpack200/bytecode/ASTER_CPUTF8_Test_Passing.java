/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_BrPr1_MyTi0() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8", 1);
    boolean result = cpuTF8.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_OKCy2_RBEe0() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8", 1);
    Object obj = new Object();
    boolean result = cpuTF8.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_rFAM3_UWHB1() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8", 0);
    CPUTF8 other = new CPUTF8("utf8", 0);
    boolean result = cpuTF8.equals(other);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_LZdM0_BhGu0() {
    CPUTF8 cpuTF8 = new CPUTF8("utf8", 0);
    String result = cpuTF8.toString();
    assertEquals("UTF-8:utf8", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGlobalIndex_qFrP0_RGRq0() {
    CPUTF8 cpuTF8 = new CPUTF8("test", 1);
    cpuTF8.setGlobalIndex(1);
    assertEquals(1, cpuTF8.getGlobalIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnderlyingString_aoAS0_jHuQ0() {
    CPUTF8 cpuTF8 = new CPUTF8(new String("utf8"), 0);
    assertEquals("utf8", cpuTF8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_dodp0_VBMG0() {
    CPUTF8 cpuTF8 = new CPUTF8("test", 0);
    int result = cpuTF8.hashCode();
    Assertions.assertEquals(result, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeAgain_nRjU1_yztr0() {
    CPUTF8 cpuTF8 = new CPUTF8("", 0);
    int result = cpuTF8.hashCode();
    Assertions.assertEquals(result, cpuTF8.hashCode());
}
}