/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import java.io.InputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature3_sEEq2() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x31};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature4_uVUR3() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x32};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature5_IJgY4() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x37};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature6_JefZ5() {
    byte[] signature = new byte[] {0x30, 0x37, 0x30, 0x37, 0x30, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature7_PwDO6() {
    byte[] signature = new byte[] {0x31, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature8_HpHh7() {
    byte[] signature = new byte[] {0x32, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature9_MKZO8() {
    byte[] signature = new byte[] {0x37, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature10_TcwV9() {
    byte[] signature = new byte[] {0x30, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature11_MEse10() {
    byte[] signature = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature12_REuI11() {
    byte[] signature = new byte[] {0x71, 0x00, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature13_IMOO12() {
    byte[] signature = new byte[] {0x00, 0x71, 0x00, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature14_zYmI13() {
    byte[] signature = new byte[] {0x00, 0x00, 0x71, 0x00, 0x00, 0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature1_Rwtc0_FwrY0() {
    byte[] signature = new byte[] {(byte)0x71, (byte)0xc7, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSignature2_Kwol1_sWGN0() {
    byte[] signature = new byte[] {(byte)0x71, (byte)0x00, (byte)0xc7, (byte)0x00, (byte)0x00, (byte)0x00};
    boolean result = CpioArchiveInputStream.matches(signature, 6);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_xOsq0_eQyC1() throws IOException {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CpioArchiveInputStream cpioArchiveInputStream = new CpioArchiveInputStream(in);
    CpioArchiveEntry entry = cpioArchiveInputStream.getNextEntry();
    assert entry != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositive_LVHo0_lSjm1() throws IOException {
    java.io.InputStream in = new java.io.ByteArrayInputStream(new byte[10]);
    CpioArchiveInputStream stream = new CpioArchiveInputStream(in);
    long skipped = stream.skip(5);
    assert skipped == 5L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipEOF_yEwE3_JuAx0() throws IOException {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[10]);
    CpioArchiveInputStream stream = new CpioArchiveInputStream(in);
    stream.skip(10);
    long skipped = stream.skip(5);
    assert skipped == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipZero_NGwT4_Wxpx1() throws IOException {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[10]);
    CpioArchiveInputStream stream = new CpioArchiveInputStream(in);
    long skipped = stream.skip(0);
    assert skipped == 0L;
}
}