/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefault_gjEF0() {
        ZipShort headerId = new ZipShort(new byte[2]);
        ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldNoDefaultNotNull_wPzl1() {
        ZipShort headerId = new ZipShort(1);
        ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeLocalFileDataData_EmptyArray_FTTS0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeLocalFileDataData(data);
    Assertions.assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_EmptyArray_WfPN0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    Assertions.assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithValidHeaderId_TxLQ0() {
        ZipShort headerId = new ZipShort(new byte[2], 0);
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithInvalidHeaderId_kOVb1() {
        ZipShort headerId = new ZipShort(new byte[2]);
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_Psig0_YMIG1() throws ZipException {
    byte[] data = new byte[10];
    boolean local = true;
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] result = ExtraFieldUtils.parse(data, local);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillExtraFieldLocal_gmwX0_aGOI0() {
    byte[] data = new byte[10];
    int off = 0;
    int len = 5;
    boolean local = true;
    try {
        ExtraFieldUtils.fillExtraField(null, data, off, len, local);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillExtraFieldCentral_FcWh1_HMNo0() {
    byte[] data = new byte[10];
    int off = 0;
    int len = 5;
    boolean local = false;
    try {
        ExtraFieldUtils.fillExtraField(null, data, off, len, local);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
}