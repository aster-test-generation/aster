/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_zJvE0_tykK0() {
    CPUTF8 utf8 = new CPUTF8("test", 0);
    CPString cpString = new CPString(utf8, 0);
    String result = cpString.toString();
    assert result.equals("String: test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_pYEW0_gmHx0() {
    CPUTF8 cpuTF8 = new CPUTF8("test", 0);
    CPString cpString = new CPString(cpuTF8, 0);
    ClassFileEntry[] result = cpString.getNestedClassFileEntries();
    assert result.length == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_cQmF0_iQSg0() {
    CPUTF8 value = new CPUTF8("", 0);
    CPString cpString = new CPString(value, 0);
    ClassConstantPool pool = new ClassConstantPool();
    cpString.resolve(pool);
    assertEquals(0, cpString.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_CPUTF8StringGlobalIndex_ncIY1_VFRz0() {
    CPUTF8 cpuTF8 = new CPUTF8("test");
    CPString cpString = new CPString(cpuTF8, 0);
    int hashCode = cpString.hashCode();
    assertEquals(hashCode, hashCode);
}
}