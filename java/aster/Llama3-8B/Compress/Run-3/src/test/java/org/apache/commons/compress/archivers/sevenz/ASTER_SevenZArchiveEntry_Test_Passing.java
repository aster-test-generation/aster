/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
@Mock
    private SevenZMethodConfiguration method1;
@Mock
    private SevenZMethodConfiguration method2;
@Mock
    private SevenZMethodConfiguration method3;
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_UqMI0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> iterable = sevenZArchiveEntry.getContentMethods();
        List<SevenZMethodConfiguration> list = new ArrayList<>();
        for (SevenZMethodConfiguration configuration : iterable) {
            list.add(configuration);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_xNrI0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsAccessDate = 1234567890L;
        entry.setAccessDate(ntfsAccessDate);
        assertEquals(FileTimes.ntfsTimeToFileTime(ntfsAccessDate), entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_hAyF0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date creationDate = sevenZArchiveEntry.getCreationDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasLastModifiedDateTrue_snZI0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(true);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasLastModifiedDateFalse_uPWN1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasLastModifiedDate(false);
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assert result == false;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc1_ApbL0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(12345);
        assertEquals(12345, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc2_kMLw1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(67890);
        assertEquals(67890, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc3_NdWG2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(11111);
        assertEquals(11111, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc4_gtgF3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(22222);
        assertEquals(22222, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc5_GZLu4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(33333);
        assertEquals(33333, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc6_DuWJ5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(44444);
        assertEquals(44444, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc7_wvWt6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(55555);
        assertEquals(55555, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc8_ltwx7() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(66666);
        assertEquals(66666, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc9_Crwj8() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(77777);
        assertEquals(77777, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc10_lZeI9() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(88888);
        assertEquals(88888, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_IKBO0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasLastModifiedDate();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_daSY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(true, entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_MSgS1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(false, entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_DaMa2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(false, entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_wNqT3() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_jNOk4() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name");
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_oHcH5() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setName("name1");
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setName("name2");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasStream_EJaw6() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasStream_TeTH7() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasStream(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasStream(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasCreationDate_DVoy12() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasCreationDate_YOzC13() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasCreationDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasCreationDate(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasLastModifiedDate_ekwv14() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentHasLastModifiedDate_NSBJ15() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasLastModifiedDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasLastModifiedDate(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameHasAccessDate_WCHP16() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasAccessDate(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasAccessDate(true);
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_OTUs0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date lastModifiedDate = sevenZArchiveEntry.getLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_pdcz1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertTrue(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_JDuG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date();
        entry.setCreationDate(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_OKAV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean result = entry.hasStream();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_LuAV0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    boolean result = sevenZArchiveEntry.getHasAccessDate();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_jTgr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assert !entry.getHasCreationDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNotNull_Qiew1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setCreationTime(time);
    assert entry.getHasCreationDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeAlreadySet_gLwJ2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setCreationTime(time);
    entry.setCreationTime(time);
    assert entry.getHasCreationDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTimeWhenHasLastModifiedDateIsFalse_RZOw1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime result = entry.getLastModifiedTime();
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedSize_mZVN0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long compressedSize = entry.getCompressedSize();
        assertEquals(0, compressedSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStream_nTUC0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasStream(true);
        boolean result = sevenZArchiveEntry.hasStream();
        assert(result == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_HgRD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("testName");
        assertEquals("testName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_JqJP0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(123456789L);
        assertEquals(123456789L, entry.getCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_WAui0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(100);
        assertEquals(100, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_Vewb0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(123L);
        assertEquals(123L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNullName_ZuFD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int result = entry.hashCode();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeNotNullName_gDyn3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("Test");
    int result = entry.hashCode();
    Assertions.assertEquals("Test".hashCode(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_kukb0() {
        Date date = new Date();
        long result = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_EJOP0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setAccessDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrc_kGFw0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int expectedCrc = 123;
        assertEquals(expectedCrc, entry.getCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDateTrue_dCYq0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(true);
        boolean result = sevenZArchiveEntry.getHasCreationDate();
        assert(result == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCreationDateFalse_UUYb1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        sevenZArchiveEntry.setHasCreationDate(false);
        boolean result = sevenZArchiveEntry.getHasCreationDate();
        assert(result == false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_hizX0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        Date date = new Date();
        sevenZArchiveEntry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc1_nYxu0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc2_TbyJ1() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(123);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(123, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc3_lKWv2() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(456);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc4_hJqT3() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(789);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(789, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc5_LOmA4() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-123);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(-123, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc6_aMVC5() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-456);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(-456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc7_Phtx6() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-789);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(-789, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc8_FFlX7() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(0);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc9_uIJN8() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(123456);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(123456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc10_bDKs9() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setCompressedCrc(-123456);
    int result = sevenZArchiveEntry.getCompressedCrc();
    Assertions.assertEquals(-123456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCrc_wFxA0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasCrc();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_NfNe1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(true);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDate_rQik0() {
        SevenZArchiveEntry archiveEntry = new SevenZArchiveEntry();
        Date accessDate = archiveEntry.getAccessDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationTimeWhenHasCreationDateIsFalse_zaOx1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        try {
            entry.getCreationTime();
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_wWhV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long expectedSize = 0;
        long actualSize = entry.getSize();
        assertEquals(expectedSize, actualSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods() {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(method1, method2, method3);
        sevenzarchiveentry.setContentMethods(method1, method2, method3);
        assertEquals(contentMethods, sevenzarchiveentry.getContentMethods());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethods_rKQm0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
        SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE, "options");
        List<SevenZMethodConfiguration> methods = Arrays.asList(method1, method2);
        entry.setContentMethods(method1, method2);
        assert methods.equals(entry.getContentMethods());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_WithoutAccessDate_VBSJ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    try {
        entry.getAccessTime();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_LDwW1() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        int expected = 0;
        int actual = sevenZArchiveEntry.getWindowsAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasWindowsAttributes_XiFk0() {
        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
        boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNull_TRRt0_hemU1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    Assertions.assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNotNull_snDm1_hdJZ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000);
    entry.setLastModifiedTime(time);
    Assertions.assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrc_QMvw0_Iokm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    boolean result = entry.getHasWindowsAttributes();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributesTrue_cIGN1_oyor0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    assertTrue(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributesFalse_molO2_nzfH0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(false);
    assertFalse(sevenZArchiveEntry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_ywld0_BPXy0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 1234567890L;
    entry.setCrcValue(expectedCrc); 
    long actualCrc = entry.getCrcValue();
    assertEquals(expectedCrc, actualCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_rWHr0_WwuF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String result = entry.getName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateTrue_uGLM0_ywRq1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assert entry.getHasWindowsAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateFalse_xGGa1_WfoY1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assert !entry.getHasWindowsAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentIsDirectory_LpYi9_mMJw0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(false);
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameIsAntiItem_ONal10_OsYf0() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    entry1.setHasWindowsAttributes(true);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    entry2.setHasWindowsAttributes(true);
    assertEquals(true, entry1.getHasWindowsAttributes() == entry2.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryTrue_xnFE0_GOxC0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(true);
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryFalse_yzmA1_uyHw0() {
    SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
    sevenZArchiveEntry.setHasWindowsAttributes(false);
    boolean result = sevenZArchiveEntry.getHasWindowsAttributes();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNull_KkOM0_CYAp1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assert (!entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeNotNull_blMf1_NKRP1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789);
    entry.setAccessTime(time);
    assert (entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTimeSame_yOhg2_BbWe0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789);
    entry.setAccessTime(time);
    entry.setAccessTime(time);
    assert (entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_nmJO0_gaVr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 123456789L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_MSEn0_ILlU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItemFalse_bJEP1_oqRC1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_WithAccessDate_aaBG0_nbjZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    entry.setHasAccessDate(true);
    entry.setAccessDate(new java.io.File("path").lastModified());
    FileTime result = entry.getAccessTime();
    assertEquals(entry.getAccessDate(), result);
}
}