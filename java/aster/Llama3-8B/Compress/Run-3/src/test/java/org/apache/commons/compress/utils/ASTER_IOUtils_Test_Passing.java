/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IOUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyRange_InputIsNull_oCJH2() {
        try {
            IOUtils.copyRange(null, 5, new ByteArrayOutputStream(), 3);
            assert false;
        } catch (IOException e) {
            assert true;
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadRange_pjiy0_OEcW1() throws IOException {
    byte[] expected = {1, 2, 3, 4, 5};
    InputStream input = new java.io.ByteArrayInputStream(expected);
    byte[] result = IOUtils.toByteArray(input);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadRangeLessThanLength_PZhk1_Bsgh0() throws IOException {
    byte[] expected = {1, 2, 3};
    InputStream input = new java.io.ByteArrayInputStream(expected);
    byte[] result = IOUtils.toByteArray(input);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopy_GEEP0_Nzmc0() throws IOException {
    byte[] data = "Hello World".getBytes();
    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(data);
    java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
    long result = IOUtils.copy(input, output);
    assert result == data.length;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadInvalidFile_oTNu1_hgpe0() throws IOException {
    File file = new File("path_to_invalid_file");
    byte[] array = new byte[1024];
    try {
        int result = IOUtils.read(file, array);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("File 'path_to_invalid_file' does not exist", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFully_APga0_lRNK0() throws IOException {
    byte[] array = "Hello, World!".getBytes();
    InputStream input = new java.io.ByteArrayInputStream(array);
    byte[] result = IOUtils.toByteArray(input);
    assertArrayEquals(array, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFullyThrowsIOException_PAOp1_NPDn0() throws IOException {
    byte[] array = new byte[0];
    InputStream input = new java.io.ByteArrayInputStream(new byte[0]);
    IOException exception = assertThrows(IOException.class, () -> IOUtils.toByteArray(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_LengthIsZero_yZEQ4_tuzx0() throws IOException {
    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[0]);
    java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
    long length = 0;
    int bufferSize = 3;
    byte[] result = IOUtils.toByteArray(input);
    assert result.length == 0;
}
}