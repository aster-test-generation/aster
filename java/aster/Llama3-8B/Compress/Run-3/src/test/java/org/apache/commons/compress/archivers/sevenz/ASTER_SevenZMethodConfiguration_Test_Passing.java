/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethodConfiguration_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_kRtO0() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    boolean result = config1.equals(config1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_iiMm1() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    boolean result = config1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_ZWeU2() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    Object obj = new Object();
    boolean result = config1.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentMethod_sTAz3() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
    boolean result = config1.equals(config2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentOptions_vTru4() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "option1");
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "option2");
    boolean result = config1.equals(config2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectAndOptions_sJop5() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "option1");
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "option1");
    boolean result = config1.equals(config2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMethodAndOptions_KxDP0() {
        SevenZMethod method = SevenZMethod.LZMA;
        Object options = new Object();
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method, options);
        Object result = configuration.getOptions();
        assert result == options;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMethod_kVSI1() {
        SevenZMethod method = SevenZMethod.LZMA;
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method);
        Object result = configuration.getOptions();
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod_HZIi0() {
        SevenZMethod method = SevenZMethod.LZMA;
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method);
        assertEquals(method, configuration.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodWithOptions_XyGs1() {
        SevenZMethod method = SevenZMethod.LZMA;
        Object options = new Object();
        SevenZMethodConfiguration configuration = new SevenZMethodConfiguration(method, options);
        assertEquals(method, configuration.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_NullMethod_HIJm0() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(null);
    assertEquals(0, config.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Method_QzGe1() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.COPY);
    assertEquals(SevenZMethod.COPY.hashCode(), config.hashCode());
}
}