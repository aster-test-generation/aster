/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
    private static Date zipLongToDate(final long unixTime) {
        return new Date(unixTime * 1000L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_Xpiq0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] expected = extendedTimestamp.getLocalFileDataData();
        byte[] actual = extendedTimestamp.getCentralDirectoryData();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_hpQY0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(1643723400);
        x5455_ExtendedTimestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_Null_WSAE2() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp.setAccessFileTime(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_bit0_modifyTimePresent_false_RIlM1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipShort zipShort = x5455_ExtendedTimestamp.getLocalFileDataLength();
        assertEquals(1, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeValue_EyMw2() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = new ZipLong(new byte[8], 0);
        x.setCreateTime(l);
        assertEquals(l, x.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_bit0_modifyTimePresent_true_fLtQ0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        boolean bit0_modifyTimePresent = true;
        ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
        assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_bit0_modifyTimePresent_false_LjhW1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        boolean bit0_modifyTimePresent = false;
        ZipShort result = x5455_ExtendedTimestamp.getCentralDirectoryLength();
        assertEquals(5, result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals(5, result.length);
    assertEquals((byte) 1, result[0]);
    assertEquals((byte) 0, result[1]);
    assertEquals((byte) 0, result[2]);
    assertEquals((byte) 0, result[3]);
    assertEquals((byte) 0, result[4]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateFileTime_coNj0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime expected = TimeUtils.unixTimeToFileTime(1234567890L);
        FileTime actual = x5455_ExtendedTimestamp.getCreateFileTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_OfmE0() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp obj2 = obj1;
    boolean result = obj1.equals(obj2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_jSTd1() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    boolean result = obj1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_fhfJ2() {
    X5455_ExtendedTimestamp obj1 = new X5455_ExtendedTimestamp();
    Object obj2 = new Object();
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_yuOs0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x.setCreateJavaTime(d);
        assert x.getCreateTime() != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTimeNull_VJeM1() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        x.setCreateJavaTime(null);
        assert x.getCreateTime() == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_sEKy0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455_ExtendedTimestamp.setModifyJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringFlagsOnly_sSNt0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        String result = x.toString();
        assert result.equals("0x5455 Zip Extra Field: Flags=0 ");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTime_ZbmF0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date expected = zipLongToDate(1234567890L);
        Date actual = x5455_ExtendedTimestamp.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateTime_Alcf0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipLong result = x5455_ExtendedTimestamp.getCreateTime();
        assertEquals(ZipLong.class, result.getClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTime_mCTV0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        Date result = extendedTimestamp.getCreateJavaTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyJavaTime_Bvqa0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date result = x5455_ExtendedTimestamp.getModifyJavaTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit0_modifyTimePresent_VcRG0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        boolean result = obj.isBit0_modifyTimePresent();
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit0_modifyTimePresentFalse_ARCF1() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        boolean result = obj.isBit0_modifyTimePresent();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit2_createTimePresent_TCph0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        boolean result = x5455_ExtendedTimestamp.isBit2_createTimePresent();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeNull_gpse0() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = null;
        x.setAccessTime(l);
        assert x.getAccessTime() == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeNotNull_jLDl1() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = new ZipLong(new byte[8]);
        x.setAccessTime(l);
        assert x.getAccessTime() != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeValue_FDKu2() {
        X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
        ZipLong l = new ZipLong(new byte[8]);
        x.setAccessTime(l);
        assert x.getAccessTime().getValue() != 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_bnLz0() throws CloneNotSupportedException {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Object clone = obj.clone();
        assert clone instanceof X5455_ExtendedTimestamp;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_xvrv0() {
        X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
        Date d = new Date();
        obj.setAccessJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_1() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals(5, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_2() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_3() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_4() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_5() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimePresent_vFMa0_6() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_bit0_modifyTimePresent_true_yDMt0_rUWE0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date()); 
    ZipShort zipShort = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertEquals(5, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_bit1_accessTimePresent_true_accessTime_not_null_TOiP3_GTQC0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date());
    ZipShort zipShort = x5455_ExtendedTimestamp.getLocalFileDataLength();
    assertEquals(9, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTimeNotNull_fltX1_omRu0() {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    ZipLong l = new ZipLong(new byte[8], 0);
    x.setCreateTime(l);
    assertEquals(true, x.getCreateTime() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeFlagsModifyTime_KEzh0_NAsl0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags((byte)0x07);
    timestamp.setAccessJavaTime(new java.util.Date(System.currentTimeMillis()));
    int result = timestamp.hashCode();
    assertEquals(result, -123 * (0x07));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeFlagsAccessTime_AzzA1_nlQJ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags((byte)0x07);
    timestamp.setAccessJavaTime(new java.util.Date());
    int result = timestamp.hashCode();
    assertEquals(result, -123 * ((byte)0x07) ^ Integer.rotateLeft(new java.util.Date().hashCode(), 11));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeFlagsCreateTime_mAFh2_YfMN0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags((byte)0x07); 
    timestamp.setAccessJavaTime(new java.util.Date()); 
    int result = timestamp.hashCode();
    assertEquals(result, -123 * (0x07) ^ Integer.rotateLeft(new java.util.Date().hashCode(), 22));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsAccessTimePresent_kLDE1_ZZBw0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimeAbsent_EpgT1_UJOn0_1() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); // Assuming this method exists
    byte[] result = obj.getLocalFileDataData();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_ModifyTimeAbsent_EpgT1_UJOn0_2() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); // Assuming this method exists
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_1() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals(9, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_2() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 2, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_3() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_4() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_5() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_6() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_7() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_8() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_9() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimePresent_MZah4_TtuV0_10() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); 
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimeAbsent_HZlb5_fQsD0_1() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); // Assuming this method is available
    byte[] result = obj.getLocalFileDataData();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_CreateTimeAbsent_HZlb5_fQsD0_2() {
    X5455_ExtendedTimestamp obj = new X5455_ExtendedTimestamp();
    obj.setAccessJavaTime(new Date()); // Assuming this method is available
    byte[] result = obj.getLocalFileDataData();
    assertEquals((byte) 0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_LjAo0_vgpr0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    Date accessTime = new Date();
    x5455_ExtendedTimestamp.setAccessJavaTime(accessTime);
    FileTime expected = FileTime.fromMillis(accessTime.getTime());
    FileTime actual = x5455_ExtendedTimestamp.getAccessFileTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresentTrue_JdGL0_AtlU0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    x5455_ExtendedTimestamp.setAccessJavaTime(new Date());
    boolean result = x5455_ExtendedTimestamp.isBit1_accessTimePresent();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringAccessTimePresent_jmJe2_WqRJ0() {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    x.setAccessJavaTime(new Date()); 
    String result = x.toString();
    assert result.equals("0x5455 Zip Extra Field: Flags=0 Access:[Wed Apr 01 00:00:00 CEST 1970] ");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_GjBn0_ljMN0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    java.sql.Timestamp timestamp = java.sql.Timestamp.valueOf("2022-01-01 00:00:00.0");
    x5455_ExtendedTimestamp.setAccessJavaTime(timestamp);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_Yzsk0_wLEe0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    java.util.Date d = new java.util.Date();
    d.setTime((int) (System.currentTimeMillis() / 1000 - 86400));
    x5455_ExtendedTimestamp.setAccessJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData1_EtIx0_VnlQ0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0}, 0, 1);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData2_svxp1_UFrv0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0, 0, 0, 0}, 1, 4);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData3_wqfp2_XKXn0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0, 0, 0, 0, 0, 0, 0, 0}, 1, 8);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData4_qAah3_LeAc0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 1, 12);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData5_OPTx4_SoVk0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 1, 16);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData6_ruKU5_JOEf0() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    try {
        x5455_ExtendedTimestamp.parseFromLocalFileData(new byte[] {(byte) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 1, 32);
    } catch (java.util.zip.ZipException e) {
    }
}
}