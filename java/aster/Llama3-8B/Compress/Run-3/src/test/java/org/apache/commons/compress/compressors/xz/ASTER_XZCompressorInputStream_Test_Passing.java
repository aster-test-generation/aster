/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import java.io.IOException;
import java.io.InputStream;
import org.tukaani.xz.XZ;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithValidSignature_EFZs0() {
    byte[] signature = XZ.HEADER_MAGIC;
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignature_cUMU1() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length + 1];
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithShortSignature_Eauq2() {
    byte[] signature = new byte[XZ.HEADER_MAGIC.length - 1];
    int length = XZ.HEADER_MAGIC.length;
    boolean result = XZCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithNullSignature_fSNh3() {
    byte[] signature = null;
    int length = XZ.HEADER_MAGIC.length;
    try {
        XZCompressorInputStream.matches(signature, length);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithMemoryLimitInKb_YgQU1_pKte0() throws IOException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true, 10);
    int available = xzCompressorInputStream.available();
    assert available == inputStream.available();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWithDecompressConcatenated_Vuad2_IsRb0() throws IOException {
    InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true);
    int available = xzCompressorInputStream.available();
    assert available == inputStream.available();
}
}