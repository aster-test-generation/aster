/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0017_StrongEncryptionHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_CbuS0() {
        X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        try {
            obj.parseFromCentralDirectoryData(data, offset, length);
        } catch (ZipException e) {
            fail("parseFromCentralDirectoryData should not throw ZipException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseCentralDirectoryFormatInvalidData_yDsP1() {
    X0017_StrongEncryptionHeader header = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        header.parseCentralDirectoryFormat(data, offset, length);
        fail("parseCentralDirectoryFormat should throw ZipException for invalid data");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordCount_YDwy0() {
        X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
        long expected = 0;
        long actual = obj.getRecordCount();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordCount_FQcw0_LCsL0() {
    X0017_StrongEncryptionHeader obj = new X0017_StrongEncryptionHeader();
    long result = obj.getRecordCount();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFileFormat_hBhC0_euWN0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[100];
    int offset = 0;
    int length = 100;
    try {
        x0017_StrongEncryptionHeader.parseFileFormat(data, offset, length);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFileFormatWithInvalidIvSize_KhfR1_iGxc0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[100];
    int offset = 0;
    int length = 100;
    data[offset] = (byte) 0x01;
    data[offset + 1] = (byte) 0x02;
    data[offset + 2] = (byte) 0x03;
    data[offset + 3] = (byte) 0x04;
    try {
        x0017_StrongEncryptionHeader.parseFileFormat(data, offset, length);
    } catch (java.util.zip.ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFileFormatWithInvalidErdSize_QpgX2_MLqy0() {
    X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader = new X0017_StrongEncryptionHeader();
    byte[] data = new byte[100];
    int offset = 0;
    int length = 100;
    data[offset] = (byte) 0x01;
    data[offset + 1] = (byte) 0x02;
    data[offset + 2] = (byte) 0x03;
    data[offset + 3] = (byte) 0x04;
    data[offset + 4] = (byte) 0x05;
    data[offset + 5] = (byte) 0x06;
    data[offset + 6] = (byte) 0x07;
    data[offset + 7] = (byte) 0x08;
    try {
        x0017_StrongEncryptionHeader.parseFileFormat(data, offset, length);
    } catch (java.util.zip.ZipException e) {
    }
}
}