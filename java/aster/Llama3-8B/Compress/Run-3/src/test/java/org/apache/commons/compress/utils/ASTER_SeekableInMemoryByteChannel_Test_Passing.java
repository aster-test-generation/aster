/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_YPLW0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] result = channel.array();
        assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithData_AgSM1() {
        byte[] data = new byte[] {1, 2, 3};
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        byte[] result = channel.array();
        assertArrayEquals(data, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithInitialSize_ItPw2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        byte[] result = channel.array();
        assertArrayEquals(new byte[10], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateValidSize_SOlO0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(50);
        assertEquals(channel, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateInvalidSize_iBOA1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateSizeGreaterThanMaxValue_OTuR2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(Integer.MAX_VALUE + 1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateSizeLessThanCurrentPosition_kjwO3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.truncate(50);
        SeekableByteChannel result = channel.truncate(20);
        assertEquals(channel, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateSizeEqualToCurrentPosition_usJE4() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.truncate(50);
        SeekableByteChannel result = channel.truncate(50);
        assertEquals(channel, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOpenTrue_uJDi0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    boolean result = channel.isOpen();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBeyondLimit_XiPy1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[15]);
        try {
            channel.write(buffer);
            assert false;
        } catch (IOException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteResize_wQSj2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
        try {
            channel.write(buffer);
            assert true;
        } catch (IOException e) {
            assert false;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteResizeMax_lDBB3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[Integer.MAX_VALUE]);
        try {
            channel.write(buffer);
            assert true;
        } catch (IOException e) {
            assert false;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionInvalidPosition_hffL1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(-1L);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Position has to be in range 0..2147483647", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_QuLZ0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithData_zHoE1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_BWwQ0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithArray_oldT1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[20]);
        assertEquals(20, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeDefault_KOAu2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_duMb0_SFed0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    channel.close();
    assertEquals(true, channel.size() == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithData_jlWC2_LFRE1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    channel.close();
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithinLimit_Ftqr0_esEh0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[5]);
    try {
        int result = channel.write(buffer);
        assert result == 5;
    } catch (IOException e) {
        assert false : "Write operation should not throw an IOException";
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteSmallData_XhSz0_AkVd0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[] {1, 2, 3});
    try {
        int result = channel.write(buffer);
        assertEquals(3, result);
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLargeData_JkdZ1_VjYT0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[100]);
    try {
        int result = channel.write(buffer);
        assertEquals(100, result);
    } catch (IOException e) {
        fail("IOException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataThatExceedsCapacity_nYux2_sQkc0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
    try {
        int result = channel.write(buffer);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataThatExceedsCapacityAndResizes_KjpH3_PJxf0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[20]);
    try {
        int result = channel.write(buffer);
        assertEquals(20, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionMaxPosition_VOmx2_pkZn0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    try {
        channel.position(Integer.MAX_VALUE);
        assertEquals(channel.size(), channel.size());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPositionAfterSeek_HMpR2_PirO1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    try {
        channel.position(5);
    } catch (IOException e) {
    }
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZeroBytes_cQiT2_vqNV0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buf = ByteBuffer.allocate(0);
    try {
        int result = channel.read(buf);
        assertEquals(-1, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
}