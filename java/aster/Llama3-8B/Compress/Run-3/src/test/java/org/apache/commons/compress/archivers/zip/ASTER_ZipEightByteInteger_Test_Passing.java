/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_JEYX0() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger obj2 = obj1;
    boolean result = obj1.equals(obj2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_CKPw1() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger obj2 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 9});
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_HLYO0() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        long result = ZipEightByteInteger.getLongValue(bytes, 0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBigIntegerValue_vxjM0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890123456789L));
        assertEquals("ZipEightByteInteger value: 1234567890123456789", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongValue_CJHg1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        assertEquals("ZipEightByteInteger value: 1234567890123456789", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArrayValue_WPAd2() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        assertEquals("ZipEightByteInteger value: ", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArrayAndOffsetValue_BeOO3() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
        assertEquals("ZipEightByteInteger value: ", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_Lhic0() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zip = new ZipEightByteInteger(bytes, 0);
        BigInteger result = zip.getValue();
        assertEquals(BigInteger.valueOf(0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithBigInteger_waFZ1() {
        BigInteger value = BigInteger.valueOf(1234567890123456789L);
        ZipEightByteInteger zip = new ZipEightByteInteger(value);
        BigInteger result = zip.getValue();
        assertEquals(value, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLong_LHop2() {
        long value = 1234567890123456789L;
        ZipEightByteInteger zip = new ZipEightByteInteger(value);
        BigInteger result = zip.getValue();
        assertEquals(BigInteger.valueOf(value), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_iaxe3() {
        byte[] bytes = new byte[8];
        ZipEightByteInteger zip = new ZipEightByteInteger(bytes);
        BigInteger result = zip.getValue();
        assertEquals(BigInteger.valueOf(0), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_SxmX0() {
        ZipEightByteInteger zip = new ZipEightByteInteger(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08});
        long result = ZipEightByteInteger.getLongValue(zip.getBytes());
        assertEquals(0x0102030405070808L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_mnfT0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1));
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLong_ysaZ1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1);
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteArray_tYDL2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01});
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteArrayOffset_AYmd3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01}, 0);
        byte[] expected = new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
        byte[] result = zipEightByteInteger.getBytes();
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytes_spvQ0() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(BigInteger.valueOf(0x0102030405060708L), ZipEightByteInteger.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffset_wOwG1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(BigInteger.valueOf(0x0203040506070809L), ZipEightByteInteger.getValue(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueNullBytes_MRfG4() {
    assertThrows(NullPointerException.class, () -> ZipEightByteInteger.getValue(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueEmptyBytes_HcrY5() {
    assertThrows(NullPointerException.class, () -> ZipEightByteInteger.getValue(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesWithOffsetNegative_CIxR7() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(bytes, -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesWithOffsetLarge_tSUV8() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertThrows(IndexOutOfBoundsException.class, () -> ZipEightByteInteger.getValue(bytes, bytes.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesWithOffsetZero_qBkL9() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    assertEquals(BigInteger.valueOf(0x0102030405060708L), ZipEightByteInteger.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithBigIntegerValue_ntbo0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890123456789L));
        assertEquals(1234567890123456789L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithLongValue_CtiH1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        assertEquals(1234567890123456789L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValueWithByteArray_DGTe2() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        assertEquals(0x1234567890ABCDEFL, zipEightByteInteger.getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesZeroValue_Voah0() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.ZERO);
    assert result[0] == 0;
    assert result[1] == 0;
    assert result[2] == 0;
    assert result[3] == 0;
    assert result[4] == 0;
    assert result[5] == 0;
    assert result[6] == 0;
    assert result[7] == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesPositiveValue_WOon1() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(1L << 63));
    assert result[0] == (byte) 0;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert (result[7] & 0x80) == 0x80;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesNegativeValue_tuky2() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(-1L << 63));
    assert result[0] == (byte) 0;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert (result[7] & 0x80) == 0x80;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesSmallPositiveValue_zTLU3() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(1L));
    assert result[0] == (byte) 1;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert result[7] == (byte) 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesSmallNegativeValue_bxnw4() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(-1L));
    assert result[0] == (byte) (byte) -1;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert result[7] == (byte) 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLargePositiveValue_KEPD5() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(1L << 63 - 1));
    assert result[0] == (byte) (byte) 0;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert (result[7] & 0x7F) == (byte) 0x7F;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLargeNegativeValue_MQzQ6() {
    byte[] result = ZipEightByteInteger.getBytes(BigInteger.valueOf(-1L << 63 - 1));
    assert result[0] == (byte) (byte) 0;
    assert result[1] == (byte) 0;
    assert result[2] == (byte) 0;
    assert result[3] == (byte) 0;
    assert result[4] == (byte) 0;
    assert result[5] == (byte) 0;
    assert result[6] == (byte) 0;
    assert (result[7] & 0x7F) == (byte) 0x7F;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue0_CDBr0() {
    byte[] result = ZipEightByteInteger.getBytes(0);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue1_yHRi1() {
    byte[] result = ZipEightByteInteger.getBytes(1);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 0, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue2_Xuyc2() {
    byte[] result = ZipEightByteInteger.getBytes(2);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 0, 1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue3_qBGI3() {
    byte[] result = ZipEightByteInteger.getBytes(3);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 0, 1, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue4_KQEI4() {
    byte[] result = ZipEightByteInteger.getBytes(4);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 1, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue5_lSsU5() {
    byte[] result = ZipEightByteInteger.getBytes(5);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 1, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue6_fICm6() {
    byte[] result = ZipEightByteInteger.getBytes(6);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 1, 1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue7_uvBw7() {
    byte[] result = ZipEightByteInteger.getBytes(7);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 0, 1, 1, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue8_cDiS8() {
    byte[] result = ZipEightByteInteger.getBytes(8);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 1, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesLongValue9_HNVF9() {
    byte[] result = ZipEightByteInteger.getBytes(9);
    assert Arrays.equals(result, new byte[] {0, 0, 0, 0, 1, 0, 0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLong_ELyZ2_aUVf0() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0x01;
    bytes[1] = (byte) 0x02;
    bytes[2] = (byte) 0x03;
    bytes[3] = (byte) 0x04;
    bytes[4] = (byte) 0x05;
    bytes[5] = (byte) 0x06;
    bytes[6] = (byte) 0x07;
    bytes[7] = (byte) 0x08;
    assertEquals(BigInteger.valueOf(0x0102030405060708L), ZipEightByteInteger.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBigInteger_VrNl3_FveG1() {
    byte[] bytes = BigInteger.valueOf(0x0102030405060708L).toByteArray();
    assertEquals(BigInteger.valueOf(0x0102030405060708L), ZipEightByteInteger.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithBigIntegerValue_mPfk0_Obzw0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(10));
    assertEquals(zipEightByteInteger.hashCode(), zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithLongValue_YlvW1_eLqN0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(10L);
    assertEquals(zipEightByteInteger.hashCode(), Long.valueOf(zipEightByteInteger.getLongValue()).hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithByteArrayValue_rKUh2_eEYb0() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8]);
    assertEquals(zipEightByteInteger.hashCode(), zipEightByteInteger.hashCode());
}
}