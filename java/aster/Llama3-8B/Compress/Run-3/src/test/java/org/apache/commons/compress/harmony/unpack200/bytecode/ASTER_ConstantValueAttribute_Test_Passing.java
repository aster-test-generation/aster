/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_fraP0() {
    ConstantValueAttribute cv1 = new ConstantValueAttribute(new ByteCode(1));
    boolean result = cv1.equals(cv1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_RyKh1() {
    ConstantValueAttribute cv1 = new ConstantValueAttribute(new ByteCode(1));
    ByteCode bc = new ByteCode(1);
    boolean result = cv1.equals(bc);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentEntry_HKhI2() {
    ConstantValueAttribute cv1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute cv2 = new ConstantValueAttribute(new ByteCode(2));
    boolean result = cv1.equals(cv2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_flxx3() {
    ConstantValueAttribute cv1 = new ConstantValueAttribute(new ByteCode(1));
    boolean result = cv1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SgNW0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        String result = attribute.toString();
        assert result.equals("Constant:" + byteCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_YdIr0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(byteCode);
        ClassFileEntry[] result = constantValueAttribute.getNestedClassFileEntries();
        assert result.length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_YHMs1() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        assertEquals(2, attribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_VYzt0() {
        ByteCode byteCode = new ByteCode(1);
        ClassConstantPool pool = new ClassConstantPool();
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        attribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolveWithNestedEntries_sJnd1() {
        ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
        ClassConstantPool pool = new ClassConstantPool();
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        attribute.resolve(pool);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_IVVj0() throws IOException {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        DataOutputStream dos = new DataOutputStream(new java.io.ByteArrayOutputStream());
        attribute.writeBody(dos);
        dos.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_EntryIsNull_FSOI0() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
    assertEquals(31, attribute.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_EntryIsNotNull_HbRD1() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
    ByteCode byteCode2 = new ByteCode(2);
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(byteCode2);
    assertEquals(31 * 31 + byteCode2.hashCode(), attribute.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_DToc4_ykfG0() {
    ConstantValueAttribute cv1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute cv2 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute cv3 = new ConstantValueAttribute(new ByteCode(2));
    cv2 = cv3;
    boolean result = cv1.equals(cv2);
    assert !result;
}
}