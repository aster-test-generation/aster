/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Passing {
@Mock
    private SevenZFile sevenZFile;
@Mock
    private SevenZArchiveEntry sevenZArchiveEntry;
@Mock
    private Path targetDirectory;
@Mock
    private OutputStream outputStream;
@Mock
    private Path archivePath;
@Mock
    private Path targetDirectoryPath;
@InjectMocks
    private Expander expander;
@Mock
    private SeekableByteChannel seekableByteChannel;
@Mock
    private InputStream inputStream;
@Mock
    private Path archive;
@Mock
    private CloseableConsumer closeableConsumer;
@Mock
    private Path path;
@Mock
    private CloseableConsumerAdapter closeableConsumerAdapter;
@Mock
    private TarFile tarFile;
@Mock
    private ZipFile zipFile;
@Mock
    private ArchiveStreamFactory archiveStreamFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpand() throws Exception {
        expander = new Expander();
        // Given
        when(sevenZFile.getNextEntry()).thenReturn(sevenZArchiveEntry);
        when(sevenZArchiveEntry.getName()).thenReturn("testFile");
        when(targetDirectory.toFile()).thenReturn(new File("targetDirectory"));
        when(sevenZFile.read(any(byte[].class))).thenReturn(10);
        // When
        expander.expand(sevenZFile, targetDirectory);
        // Then
        verify(sevenZFile, times(1)).getNextEntry();
        verify(sevenZArchiveEntry, times(1)).getName();
        verify(targetDirectory.toFile(), times(1)).mkdirs();
        verify(sevenZFile, times(1)).read(any(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpand_TmSW0() throws IOException {
        Expander expander = new Expander();
        TarFile tarFile = new TarFile(new byte[0], true);
        File targetDirectory = new File("targetDirectory");
        expander.expand(tarFile, targetDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNullArchive_MYHP0() {
        Expander expander = new Expander();
        ArchiveInputStream<?> archive = null;
        File targetDirectory = new File("targetDirectory");
        try {
            expander.expand(archive, targetDirectory);
            fail("Expected IOException");
        } catch (IOException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNonValidArchiveAndValidTargetDirectory_Rpvb7() {
        Expander expander = new Expander();
        ArchiveInputStream<?> archive = null;
        File targetDirectory = new File("validTargetDirectory");
        try {
            expander.expand(archive, targetDirectory);
            fail("Expected IOException");
        } catch (IOException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandWithNonValidArchiveAndNonExistingTargetDirectory_VTUP8() {
        Expander expander = new Expander();
        ArchiveInputStream<?> archive = null;
        File targetDirectory = new File("nonExistingTargetDirectory");
        try {
            expander.expand(archive, targetDirectory);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpand_Lwdw0() throws IOException {
        Expander expander = new Expander();
        ZipFile zipFile = mock(ZipFile.class);
        Path targetDirectory = mock(Path.class);
        Enumeration<ZipArchiveEntry> entries = mock(Enumeration.class);
        when(zipFile.getEntries()).thenReturn(entries);
        expander.expand(zipFile, targetDirectory);
        verify(zipFile, times(1)).getEntries();
        verify(entries, times(1)).hasMoreElements();
        verify(entries, times(1)).nextElement();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandNoEntries_ATQW1() throws IOException {
        Expander expander = new Expander();
        ZipFile zipFile = mock(ZipFile.class);
        Path targetDirectory = mock(Path.class);
        when(zipFile.getEntries()).thenReturn(null);
        expander.expand(zipFile, targetDirectory);
        verify(zipFile, times(1)).getEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpand_SFRq0() {
        Expander expander = new Expander();
        File archive = new File("archive");
        File targetDirectory = new File("targetDirectory");
        try {
            expander.expand(archive.toPath(), targetDirectory.toPath());
        } catch (IOException | ArchiveException e) {
            fail("IOException or ArchiveException expected");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandIOException_thWj1() {
        Expander expander = new Expander();
        File archive = new File("archive");
        File targetDirectory = new File("targetDirectory");
        assertThrows(IOException.class, () -> expander.expand(archive.toPath(), targetDirectory.toPath()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandArchiveException_yIkV2() {
        Expander expander = new Expander();
        File archive = new File("archive");
        File targetDirectory = new File("targetDirectory");
        assertThrows(ArchiveException.class, () -> expander.expand(archive.toPath(), targetDirectory.toPath()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_S_OUfe0() throws IOException, ArchiveException {
    expander = new Expander();
    String format = "testFormat";
    InputStream mockArchive = mock(InputStream.class);
    when(mockArchive.read(any())).thenReturn(1);
    File targetDirectory = mock(File.class);
    when(targetDirectory.exists()).thenReturn(true);
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    expander.expand(format, mockArchive, targetDirectory, closeableConsumer);
    verify(mockArchive, times(1)).read(any());
    verify(targetDirectory, times(1)).exists();
    verify(closeableConsumer, times(1)).accept(any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_u_LOpL0() throws Exception {
    expander = new Expander();
    String format = "format";
    CloseableConsumer closeableConsumer = mock(CloseableConsumer.class);
    SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
    Path path = mock(Path.class);
    expander.expand(format, seekableByteChannel, path, closeableConsumer);
    verify(closeableConsumer, times(1)).accept(seekableByteChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandNullArchive_AvnB1_nwDa0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    CloseableConsumer closeableConsumer = Mockito.mock(CloseableConsumer.class);
    File targetDirectory = new File("targetDirectory");
    expander.expand(null, targetDirectory, closeableConsumer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandInputStream() throws Exception {
        expander = new Expander();
        // Arrange
        String format = "format";
        when(Files.newInputStream(archive)).thenReturn(inputStream);
        // Act
        expander.expand(format, archive, targetDirectory);
        // Assert
        verify(inputStream, times(1)).close();
        verify(expander, times(1)).expand(format, inputStream, targetDirectory, closeableConsumer);
    }
}