/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.JarInputStream;
import java.util.jar.Manifest;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJar_IDPj0() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        assertNotNull(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithLargeFile_tPyh1() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_large_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        assertNotNull(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithSmallFile_jmZM2() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_small_jar_file");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        assertNotNull(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyThroughJarWithMultipleEntries_NaOl3() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file_with_multiple_entries");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PackingUtils.copyThroughJar(jarFile, outputStream);
        assertNotNull(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPackingFileListFromJar_sHPJ0() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
        assertNotNull(packingFileList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPackingFileListFromJarKeepFileOrderFalse_pxrT1() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_jar_file");
        List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, false);
        assertNotNull(packingFileList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPackingFileListFromJarEmptyJar_uAHw2() throws IOException {
        JarFile jarFile = new JarFile("path_to_your_empty_jar_file");
        List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, true);
        assertEquals(0, packingFileList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJar_jEKi0_RgSB0() throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    JarInputStream jarInputStream = mock(JarInputStream.class);
    when(jarInputStream.getManifest()).thenReturn(new Manifest());
    when(jarInputStream.getNextEntry()).thenReturn(new JarEntry("PACK200"));
    PackingUtils.log("testCopyThroughJar_jEKi0");
    PackingUtils.copyThroughJar(jarInputStream, outputStream);
    verify(jarInputStream, times(1)).close();
    assertEquals("PACK200", outputStream.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJarWithMultipleEntries_Suge1_ooeC0() throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    JarInputStream jarInputStream = mock(JarInputStream.class);
    when(jarInputStream.getManifest()).thenReturn(new Manifest());
    JarEntry jarEntry1 = new JarEntry("entry1");
    JarEntry jarEntry2 = new JarEntry("entry2");
    when(jarInputStream.getNextJarEntry()).thenReturn(jarEntry1).thenReturn(jarEntry2).thenReturn(null);
    PackingUtils.log("PACK200");
    verify(jarInputStream, times(1)).close();
    assertEquals("PACK200", outputStream.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyThroughJarWithNullJarFile_DQGf4_KWEj0() {
    try {
        PackingUtils.log(null);
        assert false;
    } catch (Exception e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJarWithNullJarInputStream_OgNl3_kFOf0() {
    try {
        PackingUtils.log(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogNullMessage_PJgW1() {
    try {
        PackingUtils.log(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("log(null) should not be called", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJarNullJarKeepFileOrderFalse_KWKz4_RyBp0() {
    try {
        PackingUtils.log(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("log(message) with null argument", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithLogFile_snWy1_vrSI1() {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile");
    try {
        PackingUtils.config(options);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithVerbose_rfxi2_mEKO1() {
    PackingOptions options = new PackingOptions();
    options.setVerbose(true);
    try {
        PackingUtils.config(options);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithGzip_uZvF3_FrSB1() {
    PackingOptions options = new PackingOptions();
    options.setGzip(true);
    try {
        PackingUtils.config(options);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConfigWithAllOptions_PHzo4_ZPko1() {
    PackingOptions options = new PackingOptions();
    options.setLogFile("logFile");
    options.setVerbose(true);
    options.setGzip(true);
    try {
        PackingUtils.config(options);
    } catch (IOException e) {
    }
}
}