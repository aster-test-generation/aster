/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
TarArchiveEntry tararchiveentry;
TarArchiveEntry anotherTarArchiveEntry;
TarArchiveEntry parent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevMajor5_ifZJ4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(0, tarArchiveEntry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseTarHeader_GFpt0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "fileName");
        byte[] header = new byte[1024];
        tarArchiveEntry.parseTarHeader(header);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFIFO_ksYN0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertTrue(tarArchiveEntry.isFIFO());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNotFIFO_QlWk1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertFalse(tarArchiveEntry.isFIFO());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkFlag_SAsu0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertEquals((byte) 0, tarArchiveEntry.getLinkFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate5_FxGr4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate6_nwNm5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLinkTrue_Bwor0() {
    TarArchiveEntry entry = new TarArchiveEntry("file", (byte) TarArchiveEntry.LF_LINK);
    boolean result = entry.isLink();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLinkFalse_xFaM1() {
    TarArchiveEntry entry = new TarArchiveEntry("file");
    boolean result = entry.isLink();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeValidSize_SaVb0() {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        entry.setSize(100);
        assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeInvalidSize_DDKG1() {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        try {
            entry.setSize(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Size is out of range: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDescendent() throws Exception{
        parent = new TarArchiveEntry("parent", false);
        tararchiveentry = new TarArchiveEntry("child", false);
        // Arrange
        // Act
        boolean result = tararchiveentry.isDescendent(parent);
        // Assert
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_nqvd0() {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
        assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous6_nxFa5() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"), "test");
        assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_YMvG0() {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0);
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_lwga1() {
        TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode7_nUkh6() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"), "test");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode8_NRXi7() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test"));
        assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTime5_uJbG4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(null, tarArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTime6_dWRn5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        assertEquals(null, tarArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtended_BUoR0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertTrue(tarArchiveEntry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsExtendedFalse_BDWK1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertFalse(tarArchiveEntry.isExtended());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_AsPU1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
        assertEquals("test", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName7_IQuY6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"), "test");
        assertEquals("test", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName8_oNhV7() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"));
        assertEquals("", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_LinkFlagDir_nOqs1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) TarArchiveEntry.LF_DIR);
        assertTrue(tarArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_NameEndsWithSlash_lHUV2() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name/");
        assertTrue(tarArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkTrue_XyWY0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("file", (byte) TarArchiveEntry.LF_SYMLINK);
    boolean result = tarArchiveEntry.isSymbolicLink();
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkFalse_iKmm1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("file", (byte) TarArchiveEntry.LF_DIR);
    boolean result = tarArchiveEntry.isSymbolicLink();
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime5_pREN4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        FileTime fileTime = tarArchiveEntry.getLastModifiedTime();
        assertEquals(null, fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime6_vSfH5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        FileTime fileTime = tarArchiveEntry.getLastModifiedTime();
        assertEquals(null, fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime7_tOhM6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        FileTime fileTime = tarArchiveEntry.getLastModifiedTime();
        assertEquals(null, fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode6_QDJJ5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(0, tarArchiveEntry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode7_sLht6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        assertEquals(0, tarArchiveEntry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders5_ZXrP4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders6_Yoji5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders7_JmRj6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, true);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders9_ndpX8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders10_gTej9() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", true);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders11_bAGe10() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders12_QSyL11() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveEntry.getSparseHeaders();
        assert sparseHeaders != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongUserId7_MsxT6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(0, tarArchiveEntry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId5_WDlY4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId6_sWmn5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId7_spyi6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, true);
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId9_ZTbX8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId10_KitD9() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", true);
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId12_SWei11() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId13_AxpZ12() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTime_uHVx0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(Files.createTempFile("test", ".tmp"), "test.txt");
        FileTime fileTime = Files.getLastModifiedTime(Files.createTempFile("test", ".tmp"));
        tarArchiveEntry.setModTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_cVYk0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0, true);
        int userId = tarArchiveEntry.getUserId();
        assert userId >= 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId2_IrhW1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0, true);
        tarArchiveEntry.setUserId(0x12345678L);
        int userId = tarArchiveEntry.getUserId();
        assert userId == 0x12345678;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNUSparseNull_LOuj2() {
    TarArchiveEntry tarArchiveEntry = null;
    try {
        boolean result = tarArchiveEntry.isGNUSparse();
        assert(false);
    } catch (NullPointerException e) {
        assert(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_rRzL0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertEquals(0, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_daBW1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test", (byte) 0, true);
        assertEquals(0, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize9_Hqci8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"), "test");
        assertEquals(0, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize10_MIiP9() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"));
        assertEquals(0, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        tararchiveentry = new TarArchiveEntry("test", (byte) 0);
        TarArchiveEntry anotherTarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertTrue(tararchiveentry.equals(anotherTarArchiveEntry));
        assertFalse(tararchiveentry.equals(null));
        assertFalse(tararchiveentry.equals("not a TarArchiveEntry"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_unoW0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test", (byte) 0, true);
    TarArchiveEntry entry2 = entry1;
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_yRRf1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test", (byte) 0, true);
    TarArchiveEntry entry2 = new TarArchiveEntry("test", (byte) 0, true);
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_ZECy2() {
    TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0, true);
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserName5_dLMd4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        String userName = tarArchiveEntry.getUserName();
        assertEquals("", userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        tararchiveentry = new TarArchiveEntry("test", (byte) 0);
        TarArchiveEntry anotherTarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertTrue(tararchiveentry.equals(anotherTarArchiveEntry));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        tararchiveentry = new TarArchiveEntry("test", (byte) 0);
        TarArchiveEntry anotherTarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertFalse(tararchiveentry.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        tararchiveentry = new TarArchiveEntry("test", (byte) 0);
        TarArchiveEntry anotherTarArchiveEntry = new TarArchiveEntry("test", (byte) 0);
        assertFalse(tararchiveentry.equals("not a TarArchiveEntry"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPath_DoUH0_Aaow0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "fileName");
    Path result = tarArchiveEntry.getPath();
    assertEquals(new File("path").toPath(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPath2_dpwf1_NoJo0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    Path result = tarArchiveEntry.getPath();
    assertEquals(new File("file").toPath(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPath3_NLqu2_FDiC0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"));
    Path result = tarArchiveEntry.getPath();
    assertEquals(new File("path").toPath(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ReturnsFalse_kkIZ0() throws Exception {
    TarArchiveEntry tararchiveentry = new TarArchiveEntry(new File("file"), "fileName");
    TarArchiveEntry anotherTarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    boolean result = tararchiveentry.equals(anotherTarArchiveEntry);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupId_vxxz0_HEye0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertEquals(0, tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffsetInvalidOffset_kyDY1_Azdo0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file"), "fileName");
    try {
        entry.setDataOffset(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendentWithSameName_WcZx2_hIdL0() {
    TarArchiveEntry parent = new TarArchiveEntry("parent");
    TarArchiveEntry child = new TarArchiveEntry("child");
    assertFalse(parent.isDescendent(child));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotDescendentWithMultipleSubdirectories_xGVF7_qsHU0() {
    TarArchiveEntry parent = new TarArchiveEntry("parent");
    TarArchiveEntry child = new TarArchiveEntry("subdirectory1/subdirectory2");
    assertFalse(parent.isDescendent(child));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_BHTt2_gtTM0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFileNotNull_EJej1_bMyY0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "fileName");
    File file = tarArchiveEntry.getFile();
    assertNotNull(file);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_LinkFlagDir_bcsi3_lYPE0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, "dir");
    assertFalse(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_LinkFlagNotDirAndNoSlash_iiyF4_TpSA0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, "file");
    assertTrue(tarArchiveEntry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName_EUTL0_YjcL0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertEquals("groupName", tarArchiveEntry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderMtime_gMzP5_IWAn0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "fileName");
    tarArchiveEntry.addPaxHeader("mtime", "1643723400");
    assertEquals(FileTime.from(Instant.ofEpochSecond(1643723400)), tarArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName9_TFZm8_jaDo0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test"));
    assertEquals("test", tarArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_FileNotNull_cuWD0_JfBE0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertTrue(tarArchiveEntry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkName_oQnm0_jgMi0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("fileName");
    assertEquals("fileName", tarArchiveEntry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId8_bbOC7_jdya0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
    assertEquals(0, tarArchiveEntry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_Yail0_pald0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    assertTrue(tarArchiveEntry.getUserName() == null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_OSBa0_vcux0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "file");
    assertTrue(tarArchiveEntry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_lJmB1_DFNB0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("path"), "fileName");
    FileTime fileTime = tarArchiveEntry.getCreationTime();
    assertEquals(null, fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize3_MVFV2_IMiQ0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
    assertEquals(0, tarArchiveEntry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCheckSumOK_aaxc0_RnhB0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
    boolean result = tarArchiveEntry.isCheckSumOK();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName6_ZGIJ5_ocqP0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
    String userName = tarArchiveEntry.getUserName();
    assertEquals("", userName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_hKav0_ngjg0() {
    try {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(Collections.emptyMap(), new byte[0], TarUtils.DEFAULT_ENCODING, false);
        tarArchiveEntry.parseTarHeader(new byte[0]);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeaderGlobalPaxHeaders_iNpZ3_bNuk0() {
    Map<String, String> globalPaxHeaders = Collections.singletonMap("key", "value");
    try {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, new byte[0], TarUtils.DEFAULT_ENCODING, false);
        tarArchiveEntry.parseTarHeader(new byte[0]);
    } catch (IOException e) {
        assertEquals("IOException was expected", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_TqXx0_HwmW1() {
    try {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, "fileName", LinkOption.NOFOLLOW_LINKS);
        assertEquals(0, tarArchiveEntry.getGroupId());
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
}