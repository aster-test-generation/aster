/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.GregorianCalendar;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
@Mock
    private TarArchiveEntry currEntry;
@Mock
    private TarArchiveInputStream tararchiveinputstream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesPosix_tZme0() {
    byte[] signature = TarConstants.MAGIC_POSIX.getBytes();
    int length = TarConstants.MAGICLEN;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesPosixVersion_KOoB1() {
    byte[] signature = TarConstants.MAGIC_POSIX.getBytes();
    int length = TarConstants.MAGICLEN + TarConstants.VERSIONLEN;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesGnu_Kyqt2() {
    byte[] signature = TarConstants.MAGIC_GNU.getBytes();
    int length = TarConstants.MAGICLEN;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesGnuVersionSpace_bPpQ3() {
    byte[] signature = TarConstants.MAGIC_GNU.getBytes();
    int length = TarConstants.MAGICLEN + TarConstants.VERSION_GNU_SPACE.length();
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesGnuVersionZero_VjVb4() {
    byte[] signature = TarConstants.MAGIC_GNU.getBytes();
    int length = TarConstants.MAGICLEN + TarConstants.VERSION_GNU_ZERO.length();
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesAnt_IxPb5() {
    byte[] signature = TarConstants.MAGIC_ANT.getBytes();
    int length = TarConstants.MAGICLEN;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesAntVersion_PBBs6() {
    byte[] signature = TarConstants.MAGIC_ANT.getBytes();
    int length = TarConstants.MAGICLEN + TarConstants.VERSION_ANT.length();
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidMagic_mtqN7() {
    byte[] signature = new byte[TarConstants.MAGICLEN];
    int length = TarConstants.MAGICLEN;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidVersion_cAwq8() {
    byte[] signature = TarConstants.MAGIC_POSIX.getBytes();
    int length = TarConstants.MAGICLEN - 1;
    boolean result = TarArchiveInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEntryWithNullInputStream_dRmR13() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 1024, "UTF-8");
    try {
        tarArchiveInputStream.getNextTarEntry();
        Assertions.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetCurrentEntry_dcDM0() throws Exception{
    MockitoAnnotations.initMocks(this);
    TarArchiveInputStream tararchiveinputstream = Mockito.mock(TarArchiveInputStream.class);
    TarArchiveEntry expectedEntry = Mockito.mock(TarArchiveEntry.class);
    Mockito.when(expectedEntry.getName()).thenReturn("testEntry");
    Mockito.when(expectedEntry.getSize()).thenReturn((long)1024);
    GregorianCalendar calendar = new GregorianCalendar();
    Mockito.when(expectedEntry.getModTime()).thenReturn(calendar.getTime());
    tararchiveinputstream.setCurrentEntry(expectedEntry);
    Mockito.verify(tararchiveinputstream, Mockito.times(1)).setCurrentEntry(expectedEntry);
    Mockito.verifyNoMoreInteractions(tararchiveinputstream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported7_Hwfx6_ZQiy0() {
    try {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new java.io.FileInputStream("test.tar"));
        boolean result = tarArchiveInputStream.markSupported();
        assert !result;
    } catch (java.io.FileNotFoundException e) {
        throw new RuntimeException(e);
    }
}
}