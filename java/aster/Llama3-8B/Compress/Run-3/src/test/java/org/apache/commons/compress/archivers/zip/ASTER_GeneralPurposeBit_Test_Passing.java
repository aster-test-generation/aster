/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSlidingDictionarySize_qkEo0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int expected = 0; // replace with your expected value
        int actual = generalPurposeBit.getSlidingDictionarySize();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUsesEncryption_taSF0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        boolean result = generalPurposeBit.usesEncryption();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlag_nuGu4() {
        byte[] data = new byte[] {(byte) 0x1000};
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(8192, b.getSlidingDictionarySize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlagDefault_hpKr5() {
        byte[] data = new byte[] {(byte) 0x0000};
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, b.getSlidingDictionarySize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlag_ygrk6() {
        byte[] data = new byte[] {(byte) 0x0008};
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(3, b.getNumberOfShannonFanoTrees());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlagDefault_NsTl7() {
        byte[] data = new byte[] {(byte) 0x0000};
        GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, b.getNumberOfShannonFanoTrees());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bBEk0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] result = generalPurposeBit.encode();
        assert result.length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUsesUTF8ForNames_fVvn0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        boolean result = generalPurposeBit.usesUTF8ForNames();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDefaultFlags_FtRQ0() {
        GeneralPurposeBit gpb = new GeneralPurposeBit();
        assertEquals(0, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAllFlags_VKme0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[2];
        generalPurposeBit.encode(buf, 0);
        int expectedValue = (1 << 15) | (1 << 14) | (1 << 13);
        assert buf[0] == (byte) (expectedValue >> 8);
        assert buf[1] == (byte) expectedValue;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutDataDescriptorFlag_bfVW1() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[2];
        generalPurposeBit.encode(buf, 0);
        int expectedValue = (0 << 15) | (1 << 14) | (1 << 13);
        assert buf[0] == (byte) (expectedValue >> 8);
        assert buf[1] == (byte) expectedValue;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutLanguageEncodingFlag_GULJ2() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[2];
        generalPurposeBit.encode(buf, 0);
        int expectedValue = (1 << 15) | (0 << 14) | (1 << 13);
        assert buf[0] == (byte) (expectedValue >> 8);
        assert buf[1] == (byte) expectedValue;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutEncryptionFlag_gUrD3() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[2];
        generalPurposeBit.encode(buf, 0);
        int expectedValue = (1 << 15) | (1 << 14) | (0 << 13);
        assert buf[0] == (byte) (expectedValue >> 8);
        assert buf[1] == (byte) expectedValue;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseUTF8ForNamesFlag_ucsr1_xvcF0() {
    byte[] data = new byte[] {(byte) 0x02};
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEncryptionFlag_gGNo3_RmbA1() {
    byte[] data = new byte[] {(byte) 0x08};
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, 0);
    assertTrue(b instanceof GeneralPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_NTXq0_HuqY0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    int result = generalPurposeBit.getNumberOfShannonFanoTrees();
    org.junit.Assert.assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeEncryptionFlagTrue_kPzW1_dbrC1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(3, gpb.hashCode());
}
}