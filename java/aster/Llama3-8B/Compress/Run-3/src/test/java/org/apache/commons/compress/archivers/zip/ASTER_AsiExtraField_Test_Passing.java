/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsiExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataInvalidLength_vyAN1() {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] data = new byte[10];
    try {
        asiExtraField.parseFromLocalFileData(data, 0, 10);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataInvalidChecksum_OikR2() {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] data = new byte[20];
    data[0] = 0x01;
    data[1] = 0x02;
    data[2] = 0x03;
    data[3] = 0x04;
    data[4] = 0x05;
    data[5] = 0x06;
    data[6] = 0x07;
    data[7] = 0x08;
    data[8] = 0x09;
    data[9] = 0x0a;
    data[10] = 0x0b;
    data[11] = 0x0c;
    data[12] = 0x0d;
    data[13] = 0x0e;
    data[14] = 0x0f;
    data[15] = 0x10;
    data[16] = 0x11;
    data[17] = 0x12;
    data[18] = 0x13;
    data[19] = 0x15;
    try {
        asiExtraField.parseFromLocalFileData(data, 0, 20);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataInvalidLinkArrayLength_lqVA3() {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] data = new byte[20];
    data[0] = 0x01;
    data[1] = 0x02;
    data[2] = 0x03;
    data[3] = 0x04;
    data[4] = 0x05;
    data[5] = 0x06;
    data[6] = 0x07;
    data[7] = 0x08;
    data[8] = 0x09;
    data[9] = 0x0a;
    data[10] = 0x0b;
    data[11] = 0x0c;
    data[12] = 0x0d;
    data[13] = 0x0e;
    data[14] = 0x0f;
    data[15] = 0x10;
    data[16] = 0x11;
    data[17] = 0x12;
    data[18] = 0x13;
    data[19] = 0x20;
    try {
        asiExtraField.parseFromLocalFileData(data, 0, 20);
        fail("Expected ZipException");
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkedFile_TGry0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkedFileNull_CYby1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkedFileEmpty_Ksii2() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_uJCS1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort zipShort = asiExtraField.getLocalFileDataLength();
        assertEquals(ZipShort.getValue(zipShort.getBytes()), zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_JFmM0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int expected = 0; // replace with your expected value
        int actual = asiExtraField.getUserId();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_Tzxo0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        try {
            asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
        } catch (ZipException e) {
            fail("parseFromCentralDirectoryData should not throw ZipException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_PQQV0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("test");
        assertTrue(asiExtraField.isLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkFalse_qbEn1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("");
        assertFalse(asiExtraField.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_ZtMu0() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = asiExtraField.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_lslj0_QmAw0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    int groupId = asiExtraField.getGroupId();
    org.junit.Assert.assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeFile_RDJn0_kCal0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    int mode = asiExtraField.getMode(0); // Assuming FILE_FLAG is an integer constant
    assert mode == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeDirectory_zwdj2_IJGV0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    asiExtraField.setDirectory(true);
    int mode = asiExtraField.getMode(0);
    assert mode == 1; // Assuming DIR_FLAG is 1
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_htan0_OWZV0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    asiExtraField.setUserId(123);
    assertEquals(123, asiExtraField.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_bmHM0_qytV0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    asiExtraField.setGroupId(10);
    org.junit.Assert.assertEquals(10, asiExtraField.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_styk1_pjEq1() {
    AsiExtraField asiExtraField = new AsiExtraField();
    AsiExtraField cloned = (AsiExtraField) asiExtraField.clone();
    assertNotNull(cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataValidData_jfJB0_jcam0() {
    AsiExtraField asiExtraField = new AsiExtraField();
    byte[] data = new byte[20];
    data[0] = 0x01;
    data[1] = 0x02;
    data[2] = 0x03;
    data[3] = 0x04;
    data[4] = 0x05;
    data[5] = 0x06;
    data[6] = 0x07;
    data[7] = 0x08;
    data[8] = 0x09;
    data[9] = 0x0a;
    data[10] = 0x0b;
    data[11] = 0x0c;
    data[12] = 0x0d;
    data[13] = 0x0e;
    data[14] = 0x0f;
    data[15] = 0x10;
    data[16] = 0x11;
    data[17] = 0x12;
    data[18] = 0x13;
    data[19] = 0x14;
    try {
        asiExtraField.parseFromLocalFileData(data, 0, 20);
    } catch (java.util.zip.ZipException e) {
        fail("Should not throw ZipException");
    }
}
}