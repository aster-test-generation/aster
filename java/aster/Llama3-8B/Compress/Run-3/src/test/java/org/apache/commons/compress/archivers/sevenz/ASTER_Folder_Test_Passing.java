/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamPositive_FKmD0() {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assert result != -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamNegative_twHj1() {
        Folder folder = new Folder();
        int index = 1;
        int result = folder.findBindPairForInStream(index);
        assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamNull_bTak2() {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStreamPositive_onim0() {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assert result != -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStreamNegative_oDud1() {
        Folder folder = new Folder();
        int index = 1;
        int result = folder.findBindPairForOutStream(index);
        assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStreamBindPairsNull_EcKL2() {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnpackSize_TotalOutputStreamsZero_ReturnZero_DHRb0() {
        Folder folder = new Folder();
        assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnpackSizeForCoderNullCoder_ywxG0() {
        Folder folder = new Folder();
        long result = folder.getUnpackSizeForCoder(null);
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCoders_EmptyPackedStreams_ruXX0_vjLX0() {
    Folder folder = new Folder();
    try {
        Iterable<Coder> result = folder.getOrderedCoders();
        Assertions.assertTrue(result instanceof Collection);
        Assertions.assertEquals(0, ((Collection<Coder>) result).size());
    } catch (IOException e) {
    }
}
}