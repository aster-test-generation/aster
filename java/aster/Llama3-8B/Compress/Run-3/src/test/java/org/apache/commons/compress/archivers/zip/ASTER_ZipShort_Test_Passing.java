/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_hzHR0() {
    ZipShort zipShort1 = new ZipShort(new byte[]{});
    ZipShort zipShort2 = zipShort1;
    boolean result = zipShort1.equals(zipShort2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_wcZq1() {
    ZipShort zipShort1 = new ZipShort(new byte[]{});
    ZipShort zipShort2 = new ZipShort(new byte[]{});
    boolean result = zipShort1.equals(zipShort2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentType_dkRR2() {
    ZipShort zipShort = new ZipShort(new byte[]{});
    Object obj = new Object();
    boolean result = zipShort.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort_bnDH0() {
        byte[] buf = new byte[4];
        ZipShort.putShort(0x1234, buf, 0);
        byte[] expected = new byte[] {(byte) 0x34, (byte) 0x12};
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytes_NsqM0() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
        assertEquals("ZipShort value: 0", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithInt_dcLe1() {
        ZipShort zipShort = new ZipShort(123);
        assertEquals("ZipShort value: 123", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBytesOffset_uRVs2() {
        ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
        assertEquals("ZipShort value: 0", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayConstructor_Pfpj0() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3});
    assertEquals(1, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithIntConstructor_STNt1() {
    ZipShort zipShort = new ZipShort(1);
    assertEquals(1, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffsetConstructor_lNnR2() {
    ZipShort zipShort = new ZipShort(new byte[] {1, 2, 3}, 1);
    assertEquals(1, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithIntValue_XIsr0() {
        ZipShort zipShort = new ZipShort(123);
        byte[] result = zipShort.getBytes();
        assert result.length == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArray_wYGe1() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipShort zipShort = new ZipShort(bytes);
        byte[] result = zipShort.getBytes();
        assert result.length == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayAndOffset_ExPW2() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipShort zipShort = new ZipShort(bytes, 2);
        byte[] result = zipShort.getBytes();
        assert result.length == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithValidBytes_Cadm0() {
    byte[] bytes = new byte[] {1, 2, 3};
    int result = ZipShort.getValue(bytes);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNullBytes_ZDHn1() {
    byte[] bytes = null;
    try {
        ZipShort.getValue(bytes);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithEmptyBytes_FqsC2() {
    byte[] bytes = new byte[0];
    int result = ZipShort.getValue(bytes);
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithSingleByte_RYaY3() {
    byte[] bytes = new byte[] {1};
    int result = ZipShort.getValue(bytes);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNegativeValue_TJpV5() {
    byte[] bytes = new byte[] {(byte) -1};
    int result = ZipShort.getValue(bytes);
    assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithPositiveValue_EdqL6() {
    byte[] bytes = new byte[] {(byte) 1};
    int result = ZipShort.getValue(bytes);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithZeroValue_dCiX7() {
    byte[] bytes = new byte[] {(byte) 0};
    int result = ZipShort.getValue(bytes);
    assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithMaxValue_Amvg8() {
    byte[] bytes = new byte[] {(byte) 127};
    int result = ZipShort.getValue(bytes);
    assert result == 127;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithMinValue_Mycs9() {
    byte[] bytes = new byte[] {(byte) -128};
    int result = ZipShort.getValue(bytes);
    assert result == -128;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithValue_ZrKW0() {
        ZipShort zipShort = new ZipShort(5);
        assertEquals(5, zipShort.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBytes_JqLn1() {
        byte[] bytes = new byte[] {1, 2, 3};
        ZipShort zipShort = new ZipShort(bytes);
        assertEquals(0, zipShort.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBytesAndOffset_UlsC2() {
        byte[] bytes = new byte[] {1, 2, 3};
        ZipShort zipShort = new ZipShort(bytes, 1);
        assertEquals(0, zipShort.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes0_QUhd0() {
    byte[] result = ZipShort.getBytes(0);
    assert Arrays.equals(result, new byte[]{0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_mGcb1() {
    byte[] result = ZipShort.getBytes(1);
    assert Arrays.equals(result, new byte[]{1, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes256_neBs3() {
    byte[] result = ZipShort.getBytes(256);
    assert Arrays.equals(result, new byte[]{0, 1});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes65536_Vuft5() {
    byte[] result = ZipShort.getBytes(65536);
    assert Arrays.equals(result, new byte[]{0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes16777216_kfgu7() {
    byte[] result = ZipShort.getBytes(16777216);
    assert Arrays.equals(result, new byte[]{0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_UwJf0() {
        ZipShort zipShort = new ZipShort(new byte[10], 0);
        Object clone = zipShort.clone();
        assert clone instanceof ZipShort;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_zlPO1() {
        ZipShort zipShort = new ZipShort(new byte[10]);
        Object clone = zipShort.clone();
        assert clone instanceof ZipShort;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_vPky0() {
        byte[] bytes = new byte[] {0x00, 0x01};
        int offset = 0;
        int expected = 256;
        int actual = ZipShort.getValue(bytes, offset);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4294967295_LeBG8_HIDe0() {
    byte[] result = ZipShort.getBytes((int) 4294967295L);
    assert Arrays.equals(result, new byte[]{(byte) 0xFF, (byte) 0xFF});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4294967296_BeXq9_SQCg1() {
    byte[] result = ZipShort.getBytes((int) 4294967296L);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes255_YVrN2_BESE0() {
    byte[] result = ZipShort.getBytes(255);
    assert Arrays.equals(result, new byte[]{(byte)255, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes65535_Xnur4_yzuL0() {
    byte[] result = ZipShort.getBytes(65535);
    assert Arrays.equals(result, new byte[]{(byte)255, (byte)255});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes16777215_QlLo6_poiY0() {
    byte[] result = ZipShort.getBytes(16777215);
    assert Arrays.equals(result, new byte[]{(byte)255, (byte)255});
}
}