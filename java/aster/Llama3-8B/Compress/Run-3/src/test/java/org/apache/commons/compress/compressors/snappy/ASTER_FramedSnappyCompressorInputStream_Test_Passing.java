/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignature_IkvA0() {
        byte[] signature = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        assertTrue(FramedSnappyCompressorInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesShortSignature_OXjM1() {
        byte[] signature = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
        assertFalse(FramedSnappyCompressorInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesSignatureShorterThanExpected_ONiO2() {
        byte[] signature = new byte[] {1, 2, 3};
        assertFalse(FramedSnappyCompressorInputStream.matches(signature, signature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_ISdt1() {
        long x = 0x12345678L;
        long result = FramedSnappyCompressorInputStream.unmask(x);
        assertEquals(0x12345678L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEndOfFile_QFWC1_IXlx0() throws IOException {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    FramedSnappyCompressorInputStream compressorInputStream = new FramedSnappyCompressorInputStream(in);
    int result = compressorInputStream.read();
    assert result == -1;
}
}