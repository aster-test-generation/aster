/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveInputStream_Test_Passing {
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private InputStream inputStream;
private ZipArchiveInputStream zipArchiveInputStream;
@Mock
    private ArchiveEntry archiveEntry;
private ZipArchiveInputStream ziparchiveinputstream;
private byte[] skipBuf = new byte[1024];
@Mock
    private ZipUtil zipUtil;
    private int entriesRead;
        private boolean hasDataDescriptor;
    private boolean closed;
    private boolean hitCentralDirectory;
        private final ZipArchiveEntry entry = new ZipArchiveEntry();
    private long uncompressedCount;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesLfhsig_bxJD0() {
    byte[] signature = ZipArchiveOutputStream.LFH_SIG;
    int length = ZipArchiveOutputStream.LFH_SIG.length;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesEocdsig_qCff1() {
    byte[] signature = ZipArchiveOutputStream.EOCD_SIG;
    int length = ZipArchiveOutputStream.EOCD_SIG.length;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesDdsig_Nyic2() {
    byte[] signature = ZipArchiveOutputStream.DD_SIG;
    int length = ZipArchiveOutputStream.DD_SIG.length;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesSingleSegmentSplitMarker_eXWa3() {
    byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
    int length = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes().length;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesLfhsigLessLength_BcNj4() {
    byte[] signature = ZipArchiveOutputStream.LFH_SIG;
    int length = ZipArchiveOutputStream.LFH_SIG.length - 1;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_JFRE5() {
    byte[] signature = new byte[ZipArchiveOutputStream.LFH_SIG.length];
    int length = ZipArchiveOutputStream.LFH_SIG.length;
    boolean result = ZipArchiveInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntry_rbUP0() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithEncoding_UKjG1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String encoding = "UTF-8";
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithEncodingAndUnicodeExtraFields_GGAB2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String encoding = "UTF-8";
        boolean useUnicodeExtraFields = true;
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithEncodingAndUnicodeExtraFieldsAndAllowStoredEntriesWithDataDescriptor_nCwK3() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String encoding = "UTF-8";
        boolean useUnicodeExtraFields = true;
        boolean allowStoredEntriesWithDataDescriptor = true;
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, allowStoredEntriesWithDataDescriptor);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithEncodingAndUnicodeExtraFieldsAndSkipSplitSig_BcEq4() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String encoding = "UTF-8";
        boolean useUnicodeExtraFields = true;
        boolean skipSplitSig = true;
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, skipSplitSig);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntryWithEncodingAndUnicodeExtraFieldsAndAllowStoredEntriesWithDataDescriptorAndSkipSplitSig_uCfT5() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        String encoding = "UTF-8";
        boolean useUnicodeExtraFields = true;
        boolean allowStoredEntriesWithDataDescriptor = true;
        boolean skipSplitSig = true;
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, encoding, useUnicodeExtraFields, allowStoredEntriesWithDataDescriptor, skipSplitSig);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_mkbf0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose2_QncU1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    zipArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryValidSignatureWithExtraFieldsAndUTF8Flag_QVSc9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextZipEntryEmptyArchive_iXwh0() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount_xatB0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream);
    long result = zipArchiveInputStream.getUncompressedCount();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount1_WNLL1() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream, "UTF-8", true);
    long result = zipArchiveInputStream.getUncompressedCount();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadTruncatedZipFile_HNEC8() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    try {
        zip.read(new byte[10], 0, 10);
        fail("IOException expected");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_AyGc6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = null;
    assertEquals(-1, zipArchiveInputStream.read(buffer, 0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOffsetOutOfRange_cfND7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    assertEquals(-1, zipArchiveInputStream.read(buffer, 10, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadLengthOutOfRange_vxtZ8() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    assertEquals(-1, zipArchiveInputStream.read(buffer, 0, -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZeroLength_lAhi9() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    assertEquals(0, zipArchiveInputStream.read(buffer, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadFromInflaterTruncated_qwcb10() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidArguments_bOBz0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int result = zipArchiveInputStream.read(buffer, offset, length);
    Assertions.assertEquals(result, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullBuffer_NgWo1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeLength_DmaN2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOffsetGreaterThanBufferLength_bFHr3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 11;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLengthGreaterThanBufferLength_rYGp4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 11;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected ArrayIndexOutOfBoundsException");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithClosedStream_IBiR5() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullInputStream_ZwAM6() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        Assertions.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryEOFException_qQzR3_uImP0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        zipArchiveInputStream.getNextEntry();
        assert false;
    } catch (IOException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryEOFException_TOgp3_iXPD0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        zipArchiveInputStream.getNextEntry();
        Assertions.fail();
    } catch (IOException e) {
        Assertions.assertTrue(e instanceof EOFException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_ZipArchiveEntry_DataDescriptor_WQjb0_KiDn0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry ae = new ZipArchiveEntry("test");
    boolean result = zipArchiveInputStream.canReadEntryData(ae);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_ZipArchiveEntry_StoredNoDataDescriptor_baeX4_Hhiu0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, true);
    ZipArchiveEntry ae = new ZipArchiveEntry("test");
    boolean result = zipArchiveInputStream.canReadEntryData(ae);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataNonZipArchiveEntry_mfdZ3_kuiM0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry ae = new ZipArchiveEntry("test");
    assertFalse(zipArchiveInputStream.canReadEntryData(ae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadStoredEntry_gHJm0_fSNA0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[1024];
    int read = zipArchiveInputStream.read(buffer, 0, buffer.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadClosedStream_onvq5_txQO0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    zipArchiveInputStream.close();
    byte[] buffer = new byte[10];
    assertEquals(-1, zipArchiveInputStream.read(buffer, 0, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflatedWithTruncatedFile_iuOa7_pgsY0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithStoredEntry_UILj7_EWnt0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    int result = zipArchiveInputStream.read(buffer, offset, length);
    Assertions.assertEquals(result, -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_BpRd0_XKOx0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryFirstEntry_DNVa3_EPOF0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        Assertions.fail("IOException was expected", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_RqAC0_vbZi0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assert zipArchiveEntry == null;
    } catch (IOException e) {
        fail("IOException was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNull_QhyQ0_YIQD0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        Assertions.assertNull(zipArchiveEntry);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryFirstEntry_CjWd0_reUl0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryNotFirstEntry_CxfU1_PlCM0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        zipArchiveInputStream.getNextZipEntry();
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNotNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntryClosedStream_rZap2_urJZ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    try {
        zipArchiveInputStream.close();
    } catch (IOException e) {
    }
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry1_YyTc0_NkkS0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_pzXS1_RuDy0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, true, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_nqTK2_brYP0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException is not expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_bzZF3_ckqK0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, false);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_oEaZ4_AXcf0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, false, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry6_GGCa5_kOem0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", false, true, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry7_NCia6_WSlb0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, true);
    try {
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
        assertNull(zipArchiveEntry);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEmptyBuffer_pocr0_IPWL0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[0];
    try {
        int read = zip.read(buffer, 0, 0);
        assertEquals(0, read);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_txGG2_Xotf0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = null;
    try {
        zip.read(buffer, 0, 10);
        fail("ArrayIndexOutOfBoundsException expected");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNegativeLength_lhci3_PcKZ0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zip.read(buffer, 0, -1);
        fail("IOException expected");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOffsetOutsideBuffer_YDhT4_IgSg0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    try {
        zip.read(buffer, 10, 10);
        fail("ArrayIndexOutOfBoundsException expected");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadDeflatedEntry_jYnq6_aLFU0() {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    try {
        zip.read(new byte[10], 0, 10);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadZeroLengthBuffer_SfRy0_xKlc0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[0];
    try {
        int read = zipArchiveInputStream.read(buffer, 0, 0);
        Assertions.assertEquals(0, read);
    } catch (IOException e) {
        throw new AssertionError("IOException was thrown unexpectedly", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNullBuffer_Dccu2_XFzm0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = null;
    try {
        zipArchiveInputStream.read(buffer, 0, 10);
        Assertions.fail("NullPointerException expected");
    } catch (IOException e) {
        Assertions.assertThrows(NullPointerException.class, () -> zipArchiveInputStream.read(buffer, 0, 10));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOffsetGreaterThanBufferLength_DVSJ4_wRFx0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 10, 10);
        Assertions.fail("ArrayIndexOutOfBoundsException expected");
    } catch (ArrayIndexOutOfBoundsException | IOException e) {
        throw new AssertionError("ArrayIndexOutOfBoundsException expected", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadLengthGreaterThanBufferLength_ZDta5_TjTy0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, false, false);
    byte[] buffer = new byte[10];
    try {
        zipArchiveInputStream.read(buffer, 0, 20);
        Assertions.fail("ArrayIndexOutOfBoundsException expected");
    } catch (ArrayIndexOutOfBoundsException | IOException e) {
        Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> zipArchiveInputStream.read(buffer, 0, 20));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidArguments_uaDr0_eRrz0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        int result = zipArchiveInputStream.read(buffer, offset, length);
        assertEquals(10, result);
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroLength_UMZz1_Puop0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 0;
    try {
        assertEquals(0, zipArchiveInputStream.read(buffer, offset, length));
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNullBuffer_nzBh3_ocMg0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    try {
        try {
            zipArchiveInputStream.read(buffer, offset, length);
        } catch (IOException e) {
            fail("Expected NullPointerException");
        }
    } catch (NullPointerException e) {
        try {
            zipArchiveInputStream.read(new byte[10], offset, length);
        } catch (IOException ex) {
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidOffset_FmFa4_WkYO0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 10;
    int length = 10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidLength_Ahlx5_PVOZ0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = -10;
    try {
        zipArchiveInputStream.read(buffer, offset, length);
        fail("Expected ArrayIndexOutOfBoundsException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception{
        ziparchiveinputstream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
        Mockito.when(ziparchiveinputstream.getNextZipEntry()).thenReturn(zipArchiveEntry);
        ZipArchiveEntry actual = ziparchiveinputstream.getNextEntry();
        Assertions.assertEquals(zipArchiveEntry, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip() throws IOException {
        ziparchiveinputstream = new ZipArchiveInputStream(inputStream);
        // Arrange
        when(inputStream.read(skipBuf, 0, 1)).thenReturn(1);
        when(inputStream.read(skipBuf, 0, 1)).thenReturn(0);
        // Act
        long skipped = ziparchiveinputstream.skip(2);
        // Assert
        assertEquals(2, skipped);
        verify(inputStream, times(2)).read(skipBuf, 0, 1);
    }
}