/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayoutMap_Test_Passing {
@Mock
private AttributeLayoutMap attributelayoutmap;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_EmptyMap_HXwn2() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout_sVTm0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(0, 0);
    Assertions.assertNotNull(attributeLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_SameLayoutNameCombinationExistsTwice_aQfa0_vvYw0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout1", 1, "name1", 1);
    AttributeLayout layout2 = new AttributeLayout("layout1", 1, "name1", 2, false);
    map.put(1, layout1);
    map.put(2, layout2);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_SameLayoutNameCombinationDoesNotExist_ylFS1_gofK0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout", 1, "layout", 1);
    AttributeLayout layout2 = new AttributeLayout("layout", 2, "layout", 2);
    map.put(1, layout1);
    map.put(2, layout2);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_MapWithOneLayout_NXih3_oLaJ0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("name1", 1, "layout", 1);
    map.put(1, layout1);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_MapWithMultipleLayouts_aEcO4_BhUk0() throws Pack200Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    Map<Integer, AttributeLayout> map = new HashMap<>();
    AttributeLayout layout1 = new AttributeLayout("layout1", 1, "layout", 1);
    AttributeLayout layout2 = new AttributeLayout("layout2", 1, "layout", 2);
    AttributeLayout layout3 = new AttributeLayout("layout3", 1, "layout", 3);
    map.put(1, layout1);
    map.put(2, layout2);
    map.put(3, layout3);
    attributeLayoutMap.add(layout1);
    attributeLayoutMap.add(layout2);
    attributeLayoutMap.add(layout3);
    attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout1_Vfxp0_CUFh0() {
    try {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout("testName", 1);
        Assertions.assertNull(attributeLayout);
    } catch (Pack200Exception e) {
        throw new RuntimeException(e);
    }
}
}