/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
    private byte[] detect(InputStream in) {
        return new byte[0];
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandard_tpca0() {
        assertEquals("ZSTANDARD", CompressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_qica0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders = compressorStreamFactory.getCompressorInputStreamProviders();
    assertEquals(compressorInputStreamProviders, compressorStreamFactory.getCompressorInputStreamProviders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProvidersWithMemoryLimit_kZsH1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 10);
    SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders = compressorStreamFactory.getCompressorInputStreamProviders();
    assertEquals(compressorInputStreamProviders, compressorStreamFactory.getCompressorInputStreamProviders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_GoXf0() {
        assertEquals("BZIP2", CompressorStreamFactory.getBzip2());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_dzOw0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders = compressorStreamFactory.getCompressorOutputStreamProviders();
    assertEquals(compressorOutputStreamProviders, compressorStreamFactory.getCompressorOutputStreamProviders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProvidersWithMemoryLimit_RGSe1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 10);
    SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders = compressorStreamFactory.getCompressorOutputStreamProviders();
    assertEquals(compressorOutputStreamProviders, compressorStreamFactory.getCompressorOutputStreamProviders());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorOutputStreamProviders_PTtS0() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZ_BCve1() {
        assertEquals("Z", CompressorStreamFactory.getZ());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_QGIA0() {
    String result = CompressorStreamFactory.getLZ4Framed();
    assertEquals("LZ4_FRAMED", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedDefaultConstructor_IPGd0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        boolean result = factory.getDecompressConcatenated();
        assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedBooleanConstructor_jPwz1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        boolean result = factory.getDecompressConcatenated();
        assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedBooleanAndIntConstructor_kkIv2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 10);
        boolean result = factory.getDecompressConcatenated();
        assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedBooleanConstructorFalse_vMsN4() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        boolean result = factory.getDecompressConcatenated();
        assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenatedBooleanAndIntConstructorFalse_uuWh5() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 10);
        boolean result = factory.getDecompressConcatenated();
        assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_Avtz0() {
        String result = CompressorStreamFactory.getLzma();
        assert result.equals("LZMA");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleton_VjIU0_1() {
        CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
        assertEquals(CompressorStreamFactory.class, singleton.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleton_VjIU0_2() {
        CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
        assertNotNull(singleton);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullOutputStream_qKoo11() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    try {
        factory.createCompressorOutputStream("GZIP", null);
        Assertions.fail("Expected CompressorException");
    } catch (CompressorException e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOF_QfEV0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertEquals(false, factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithDecompressUntilEOF_NLVZ1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals(true, factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithMemoryLimit_ogkt2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 10);
        assertEquals(true, factory.getDecompressUntilEOF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenatedTrue_ogCx0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    compressorStreamFactory.setDecompressConcatenated(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenatedFalse_pgJZ1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    compressorStreamFactory.setDecompressConcatenated(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4Block_ilsG0() {
        assertEquals("LZ4_BLOCK", CompressorStreamFactory.getLZ4Block());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSnappyFramed_jVCu0() {
        String result = CompressorStreamFactory.getSnappyFramed();
        assert result.equals("SNAPPY_FRAMED");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate64_ILjy0() {
        assertEquals("DEFLATE64", CompressorStreamFactory.getDeflate64());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorInputStreamProviders_wFIl0() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
        System.out.println("SortedMap<String, CompressorStreamProvider> map = new TreeMap<>();");
        System.out.println("map.putAll(SINGLETON.getInputStreamCompressorNames(), SINGLETON, map);");
        System.out.println("archiveStreamProviderIterable().forEach(provider -> map.putAll(provider.getInputStreamCompressorNames(), provider, map));");
        System.out.println("return map;");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBrotli_bMYl0() {
        assertEquals("BROTLI", CompressorStreamFactory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullCompressorName_aKJG15_lIXa0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    try {
        factory.getXz();
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_BvKF0_oUSi0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> result = factory.getInputStreamCompressorNames();
    Set<String> expected = new HashSet<String>(Arrays.asList("GZIP", "BROTLI", "BZIP2", "XZ", "LZMA", "PACK200", "DEFLATE", "SNAPPY_RAW", "SNAPPY_FRAMED", "Z", "LZ4_BLOCK", "LZ4_FRAMED", "ZSTANDARD", "DEFLATE64"));
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWithDecompressUntilEOF_arwT1_mFpS0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Set<String> result = factory.getInputStreamCompressorNames();
    Set<String> expected = new HashSet<String>(Arrays.asList("GZIP", "BROTLI", "BZIP2", "XZ", "LZMA", "PACK200", "DEFLATE", "SNAPPY_RAW", "SNAPPY_FRAMED", "Z", "LZ4_BLOCK", "LZ4_FRAMED", "ZSTANDARD", "DEFLATE64"));
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWithMemoryLimit_dqPG2_koQm0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 10);
    Set<String> result = factory.getInputStreamCompressorNames();
    Set<String> expected = new HashSet<>();
    expected.add("GZIP");
    expected.add("BROTLI");
    expected.add("BZIP2");
    expected.add("XZ");
    expected.add("LZMA");
    expected.add("PACK200");
    expected.add("DEFLATE");
    expected.add("SNAPPY_RAW");
    expected.add("SNAPPY_FRAMED");
    expected.add("Z");
    expected.add("LZ4_BLOCK");
    expected.add("LZ4_FRAMED");
    expected.add("ZSTANDARD");
    expected.add("DEFLATE64");
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullName_QBOi10_avoZ1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    try {
        String xz = factory.getXz();
        Assertions.fail("Expected CompressorException");
    } catch (Exception e) {
        Assertions.assertTrue(true);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_qCup0_crLu0() throws CompressorException {
    java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    String result = CompressorStreamFactory.getXz();
    assertEquals("XZ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_chNG0_rgKA0() throws CompressorException {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream compressorInputStream = compressorStreamFactory.createCompressorInputStream("name", in);
    assertSame(compressorInputStream.getCount(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithoutMemoryLimit_LUFh2_WNsG0() throws CompressorException {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream compressorInputStream = compressorStreamFactory.createCompressorInputStream("name", in);
    assertSame(compressorInputStream.getCount(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithDecompressUntilEOF_EJSj3_wufG0() throws CompressorException {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    CompressorInputStream compressorInputStream = compressorStreamFactory.createCompressorInputStream("name", in, true);
    assertSame(compressorInputStream.getCount(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleton_VjIU0() {
        CompressorStreamFactory singleton = CompressorStreamFactory.getSingleton();
        assertEquals(CompressorStreamFactory.class, singleton.getClass());
        assertNotNull(singleton);
    }
}