/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeNull_qwOr1() {
        long result = TimeUtils.toUnixTime(null);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeValidRange_QfPi0() {
        assertTrue(TimeUtils.isUnixTime(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange_xuNr1() {
        assertFalse(TimeUtils.isUnixTime(Integer.MIN_VALUE - 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeInvalidRange2_wdNz2() {
        assertFalse(TimeUtils.isUnixTime(Integer.MAX_VALUE + 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_PMhh0() {
        Date date = new Date();
        long result = TimeUtils.toNtfsTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTimeNull_RPvb1() {
        Date date = null;
        try {
            TimeUtils.toNtfsTime(date);
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_nPSo0() {
        Date date = new Date();
        FileTime result = TimeUtils.toFileTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateToHundredNanos_MkTX0() {
        FileTime fileTime = FileTime.from(Instant.now());
        FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
        assertEquals(fileTime, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDate_Iyez0() {
        FileTime fileTime = FileTime.fromMillis(123456789L);
        Date expected = new Date(123456789000L);
        Date actual = TimeUtils.toDate(fileTime);
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_tRjC1() {
        long javaTime = 1643723400 * 1000000000L;
        long result = TimeUtils.toNtfsTime(javaTime);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToDate_cxxs0() {
        long ntfsTime = 1234567890L;
        Date expectedDate = new Date(1234567890000L);
        Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
        assert actualDate.equals(expectedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTimeNotNull_ajZs0_yLsj0() {
    java.sql.Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
    long result = TimeUtils.ntfsTimeToDate(timestamp.getTime()).getTime();
    assertEquals(timestamp.getTime(), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_WisG0_GkyH0() {
    java.sql.Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
    boolean result = TimeUtils.ntfsTimeToDate(timestamp.getTime()) != null;
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_oPuP0_hXMP0() {
    Instant instant = Instant.now();
    long time = instant.toEpochMilli();
    Date result = TimeUtils.ntfsTimeToDate(time);
    assert result != null;
}
}