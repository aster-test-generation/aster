/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantPool_AQSJ0() {
        Segment segment = new Segment();
        SegmentConstantPool result = segment.getConstantPool();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpBands_eSgF0() {
        Segment segment = new Segment();
        CpBands cpBands = segment.getCpBands();
        assertNotNull(cpBands);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_Dkqt0_djJY0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    IcTuple[] icTuples = icBands.getIcTuples();
    assertNotNull(icTuples);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackProcessWithoutInternalBuffer_hTkE1_MPBt0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    IcTuple[] icTuples = icBands.getIcTuples();
    IcTuple[] relevantIcTuples = icBands.getRelevantIcTuples("className", new ClassConstantPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPreRead_MUZU0_SZEY0() {
    Segment segment = new Segment();
    segment.setPreRead(true);
    assertEquals(true, segment.getIcBands().getIcTuples().length > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogLevelHigherThanCurrentLogLevel_iUTh0_oCBb0() {
    Segment segment = new Segment();
    segment.log(1, "Test message");
    String output = System.out.toString();
    assert output.contains("Test message");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_KNwB0_gaNq1() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertEquals(null, icBands);
}
}