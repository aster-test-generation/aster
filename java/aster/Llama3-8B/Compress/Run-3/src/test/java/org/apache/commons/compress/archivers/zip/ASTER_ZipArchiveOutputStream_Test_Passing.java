/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveOutputStream_Test_Passing {
@Mock
    private StreamCompressor streamCompressor;
@Mock
    private OutputStream outputStream;
@Mock
    private ZipEncoding zipEncoding;
private ZipArchiveOutputStream ziparchiveoutputstream;
@Mock
    private SeekableByteChannel channel;
@Mock
    private OutputStream out;
@Mock
    private File file;
@Mock
    private Path path;
@Mock
    private InputStream inputStream;
private long dataStart;
private long bytesRead;
    private long cdLength;
    private final List<ZipArchiveEntry> entries = new LinkedList<>();
    private long eocdLength;
    private String comment = "";
    private long cdOffset;
    private long cdDiskNumberStart;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableWithSeekableByteChannel_qAEd1() throws IOException {
        SeekableByteChannel channel = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(channel);
        boolean result = zipArchiveOutputStream.isSeekable();
        assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableWithFile_gepT2() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        boolean result = zipArchiveOutputStream.isSeekable();
        assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableWithOutputStream_uRpw4() {
        OutputStream out = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        boolean result = zipArchiveOutputStream.isSeekable();
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSeekableWithFileOnly_vlRS5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        boolean result = zipArchiveOutputStream.isSeekable();
        assert !result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNormal_tboq0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_fpIJ1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_tBNS2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithSplitZip_ffze4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_NHmy2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_fkNw3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_vuMX4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.setComment("Test comment");
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithSplitZip_XJov4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("entry"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishNormal_QxPA0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_sWQz1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntry_lVIY2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_YNEI4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.setComment("This is a test comment");
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_OQMP4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.setComment("This is a test zip file");
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut_jwCk0() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(bos);
        byte[] data = new byte[] {1, 2, 3};
        zip.writeOut(data, 0, data.length);
        assert bos.toByteArray().equals(data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testputArchiveEntry() throws Exception{
        MockitoAnnotations.initMocks(this);
        ZipArchiveOutputStream ziparchiveoutputstream = new ZipArchiveOutputStream(path, 1024);
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        ziparchiveoutputstream.putArchiveEntry(entry);
        Mockito.verify(ziparchiveoutputstream, Mockito.times(1)).putArchiveEntry(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry3_yAVQ2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1024);
        zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry6_rcyX5() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        zipArchiveOutputStream.closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_UBjK0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithDeflated_jbiE1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
    ZipArchiveEntry entry = new ZipArchiveEntry("entry");
    entry.setMethod(ZipArchiveEntry.DEFLATED);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry3_SRbo2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000000);
        zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushOutputStream_ypKW0() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zip.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFlushFile_iCMa1() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"));
    zip.flush();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut3_gEqA2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        OutputStream out = byteArrayOutputStream;
        zipArchiveOutputStream.writeOut(new byte[]{1, 2, 3});
        assert byteArrayOutputStream.toByteArray().equals(new byte[]{1, 2, 3});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteOut5_GFcK4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        OutputStream out = byteArrayOutputStream;
        zipArchiveOutputStream.writeOut(new byte[]{1, 2, 3});
        assert byteArrayOutputStream.toByteArray().equals(new byte[]{1, 2, 3});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten2_FgKS1() throws IOException {
        SeekableByteChannel channel = null;
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(channel);
        long bytesWritten = zip.getBytesWritten();
        assert bytesWritten == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten3_Hplm2() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(file, 1024);
        long bytesWritten = zip.getBytesWritten();
        assert bytesWritten == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten5_dFoy4() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);
        long bytesWritten = zip.getBytesWritten();
        assert bytesWritten == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten6_xiYu5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(file);
        long bytesWritten = zip.getBytesWritten();
        assert bytesWritten == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWrite_ukwR0() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    byte[] b = new byte[10];
    zip.write(b, 0, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeflate2_htqF1() throws IOException {
        SeekableByteChannel channel = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(channel);
        zipArchiveOutputStream.deflate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeflate3_rOxQ2() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
        zipArchiveOutputStream.deflate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeflate5_CChg4() throws IOException {
        OutputStream out = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
        zipArchiveOutputStream.deflate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeflate6_wUvG5() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        zipArchiveOutputStream.deflate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_HCFv0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
        assert zipArchiveEntry != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithFile_uJsC1() throws IOException {
    File file = new File("file");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreamble_qQTs0() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(bos);
        byte[] preamble = new byte[] {1, 2, 3, 4, 5};
        zipArchiveOutputStream.writePreamble(preamble);
        byte[] expected = new byte[preamble.length];
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
        bos.writeTo(new ByteArrayOutputStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithFile_Qjdb1() throws IOException {
        File file = new File("test.zip");
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(file, 1024);
        byte[] preamble = new byte[10];
        zip.writePreamble(preamble, 0, preamble.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntryFinishedStream_MKEp1_hdrR0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveOutputStream.createArchiveEntry(new File("inputFile"), "entryName");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithAlreadyFinishedArchive_Tlee1_oRnM0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidArguments_uLAq0_HqKM0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_mUxf3_aZxg0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.setComment("comment");
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithSplitZip_cDlK4_hLBy0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000);
    zipArchiveOutputStream.setMethod(ZipArchiveOutputStream.STORED);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZip_caKp3_WVtP1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSplitZipAlreadyFinished_OovS4_XYFd0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.finish();
    try {
        zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_bVpT2_bJKm0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_YpeL2_DEpx0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1000);
    zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("entry"));
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_OpoM2_fpBN0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    zipArchiveOutputStream.putArchiveEntry(entry);
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishUnclosedEntries_PiFR3_OBfj0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 0);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    try {
        zipArchiveOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroyOutputStream_Qezz0_uuxu0() throws IOException {
    ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"));
    zip.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_SpDp0_butd0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
    assertEquals(true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShouldAddZip64Extra_BpEI5_PSMF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    Zip64Mode mode = Zip64Mode.Never;
    boolean result = false; // zipArchiveOutputStream.shouldAddZip64Extra(zipArchiveEntry, mode);
    assertEquals(false, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithNullPath_nVpA5_cOkW0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.txt"), 1024);
    try {
        zipArchiveOutputStream.putArchiveEntry(new ZipArchiveEntry("test.txt"));
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_qkDZ0() throws Exception {
    MockitoAnnotations.initMocks(this);
    ZipArchiveOutputStream ziparchiveoutputstream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    when(streamCompressor.getTotalBytesWritten()).thenReturn(100L);
    when(streamCompressor.getBytesRead()).thenReturn(50L);
    when(streamCompressor.getCrc32()).thenReturn(123L);
    ziparchiveoutputstream.closeArchiveEntry();
    verify(streamCompressor, times(1)).writeCounted(any(byte[].class), anyInt(), anyInt());
    verify(streamCompressor, times(1)).reset();
    verify(streamCompressor, times(1)).getBytesRead();
    verify(streamCompressor, times(1)).getCrc32();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithDeflated_ssaW1_KPhZ0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_oPxF0_PauC0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    zipArchiveOutputStream.writePreamble(new byte[0], 0, 0);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry2_WRPx1_diBg0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseEntry2_faDm7_lIMu0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000000);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseEntry3_izAe8_RLEq0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000000);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseEntry4_QzzJ9_RuMd0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 0);
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseEntry6_OPlb11_nsXE1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
    zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry7_cjgo6_MoBH0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader3_vrbS2_jYfj0() throws IOException {
    File file = new File("test.zip");
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024);
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt"); 
    zipArchiveOutputStream.writeLocalFileHeader(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetComment4_nZEB3_cjGl0() throws IOException {
    OutputStream out = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(out);
    zipArchiveOutputStream.setComment("Test Comment");
    assertEquals("Test Comment", ((ByteArrayOutputStream) out).toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryNullRawStream_FGsS2_qnlE0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    assertThrows(NullPointerException.class, () -> zipArchiveOutputStream.writePreamble(null, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_VCUy0_XRag0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        zipArchiveOutputStream.setEncoding("UTF-8");
        assertEquals(Charset.forName("UTF-8"), zipArchiveOutputStream.getEncoding());
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding2_VZKb1_VNxY0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        zipArchiveOutputStream.setEncoding("ISO-8859-1");
        assertEquals(Charset.forName("ISO-8859-1"), zipArchiveOutputStream.getEncoding());
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding3_VJmg2_Ptlg0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test"));
        zipArchiveOutputStream.setEncoding("ASCII");
        assertEquals(Charset.forName("ASCII"), zipArchiveOutputStream.getEncoding());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncodingWithoutCharset_EiSd1_MiEu0() {
    try {
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        assertEquals(null, zip.getEncoding());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddRawArchiveEntryWithNullStream_qcUQ2_PixK0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.txt"), "test.txt");
        InputStream rawStream = null;
        try {
            zipArchiveOutputStream.addRawArchiveEntry(entry, rawStream);
            Assertions.fail("Expected IOException");
        } catch (IOException e) {
        }
        try {
            zipArchiveOutputStream.close();
        } catch (IOException e) {
        }
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteZip64CentralDirectoryNeverSplitZip_egEl1_BooE0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1000);
        try {
            zipArchiveOutputStream.writeZip64CentralDirectory();
        } catch (IOException e) {
        }
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryDataZipMethodImploading_qUDd2_LZLS0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entry");
        zipArchiveEntry.setMethod(ZipMethod.IMPLODING.getCode());
        assertFalse(zipArchiveOutputStream.canWriteEntryData(zipArchiveEntry));
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryDataZipMethodUnshrinking_Kzxn3_Zcwv0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entry");
        zipArchiveEntry.setMethod(ZipMethod.UNSHRINKING.getCode());
        assertFalse(zipArchiveOutputStream.canWriteEntryData(zipArchiveEntry));
    } catch (IOException e) {
        fail("IOException was expected");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryDataZipMethodOther_yCit4_dPJx0() {
    try {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entry");
        zipArchiveEntry.setMethod(ZipMethod.STORED.getCode());
        assertTrue(zipArchiveOutputStream.canWriteEntryData(zipArchiveEntry));
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
}