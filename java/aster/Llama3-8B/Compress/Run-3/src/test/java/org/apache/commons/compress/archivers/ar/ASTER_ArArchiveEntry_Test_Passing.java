/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_PxdJ0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(entry);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_aWVV1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_PUPm2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    boolean result = entry.equals(new Object());
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_DfdB3() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test1", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test2", 10);
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_oWZt4() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10);
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameNull_HXkD5() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = null;
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory1_EJuj0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10);
        assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory3_heYT2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10, 1, 2, 3, 4);
        assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory4_nHxQ3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_MmPV0() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 1000);
        Date result = entry.getLastModifiedDate();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate3_GOyX2() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 1000, 1, 2, 3, 1000);
        Date result = entry.getLastModifiedDate();
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate4_ypCF3() {
        File inputFile = new File("test");
        ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
        Date result = entry.getLastModifiedDate();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_NHnP0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
    assertEquals(2, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId2_RoGJ1() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 100);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId4_mXkt3() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "name");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_PIKr0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize3_uMDA2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100, 0, 0, 0, 0);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize4_ViJf3() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_dMCP0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123, 1, 2, 3, 4);
    assertEquals(1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode1_MngB0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    int result = entry.hashCode();
    assertEquals(104, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode2_nQKH1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 0, 0, 0, 0);
    int result = entry.hashCode();
    assertEquals(104, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_hrrW2() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
    int result = entry.hashCode();
    assertEquals(104, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_mCvo0() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10);
        assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_WtRQ2() {
        ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 2, 3, 4);
        assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName4_YwRA3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_xZid0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithUserId_cpxD2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 100, 1, 2, 3, 4);
    assertEquals(100, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithFileInput_WKHu3() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("test"), "test");
    assertEquals(0, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_pQBc0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(3, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode2_JaCz1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModified_HrfC0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100);
        assertEquals(0, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModified3_crtA2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100, 1, 2, 3, 4);
        assertEquals(4, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModified4_xAEh3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getLastModified());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory2_hksK1_cwKh0() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("path"), "entryName");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified2_UkdH1_PNkb0() {
    ArArchiveEntry entry = new ArArchiveEntry(new File("path"), "entryName");
    assertEquals(0, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId2_JWTF1_JuAi0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123);
    try {
        entry = new ArArchiveEntry(new File("inputFile"), "entryName");
    } catch (Exception e) {
        fail("Unexpected exception");
    }
    assertEquals(0, entry.getUserId());
}
}