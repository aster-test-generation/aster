/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired;
@Mock
    private ZipArchiveEntry ziparchiveentry;
private GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    private ZipArchiveEntry zipArchiveEntry;
private long externalAttributes;
@Mock
    private ZipArchiveEntry entry;
private UnparseableExtraFieldData unparseableExtra;
@Mock
    private UnparseableExtraFieldData unparseableExtraMock;
@Mock
    private ZipArchiveEntry zipArchiveEntryMock;
@Mock
    private ZipArchiveEntry superZipArchiveEntry;
@Mock
    private ExtraFieldUtils extraFieldUtils;
private long dataOffset = ZipArchiveEntry.OFFSET_UNKNOWN;
@Mock
    private List<ZipExtraField> newFields;
private ZipExtraField[] extraFields;
    private Path path;
@Mock
    private ZipArchiveEntry mockZipArchiveEntry;
@Mock
    private ZipExtraField extraField1;
@Mock
    private ZipExtraField extraField2;
@Mock
    private ZipShort zipShort;
private boolean lastModifiedDateSet;
private long time = -1;
@Mock
private static String ZIP_DIR_SEP = "/";
@Mock
    private FileTime fileTime;
private long diskNumberStart;
private static int SHORT_MASK = 0xFFFF;
@Mock
    private ExtraFieldParsingBehavior extraFieldParsingBehavior;
@Mock
    private byte[] rawName;
@Mock
    private UnixStat unixStat;
@Mock
    private ZipExtraField zipExtraField;
@Mock
    private ZipExtraField ze;
private int internalAttributes;
    private int rawFlag;
    private String name;
    private int alignment;
    private boolean isStreamContiguous;
    private int versionMadeBy;
    private int method = ZipMethod.UNKNOWN_CODE;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionRequired() throws Exception{
        versionRequired = 1;
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(ziparchiveentry.getVersionRequired()).thenReturn(versionRequired);
        assertEquals(versionRequired, ziparchiveentry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired1_BoxG1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_WIKg1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternalAttributes() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Set the externalAttributes value
        externalAttributes = 123L;
        Mockito.when(ziparchiveentry.getExternalAttributes()).thenReturn(externalAttributes);
        // Call the method
        long result = ziparchiveentry.getExternalAttributes();
        // Assert the result
        Mockito.verify(ziparchiveentry).getExternalAttributes();
        assertEquals(externalAttributes, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes_MBQl0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternalAttributes1_cBUx1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_aOCl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(true, entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_IDLm1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(false, entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_fodn2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals(false, entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_Kjto3() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test2");
    assertEquals(false, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_iCqS4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test");
    assertEquals(true, entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLastModifiedDate() throws Exception{
        entry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        long time = 1234567890L;
        Mockito.when(entry.getTime()).thenReturn(time);
        // Act
        Date lastModifiedDate = entry.getLastModifiedDate();
        // Assert
        assertEquals(new Date(time), lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_ujqM0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate1_hgpG1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes_ivPO0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInternalAttributes2_RHvn1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag() throws Exception{
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the rawFlag
        zipArchiveEntry.setRawFlag(10);
        // Assert the rawFlag
        Mockito.when(zipArchiveEntry.getRawFlag()).thenReturn(10);
        assertEquals(10, zipArchiveEntry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag_NSzi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRawFlag3_iBlS2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_Emls0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        FileTime time = FileTime.fromMillis(1234567890L);
        ZipEntry result = zipArchiveEntry.setCreationTime(time);
        assertEquals(zipArchiveEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetDiskNumberStart() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        long diskNumberStart = 10;
        // Act
        ziparchiveentry.setDiskNumberStart(diskNumberStart);
        // Assert
        Mockito.verify(ziparchiveentry, Mockito.times(1)).setDiskNumberStart(diskNumberStart);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        Mockito.when(ziparchiveentry.getDiskNumberStart()).thenReturn(diskNumberStart);
        Assertions.assertEquals(diskNumberStart, ziparchiveentry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStart_XPGs0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(10);
        assertEquals(10, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithNegativeValue_TUug1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(-10);
        assertEquals(-10, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithZeroValue_rYdl2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(0);
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDiskNumberStartWithLargeValue_XKNK3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setDiskNumberStart(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_SLNY0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setName("newName", new byte[0]);
        assertSame("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameRawName_dyMi1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setName("newName", new byte[] {1, 2, 3});
        assertSame(new byte[] {1, 2, 3}, entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment() {
        MockitoAnnotations.initMocks(this);
        zipArchiveEntry = new ZipArchiveEntry();
        // Set the alignment value
        zipArchiveEntry.setAlignment(10);
        // Verify the alignment value
        assertEquals(10, zipArchiveEntry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_YeqB0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment2_eznh1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra2_piMy1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra4_QXkh3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setExtra();
        assertEquals(true, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithUnparseableExtra_JqfK1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtra();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_mGLg3() {
        File file = new File("file");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "entryName");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_omZM0() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    zipArchiveEntry.setExtra();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_VlmJ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        zipArchiveEntry.setExtra();
        assertEquals("Extra field set", "Expected extra field to be set");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataOffsetWithFile_ZbtV3() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        entry.setDataOffset(100L);
        assertEquals(100L, entry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsNull_XVNj0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtraFields(null);
        assertEquals(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsEmpty_nrel1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField[] fields = new ZipExtraField[0];
        zipArchiveEntry.setExtraFields(fields);
        assertEquals(0, zipArchiveEntry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_Uycd0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertNotNull(unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData2_xZiz1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertEquals(unparseableExtra, zipArchiveEntry.getUnparseableExtraFieldData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData5_TKvq4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertNotNull(unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData6_pRFB5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertNotNull(unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_AAqd0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName(null);
        assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWindowsPath_jSRC1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("C:\\path\\to\\file.txt");
        assertEquals("C:/path/to/file.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameUnixPath_YiWN2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("/path/to/file.txt");
        assertEquals("/path/to/file.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameFatPath_ZZrl3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("path\\to\\file.txt");
        assertEquals("path/to/file.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSize() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        long validSize = 100;
        long invalidSize = -1;
        // Act
        ziparchiveentry.setSize(validSize);
        ziparchiveentry.setSize(invalidSize);
        // Assert
        Mockito.verify(ziparchiveentry).setSize(validSize);
        Mockito.verify(ziparchiveentry).setSize(invalidSize);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        // Assert for invalid size
        try {
            ziparchiveentry.setSize(invalidSize);
            fail("Expected IllegalArgumentException for invalid size");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisStreamContiguous() throws Exception{
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the value of isStreamContiguous
        Mockito.when(zipArchiveEntry.isStreamContiguous()).thenReturn(true);
        // Call the method
        boolean result = zipArchiveEntry.isStreamContiguous();
        // Assert the result
        Mockito.verify(zipArchiveEntry, Mockito.times(1)).isStreamContiguous();
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_uUTj0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertTrue(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousFalse_Yxlt1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(false);
        assertFalse(zipArchiveEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousTrue_Xthh3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setStreamContiguous(true);
        assertTrue(zipArchiveEntry.isStreamContiguous());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ctQw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals("test".hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_PgTT1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals("test".hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPlatform() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        int newPlatform = 1;
        zipArchiveEntry.setPlatform(newPlatform);
        Mockito.verify(zipArchiveEntry).setPlatform(newPlatform);
        assertEquals(newPlatform, zipArchiveEntry.getPlatform());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionMadeBy() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int versionMadeBy = 123;
        ziparchiveentry.setVersionMadeBy(versionMadeBy);
        Mockito.verify(ziparchiveentry).setVersionMadeBy(versionMadeBy);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        assertEquals(versionMadeBy, ziparchiveentry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionMadeBy_lETX1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setVersionMadeBy(1);
        assertEquals(1, zipArchiveEntry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffset() throws Exception{
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        long expectedLocalHeaderOffset = 10L;
        Mockito.when(zipArchiveEntry.getLocalHeaderOffset()).thenReturn(expectedLocalHeaderOffset);
        // Act
        long actualLocalHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
        // Assert
        Mockito.verify(zipArchiveEntry, Mockito.times(1)).getLocalHeaderOffset();
        assertEquals(expectedLocalHeaderOffset, actualLocalHeaderOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalHeaderOffset_hKmr0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalHeaderOffset1_zLPo1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetLocalHeaderOffset() throws Exception {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        long expectedLocalHeaderOffset = 100L;
        zipArchiveEntry.setLocalHeaderOffset(expectedLocalHeaderOffset);
        Mockito.verify(zipArchiveEntry).setLocalHeaderOffset(expectedLocalHeaderOffset);
        assertEquals(expectedLocalHeaderOffset, zipArchiveEntry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_WWqy0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        long localHeaderOffset = 10;
        zipArchiveEntry.setLocalHeaderOffset(localHeaderOffset);
        assertEquals(localHeaderOffset, zipArchiveEntry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithFile_tmrB3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        long localHeaderOffset = 10;
        zipArchiveEntry.setLocalHeaderOffset(localHeaderOffset);
        assertEquals(localHeaderOffset, zipArchiveEntry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        long externalAttributes = 123L;
        zipArchiveEntry.setExternalAttributes(externalAttributes);
        Mockito.verify(zipArchiveEntry).setExternalAttributes(externalAttributes);
        Mockito.verifyNoMoreInteractions(zipArchiveEntry);
        assertEquals(externalAttributes, zipArchiveEntry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_XOpv0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(123L);
        assertEquals(123L, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes2_ZTdm1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(456L);
        assertEquals(456L, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes3_YyDQ2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(789L);
        assertEquals(789L, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes4_MEqj3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(0L);
        assertEquals(0L, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes5_tGyR4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setExternalAttributes(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_IfjJ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        byte[] bytes = new byte[10];
        zipArchiveEntry.setCentralDirectoryExtra(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNull_PFul4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setCentralDirectoryExtra(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmpty_ZAbN5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        byte[] bytes = new byte[0];
        zipArchiveEntry.setCentralDirectoryExtra(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithSmall_prmy6() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        byte[] bytes = new byte[1];
        zipArchiveEntry.setCentralDirectoryExtra(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLarge_BtcG7() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        byte[] bytes = new byte[100];
        zipArchiveEntry.setCentralDirectoryExtra(bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraNullZipEntry_toGF5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setExtra(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod() {
        entry = new ZipArchiveEntry();
        // Arrange
        int expectedMethod = ZipMethod.UNKNOWN_CODE;
        // Act
        int actualMethod = entry.getMethod();
        // Assert
        assertEquals(expectedMethod, actualMethod);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_ytWO0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    int result = zipArchiveEntry.getMethod();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldNull_mVVJ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipShort type = new ZipShort(new byte[0], 0);
        ZipExtraField result = zipArchiveEntry.getExtraField(type);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldNotFound_DOpd2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipShort type = new ZipShort(new byte[1], 0);
        ZipExtraField result = zipArchiveEntry.getExtraField(type);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldNullType_zHtj3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField result = zipArchiveEntry.getExtraField(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionMadeBy() {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        // Set the expected versionMadeBy value
        Mockito.when(zipArchiveEntry.getVersionMadeBy()).thenReturn(1);
        // Call the getVersionMadeBy method
        int actualVersionMadeBy = zipArchiveEntry.getVersionMadeBy();
        // Assert the result
        Mockito.verify(zipArchiveEntry).getVersionMadeBy();
        assertEquals(1, actualVersionMadeBy);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy2_Aill1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        String expectedName = "expectedName";
        when(ziparchiveentry.getName()).thenReturn(expectedName);
        // Act
        String actualName = ziparchiveentry.getName();
        // Assert
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameNullName_GpVZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDirectory() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        String entryName = "directory";
        when(ziparchiveentry.getName()).thenReturn(entryName);
        // Act
        boolean result = ziparchiveentry.isDirectory();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetTime() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        long millis = 1234567890L;
        when(fileTime.toMillis()).thenReturn(millis);
        // Act
        ziparchiveentry.setTime(fileTime);
        // Assert
        verify(ziparchiveentry).setTime(millis);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRawFlag() throws Exception{
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        int rawFlag = 10;
        ziparchiveentry.setRawFlag(rawFlag);
        Mockito.verify(ziparchiveentry).setRawFlag(rawFlag);
        Mockito.verifyNoMoreInteractions(ziparchiveentry);
        Assertions.assertEquals(rawFlag, ziparchiveentry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag_wIfh0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(1);
        assertEquals(1, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag2_GCcV1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(2);
        assertEquals(2, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag3_GsXg2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(3);
        assertEquals(3, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag4_iRCa3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(4);
        assertEquals(4, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag5_cgLz4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(5);
        assertEquals(5, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag6_FogZ5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(6);
        assertEquals(6, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag7_tyXj6() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(7);
        assertEquals(7, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag8_GPPM7() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(8);
        assertEquals(8, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag9_AwfF8() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(9);
        assertEquals(9, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag10_zbHk9() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(10);
        assertEquals(10, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag11_PZiA10() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(11);
        assertEquals(11, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag12_pGbF11() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(12);
        assertEquals(12, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag13_gQiE12() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(13);
        assertEquals(13, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag14_RsfB13() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(14);
        assertEquals(14, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag15_HuMx14() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(15);
        assertEquals(15, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag16_Pdtt15() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(16);
        assertEquals(16, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag17_Halz16() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(17);
        assertEquals(17, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag18_idLT17() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(18);
        assertEquals(18, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag19_Ttyd18() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setRawFlag(19);
        assertEquals(19, zipArchiveEntry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRawFlag20_qKfX19() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStart() throws Exception{
        diskNumberStart = 10L;
        when(entry.getDiskNumberStart()).thenReturn(diskNumberStart);
        assertEquals(diskNumberStart, entry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart_jYlR0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDiskNumberStart1_xVHr1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsNullParsingBehavior_zfZS2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    ExtraFieldParsingBehavior parsingBehavior = null;
    try {
        zipArchiveEntry.getExtraFields(parsingBehavior);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsNullParsingBehavior_yySj2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ExtraFieldParsingBehavior parsingBehavior = null;
    try {
        zipArchiveEntry.getExtraFields(parsingBehavior);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNull_lWBW1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    byte[] result = entry.getRawName();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraField_dPWq0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        ZipShort type = new ZipShort(new byte[2], 0);
        zipArchiveEntry.removeExtraField(type);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraFieldNull_aMST1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.removeExtraField(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionRequired() throws Exception{
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        int version = 10;
        zipArchiveEntry.setVersionRequired(version);
        Mockito.verify(zipArchiveEntry).setVersionRequired(version);
        Mockito.verifyNoMoreInteractions(zipArchiveEntry);
        assertEquals(version, zipArchiveEntry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequired_jfXu0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionRequired(1);
        assertEquals(1, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequiredWithZero_WHUh1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionRequired(0);
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequiredWithNegative_xhKR2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionRequired(-1);
        assertEquals(-1, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVersionRequiredWithLargeNumber_PnAV3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        zipArchiveEntry.setVersionRequired(100);
        assertEquals(100, zipArchiveEntry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignment() throws Exception {
        zipArchiveEntry = Mockito.mock(ZipArchiveEntry.class);
        int alignment = 16;
        zipArchiveEntry.setAlignment(alignment);
        Mockito.verify(zipArchiveEntry).setAlignment(alignment);
        Mockito.verifyNoMoreInteractions(zipArchiveEntry);
        // Check if alignment is set correctly
        assertEquals(alignment, zipArchiveEntry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignmentValidValue_jCNr0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry();
    zipEntry.setAlignment(16);
    assertEquals(16, zipEntry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignmentInvalidValue_hXCa1() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry();
    try {
        zipEntry.setAlignment(15);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for alignment, must be power of two and no bigger than 65535 but is 15", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignmentValueGreaterThan65535_GDIi2() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry();
    try {
        zipEntry.setAlignment(65536);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid value for alignment, must be power of two and no bigger than 65535 but is 65536", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethodValidInput_fmop0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setMethod(8);
    assertEquals(8, zipArchiveEntry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethodInvalidInput_NIom1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    try {
        zipArchiveEntry.setMethod(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("ZIP compression method can not be negative: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldNull_PVaK0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.addAsFirstExtraField(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraFieldUnparseableExtraFieldData_QZOr1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField ze = new UnparseableExtraFieldData();
    zipArchiveEntry.addAsFirstExtraField(ze);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit() {
        ziparchiveentry = new ZipArchiveEntry();
        Mockito.when(ziparchiveentry.getGeneralPurposeBit()).thenReturn(generalPurposeBit);
        GeneralPurposeBit result = ziparchiveentry.getGeneralPurposeBit();
        Assertions.assertEquals(generalPurposeBit, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit3_LGyZ2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertEquals(generalPurposeBit, generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit4_dXBk3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertEquals(generalPurposeBit, generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDataOffset() throws Exception {
        ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Arrange
        Mockito.when(ziparchiveentry.getDataOffset()).thenReturn(10L);
        // Act
        long actualDataOffset = ziparchiveentry.getDataOffset();
        // Assert
        Mockito.verify(ziparchiveentry, Mockito.times(1)).getDataOffset();
        Assertions.assertEquals(10L, actualDataOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_NNLe0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithEntry_Ngjx1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_EDrl0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithEntry_LOxg1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes_gYBx1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setInternalAttributes(1);
        assertEquals(1, zipArchiveEntry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixMode_ZEZF0_tHij0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setUnixMode(0);
    assertEquals(0, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetCreationTime_iDqg0() throws Exception{
    ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
    FileTime fileTime = Mockito.mock(FileTime.class);
    ziparchiveentry.setCreationTime(fileTime);
    Mockito.verify(ziparchiveentry).setCreationTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeNull_GGeI1_Cdyr0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    assertEquals(zipArchiveEntry, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeInternalAddExtraField_Keha3_jXEd0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(null, null);
    FileTime time = FileTime.fromMillis(1000);
    zipArchiveEntry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_PrivateMethodCalled_MzvT1_HAuU0_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setCreationTime(time);
    boolean result = true; // assuming this method is not defined
    assertTrue(zipArchiveEntry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) == null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_PrivateMethodCalled_MzvT1_HAuU0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setCreationTime(time);
    boolean result = true; // assuming this method is not defined
    assertTrue(zipArchiveEntry.getExtraField(X000A_NTFS.HEADER_ID) == null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_PrivateMethodCalled_MzvT1_HAuU0_3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime time = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setCreationTime(time);
    boolean result = true; // assuming this method is not defined
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraWithEmpty_Mujb2_Ynqd0() throws IOException, ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("path"), "entryName");
    zipArchiveEntry.setExtra(new byte[0]);
    assertEquals(new byte[0], zipArchiveEntry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetDataOffset_rLaw0() throws Exception {
    ZipArchiveEntry ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
    long expectedDataOffset = 10;
    ziparchiveentry.setDataOffset(expectedDataOffset);
    Mockito.verify(ziparchiveentry).setDataOffset(expectedDataOffset);
    Mockito.verifyNoMoreInteractions(ziparchiveentry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeValidSize_AEiI0_jFME0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setSize(1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguousNull_gppX2_ULrS0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    assertNull(zipArchiveEntry.getNameSource());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldFound_DfKv1_liiB0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipShort type = new ZipShort(new byte[1], 0);
    zipArchiveEntry.setExtraFields(new ZipExtraField[] {null});
    ZipExtraField result = zipArchiveEntry.getExtraField(type);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetTime_superZipArchiveEntryReturnsValue_txFK0() throws Exception {
    lastModifiedDateSet = false;
    time = -1;
    ziparchiveentry = new ZipArchiveEntry();
    Mockito.when(superZipArchiveEntry.getTime()).thenReturn((long)2000);
    assertEquals(2000L, ziparchiveentry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_bmgD0_iSoU0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(zipArchiveEntry.getLastModifiedTime(), fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameNotNullName_drhZ1_cZYQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "testName");
    assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetLocalFileDataExtra_tEqv0() throws Exception {
    ZipArchiveEntry ziparchiveentry = new ZipArchiveEntry();
    byte[] result = ziparchiveentry.getLocalFileDataExtra();
    byte[] expected = new byte[0];
    Assertions.assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_HLgc0_GqMP1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory2_vYWR1_xpin1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + ZIP_DIR_SEP);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory4_OlWF3_aLwS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "subDir");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory5_CKVo4_XGUz1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory7_Osmo6_zyGD0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "subDir" + File.separator + "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory8_QNHt7_uMlr0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "subDir" + File.separator + "subSubDir" + File.separator + "subSubSubDir");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory9_OmAN8_gmjH0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "subDir" + File.separator + "subSubDir" + File.separator + "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory11_lpYz10_oIas0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("path"), "entryName" + File.separator + "subDir" + File.separator + "subSubDir" + File.separator + "subSubSubDir" + File.separator + "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixModeUnix_aobD0_ERNt0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new java.io.File("path"), "entryName");
    zipEntry.setExternalAttributes(0x1a2b3c);
    assertEquals(0x1a2b3c & SHORT_MASK, zipEntry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixModeNonUnix_CMxR1_qqdg0() {
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(new File("path"), "entryName");
    assertEquals(0, zipEntry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsInvalidParsingBehavior_gLQA3_prwb0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ExtraFieldParsingBehavior parsingBehavior = null; // No need to initialize it
    try {
        zipArchiveEntry.getExtraFields(parsingBehavior);
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawNameNotNull_bwZo0_xISv1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    byte[] result = entry.getRawName();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_QetS0_TrLv0_1() {
    ZipArchiveEntry original = new ZipArchiveEntry("test");
    ZipArchiveEntry clone = (ZipArchiveEntry) original.clone();
    assertEquals(original.getInternalAttributes(), clone.getInternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_QetS0_TrLv0_2() {
    ZipArchiveEntry original = new ZipArchiveEntry("test");
    ZipArchiveEntry clone = (ZipArchiveEntry) original.clone();
    assertEquals(original.getExternalAttributes(), clone.getExternalAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_QetS0_TrLv0_3() {
    ZipArchiveEntry original = new ZipArchiveEntry("test");
    ZipArchiveEntry clone = (ZipArchiveEntry) original.clone();
    assertEquals(original.getExtraFields(), clone.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_QetS0_TrLv0_4() {
    ZipArchiveEntry original = new ZipArchiveEntry("test");
    ZipArchiveEntry clone = (ZipArchiveEntry) original.clone();
    assertEquals(original.getNameSource(), clone.getNameSource());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_vzDx0_sSMA0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
    org.apache.commons.compress.archivers.zip.ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
    assert extraFields != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsFromFile_rjMa3_mSvX0() {
    File file = new File("test");
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, "test");
    org.apache.commons.compress.archivers.zip.ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
    assert extraFields != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithPath_cOOs3_hpbP1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new java.io.File("test"), "test");
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_sYHA0_pASO0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test"), "test");
    int platform = zipArchiveEntry.getPlatform();
    assertEquals(0, platform);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testsetInternalAttributes_Kxir0() throws Exception{
    ZipArchiveEntry ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
    int expectedInternalAttributes = 10;
    ziparchiveentry.setInternalAttributes(expectedInternalAttributes);
    Mockito.verify(ziparchiveentry, Mockito.times(1)).setInternalAttributes(expectedInternalAttributes);
    Mockito.verifyNoMoreInteractions(ziparchiveentry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_xSbK0_XTTb0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setStreamContiguous(true);
    assertEquals(true, entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousFalse_xUDS1_gvjP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    entry.setStreamContiguous(false);
    assertEquals(false, entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousNullPointer_dUiO3_kRcX0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test"), "test");
    try {
        entry.setNameSource(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired2_FGNM2_KPuk0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getVersionRequired());
    } catch (ZipException e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired3_QLLt3_pdPA1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributes3_EmTg3_rAcC1() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getExternalAttributes());
    } catch (java.util.zip.ZipException e) {
        fail("Unexpected java.util.zip.ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate3_mtqj3_mcTK0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes4_Eddp3_sDtv0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributes5_PEAR4_CTWm1() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        assertEquals(0, zipArchiveEntry.getInternalAttributes());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag4_uKOp3_NxSf1() throws ZipException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
    assertEquals(0, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlag5_oedz4_jsOU1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry("test"));
        assertEquals(0, entry.getRawFlag());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment4_tyVu3_nneL0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getAlignment());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnparseableExtraFieldData4_QfER3_Ciqk0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertNotNull(unparseableExtra);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_YpZP2_Cske0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals("test".hashCode(), entry.hashCode());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset3_BjLS3_tcwV0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getLocalHeaderOffset());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart3_uYQm3_ETZn0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, zipArchiveEntry.getDiskNumberStart());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneralPurposeBit_slXd1_PYOK0() {
    try {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entryName"));
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertEquals(generalPurposeBit, generalPurposeBit);
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffsetWithZipEntry_Ueqt2_rUmH0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getDataOffset());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithZipEntry_teDT2_NtUu0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new java.util.zip.ZipEntry("test"));
        assertEquals(0, entry.getSize());
    } catch (ZipException e) {
        fail("Unexpected ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithZipArchiveEntry_rICv4_jITy0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        assertEquals(0, entry.getSize());
    } catch (Exception e) {
        fail("Exception was thrown");
    }
}
}