/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
@Mock
    private CodeAttribute codeAttribute;
@Mock
    private OperandManager operandManager;
@Mock
    private List<ExceptionTableEntry> exceptionTable;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytesValidInput_Dhje0() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = new int[]{1, 2, 3};
    byteCode.setOperandBytes(operands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytesInvalidLength_Sefe1() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = new int[]{1, 2};
    byteCode.setOperandBytes(operands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytesNullInput_JfOk3() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = null;
    byteCode.setOperandBytes(operands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedMustStartClassPool_QvZG0() {
        ByteCode byteCodeForm = new ByteCode(1);
        assertTrue(byteCodeForm.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedMustStartClassPoolFalse_DOtW1() {
        ByteCode byteCodeForm = new ByteCode(2, new ClassFileEntry[0]);
        assertFalse(byteCodeForm.nestedMustStartClassPool());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_mnNd0() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = new int[] {1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assert byteCode.getByteCodeTargets().equals(byteCodeTargets);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeNoArgByteCode_PNxH0() {
    ByteCode byteCode = ByteCode.getByteCode(0x00);
    assertEquals(byteCode.getOpcode(), 0x00);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeHasArgByteCode_aVHq1() {
    ByteCode byteCode = ByteCode.getByteCode(0x01);
    assertEquals(byteCode.getOpcode(), 0x01);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeInvalidOpcode_PuNa2() {
    ByteCode byteCode = ByteCode.getByteCode(0x10);
    assertEquals(byteCode.getOpcode(), 0x10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRewrite_izPM0() {
        ByteCode byteCode = new ByteCode(0);
        int[] rewrite = new int[] {1, 2, 3};
        byteCode.setRewrite(rewrite);
        assert byteCode.getRewrite() == rewrite;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_fVvC0() {
    ByteCode byteCode = new ByteCode(1);
    int result = byteCode.hashCode();
    assert result == byteCode.objectHashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_NIdM0() {
    ByteCode byteCode = new ByteCode(1);
    String result = byteCode.getName();
    assertEquals("getByteCodeForm().getName()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_eQTG0() {
        ByteCode byteCode = new ByteCode(1);
        int length = byteCode.getLength();
        assert length == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_YwDK0() {
    ByteCode bc1 = new ByteCode(1);
    ByteCode bc2 = bc1;
    boolean result = bc1.equals(bc2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_Sadx1() {
    ByteCode bc1 = new ByteCode(1);
    ByteCode bc2 = new ByteCode(2);
    boolean result = bc1.equals(bc2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_TQhV0() {
        ByteCode byteCode = new ByteCode(1);
        int[] expected = {1, 2, 3};
        int[] actual = byteCode.getNestedPosition(1);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_nGLV0() {
        ByteCode byteCode = new ByteCode(1);
        int[][] actual = byteCode.getNestedPositions();
        int[][] expected = new int[0][];
        assert Arrays.deepEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_vpad0() {
    ByteCode byteCode = new ByteCode(1);
    String result = byteCode.toString();
    assertEquals("ByteCode", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_bejv0() {
        ByteCode byteCode = new ByteCode(1);
        ClassFileEntry[] expected = new ClassFileEntry[0];
        ClassFileEntry[] actual = byteCode.getNestedClassFileEntries();
        assert actual.length == expected.length;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNested_EnyG1() {
        ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
        ClassFileEntry[] expected = new ClassFileEntry[0];
        ClassFileEntry[] actual = byteCode.getNestedClassFileEntries();
        assert actual.length == expected.length;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_iLBe0() {
    ByteCode byteCode = new ByteCode(1);
    int[] result = byteCode.getByteCodeTargets();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeForm_oZQP0() {
        ByteCode byteCode = new ByteCode(1);
        ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
        assert byteCodeForm != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolveWithOneOperand_mlfd0() {
        ByteCode byteCode = new ByteCode(1);
        ClassConstantPool pool = new ClassConstantPool();
        byteCode.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolveWithTwoOperands_LdcZ1() {
        ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
        ClassConstantPool pool = new ClassConstantPool();
        byteCode.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNestedPositions_pXLm0() {
        ByteCode byteCode = new ByteCode(0);
        int[][] expected = {{1, 2}, {3, 4}};
        byteCode.setNestedPositions(expected);
        int[][] actual = byteCode.getNestedPositions();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndex_ijni0() {
        ByteCode byteCode = new ByteCode(1);
        assertEquals(1, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndexNested_VUDK1() {
        ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
        assertEquals(1, byteCode.getByteCodeIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode_klGJ0() {
    ByteCode byteCode = new ByteCode(1);
    int opcode = byteCode.getOpcode();
    assert opcode == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcodeNested_Aqow1() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
    int opcode = byteCode.getOpcode();
    assert opcode == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandSigned2BytesPositiveOperand_ALPR0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandSigned2Bytes(0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandSigned2BytesNegativeOperand_falT1() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperandSigned2Bytes(-1, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_wOJb0() {
    ByteCode byteCode = new ByteCode(1);
    boolean result = byteCode.hasMultipleByteCodes();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeIndex_qmYM0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setByteCodeIndex(10);
    assertEquals(10, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes1_FSQV0_NxSH0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setByteCodeIndex(10);
    assert byteCode.getByteCodeForm().getRewrite()[0] == (10 & 0xFF00) >> 8;
    assert byteCode.getByteCodeForm().getRewrite()[1] == (byte) (10 & 0xFF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes3_NAQy2_RmQk0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    byteCode.setOperand2Bytes(10, 2);
    assert byteCode.getByteCodeForm().getRewrite()[2] == (10 & 0xFF00) >> 8;
    assert byteCode.getByteCodeForm().getRewrite()[3] == (byte)((10 & 0xFF00) >> 8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNested_nNLt0_ARsn0() {
    ByteCode byteCode = new ByteCode(1);
    ClassFileEntry[] nested = new ClassFileEntry[1];
    byteCode.setByteCodeIndex(0);
    assertSame(byteCode, byteCode);
}
}