/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LineNumberTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_oosx0() {
    LineNumberTableAttribute obj1 = new LineNumberTableAttribute(10, new int[]{1}, new int[]{2});
    boolean result = obj1.equals(obj1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_ztRH1() {
    LineNumberTableAttribute obj1 = new LineNumberTableAttribute(10, new int[]{1}, new int[]{2});
    LineNumberTableAttribute obj2 = new LineNumberTableAttribute(10, new int[]{1}, new int[]{2});
    boolean result = obj1.equals(obj2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NwGj0() {
        int lineNumberTableLength = 10;
        int[] startPcs = new int[]{1, 2, 3};
        int[] lineNumbers = new int[]{4, 5, 6};
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
        String expected = "LineNumberTable: 10 lines";
        assertEquals(expected, lineNumberTableAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_PDxp0() {
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(10, new int[]{1}, new int[]{2});
        ClassFileEntry[] expected = new ClassFileEntry[]{lineNumberTableAttribute.getAttributeName()};
        ClassFileEntry[] actual = lineNumberTableAttribute.getNestedClassFileEntries();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_ZleZ0() {
    int lineNumberTableLength = 10;
    int[] startPcs = new int[] {1, 2, 3};
    int[] lineNumbers = new int[] {1, 2, 3};
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
    int[] result = lineNumberTableAttribute.getStartPCs();
    assertArrayEquals(startPcs, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_RHFA0() {
        LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(5, new int[]{1}, new int[]{2});
        int length = lineNumberTableAttribute.getLength();
        assert length == 2 + 4 * 5;
    }
}