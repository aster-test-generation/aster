/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesValidSignature_tBKw0() {
    byte[] signature = new byte[] {31, -117};
    int length = 2;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidLength_WaFQ1() {
    byte[] signature = new byte[] {31, -117};
    int length = 1;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesInvalidSignature_UnhH2() {
    byte[] signature = new byte[] {32, -116};
    int length = 2;
    boolean result = GzipCompressorInputStream.matches(signature, length);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesNullSignature_hPIF3() {
    byte[] signature = null;
    int length = 2;
    try {
        GzipCompressorInputStream.matches(signature, length);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMetaData_TGRh0() throws IOException {
        GzipCompressorInputStream gzipCompressorInputStream = new GzipCompressorInputStream(new java.io.FileInputStream("test"), true);
        GzipParameters metaData = gzipCompressorInputStream.getMetaData();
        assert metaData.getCompressionLevel() == 0;
        assert metaData.getModificationTime() == 0;
        assert metaData.getFileName() == null;
        assert metaData.getFilename() == null;
        assert metaData.getOperatingSystem() == 0;
        assert metaData.getDeflateStrategy() == 0;
        assert metaData.getBufferSize() == 0;
        assert metaData.getComment() == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNormal_LGIT2_aEBY0() throws IOException {
    java.util.zip.GZIPInputStream gzipCompressorInputStream = new java.util.zip.GZIPInputStream(new java.io.ByteArrayInputStream(new byte[] {1, 2, 3}));
    byte[] b = new byte[3];
    int result = gzipCompressorInputStream.read(b, 0, 3);
    assert result == 3;
    assert b[0] == 1;
    assert b[1] == 2;
    assert b[2] == 3;
}
}