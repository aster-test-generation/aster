/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_zsXa0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_qwrC0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        dumpArchiveEntry.setAccessTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_cCtT0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("testName", "testSimpleName");
        assertEquals("testName", dumpArchiveEntry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_FFbN0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        dumpArchiveEntry.setCreationTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_BTnZ0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    boolean result = entry.equals(entry);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_NBtT1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    boolean result = entry.equals(null);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_EjIv2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    boolean result = entry.equals(new Object());
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryFalse_PSWc1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    boolean result = entry.isDirectory();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_VREQ0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date lastModifiedDate = dumpArchiveEntry.getLastModifiedDate();
        assert lastModifiedDate != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_izmJ0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", entry.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffset_PXan0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setOffset(10L);
        assertEquals(10L, dumpArchiveEntry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneration_CIVk0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getGeneration());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_EiFt0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setVolume(1);
        assertEquals(1, dumpArchiveEntry.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSimpleName_diMD0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "oldSimpleName");
        dumpArchiveEntry.setSimpleName("newSimpleName");
        assert dumpArchiveEntry.getSimpleName().equals("newSimpleName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSimpleName_TPnB0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        String simpleName = dumpArchiveEntry.getSimpleName();
        assert "simpleName".equals(simpleName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlink_cnRt0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getNlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode2_xgjB1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdate1_aUKh0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    byte[] buffer = new byte[512];
    entry.update(buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntrySize_YIhY0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        long size = dumpArchiveEntry.getEntrySize();
        assert size == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_zqiA0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_mNfl0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("test", "test");
        dumpArchiveEntry.setName(null);
        assert dumpArchiveEntry.getName() == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameEmpty_LCrw1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("test", "test");
        dumpArchiveEntry.setName("");
        assert dumpArchiveEntry.getName().equals("");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithSlash_jVVI2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("test", "test");
        dumpArchiveEntry.setName("test/");
        assert dumpArchiveEntry.getName().equals("test/");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithoutSlash_ybHL3() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("test", "test");
        dumpArchiveEntry.setName("test");
        assert dumpArchiveEntry.getName().equals("test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithDotSlash_Cwvt4() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("test", "test");
        dumpArchiveEntry.setName("./test");
        assert dumpArchiveEntry.getName().equals("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_sPoN0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setSize(123456L);
        assertEquals(123456L, dumpArchiveEntry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordTrue_vxaP0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        boolean result = dumpArchiveEntry.isSparseRecord(0);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordFalse_EvZj1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        boolean result = dumpArchiveEntry.isSparseRecord(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_PiEu0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        int result = dumpArchiveEntry.getUserId();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_SapQ0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(dumpArchiveEntry.getIno(), dumpArchiveEntry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_yEFP0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setUserId(1);
        assertEquals(1, dumpArchiveEntry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCount_daBq0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId_QnJF0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setGroupId(123);
        assertEquals(123, dumpArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_SurD0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date date = new Date();
        dumpArchiveEntry.setLastModifiedDate(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseInvalidData_PfAo1() {
    byte[] buffer = new byte[200];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseNullData_xKMs2() {
    byte[] buffer = null;
    try {
        DumpArchiveEntry.parse(buffer);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEmptyData_aNhn3() {
    byte[] buffer = new byte[0];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeleted_dZCM0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setDeleted(true);
        boolean isDeleted = dumpArchiveEntry.isDeleted();
        assert isDeleted;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeleted_NeHO1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        dumpArchiveEntry.setDeleted(true);
        boolean isDeleted = dumpArchiveEntry.isDeleted();
        assert isDeleted == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOriginalName_tSbC0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", dumpArchiveEntry.getOriginalName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderHoles_rkfu0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        int result = dumpArchiveEntry.getHeaderHoles();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationTime_Qqvr0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date creationTime = dumpArchiveEntry.getCreationTime();
        assert creationTime != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_JjSv0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_JnGh0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        Date accessTime = dumpArchiveEntry.getAccessTime();
        assert accessTime != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeleted_PZAz0_bCKM1() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setDeleted(true);
    assertTrue(dumpArchiveEntry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_yzKF7_JVTL0() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name1", "simpleName");
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name2", "simpleName");
    boolean result = entry1.equals(entry2);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetType_LvJZ0_THAn1() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setType(DumpArchiveEntry.TYPE.WHITEOUT);
    assertEquals(DumpArchiveEntry.TYPE.WHITEOUT, dumpArchiveEntry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_QqWQ0_qPTU0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(0, dumpArchiveEntry.getAccessTime().getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChrDevTrue_HyEJ0_JlHO0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 0, DumpArchiveEntry.TYPE.CHRDEV);
    boolean result = dumpArchiveEntry.isChrDev();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChrDevFalse_XlGo1_ryFa1() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    boolean result = dumpArchiveEntry.getAccessTime() == null;
    assert(result == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_mIcX0_HpQA0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry.setNlink(5);
    org.junit.Assert.assertEquals(5, dumpArchiveEntry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetType_lsgS0_ddxf0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.WHITEOUT);
    assertEquals(DumpArchiveEntry.TYPE.WHITEOUT, dumpArchiveEntry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetType2_CNDY1_ykXT0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    assertEquals(DumpArchiveEntry.TYPE.UNKNOWN, dumpArchiveEntry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidData_qcVm0_puXQ1() {
    byte[] buffer = new byte[200];
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(DumpArchiveEntry.TYPE.WHITEOUT, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderType_dAVW0_bBqj0() {
    DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
    dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.WHITEOUT);
}
}