/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_gPUe0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFileName_PSqV0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFileName("testFile");
        assertEquals("testFile", gzipParameters.getFileName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTime_gCmi1() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(1234567890L);
        assertEquals(1234567890L, gzipParameters.getModificationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategy_QLpY0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(1);
        assertEquals(1, gzipParameters.getDeflateStrategy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFilename_HseQ0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setFilename("testFile");
        assertEquals("testFile", gzipParameters.getFilename());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFileName_flWv0() {
        GzipParameters gzipParameters = new GzipParameters();
        String result = gzipParameters.getFileName();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFilename_vxUi0() {
        GzipParameters gzipParameters = new GzipParameters();
        String filename = gzipParameters.getFilename();
        assert filename == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateStrategy_TDeW0() {
        GzipParameters gzipParameters = new GzipParameters();
        int expected = 0; // replace with your expected value
        int actual = gzipParameters.getDeflateStrategy();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBufferSize_VxIj0() {
        GzipParameters gzipParameters = new GzipParameters();
        int bufferSize = gzipParameters.getBufferSize();
        assertEquals(0, bufferSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidCompressionLevel_MNmE0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setCompressionLevel(6);
        assertEquals(6, gzipParameters.getCompressionLevel());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetComment_Vplk0() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = gzipParameters.getComment();
        assertEquals("", comment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeValidValue_lBPa0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(1024);
        assertEquals(1024, gzipParameters.getBufferSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetComment_WAha0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setComment("Test Comment");
        assertEquals("Test Comment", gzipParameters.getComment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModificationTime_TmxV0_iDPR0() {
    GzipParameters gzipParameters = new GzipParameters();
    long modificationTime = gzipParameters.getModificationTime();
    org.junit.Assert.assertNull(modificationTime);
}
}