/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFlagsAllDefault_vwDt4() {
        ClassBands classBands = new ClassBands(new Segment());
        long[] result = classBands.getClassFlags();
        for (long flag : result) {
            assert flag == 0;
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerStartP_wYba0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2, 3}, {4, 5, 6}};
        int[][] actual = classBands.getCodeHandlerStartP();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldAttributes_nauS0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
        assertNotNull(fieldAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_wAHS0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_EFUE0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] expected = new IcTuple[][]{};
        IcTuple[][] actual = classBands.getIcLocal();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_CRKZ0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] result = classBands.getCodeMaxNALocals();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCount_Bhhk0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] result = classBands.getCodeHandlerCount();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFieldCount_jsSs0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] expected = new int[0];
        int[] actual = classBands.getClassFieldCount();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_zEMI0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] result = classBands.getMethodDescrInts();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMajor_LTGx0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] result = classBands.getClassVersionMajor();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerEndPO_Mdod0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2}, {3, 4}};
        int[][] actual = classBands.getCodeHandlerEndPO();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHasAttributes_ESTs0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        boolean[] result = classBands.getCodeHasAttributes();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_rZcU0() throws IOException, Pack200Exception {
        ClassBands classBands = new ClassBands(new Segment());
        classBands.read(classBands.getClass().getResourceAsStream("test.class"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_gfHR0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] result = classBands.getFieldDescrInts();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_Mwmr1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] result = classBands.getFieldDescrInts();
        assert result.length > 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassInterfacesInts_oDJm0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2, 3}, {4, 5, 6}};
        int[][] actual = classBands.getClassInterfacesInts();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlagsNull_UgfE0() {
    ClassBands classBands = new ClassBands(new Segment());
    long[][] result = classBands.getMethodFlags();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlagsEmpty_daIi1() {
    ClassBands classBands = new ClassBands(new Segment());
    classBands.getMethodFlags();
    assert true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCatchPO_ooZF0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2, 3}, {4, 5, 6}};
        int[][] actual = classBands.getCodeHandlerCatchPO();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerClassRCN_tHOB0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] expected = {{1, 2}, {3, 4}};
        int[][] actual = classBands.getCodeHandlerClassRCN();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxStack_safT0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] expected = new int[]{}; // replace with your expected result
        int[] actual = classBands.getCodeMaxStack();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_yFbG0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<List<Attribute>> result = classBands.getOrderedCodeAttributes();
    assertEquals(result.getClass(), ArrayList.class);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_yFbG0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<List<Attribute>> result = classBands.getOrderedCodeAttributes();
    assertEquals(result.size(), 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_yFbG0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<List<Attribute>> result = classBands.getOrderedCodeAttributes();
    assertEquals(result.get(0).getClass(), ArrayList.class);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_yFbG0_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<List<Attribute>> result = classBands.getOrderedCodeAttributes();
    assertEquals(result.get(0).size(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_opdd0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] expected = {{"expected1", "expected2"}};
        String[][] actual = classBands.getMethodDescr();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldFlagsDefault_UZHG5() {
        ClassBands classBands = new ClassBands(new Segment());
        long[][] result = classBands.getFieldFlags();
        assertArrayEquals(new long[0][], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassAttributes_kyIX0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        ArrayList<Attribute>[] expected = new ArrayList[1];
        ArrayList<Attribute> expectedAttributes = new ArrayList<>();
        expected[0] = expectedAttributes;
        ArrayList<Attribute>[] actual = classBands.getClassAttributes();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassVersionMinor_Uekz0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] result = classBands.getClassVersionMinor();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_ngpB0_hwEq0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] result = classBands.getRawClassFlags();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_ynHb0_IUWI0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands((Segment)null);
    int[] result = classBands.getClassVersionMinor();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_WFHY0_jXAU0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[0];
    int[] actual = classBands.getClassVersionMinor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsNull_NBdV0_VGmt0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsDefault_znvi1_UmyS0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
    assert result.length == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsSomeDefaultSomeNonDefault_gUJS5_SMvQ0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
    for (int i = 0; i < result.length; i++) {
        if (i == 0) {
            assert result[i] != 0;
        } else {
            assert result[i] == 0;
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_NZeh0_Phgn0() throws IOException, Pack200Exception {
    ClassBands classBands = new ClassBands(new Segment());
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    classBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCallCount_cCet3_RrCi1() throws IOException, Pack200Exception {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBandInt_lNXZ2_KyoL0() throws IOException, Pack200Exception {
    ClassBands classBands = new ClassBands(new Segment());
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    classBands.decodeBandInt("code_headers", in, Codec.BYTE1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlagsNull_qlkh0_DhbH0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
    assertArrayEquals(new int[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlagsSingle_xIlF2_MMFN0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = new int[] {1};
    assertArrayEquals(result, classBands.getClassVersionMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlagsMulti_woqp3_eFnM0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[] result = classBands.getClassVersionMinor();
    assertArrayEquals(new int[]{1, 2}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributes_yFbG0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<List<Attribute>> result = classBands.getOrderedCodeAttributes();
    assertEquals(result.getClass(), ArrayList.class);
    assertEquals(result.size(), 1);
    assertEquals(result.get(0).getClass(), ArrayList.class);
    assertEquals(result.get(0).size(), 0);
}
}