/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_QgyF0() {
    byte[] bytes = new byte[] {0x12, 0x34, 0x56, 0x78};
    long result = ByteUtils.fromLittleEndian(bytes, 0, 4);
    Assertions.assertEquals(0x12345678L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithLessBytes_DSTk1() {
    byte[] bytes = new byte[] {0x12, 0x34};
    long result = ByteUtils.fromLittleEndian(bytes, 0, 2);
    Assertions.assertEquals(0x1234L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_kyiq0() {
        byte[] b = new byte[4];
        ByteUtils.toLittleEndian(b, 0x12345678L, 0, 4);
        byte[] expected = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        assertArrayEquals(expected, b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian2_gEZT1() {
        byte[] b = new byte[4];
        ByteUtils.toLittleEndian(b, 0x87654321L, 0, 4);
        byte[] expected = new byte[] {(byte) 0x21, (byte) 0x43, (byte) 0x65, (byte) 0x87};
        assertArrayEquals(expected, b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian_aHNV0() {
        byte[] bytes = new byte[] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78};
        long result = ByteUtils.fromLittleEndian(bytes);
        assertEquals(0x12345678L, result);
    }
}