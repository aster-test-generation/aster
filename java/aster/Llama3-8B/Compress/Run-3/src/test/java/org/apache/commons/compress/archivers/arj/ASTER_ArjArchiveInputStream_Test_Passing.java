/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesValidSignature_QQKh0() {
        byte[] signature = {(byte) 0x1a, (byte) 0x07};
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesInvalidLength_HRjM1() {
        byte[] signature = {(byte) 0x1a, (byte) 0x07};
        boolean result = ArjArchiveInputStream.matches(signature, 1);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesInvalidMagic1_Fmtu2() {
        byte[] signature = {(byte) 0x1b, (byte) 0x07};
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesInvalidMagic2_SqBb3() {
        byte[] signature = {(byte) 0x1a, (byte) 0x08};
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_vPDg0() throws IOException, ArchiveException {
        InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        arjArchiveInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithCharset_IMWy1() throws IOException, ArchiveException {
        InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        arjArchiveInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveName_NSZl0_OAyU0() throws IOException, ArchiveException {
    InputStream inputStream = new ByteArrayInputStream("".getBytes());
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        String archiveName = arjArchiveInputStream.getArchiveName();
        assertEquals("", archiveName);
    } catch (ArchiveException e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryNull_OAmY0_GopZ0() {
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        try {
            ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
            assert arjArchiveEntry == null;
        } catch (IOException e) {
            fail("Unexpected exception");
        }
    } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryException_oBkm3_NECx0() {
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        arjArchiveInputStream.close();
        assert false;
    } catch (IOException | ArchiveException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryNull_kgUl0_oQaB0() {
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), null);
        try {
            ArjArchiveEntry arjArchiveEntry = arjArchiveInputStream.getNextEntry();
            assertNull(arjArchiveEntry);
        } catch (IOException e) {
            fail("Unexpected exception");
        }
    } catch (ArchiveException e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataTrue_mEhV0_vNMI0() {
    ArjArchiveEntry ae = new ArjArchiveEntry();
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        boolean result = ais.canReadEntryData(ae);
        assert result;
    } catch (org.apache.commons.compress.archivers.ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataFalse_EcGG1_tucK0() {
    ArjArchiveEntry ae = new ArjArchiveEntry();
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        boolean result = ais.canReadEntryData(ae);
        assert !result;
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataNull_lriZ2_keSP0() {
    ArjArchiveEntry ae = null;
    try {
        ArjArchiveInputStream ais = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ais.close();
        ais.canReadEntryData(ae);
        assert false;
    } catch (IOException | ArchiveException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_nFeD0_fNTf0() throws IOException, ArchiveException {
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        int result = arjArchiveInputStream.read(b, 0, 0);
        assert result == 0;
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadNoCurrentLocalFileHeader_QnKp1_TzaM0() throws IOException, ArchiveException {
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[10];
        arjArchiveInputStream.read(b, 0, 10);
        assert false;
    } catch (IOException | ArchiveException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveComment_wqsw0_ZFcj0() throws IOException, ArchiveException {
    InputStream inputStream = new ByteArrayInputStream("comment".getBytes());
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream);
        String comment = arjArchiveInputStream.getArchiveComment();
        assertEquals("comment", comment);
    } catch (ArchiveException e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveCommentWithCharset_PddU1_FCoN0() throws IOException, ArchiveException {
    InputStream inputStream = new ByteArrayInputStream("comment".getBytes());
    try {
        ArjArchiveInputStream arjArchiveInputStream = new ArjArchiveInputStream(inputStream, "UTF-8");
        String comment = arjArchiveInputStream.getArchiveComment();
        assertEquals("comment", comment);
    } catch (ArchiveException e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
}