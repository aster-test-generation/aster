/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_cHOS0() {
        byte[] buf = new byte[8];
        ZipLong.putLong(0x1234567890abcdefL, buf, 0);
        byte[] expected = new byte[] {(byte) 0x0d, (byte) 0x0c, (byte) 0x0b, (byte) 0x0a, (byte) 0x09, (byte) 0x08, (byte) 0x07, (byte) 0x06};
        assertArrayEquals(expected, buf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_ONaF0() {
    ZipLong zipLong1 = new ZipLong(new byte[0]);
    ZipLong zipLong2 = zipLong1;
    boolean result = zipLong1.equals(zipLong2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_wjbI1() {
    ZipLong zipLong1 = new ZipLong(new byte[0]);
    ZipLong zipLong2 = new ZipLong(new byte[0]);
    boolean result = zipLong1.equals(zipLong2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_EWkp2() {
    ZipLong zipLong = new ZipLong(new byte[0]);
    boolean result = zipLong.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_yzhU0() {
        ZipLong zipLong = new ZipLong(new byte[10], 0);
        assertEquals("ZipLong value: ", zipLong.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithIntValue_tQtx1() {
        ZipLong zipLong = new ZipLong(10);
        assertEquals("ZipLong value: 10", zipLong.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongValue_KbNE2() {
        ZipLong zipLong = new ZipLong(10L);
        assertEquals("ZipLong value: 10", zipLong.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_dsTh3() {
        ZipLong zipLong = new ZipLong(new byte[10]);
        assertEquals("ZipLong value: ", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayConstructor_WIFe0() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes);
        assertEquals(zipLong.getValue(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIntConstructor_XkrY1() {
        ZipLong zipLong = new ZipLong(123);
        assertEquals(zipLong.getValue(), 123);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLongConstructor_UjhY2() {
        ZipLong zipLong = new ZipLong(123456789L);
        assertEquals(zipLong.getValue(), 123456789L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArrayAndOffsetConstructor_lryV3() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes, 0);
        assertEquals(zipLong.getValue(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_eIYI0() {
        ZipLong zipLong = new ZipLong(123456789L);
        byte[] bytes = zipLong.getBytes();
        byte[] expectedBytes = ZipLong.getBytes(123456789L);
        assertArrayEquals(expectedBytes, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithIntValue_Ibvr1() {
        ZipLong zipLong = new ZipLong(123456789);
        byte[] bytes = zipLong.getBytes();
        byte[] expectedBytes = ZipLong.getBytes(123456789);
        assertArrayEquals(expectedBytes, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayValue_dunv2() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes);
        byte[] resultBytes = zipLong.getBytes();
        assertArrayEquals(bytes, resultBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayAndOffsetValue_sDsG3() {
        byte[] bytes = new byte[] {1, 2, 3, 4, 5};
        ZipLong zipLong = new ZipLong(bytes, 2);
        byte[] resultBytes = zipLong.getBytes();
        byte[] expectedBytes = new byte[3];
        System.arraycopy(bytes, 2, expectedBytes, 0, 3);
        assertArrayEquals(expectedBytes, resultBytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytes_Zumg0() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes);
    assert result == 0x0102030405L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffset_ghKg1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes, 1);
    assert result == 0x02030405L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesNull_OWMI4() {
    try {
        ZipLong.getValue(null);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffsetNull_kZlr5() {
    try {
        ZipLong.getValue(null, 0);
        assert false;
    } catch (NullPointerException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffsetOutOfRange_fTnu6() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    try {
        ZipLong.getValue(bytes, 5);
        assert false;
    } catch (ArrayIndexOutOfBoundsException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffsetNegative_HuWQ7() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    try {
        ZipLong.getValue(bytes, -1);
        assert false;
    } catch (ArrayIndexOutOfBoundsException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesOffsetZero_ohLv8() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    long result = ZipLong.getValue(bytes, 0);
    assert result == 0x0102030405L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBytesEmpty_HFAu9() {
    byte[] bytes = new byte[0];
    try {
        ZipLong.getValue(bytes);
        assert false;
    } catch (ArrayIndexOutOfBoundsException e) {
        assert true;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithByteArray_vshR0() {
        ZipLong zipLong = new ZipLong(new byte[10], 0);
        int result = zipLong.getIntValue();
        assert result == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithIntValue_MaJb1() {
        ZipLong zipLong = new ZipLong(10);
        int result = zipLong.getIntValue();
        assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithLongValue_QSVc2() {
        ZipLong zipLong = new ZipLong(10L);
        int result = zipLong.getIntValue();
        assert result == 10;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValueWithByteArray_GvPE3() {
        ZipLong zipLong = new ZipLong(new byte[10]);
        int result = zipLong.getIntValue();
        assert result == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithLongValue_MyeY0() {
        ZipLong zipLong = new ZipLong(10L);
        assertEquals(10, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithIntValue_VfPw1() {
        ZipLong zipLong = new ZipLong(10);
        assertEquals(10, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithByteArray_GGXo2() {
        byte[] bytes = new byte[] {1, 2, 3};
        ZipLong zipLong = new ZipLong(bytes);
        assertEquals(1, zipLong.hashCode()); // Assuming the hash code is calculated based on the first byte
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithByteArrayAndOffset_GZpr3() {
        byte[] bytes = new byte[] {1, 2, 3};
        ZipLong zipLong = new ZipLong(bytes, 1);
        assertEquals(2, zipLong.hashCode()); // Assuming the hash code is calculated based on the second byte
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes0_LRqf0() {
    byte[] result = ZipLong.getBytes(0);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_AcmI1() {
    byte[] result = ZipLong.getBytes(1);
    assert Arrays.equals(result, new byte[]{1, 0, 0, 0});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_Miws2() {
    byte[] result = ZipLong.getBytes(2);
    assert Arrays.equals(result, new byte[]{0, 0, 0, 2});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_DCVY3() {
    byte[] result = ZipLong.getBytes(3);
    assert Arrays.equals(result, new byte[]{0, 0, 1, 3});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes4_wwAY4() {
    byte[] result = ZipLong.getBytes(4);
    assert Arrays.equals(result, new byte[]{0, 1, 0, 4});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes5_nVtw5() {
    byte[] result = ZipLong.getBytes(5);
    assert Arrays.equals(result, new byte[]{0, 1, 1, 5});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes6_ZfqG6() {
    byte[] result = ZipLong.getBytes(6);
    assert Arrays.equals(result, new byte[]{0, 1, 2, 6});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes7_Tuwh7() {
    byte[] result = ZipLong.getBytes(7);
    assert Arrays.equals(result, new byte[]{0, 1, 3, 7});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes8_FnKH8() {
    byte[] result = ZipLong.getBytes(8);
    assert Arrays.equals(result, new byte[]{1, 0, 0, 8});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes9_HxcO9() {
    byte[] result = ZipLong.getBytes(9);
    assert Arrays.equals(result, new byte[]{1, 0, 1, 9});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_ePln0() {
        ZipLong zipLong = new ZipLong(new byte[0]);
        byte[] buf = new byte[9];
        zipLong.putLong(0, buf, 0);
        byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_qwGh0() {
        ZipLong zipLong = new ZipLong(new byte[10]);
        Object clone = zipLong.clone();
        assert clone instanceof ZipLong;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneInt_YRaS1() {
        ZipLong zipLong = new ZipLong(10);
        Object clone = zipLong.clone();
        assert clone instanceof ZipLong;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneLong_rBwa2() {
        ZipLong zipLong = new ZipLong(10L);
        Object clone = zipLong.clone();
        assert clone instanceof ZipLong;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EjZK0() {
        byte[] bytes = new byte[4];
        bytes[0] = 0x01;
        bytes[1] = 0x02;
        bytes[2] = 0x03;
        bytes[3] = 0x04;
        long expected = 0x04030201L;
        assertEquals(expected, ZipLong.getValue(bytes, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueInt_WWig2_itNZ0() {
    byte[] bytes = new byte[4];
    bytes[0] = (byte)0x01;
    bytes[1] = (byte)0x02;
    bytes[2] = (byte)0x03;
    bytes[3] = (byte)0x05;
    long result = ZipLong.getValue(bytes, 0);
    assert result == 0x01020305L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLong_rdoM3_eKBF0() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte)0x01;
    bytes[1] = (byte)0x02;
    bytes[2] = (byte)0x03;
    bytes[3] = (byte)0x04;
    bytes[4] = (byte)0x05;
    bytes[5] = (byte)0x06;
    bytes[6] = (byte)0x07;
    bytes[7] = (byte)0x08;
    long result = ZipLong.getValue(bytes, 0);
    assert result == 0x0102030405060708L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong2_mUHS1_FZJl0() {
    ZipLong zipLong = new ZipLong(0);
    byte[] buf = new byte[9];
    zipLong.putLong(0, buf, 0);
    byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
    assertArrayEquals(expected, buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong3_RpmD2_pyUb0() {
    ZipLong zipLong = new ZipLong(0L);
    byte[] buf = new byte[9];
    zipLong.putLong(0L, buf, 0);
    byte[] expected = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
    assertArrayEquals(expected, buf);
}
}