/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveFileSizeHi_oHUt1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_size_hi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchive_modtime_VhXM0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        int expected = 0; // replace with your expected value
        int actual = segmentHeader.getArchive_modtime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFieldFlagsHi_XzSA0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_field_flags_hi();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveFileModtime_VPlR0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_modtime();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveCodeFlagsHi_uWub0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_code_flags_hi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveMethodFlagsHi_fJBg1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_method_flags_hi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_OtTZ0() throws IOException, Pack200Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.pack(System.out);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Float_count_VwQp0_SSjM0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptionsTrue_Hfol0_JeFz1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    boolean result = segmentHeader.have_field_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptionsFalse_NKAe1_YAID0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(false);
    boolean result = segmentHeader.have_field_flags_hi();
    assertFalse(result);
}
}