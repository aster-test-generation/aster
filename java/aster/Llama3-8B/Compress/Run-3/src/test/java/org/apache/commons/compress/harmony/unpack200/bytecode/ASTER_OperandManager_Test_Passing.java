/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocal_sVoA0_FbTK0_1() {
    int[] bcIntRef = new int[]{1};
    int bcIntRefIndex = 0;
    int[] bcCaseCount = new int[]{1};
    int[] bcCaseValue = new int[]{1};
    int[] bcByte = new int[]{1};
    int[] bcShort = new int[]{1};
    int[] bcLocal = new int[]{1};
    int[] bcLabel = new int[]{1};
    int[] bcFloatRef = new int[]{1};
    int[] bcLongRef = new int[]{1};
    int[] bcDoubleRef = new int[]{1};
    int[] bcStringRef = new int[]{1};
    int[] bcClassRef = new int[]{1};
    int[] bcFieldRef = new int[]{1};
    int[] bcMethodRef = new int[]{1};
    int[] bcIMethodRef = new int[]{1};
    int[] bcThisField = new int[]{1};
    int[] bcSuperField = new int[]{1};
    int[] bcThisMethod = new int[]{1};
    int[] bcSuperMethod = new int[]{1};
    int[] bcInitRef = new int[]{1};
    int[] wideByteCodes = new int[]{1};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocal_sVoA0_FbTK0_2() {
    int[] bcIntRef = new int[]{1};
    int bcIntRefIndex = 0;
    int[] bcCaseCount = new int[]{1};
    int[] bcCaseValue = new int[]{1};
    int[] bcByte = new int[]{1};
    int[] bcShort = new int[]{1};
    int[] bcLocal = new int[]{1};
    int[] bcLabel = new int[]{1};
    int[] bcFloatRef = new int[]{1};
    int[] bcLongRef = new int[]{1};
    int[] bcDoubleRef = new int[]{1};
    int[] bcStringRef = new int[]{1};
    int[] bcClassRef = new int[]{1};
    int[] bcFieldRef = new int[]{1};
    int[] bcMethodRef = new int[]{1};
    int[] bcIMethodRef = new int[]{1};
    int[] bcThisField = new int[]{1};
    int[] bcSuperField = new int[]{1};
    int[] bcThisMethod = new int[]{1};
    int[] bcSuperMethod = new int[]{1};
    int[] bcInitRef = new int[]{1};
    int[] wideByteCodes = new int[]{1};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assertEquals(1, bcIntRefIndex);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperFieldRef_TzdN0_EqTB0() {
    int[] bcIntRef = new int[]{1};
    int bcIntRefIndex = 0;
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextIntRef();
    assertEquals(1, result);
}
}