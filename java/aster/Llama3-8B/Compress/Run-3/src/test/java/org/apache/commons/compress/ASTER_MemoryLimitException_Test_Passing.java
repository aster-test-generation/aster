/**
 * Generated by Aster
 */
package org.apache.commons.compress;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MemoryLimitException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryLimitInKb_MpcT0() {
    MemoryLimitException memoryLimitException = new MemoryLimitException(10, 100);
    int result = memoryLimitException.getMemoryLimitInKb();
    assertEquals(100, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryNeededInKb_Kflv0() {
    MemoryLimitException memoryLimitException = new MemoryLimitException(100, 200);
    long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
    assertEquals(100, memoryNeededInKb);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryNeededInKbWithException_AMhq1() {
    Exception e = new Exception("Test Exception");
    MemoryLimitException memoryLimitException = new MemoryLimitException(100, 200, e);
    long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
    assertEquals(100, memoryNeededInKb);
}
}