/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.java.util.jar.Pack200;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_UhJC0() throws IOException {
        File from = new File("from");
        File to = new File("to");
        Pack200Utils.normalize(from, to);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeNull_zCSq1() throws IOException {
        File from = null;
        File to = new File("to");
        Pack200Utils.normalize(from, to);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeNullTo_DAEa2() throws IOException {
        File from = new File("from");
        File to = null;
        Pack200Utils.normalize(from, to);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeNullFromAndTo_iXCE3() throws IOException {
        File from = null;
        File to = null;
        Pack200Utils.normalize(from, to);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithProps_yATR0() throws IOException {
    Map<String, String> props = new HashMap<>();
    props.put(Pack200.Packer.SEGMENT_LIMIT, "-1");
   Pack200Utils.normalize(new File("from"), new File("to"), props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithoutProps_DcVU1() throws IOException {
   Pack200Utils.normalize(new File("from"), new File("to"), null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullFrom_fnqm2() throws IOException {
    try {
       Pack200Utils.normalize(null, new File("to"), new HashMap<>());
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullTo_JalG3() throws IOException {
    try {
       Pack200Utils.normalize(new File("from"), null, new HashMap<>());
        fail("Expected IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_kOnx0() throws IOException {
        File jar = new File("path_to_your_jar");
        Map<String, String> props = new HashMap<>();
        props.put("key", "value");
        Pack200Utils.normalize(jar, props);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_rrND0() throws IOException {
        File jar = new File("path_to_your_jar_file");
        Pack200Utils.normalize(jar);
    }
}