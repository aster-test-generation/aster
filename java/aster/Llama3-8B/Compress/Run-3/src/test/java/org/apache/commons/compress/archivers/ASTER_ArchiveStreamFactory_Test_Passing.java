/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
@Mock
    private OutputStream out;
@Mock
    private ArchiveStreamProvider archiveStreamProvider;
@Mock
    private InputStream in;
private ArchiveStreamFactory archivestreamfactory;
@Mock
    private ArArchiveOutputStream arArchiveOutputStream;
@Mock
    private ZipArchiveOutputStream zipArchiveOutputStream;
@Mock
    private TarArchiveOutputStream tarArchiveOutputStream;
@Mock
    private JarArchiveOutputStream jarArchiveOutputStream;
@Mock
    private CpioArchiveOutputStream cpioArchiveOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateArchiveInputStream_SEVEN_Z() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
                .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            archivestreamfactory.createArchiveInputStream("SEVEN_Z", in, null);
            fail("Expected StreamingNotSupportedException");
        } catch (StreamingNotSupportedException e) {
            assertEquals("SEVEN_Z", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateArchiveInputStream_UnknownArchiver() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
                .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
        InputStream in = new ByteArrayInputStream(new byte[0]);
        try {
            archivestreamfactory.createArchiveInputStream("Unknown", in, null);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertEquals("Archiver: Unknown not found.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNames_ioVf0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        Set<String> expected = Sets.newHashSet("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z");
        assert archiveNames.equals(expected);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamArchiveNamesWithEncoding_UDQN1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        Set<String> expected = Sets.newHashSet("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z");
        assert archiveNames.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_SHaA0() {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertEquals(0, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_suRP0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> actual = factory.getOutputStreamArchiveNames();
        assertEquals(new HashSet<>(Arrays.asList("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z")), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNamesWithEncoding_HAjc1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        Set<String> actual = factory.getOutputStreamArchiveNames();
        assertEquals(new HashSet<>(Arrays.asList("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z")), actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding_XLiJ0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithNull_zsjG1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding(null);
        assertEquals(null, factory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithEmptyString_ADAO2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("");
        assertEquals("", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInputStreamWithoutSignature_bLnq10() throws IOException {
        InputStream in = new ByteArrayInputStream(new byte[] {0x00, 0x00, 0x00, 0x00});
        try {
            ArchiveStreamFactory.detect(in);
            fail("Expected ArchiveException");
        } catch (ArchiveException e) {
            assertEquals("No Archiver found for the stream signature", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_APdI0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(Collections.emptySortedMap(), providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncoding_pHAK1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(Collections.emptySortedMap(), providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncoding_Vdeh0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        String result = factory.getEntryEncoding();
        assertEquals("UTF-8", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryEncodingDefault_boNI1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        String result = factory.getEntryEncoding();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_NEux0() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        System.out.println(ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_raoQ1() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assert result != null;
        System.out.println(ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateArchiveInputStream_AR_KUBv0() throws Exception {
    ArchiveStreamFactory archivestreamfactory = new ArchiveStreamFactory();
    when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
            .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveStreamProvider result = archivestreamfactory.createArchiveInputStream("AR", in, null);
    assertEquals(ArArchiveInputStream.class, result.createArchiveInputStream("AR", in, null).getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateArchiveInputStream_ARj_DHTq0() throws Exception {
    ArchiveStreamFactory archivestreamfactory = new ArchiveStreamFactory();
    when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
            .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveStreamProvider result = archivestreamfactory.createArchiveInputStream("ARJ", in, "UTF-8");
    assertEquals(ArchiveStreamProvider.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateArchiveInputStream_TAR_tpTc0() throws Exception {
    ArchiveStreamFactory archivestreamfactory = new ArchiveStreamFactory();
    when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
            .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveStreamProvider result = archivestreamfactory.createArchiveInputStream("TAR", in, null);
    assertEquals(ArchiveStreamProvider.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testcreateArchiveInputStream_JAR_amOL0() throws Exception {
    ArchiveStreamFactory archivestreamfactory = new ArchiveStreamFactory();
    when(archiveStreamProvider.createArchiveInputStream(anyString(), any(InputStream.class), anyString()))
            .thenReturn(new ArArchiveInputStream(new ByteArrayInputStream(new byte[0])));
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArchiveStreamProvider result = archivestreamfactory.createArchiveInputStream("JAR", in, null);
    assertEquals(ArchiveStreamProvider.class, result.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_VVvU0_IEYq1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(new TreeMap<>(providers), new TreeMap<>());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersWithEncoding_GcwV1_FChf0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(new TreeMap<>(Collections.EMPTY_MAP), providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_AR_NullOutputStream_XcfX6_ohNA0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        factory.createArchiveOutputStream("AR", null, "UTF-8");
        fail("Expected org.apache.commons.compress.archivers.ArchiveException");
    } catch (org.apache.commons.compress.archivers.ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_ZIP_NullOutputStream_EZQN7_iKin0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    try {
        factory.createArchiveOutputStream("ZIP", null, "UTF-8");
        fail("Expected org.apache.commons.compress.archivers.ArchiveException");
    } catch (org.apache.commons.compress.archivers.ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveInputStream_VWJo0_iolO0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x03, 0x04});
    try {
        assertEquals("ZIP", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJarArchiveInputStream_wHob1_FHBw0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x50, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("JAR", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArArchiveInputStream_GOrW2_czHQ0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x21, 0x61, 0x72, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("AR", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        fail("Should not throw an ArchiveException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpioArchiveInputStream_lyKt3_fbJB0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x73, 0x74, 0x61, 0x72, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("CPIO", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArjArchiveInputStream_DPlL4_DSqN0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x61, 0x72, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("ARJ", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSevenZFile_ADiU5_iELp0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x37, 0x7a, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDumpArchiveInputStream_ZYMh6_ZwOi0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x44, 0x75, 0x6d, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("DUMP", ArchiveStreamFactory.detect(in));
    } catch (ArchiveException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveInputStream_JdPc7_Qigl0() throws IOException, ArchiveException {
    InputStream in = new ByteArrayInputStream(new byte[] {0x74, 0x61, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
    try {
        assertEquals("TAR", ArchiveStreamFactory.detect(in));
    } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullInputStream_OGsr8_KPkD0() {
    try {
        ArchiveStreamFactory.detect(null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Stream must not be null.", e.getMessage());
    } catch (Exception e) {
        fail("Expected IllegalArgumentException, but got " + e.getMessage());
    }
}
}