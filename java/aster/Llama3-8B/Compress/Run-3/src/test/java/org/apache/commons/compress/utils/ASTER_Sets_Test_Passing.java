/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetEmpty_kXva0() {
    HashSet<String> set = Sets.newHashSet();
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleElement_vXHn1_1() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetSingleElement_vXHn1_2() {
    HashSet<String> set = Sets.newHashSet("Hello");
    assertEquals("Hello", set.iterator().next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_InCc2_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_InCc2_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_InCc2_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleElements_InCc2_4() {
    HashSet<String> set = Sets.newHashSet("Hello", "World", "Java");
    assertTrue(set.contains("Java"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_HCul3_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_HCul3_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetDuplicateElements_HCul3_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElement_XwJH4_1() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElement_XwJH4_2() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElement_XwJH4_3() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertFalse(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetNullElement_XwJH4_4() {
    HashSet<String> set = Sets.newHashSet("Hello", null, "World");
    assertTrue(set.contains("World"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleDuplicateElements_Nrdi5_1() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "Hello", "World", "World");
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleDuplicateElements_Nrdi5_2() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "Hello", "World", "World");
    assertTrue(set.contains("Hello"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetMultipleDuplicateElements_Nrdi5_3() {
    HashSet<String> set = Sets.newHashSet("Hello", "Hello", "Hello", "World", "World");
    assertTrue(set.contains("World"));}
}