/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpClass_ytLe0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"expected1", "expected2"};
        String[] actual = cpBands.getCpClass();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_KXhP0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("test");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPClassValueNull_pnBo0() {
        CpBands cpBands = new CpBands(new Segment());
        CPClass result = cpBands.cpClassValue(null);
        Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPClassValueNonExisting_Jjji2() {
        CpBands cpBands = new CpBands(new Segment());
        CPClass result = cpBands.cpClassValue("test");
        Assertions.assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullString_rsap0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value(null, true);
        Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyString_brXr1() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("", true);
        Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExistingString_ULNB2() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("test", true);
        Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonExistingString_XJYj3() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("nonExisting", true);
        Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExistingStringWithoutSearch_Frke4() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("test", false);
        Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonExistingStringWithoutSearch_hTQD5() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value("nonExisting", false);
        Assertions.assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpIMethodClass_gzlZ0() {
        CpBands cpBands = new CpBands(new Segment());
        String[] expected = {"method1", "method2"};
        String[] actual = cpBands.getCpIMethodClass();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_NKNG0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] expected = new int[0];
        int[] actual = cpBands.getCpInt();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpLongValue_FeUq0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 1;
        CPLong result = cpBands.cpLongValue(index);
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_TCFe0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpClass = new String[10];
        int[] cpClassInts = new int[10];
        CpBands cpBandsObject = new CpBands(segment);
        CPClass result = cpBandsObject.cpClassValue(0);
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValueNull_UyUE1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpClass = new String[10];
        int[] cpClassInts = new int[10];
        CpBands cpBandsObject = new CpBands(segment);
        CPClass result = cpBandsObject.cpClassValue(10);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPFloatValue_NWna0() {
        CpBands cpBands = new CpBands(new Segment());
        CPFloat result = cpBands.cpFloatValue(0);
        assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPFloatValueAlreadyExist_hpGG1() {
        CpBands cpBands = new CpBands(new Segment());
        cpBands.cpFloatValue(0);
        CPFloat result = cpBands.cpFloatValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue_dlnd0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpSignatureValue(0);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueNull_oojC1() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpSignatureValue(1);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueString_XwZx2() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpSignatureValue(2);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_PsLT0() {
        CpBands cpBands = new CpBands(new Segment());
        int[] expected = new int[] {1, 2, 3};
        int[] actual = cpBands.getCpDescriptorTypeInts();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_ZoFq0() {
        CpBands cpBands = new CpBands(new Segment());
        long[] result = cpBands.getCpLong();
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpMethodValue_RwsO0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPMethodRef result = cpBands.cpMethodValue(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpMethodValue2_VKux1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPMethodRef result = cpBands.cpMethodValue(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpIMethodValue_KlkM0() {
        CpBands cpBands = new CpBands(new Segment());
        CPInterfaceMethodRef result = cpBands.cpIMethodValue(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_IiDJ0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"expected1", "expected2"};
        String[] actual = cpBands.getCpSignature();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPStringValue_HCCN0() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpString = new String[]{"test1", "test2"};
        int[] cpStringInts = new int[]{1, 2};
        CPString[] stringsToCPStrings = new CPString[2];
        CpBands cpBandsObject = new CpBands(new Segment());
        CPString result = cpBandsObject.cpStringValue(0);
        assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPStringValueNull_wiPc1() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpString = new String[]{"test1"};
        int[] cpStringInts = new int[]{1};
        CPString[] stringsToCPStrings = new CPString[1];
        CpBands cpBandsObject = new CpBands(new Segment());
        CPString result = cpBandsObject.cpStringValue(1);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPNameAndTypeValue_Qodc0() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "testDescriptor";
        int index = 0;
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(index);
        assertEquals("testCPNameAndType", cpNameAndType.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPNameAndTypeValueNull_gQVl1() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = null;
        int index = 0;
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(index);
        assertNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCPNameAndTypeValueNullDescriptor_BMHy0() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue(null);
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCPNameAndTypeValueValidDescriptor_zulR1() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue("Valid/Descriptor");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCPNameAndTypeValueInvalidDescriptor_xAfH2() {
    CpBands cpBands = new CpBands(new Segment());
    CPNameAndType result = cpBands.cpNameAndTypeValue("Invalid:Descriptor");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueNullString_EKDP0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value(0);
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueExistingString_CQyd1() {
        CpBands cpBands = new CpBands(new Segment());
        cpBands.cpUTF8Value(0);
        CPUTF8 result = cpBands.cpUTF8Value(0);
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8ValueNewString_OFRV2() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 result = cpBands.cpUTF8Value(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_Znwo0_gHLA0() {
    CpBands cpBands = new CpBands(new Segment());
    int[] result = cpBands.getCpDescriptorNameInts();
    assert result != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValueNull_SOSM1_RTkR0() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 0;
    CPUTF8 result = cpBands.cpUTF8Value(index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_nKau0_DxoN1() throws IOException, Pack200Exception {
    CpBands cpBands = new CpBands(new Segment());
    InputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    cpBands.read(in);
}
}