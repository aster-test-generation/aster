/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
@Mock
    private SegmentConstantPoolArrayCache arrayCache;
    private static final int CP_FIELD = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_xAzg0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    ConstantPoolEntry result = segmentConstantPool.getClassPoolEntry("test");
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntryFound_bZTW1() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    ConstantPoolEntry result = segmentConstantPool.getClassPoolEntry("test");
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex1_WpPa0() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"d", "e", "f"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "e";
        int desiredIndex = 1;
        assertEquals(1, segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex2_sxKe1() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"d", "e", "f"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "g";
        int desiredIndex = 1;
        assertEquals(-1, segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex3_WRzn2() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"d", "e", "f"};
        String primaryCompareString = "a";
        String secondaryCompareRegex = "e";
        int desiredIndex = 2;
        assertEquals(1, segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex4_KzMQ3() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"d", "e", "f"};
        String primaryCompareString = "b";
        String secondaryCompareRegex = "e";
        int desiredIndex = 1;
        assertEquals(1, segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex5_ZvvW4() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] primaryArray = new String[]{"a", "b", "c"};
        String[] secondaryArray = new String[]{"d", "e", "f"};
        String primaryCompareString = "c";
        String secondaryCompareRegex = "e";
        int desiredIndex = 2;
        assertEquals(2, segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_RnwO0() {
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] nameArray = {"test1", "test2", "test3"};
        String compareString = "test2";
        int desiredIndex = 1;
        int result = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(desiredIndex, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitMethodPoolEntryInvalidInput_SVfi1() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        segmentConstantPool.getInitMethodPoolEntry(1, 1, "desiredClassName");
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Nothing but CP_METHOD can be an <init>", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesUnknownRegex_LMDP0() {
    CpBands cpBands = new CpBands(new Segment());
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(cpBands);
    String regexString = "unknown regex";
    String compareString = "any string";
    try {
        segmentConstantPool.getClassSpecificPoolEntry(CP_FIELD, 0, regexString);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Don't know how to handle CP_FIELD", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueUTF8_flzv0_iFAq0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        ConstantPoolEntry result = segmentConstantPool.getClassSpecificPoolEntry(SegmentConstantPool.UTF_8, 0, "desiredClassName");
        assert result != null;
    } catch (Pack200Exception e) {
        assert false : "Pack200Exception was thrown";
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueCP_INT_YKXX1_HBkG0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        ConstantPoolEntry result = segmentConstantPool.getClassSpecificPoolEntry(SegmentConstantPool.CP_INT, 1, "desiredClassName");
        assert result != null;
    } catch (Pack200Exception e) {
        assert false : "Pack200Exception should not be thrown";
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueCP_LONG_bixx2_fFiF0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        ConstantPoolEntry result = segmentConstantPool.getClassSpecificPoolEntry(SegmentConstantPool.CP_LONG, 2L, "desiredClassName");
        assert result != null;
    } catch (Pack200Exception e) {
        assert false;
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSpecificPoolEntry_aVGJ0_DLzs0() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        ConstantPoolEntry result = segmentConstantPool.getClassSpecificPoolEntry(CP_FIELD, 0, "className");
        assertNotNull(result);
    } catch (Pack200Exception e) {
        fail("Expected no exception but got " + e.getMessage());
    }
}
}