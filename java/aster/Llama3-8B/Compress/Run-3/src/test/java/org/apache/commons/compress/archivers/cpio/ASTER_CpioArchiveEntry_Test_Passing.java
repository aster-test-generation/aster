/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice1_qNON0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x4200);
    boolean result = entry.isBlockDevice();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice2_nHcl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x4201);
    boolean result = entry.isBlockDevice();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_BxpM0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
    long result = cpioArchiveEntry.getChksum();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksumOldFormat_uANF2() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
    try {
        cpioArchiveEntry.getChksum();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime_sRWq0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime3_JkUw2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime4_jzKA3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime5_OPfw4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(entry.getTime(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_noid0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(123);
        assertEquals(123, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID2_MzGo1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(456);
        assertEquals(456, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID3_lTdM2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(789);
        assertEquals(789, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID4_HwBm3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(0);
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID5_iYsu4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(-1);
        assertEquals(-1, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID6_ZHkc5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(123456789);
        assertEquals(123456789, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID7_wShf6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(-123456789);
        assertEquals(-123456789, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID9_lxgK8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(1234567890);
        assertEquals(1234567890, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID10_LCnW9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setGID(-1234567890);
        assertEquals(-1234567890, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID17_LfiD16() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary_rlXX0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary2_NtiU1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary3_iwIg2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary6_rEdT5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary7_TbbH6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary8_efmk7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary9_AKpb8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFormatAndName_DUYX0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testName", 0);
        assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFormatAndFile_AcgT2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("testFile"), "testName");
        assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithStringName_qCdU3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("testName");
        assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork1_Mgks0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.isNetwork();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork2_DIpt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x8000);
    boolean result = entry.isNetwork();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_FaqC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        entry.setInode(123L);
        assertEquals(123L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode2_aWpl1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(456L);
        assertEquals(456L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode3_XVrs2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        entry.setInode(789L);
        assertEquals(789L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode4_sMoC3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        entry.setInode(901L);
        assertEquals(901L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode6_vxaJ5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(567L);
        assertEquals(567L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode7_fmAp6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(890L);
        assertEquals(890L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode8_fITh7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(111L);
        assertEquals(111L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode9_RTdv8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(222L);
        assertEquals(222L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode10_UhUR9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(333L);
        assertEquals(333L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode11_iKPu10() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(444L);
        assertEquals(444L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode12_CPNo11() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(555L);
        assertEquals(555L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode13_WnUW12() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(666L);
        assertEquals(666L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode14_XNcP13() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(777L);
        assertEquals(777L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode15_OnbK14() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(888L);
        assertEquals(888L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode16_HIsO15() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123L);
        entry.setInode(999L);
        assertEquals(999L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMaj_cdjl0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajNewFormat_HuIu1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 100L);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajFile_MWrP3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajString_THNT4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajShort_OHIh5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMajLong_ECdc6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 100L);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMaj_YOHd0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        cpioArchiveEntry.setRemoteDeviceMaj(123);
        assertEquals(123, cpioArchiveEntry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_NOlC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.equals(entry);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_IPPI1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_tBti2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry.equals(new Object());
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameName_QvVp3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "test", 0);
    boolean result = entry1.equals(entry2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentName_oHuJ4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "different", 0);
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameNameNull_DHME5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "test", 0);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, null, 0);
    boolean result = entry1.equals(entry2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_NFpz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x4000);
    boolean result = entry.isDirectory();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNotDirectory_HcoT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) 0x8000);
    boolean result = entry.isDirectory();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMin_mtuW1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinNewFormat_hlpD2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 123456L);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinNoFormat_spWh3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinString_lJKi6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 123456L);
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceMinFileInput_PLcO7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals(0, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_LIhM0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1000);
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate3_hIdm2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate4_ymOy3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        Date lastModifiedDate = entry.getLastModifiedDate();
        assert lastModifiedDate != null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkTrue_lOes0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0120000));
    boolean result = entry.isSymbolicLink();
    assert(result == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLinkFalse_jUZU1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (1000000));
    boolean result = entry.isSymbolicLink();
    assert(result == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDevice_Etii0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRemoteDeviceFile_hPve4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals(0, cpioArchiveEntry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID_MklA0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID2_fzok1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID3_rOxS2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID4_rKJc3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(entry.getUID(), entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMaj_JYms0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMajNewFormat_AsUs1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMajNewFormatFile2_XatR5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "test");
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMajNewFormatString_zAjg6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat_wOqc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat2_tfzg1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 123L);
        assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_CkRi2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat5_xsDk4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat6_rCQq5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat7_DuZF6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 123L);
        assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat8_RYPN7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_RnIJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        entry.setChksum(123456789L);
        assertEquals(123456789L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode1_dCfO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode2_hUyt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "CPIO_TRAILER", 0);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode3_adfB2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_PWWv0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinNewFormat_Uyaz1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 123456L);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinNewFormatString_SZji4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name");
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinNewFormatFile_Ptsz6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinString_BFKj7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinString2_YrcZ8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 123456L);
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMinFile_kiwn9() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals(0, cpioArchiveEntry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNullName_HhAQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountNonNullName_ITiC1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getHeaderPadCount(Charset.forName("UTF-8")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe1_zVEC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1000);
    boolean result = entry.isPipe();
    assert result == true;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe2_BGaT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) 0x1001);
    boolean result = entry.isPipe();
    assert result == false;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMin_kuTA0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinNewFormat_KIdz1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "test", 100L);
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinNewFormatFile_HRza4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinNewFormatString_FDWm6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "test");
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinString_eZkF8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test");
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinString2_qPFZ9() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("test", 100L);
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinFile_ixsp10() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("test"), "test");
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_JZfB0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFormatAndName_OluR1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024L);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameOnly_npsh2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithPathAndEntryName_dSiu3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test", LinkOption.NOFOLLOW_LINKS);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithNameAndSize_pkbm5() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 1024L);
        assertEquals(0, entry.getHeaderSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSizeWithFileAndEntryName_xjtW6() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
        assertEquals(0, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_YGfv0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("newTest");
        assertEquals("newTest", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameNull_fYOG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName(null);
        assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameEmpty_KlzW2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("");
        assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameSame_EnIA3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setName("test");
        assertEquals("test", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile1_RpAY0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile4_RDLn3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode((short) 0);
        assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeInvalidSize_nnFe1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    try {
        entry.setSize(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size <(-1)", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_xwnX0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(123);
        assertEquals(123, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceOldFormat_oWqw1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 123);
        entry.setDevice(456);
        assertEquals(456, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceFile_Pyom3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "entry");
        entry.setDevice(901);
        assertEquals(901, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketFalse_czZP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) (0x1FF));
    boolean result = entry.isSocket();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_YfJw0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode2_qRBI1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode3_ohqH2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pXTF0() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_dhEv1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test", 10L);
        assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount1_fiRL0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_sfNf1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 8);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_JWAB2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 8);
        assertEquals(8, cpioArchiveEntry.getHeaderPadCount(16));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount4_FSvX3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 8);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(8));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_xOQR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_vwoT1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_OSgx2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount4_XmVB3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
        assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDevice_IOII0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        cpioArchiveEntry.setRemoteDevice(1);
        assertEquals(1, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithOldFormat_uZTb1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "test", 10);
        cpioArchiveEntry.setRemoteDevice(1);
        assertEquals(1, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithNullFormat_NxvF2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(null);
        try {
            cpioArchiveEntry.setRemoteDevice(1);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj_mZuJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajNewFormat_PpBL1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 1L);
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajFile_vYXh3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajString_cMYu4() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test");
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajShort_RUaq5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID_peYC0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(123);
        assertEquals(123, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID2_WmFW1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(456);
        assertEquals(456, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID3_tibc2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(789);
        assertEquals(789, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID4_snRW3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(0);
        assertEquals(0, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID5_UDQH4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(-123);
        assertEquals(-123, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID6_Irap5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(123456);
        assertEquals(123456, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID7_kGxJ6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(-789012);
        assertEquals(-789012, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID8_mXJH7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(987654);
        assertEquals(987654, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID9_aHAA8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(111111);
        assertEquals(111111, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID10_xEom9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(222222);
        assertEquals(222222, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID11_iyqZ10() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(333333);
        assertEquals(333333, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID12_kdqB11() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(444444);
        assertEquals(444444, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID13_tCkD12() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(555555);
        assertEquals(555555, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID14_aVaN13() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(666666);
        assertEquals(666666, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID15_pBLl14() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(777777);
        assertEquals(777777, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID16_KqBc15() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(888888);
        assertEquals(888888, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUID17_AVXj16() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setUID(999999);
        assertEquals(999999, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_KSFv0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        entry.setMode(0x40000);
        assertEquals(0x40000, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeUnknownMode_dlRn1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0L);
        try {
            entry.setMode(0x12345678);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_Heyx0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID3_dFzv2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID4_OhuJ3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID5_WLoG4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 12345L);
        assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize1_tUqt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1024L);
        assertEquals(1024L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_TqTP1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 1024L);
        assertEquals(1024L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize3_DIsk2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize4_mcBn3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("path"), "name");
        assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_IzCp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setNumberOfLinks(1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_0_ZsNn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_1_RRlY1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_2_ntLI2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 2);
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMin_vDuV0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1);
        cpioArchiveEntry.setRemoteDeviceMin(123L);
        assertEquals(123L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat_yEkE1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 123L);
        cpioArchiveEntry.setRemoteDeviceMin(456L);
        assertEquals(456L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat2_YkeO2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name");
        cpioArchiveEntry.setRemoteDeviceMin(789L);
        assertEquals(789L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat3_YaGq3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        cpioArchiveEntry.setRemoteDeviceMin(901L);
        assertEquals(901L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat6_ZIsv6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 123L);
        cpioArchiveEntry.setRemoteDeviceMin(113L);
        assertEquals(113L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat8_BpDA8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        cpioArchiveEntry.setRemoteDeviceMin(115L);
        assertEquals(115L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat9_hNRv9() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 123L);
        cpioArchiveEntry.setRemoteDeviceMin(116L);
        assertEquals(116L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinNewFormat12_Emqi12() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name", 123L);
        cpioArchiveEntry.setRemoteDeviceMin(119L);
        assertEquals(119L, cpioArchiveEntry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID11_xrVm10_egNN0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    assertEquals(12345678901L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID13_JSrw12_eJEs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setGID(1234567);
    assertEquals(1234567, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID14_haqP13_Wxqz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setGID(0xdeadbeefL);
    assertEquals(0xdeadbeefL, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID15_qUtx14_lRYS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setGID(12345L);
    assertEquals(12345L, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_xQiQ15_MzrE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setGID(32767);
    assertEquals(32767, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceNewFormat_Mkxo2_Bpfj0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 3);
    try {
        cpioArchiveEntry.setRemoteDeviceMin(1);
        cpioArchiveEntry.getRemoteDevice();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksumNewFormat_qyYN1_bTED0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 2, "name", 100L);
    cpioArchiveEntry.setRemoteDeviceMin(0);
    long result = cpioArchiveEntry.getChksum();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary4_uGqJ3_NOPY0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0);
    assertEquals(0, cpioArchiveEntry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime9_sHyq8_UVso0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(1);
    assertEquals(1, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime10_trBO9_tYoG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(0);
    assertEquals(0, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevicePath_KUBy3_UhVo0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "entryName");
    assertEquals(0, cpioArchiveEntry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMajNewFormatString3_zsFd8_BIKr1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_DZvQ0_AskV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    long device = entry.getDevice();
    org.junit.Assert.assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceOldFormat_UQFv1_vDMU1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1024);
    long device = entry.getDevice();
    org.junit.Assert.assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceNullName_mZwa3_FeIH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, 1024);
    try {
        entry.getDevice();
        org.junit.Assert.fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        org.junit.Assert.assertTrue(e != null);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceNullPath_rnKz4_qnZn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    try {
        entry.getDevice();
        org.junit.Assert.fail("Expected NullPointerException");
    } catch (Exception e) {
        org.junit.Assert.assertTrue(e instanceof NullPointerException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile2_mQKH1_lHyW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x8000 | 0x1000));
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile3_LXpb2_ghDx0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x4000 | 0x40000));
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile5_nUNi4_PdXA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x8000 | 0x4000)); // Assuming CpioUtil.C_ISREG = 0x8000, CpioUtil.C_IFREG = 0x4000
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile6_mBrF5_uPNl0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x4000 | 0x40000 | 0x200000));
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile7_Mvec6_oIKF1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x8000 | 0x4000));
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile8_nGYT7_Sauf0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x4000 | 0x4000 | 0x8000)); 
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile10_SaoF9_yOlk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x4000 | 0x4000 | 0x8000 | 0x1000));
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketTrue_ucHt0_ZsdT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 1024);
    entry.setMode((short) (0x120000 | 0x1F00));
    boolean result = entry.isSocket();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_GBRZ2_IWbL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 10L);
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode4_cAQl3_NNFI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)0, "test");
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode5_YPhX4_cKgL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode7_QXjM6_faqu0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode9_KdhD8_gYQI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, new File("test"), "test");
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_PuGs0_csVU0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setRemoteDeviceMin(1234567890L);
    assertEquals(1234567890L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime3_jdCO2_pVVH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test");
    entry.setRemoteDeviceMin(1234567890L);
    assertEquals(1234567890L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime4_AECr3_NHfi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("test"), "test");
    entry.setRemoteDeviceMin(1234567890L);
    assertEquals(1234567890L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime5_MaFP4_qwcx0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setRemoteDeviceMin(1234567890L);
    assertEquals(1234567890L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount2_bUVz1_SdoN1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 12);
    entry.setRemoteDeviceMin(12);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount3_uuje2_bRwT0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setRemoteDeviceMin(11);
    assertEquals(3, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID2_uPLH1_mRhV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 12345L);
    assertEquals(12345L, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDeviceTrue_wNqE0_rIhY0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x2 | 0x3000));
    boolean result = entry.isCharacterDevice();
    Assertions.assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDeviceFalse_kblR1_zKuY0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
    entry.setMode((short) (0x1000 | 0x2));
    boolean result = entry.isCharacterDevice();
    Assertions.assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinNewFormat5_WhkY5_GFya0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "entryName");
    cpioArchiveEntry.setRemoteDeviceMin(112L);
    assertEquals(112L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinNewFormat7_OPIA7_cUVJ0() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name");
    cpioArchiveEntry.setRemoteDeviceMin(114L);
    assertEquals(114L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinNewFormat10_QJCX10_xQMq1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "name");
    cpioArchiveEntry.setRemoteDeviceMin(117L);
    assertEquals(117L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMinNewFormat11_PURx11_quZO1() {
    CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, "entryName");
    cpioArchiveEntry.setRemoteDeviceMin(118L);
    assertEquals(118L, cpioArchiveEntry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFormatAndPath_meLB1_KGQp0() {
    try {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("testFile").toPath(), "testName", LinkOption.NOFOLLOW_LINKS);
        assertEquals("testName", entry.getName());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinNewFormatPath_IgAh2_VHFG0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test");
        cpioArchiveEntry.setRemoteDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getRemoteDeviceMin());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinNewFormatPath2_geLd3_NoOV0() {
    try {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 1, new File("test").toPath(), "test", LinkOption.NOFOLLOW_LINKS);
        cpioArchiveEntry.setDeviceMin(10L);
        assertEquals(10L, cpioArchiveEntry.getDeviceMin());
    } catch (IOException e) {
        fail("IOException was thrown");
    }
}
}