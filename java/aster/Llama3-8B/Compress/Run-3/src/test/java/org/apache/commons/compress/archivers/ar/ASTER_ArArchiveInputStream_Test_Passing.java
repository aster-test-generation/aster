/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesValidSignature_tbsz0() {
        byte[] signature = {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
        boolean result = ArArchiveInputStream.matches(signature, signature.length);
        assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesInvalidLength_RhAU1() {
        byte[] signature = {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
        boolean result = ArArchiveInputStream.matches(signature, 7);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesInvalidSignature_mQho2() {
        byte[] signature = {0x20, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
        boolean result = ArArchiveInputStream.matches(signature, signature.length);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesNullSignature_fIqP3() {
        boolean result = ArArchiveInputStream.matches(null, 8);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesEmptySignature_nKim4() {
        boolean result = ArArchiveInputStream.matches(new byte[0], 0);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesShortSignature_kGjP5() {
        byte[] signature = {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68};
        boolean result = ArArchiveInputStream.matches(signature, signature.length);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLongSignature_oSne6() {
        byte[] signature = {0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a, 0x00};
        boolean result = ArArchiveInputStream.matches(signature, signature.length);
        assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntryNullInputStream_lxVn10() throws IOException {
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
    ArArchiveEntry arArchiveEntry = arArchiveInputStream.getNextArEntry();
    assertNull(arArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntry_KESl0() throws IOException {
        InputStream inputStream = null;
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry arArchiveEntry = arArchiveInputStream.getNextEntry();
    }
}