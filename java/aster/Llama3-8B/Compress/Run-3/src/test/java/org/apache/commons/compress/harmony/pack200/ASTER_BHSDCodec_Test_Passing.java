/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_CZIm0() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    boolean result = codec1.equals(codec1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_vHhP1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    Object obj = new Object();
    boolean result = codec1.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_KzAw2() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    BHSDCodec codec2 = new BHSDCodec(5, 6, 7, 8);
    boolean result = codec1.equals(codec2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectDifferentConstructor_lesu3() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    boolean result = codec1.equals(codec2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectSameConstructor_rIkA4() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3);
    boolean result = codec1.equals(codec2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_CjRJ5() {
    BHSDCodec codec1 = new BHSDCodec(1, 2, 3, 4);
    boolean result = codec1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargestWithThreeParams_gzsr0() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        assertEquals(codec.largest(), codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargestWithTwoParams_hbHk1() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        assertEquals(codec.largest(), codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallestWithThreeParams_AMwA0() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        long result = codec.smallest();
        assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallestWithTwoParams_AIkO1() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        long result = codec.smallest();
        assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_DzDV0_1() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    int result1 = codec1.getB();
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    int result2 = codec2.getB();
    BHSDCodec codec3 = new BHSDCodec(1, 2, 3);
    int result3 = codec3.getB();
    assertEquals(1, result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_DzDV0_2() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    int result1 = codec1.getB();
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    int result2 = codec2.getB();
    BHSDCodec codec3 = new BHSDCodec(1, 2, 3);
    int result3 = codec3.getB();
    assertEquals(1, result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_DzDV0_3() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    int result1 = codec1.getB();
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    int result2 = codec2.getB();
    BHSDCodec codec3 = new BHSDCodec(1, 2, 3);
    int result3 = codec3.getB();
    assertEquals(1, result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithThreeParams_FgSg0() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3);
        assertEquals("(1,2,3)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithFourParams_lsFS1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        assertEquals("(1,2,3,4)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTwoParams_uGUp2() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        assertEquals("(1,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSignedTrue_dVwW0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 1, 3);
    boolean result = codec.isSigned();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSignedFalse_dEOI1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    boolean result = codec.isSigned();
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeltaWithDeltaZero_MVyR0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        assertFalse(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeltaWithDeltaNonZero_TTEo1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        assertTrue(codec.isDelta());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_BHS_faEH0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    int result = codec.hashCode();
    assertEquals(result, ((1 * 37 + 2) * 37 + 3) * 37);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_BHD_xhJZ1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    int result = codec.hashCode();
    assertEquals(result, ((1 * 37 + 2) * 37 + 3) * 37 + 4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_BH_dCQq2() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    int result = codec.hashCode();
    assertEquals(result, ((1 * 37 + 2) * 37 + 0) * 37);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality_DCGA0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        long result = codec.cardinality();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality2_nYcH1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        long result = codec.cardinality();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality3_EnSo2() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3);
        long result = codec.cardinality();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithThreeParams_MHPX0() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        long value = 5;
        boolean result = codec.encodes(value);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithTwoParams_YFIu1() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        long value = 3;
        boolean result = codec.encodes(value);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodesWithOneParam_LzDI2() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        long value = 0;
        boolean result = codec.encodes(value);
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHS_IMTe0() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    int result = codec.getS();
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHD_Rnfo1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    int result = codec.getS();
    assert result == 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BH_CmEV2() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    int result = codec.getS();
    assert result == 0; // default value
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode13_saNr12() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetH_gHih0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        int result = codec.getH();
        assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetH2_kNVr1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        int result = codec.getH();
        assert result == 2;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetH3_vNIT2() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3);
        int result = codec.getH();
        assert result == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL_ihMO0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL2_JLnS1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL3_hCXr2() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3);
        assertEquals(0, codec.getL());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithOneParam_NCFk2_uYLO0() {
    BHSDCodec codec = new BHSDCodec(1, 0, 0);
    assertEquals(0, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSmallestWithOneParam_dESz2_upSh0() {
    BHSDCodec codec = new BHSDCodec(1, 0, 0, 0);
    long result = codec.smallest();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInts2_OEry1_IZic0() throws IOException, Pack200Exception {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    int result = codec.getL();
    assert result == 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_iFAd0_hvox0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(0, 0);
        byte[] expected = new byte[0];
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode() should not throw any exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_fYiB1_imGD0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(1, 0);
        byte[] expected = new byte[1];
        expected[0] = (byte) 0;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Expected encode to not throw an exception, but it did");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_sFOL2_hJCW0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(2, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 0;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode method should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode4_gAEr3_jYBr0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(3, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 1;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode method should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode5_tXXe4_HmWY0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(4, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 2;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Exception was thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode6_LPft5_tJsz0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(5, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 3;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode method should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode7_ZNtj6_nzha0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(6, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 4;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Exception was thrown unexpectedly");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode8_khgZ7_Tjke0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(7, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 5;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Pack200Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_CFlD8_SmdE0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(8, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 6;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode method should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode10_JiOb9_wVED0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(9, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 7;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Pack200Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode11_oujw10_AtGl0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(10, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 8;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("Pack200Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode12_suCu11_sorL0() {
    BHSDCodec codec = new BHSDCodec(1, 1);
    try {
        byte[] result = codec.encode(11, 0);
        byte[] expected = new byte[2];
        expected[0] = (byte) 0;
        expected[1] = (byte) 9;
        assertArrayEquals(expected, result);
    } catch (Exception e) {
        fail("encode method should not throw Pack200Exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_DzDV0() {
    BHSDCodec codec1 = new BHSDCodec(1, 2);
    int result1 = codec1.getB();
    assertEquals(1, result1);
    BHSDCodec codec2 = new BHSDCodec(1, 2, 3, 4);
    int result2 = codec2.getB();
    assertEquals(1, result2);
    BHSDCodec codec3 = new BHSDCodec(1, 2, 3);
    int result3 = codec3.getB();
    assertEquals(1, result3);
}
}