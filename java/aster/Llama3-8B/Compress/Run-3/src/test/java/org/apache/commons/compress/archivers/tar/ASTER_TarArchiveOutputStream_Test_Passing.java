/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveOutputStream_Test_Passing {
@Mock
    private TarArchiveEntry tarArchiveEntry;
@Mock
    private Map<String, String> headers;
private TarArchiveOutputStream tararchiveoutputstream;
    private boolean addPaxHeadersForNonAsciiNames;
    private long currSize;
    private boolean haveUnclosedEntry;
    private long currBytes;
    private static final ZipEncoding ASCII = ZipEncodingHelper.getZipEncoding(StandardCharsets.US_ASCII);
    private String currName;
    private boolean finished;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testwritePaxHeaders() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(tarArchiveEntry.getName()).thenReturn("testFile");
        String entryName = "testFile";
        when(headers.get("header1")).thenReturn("value1");
        when(headers.get("header2")).thenReturn("value2");
        tararchiveoutputstream.writePaxHeaders(tarArchiveEntry, entryName, headers);
        verify(tarArchiveEntry, times(1)).getName();
        verify(tarArchiveEntry, times(1)).setSize(anyInt());
        verify(tararchiveoutputstream, times(1)).putArchiveEntry(tarArchiveEntry);
        verify(tararchiveoutputstream, times(1)).write(any(byte[].class));
        verify(tararchiveoutputstream, times(1)).closeArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize1_baiq0() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(new java.io.ByteArrayOutputStream(), 1024);
        assertEquals(1024, tarArchiveOutputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize3_GCKP2() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(new java.io.ByteArrayOutputStream(), 1024, "UTF-8");
        assertEquals(1024, tarArchiveOutputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize4_Dbil3() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(new java.io.ByteArrayOutputStream(), 1024, 512);
        assertEquals(512, tarArchiveOutputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRecordSize5_qtGf4() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(new java.io.ByteArrayOutputStream(), 1024, 512, "UTF-8");
        assertEquals(512, tarArchiveOutputStream.getRecordSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordSize2_WTKb1_RAME1() {
    TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(new java.io.ByteArrayOutputStream());
    assertEquals(-1, tarArchiveOutputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWrittenBlockSizeRecordSizeEncoding_OxhL4_gtGo1() throws IOException {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    TarArchiveOutputStream taos = new TarArchiveOutputStream(bos);
    long bytesWritten = taos.getBytesWritten();
    assert bytesWritten == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCountBlock_Duab1_iPno1() {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    java.io.OutputStream bos1 = bos;
    TarArchiveOutputStream taos = new TarArchiveOutputStream(bos1, 1024);
    int count = taos.getCount();
    assert count == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCountRecord_NlUi2_QraQ1() {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    TarArchiveOutputStream taos = new TarArchiveOutputStream(bos);
    int count = taos.getCount();
    assert count == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCountBlockEncoding_xLWg3_FsQd0() {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    TarArchiveOutputStream taos = new TarArchiveOutputStream(bos, 1024, "UTF-8");
    int count = taos.getCount();
    assert count == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCountBlockRecordEncoding_ZyzY4_xHlr1() {
    java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
    TarArchiveOutputStream taos = new TarArchiveOutputStream(bos, 1024, 512, "UTF-8");
    int count = taos.getCount();
    assert count == 0;
}
}