/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_oclI0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_wEFj0() {
		Owner owner = new Owner();
		String city = owner.getCity();
		assertEquals("Expected city", "", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_rkhE0() {
		Owner owner = new Owner();
		String telephone = owner.getTelephone();
		assertEquals("Expected telephone number", telephone, "");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_oyLG0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_vHHI0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result != null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_sKwS1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPetIgnoreNew_KqFi3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", true);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetCaseSensitive_GUdv4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNullPetName_gGPd5() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_Zxdc0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
		assertEquals(1, 1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_RSTE0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_Kydh0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		Assertions.assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNonExistingPet_imzi1() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		Assertions.assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePets_csXf2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.getPets().add(pet1);
		owner.getPets().add(pet2);
		Pet result = owner.getPet(1);
		Assertions.assertEquals(pet1, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_zABn0() {
		Owner owner = new Owner();
		owner.setAddress("Test Address");
		assertEquals("Test Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_ZiDy0_oiKq1() {
		Owner owner = new Owner();
		owner.setAddress("address");
		String result = owner.toString();
		assertEquals("address", result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_OujI0_kviY0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPetIgnoreNew_CacI2_BBNf1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", true);
		assert result != null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_hHGy0_MynL1() {
		Owner owner = new Owner();
		String expectedAddress = "some address";
		owner.setAddress(expectedAddress);
		String actualAddress = owner.getAddress();
		assertEquals(expectedAddress, actualAddress);
	}

}