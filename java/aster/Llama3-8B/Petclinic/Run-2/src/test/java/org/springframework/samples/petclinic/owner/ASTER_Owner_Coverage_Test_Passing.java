/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_gqqx0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("petName");
		owner.getPets().add(pet);
		Pet result = owner.getPet("petname", false);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NewPet_BPck0_DUkT0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		java.time.LocalDate localDate = java.time.LocalDate.now();
		pet.setBirthDate(localDate);
		owner.setAddress("Test Address");
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ReturnsNull_WhenPetIsNew_Arwa1_lEbC0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ReturnsPet_WhenPetIsNotNew_eNTz0_VTPz0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetIdNotNull_VisitNull_sjDv1_vMHp0() {
		Owner owner = new Owner();
		Visit visit = null;
		owner.setAddress(null);
		assertEquals(null, owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_ExistingPet_lQhy1_JzHv0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet existingPet = new Pet();
		owner.addPet(existingPet);
		assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetIdNull_VisitNotNull_CRfw0_PflM1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.setAddress(null);
		assertEquals(null, owner.getAddress());
	}

}