/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_qIqX0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetNullPet_cuLq1() {
		Owner owner = new Owner();
		owner.addPet(null);
		Collection<Pet> pets = owner.getPets();
		assert pets.isEmpty();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_QSDE0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_eQtO0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertEquals(Pet.class, pet.getClass());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_Gewy0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result != null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_qTED1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPetIgnoreNew_KSgs3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", true);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetCaseSensitive_qwuA4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNullPetName_PSVw5() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetEmptyPetName_yAaf6() {
		Owner owner = new Owner();
		Pet result = owner.getPet("", false);
		assert result == null;
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_dkvM0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_sCvW0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertEquals(new ArrayList<Pet>(), pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_oFiA0() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertEquals("Expected address", address, "");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_ANib0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_WOxO1() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetMultiplePets_ZOmv2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.getPets().add(pet1);
		owner.getPets().add(pet2);
		Pet result = owner.getPet(1);
		assertEquals(pet1, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_wGIo0() {
		Owner owner = new Owner();
		owner.setAddress("Test Address");
		assertEquals("Test Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_PEIr0_pRLA0() {
		Owner owner = new Owner();
		owner.setId(1);
		owner.setLastName("lastName");
		owner.setFirstName("firstName");
		owner.setAddress("address");
		owner.setCity("city");
		owner.setTelephone("telephone");
		String result = owner.toString();
		assertEquals("id=1&lastName=lastName&firstName=firstName&address=address&city=city&telephone=telephone",
				result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_VjbD0_kzch0() {
		Owner owner = new Owner();
		owner.setAddress("Expected city");
		assertEquals("Expected city", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_wgVI0_YHzE1() {
		Owner owner = new Owner();
		owner.setAddress("Expected telephone number");
		org.junit.Assert.assertEquals("Expected telephone number", owner.getAddress());
	}

}