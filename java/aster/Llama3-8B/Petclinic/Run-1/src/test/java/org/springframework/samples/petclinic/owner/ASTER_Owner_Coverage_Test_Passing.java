/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_Dwae0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.getPets().add(pet);
		Pet result = owner.getPet(1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_PhgC0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("testPet");
		owner.getPets().add(pet);
		Pet result = owner.getPet("testPet", false);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_ofkI1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("nonExistingPet", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPetIgnoreNew_tcjx3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("nonExistingPet", true);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NewPet_PyfF0_VyWR0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		java.time.LocalDate localDate = java.time.LocalDate.now(); // Import LocalDate
																	// from java.time
		pet.setBirthDate(localDate);
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPetNewPet_gkCj4_ttHn0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("testPet");
		owner.setAddress("testAddress");
		owner.getPets().add(pet);
		Pet result = owner.getPet("testPet", false);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetIdNull_VisitNotNull_jXap0_EZUD0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.setAddress(null); // Assuming setLastError is not available
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetIdNotNull_VisitNull_oHRx1_efhg1() {
		Owner owner = new Owner();
		Visit visit = null;
		owner.setAddress(null);
		assertEquals(null, owner.getAddress());
	}

}