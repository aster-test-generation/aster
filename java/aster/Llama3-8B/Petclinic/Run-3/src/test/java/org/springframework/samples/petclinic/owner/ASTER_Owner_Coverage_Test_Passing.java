/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetAndVisit_EpxN4() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Pet pet = new Pet();
		when(owner.getPet(1)).thenReturn(pet);
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPet_Wyec0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPet_prGq1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPetIgnoreCase_xnvB2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("PET1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNonExistingPetIgnoreNew_XCfn4() {
		Owner owner = new Owner();
		Pet result = owner.getPet("pet1", true);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNullPets_FGsK4() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithEmptyPets_uPhH5() {
		Owner owner = new Owner();
		owner.getPets().clear();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNonIntegerId_WEZq7() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet("1");
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringNew_PVTS1_ZPzz0() {
		Owner owner = new Owner();
		owner.setAddress("address");
	}

}