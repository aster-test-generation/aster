/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsExpectedPet_XYaH0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fluffy", false);
		assertEquals("Fluffy", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsExpectedPetWhenNotIgnoreNewAndPetIsNew_NCcr3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("NewPet", false);
		assertEquals("NewPet", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsExpectedPetWhenNameIsSimilar_HviU4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("fluffy", false);
		assertEquals("Fluffy", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsExpectedPetWhenNameIsSimilarAndPetIsNew_qoKs5() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("newpet", false);
		assertEquals("NewPet", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithValidId_RBVV0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		when(owner.getPets()).thenReturn(Collections.singletonList(pet));
		Pet result = owner.getPet(1);
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithInvalidId_NpaN1() {
		Owner owner = new Owner();
		List<Pet> pets = new ArrayList<>();
		when(owner.getPets()).thenReturn(pets);
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNoPets_CfhT3() {
		Owner owner = new Owner();
		List<Pet> pets = Collections.emptyList();
		when(owner.getPets()).thenReturn(pets);
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNullPets_nUZJ4() {
		Owner owner = new Owner();
		List<Pet> pets = null;
		when(owner.getPets()).thenReturn(pets);
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePets_pEIW6() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		when(owner.getPets()).thenReturn(Arrays.asList(pet1, pet2));
		Pet result = owner.getPet(1);
		assertEquals(pet1, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePetsAndInvalidId_GKpp7() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		when(owner.getPets()).thenReturn(Arrays.asList(pet1, pet2));
		Pet result = owner.getPet(3);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitNullVisit_KFNR2_fOxl0() {
		Owner owner = new Owner();
		Visit visit = null;
		Integer petId = 1;
		assertThrows(NullPointerException.class, () -> owner.addVisit(petId, visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNullPets_nUZJ4_fid2() {
		Owner owner = new Owner();
		when(owner.getPets()).thenReturn(null);
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePetsAndInvalidId_GKpp7_fid2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		when(owner.getPets()).thenReturn(Arrays.asList(pet1, pet2));
		Pet result = owner.getPet(3);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getTelephone_invalidTelephone_returnsNull_WAUv3_krbq0_fid3() {
		Owner owner = new Owner();
		owner.setTelephone("invalid");
		assertEquals(null, owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_invalidName_returnsNull_TzuU7_yXyF0_fid3() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		owner.setTelephone("invalid");
		assertEquals(null, owner.getTelephone());
	}

}