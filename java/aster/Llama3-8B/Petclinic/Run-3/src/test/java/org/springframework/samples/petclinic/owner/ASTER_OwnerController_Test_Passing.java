/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import org.springframework.web.servlet.ModelAndView;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Test_Passing {

	private OwnerRepository ownerRepository;

	OwnerRepository clinicService;

	OwnerController controller;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitFindFormWithNullOwnerRepository_AYaJ2() {
		OwnerRepository clinicService = null;
		OwnerController controller = new OwnerController(clinicService);
		String actual = controller.initFindForm();
		assertEquals("owners/findOwners", actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitFindFormWithMockOwnerRepository_yVhR4() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		String actual = controller.initFindForm();
		assertEquals("owners/findOwners", actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithInvalidInput_kfNJ1_AYXu0_1() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(mockOwnerRepository);
		Integer ownerId = null;
		Owner owner = ownerController.findOwner(ownerId);
		assertNotNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void showOwnerWithNullOwner_PCQq1_zCbM0_1() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(clinicService);
		int ownerId = 1;
		Owner owner = null;
		when(clinicService.findById(ownerId)).thenReturn(owner);
		ModelAndView mav = new ModelAndView("owners/ownerDetails");
		mav.addObject(owner);
		assertNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_bKES0_CVxx0_1() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertEquals("owners/createOrUpdateOwnerForm", result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_bKES0_CVxx0_2() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertEquals(1, model.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_bKES0_CVxx0_3() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertTrue(model.containsKey("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_bKES0_CVxx0_4() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertNotNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_bKES0_CVxx0_5() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertTrue(owner instanceof Owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_1() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertEquals("owners/createOrUpdateOwnerForm", result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_2() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertEquals(2, model.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_3() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertTrue(model.containsKey("key1"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_4() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertTrue(model.containsKey("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_5() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertNotNull(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithPopulatedModel_VRwr3_omEz0_6() {
		OwnerRepository clinicService = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(clinicService);
		Map<String, Object> model = new HashMap<>();
		model.put("key1", "value1");
		String result = controller.initCreationForm(model);
		Object owner = model.get("owner");
		assertTrue(owner instanceof Owner);
	}

}