/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getAddressTest_wCAL0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		String address = owner.getAddress();
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getAddressNullTest_dFbK1() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_HnkF0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main Street");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressNull_vNzs1() {
		Owner owner = new Owner();
		owner.setAddress(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressEmpty_rnEG2() {
		Owner owner = new Owner();
		owner.setAddress("");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_qhdo0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithNull_HonE1() {
		Owner owner = new Owner();
		owner.setCity(null);
		assertEquals(null, owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_oMwS0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		assertEquals("123-456-7890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneNull_UnDg1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
		assertEquals(null, owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneEmpty_MKWS2() {
		Owner owner = new Owner();
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsNullWhenPetNotFound_CVdn1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("NotThere", false);
		assertEquals(null, pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_nameAndIgnoreNew_returnsNullWhenIgnoreNewAndPetIsNew_bIsP2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("NewPet", true);
		assertEquals(null, pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getTelephone_invalidTelephone_returnsNull_WAUv3_krbq0() {
		Owner owner = new Owner();
		owner.setTelephone("invalid");
		assertNull(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getPet_invalidName_returnsNull_TzuU7_yXyF0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		owner.setTelephone("invalid");
		assertNull(null);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getTelephone_emptyTelephoneAfterUpdate_returnsEmptyTelephone_VMUi5_eMJR0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890");
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithInvalidId_NpaN1_fid2() {
		Owner owner = new Owner();
		when(owner.getPets()).thenReturn(Collections.emptyList());
		Pet result = owner.getPet(1);
		assertNull(result);
	}

}