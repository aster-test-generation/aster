/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NullPet_oBAN2() {
		Owner owner = new Owner();
		owner.addPet(null);
		assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetIdAndVisit_VdZJ0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_ZLLU2() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(null, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_RLCd0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId());
		assertEquals(pet, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNonExistingPet_zKaw1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId() + 1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePets_kDOp3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.getPets().add(pet1);
		owner.getPets().add(pet2);
		Pet result = owner.getPet(pet2.getId());
		assertEquals(pet2, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithNullPet_sqMO6() {
		Owner owner = new Owner();
		Pet pet = null;
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId());
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringId_gYjD0() {
		Owner owner = new Owner();
		owner.setId(1);
		assertEquals("id=1,new=false,lastName=null,firstName=null,address=null,city=null,telephone=null",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringLastName_txYL2() {
		Owner owner = new Owner();
		owner.setLastName("lastName");
		assertEquals("id=null,new=null,lastName=lastName,firstName=null,address=null,city=null,telephone=null",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringFirstName_OlcY3() {
		Owner owner = new Owner();
		owner.setFirstName("firstName");
		assertEquals("id=null,new=null,lastName=null,firstName=firstName,address=null,city=null,telephone=null",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringAddress_mbOg4() {
		Owner owner = new Owner();
		owner.setAddress("address");
		assertEquals("id=null,new=null,lastName=null,firstName=null,address=address,city=null,telephone=null",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringCity_FztS5() {
		Owner owner = new Owner();
		owner.setCity("city");
		assertEquals("id=null,new=null,lastName=null,firstName=null,address=null,city=city,telephone=null",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringTelephone_KPwk6() {
		Owner owner = new Owner();
		owner.setTelephone("telephone");
		assertEquals("id=null,new=null,lastName=null,firstName=null,address=null,city=null,telephone=telephone",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithExistingPet_RLCd0_fid1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.getPets().add(pet);
		Pet result = owner.getPet(pet.getId());
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithMultiplePets_kDOp3_fid1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.getPets().add(pet1);
		owner.getPets().add(pet2);
		Pet result = owner.getPet(pet2.getId());
		assertNull(pet2);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetExistingPetNewPet_HVHS5_YuwO0_fid3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("pet1");
		owner.getPets().add(pet);
		Pet result = owner.getPet("pet1", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringNew_PVTS1_ZPzz0_fid3() {
		Owner owner = new Owner();
		owner.setAddress("address");
		assertEquals("id=null,new=false,lastName=null,firstName=null,address=address,city=null,telephone=null",
				owner.toString());
	}

}