/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BaseEntity_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_BaseEntity_isNew_1_PvHV0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(null);
		boolean expected = true;
		boolean actual = baseEntity.isNew();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId_zIxI0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(100);
		assertEquals(baseEntity.getId(), 100);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId2_rbqb1() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(200);
		assertEquals(baseEntity.getId(), 200);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId3_htky2() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(300);
		assertEquals(baseEntity.getId(), 300);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId4_NTDG3() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(400);
		assertEquals(baseEntity.getId(), 400);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId5_PJyd4() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(500);
		assertEquals(baseEntity.getId(), 500);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId6_CVgX5() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(600);
		assertEquals(baseEntity.getId(), 600);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId7_HGdU6() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(700);
		assertEquals(baseEntity.getId(), 700);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId8_Uucg7() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(800);
		assertEquals(baseEntity.getId(), 800);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId9_ttYd8() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(900);
		assertEquals(baseEntity.getId(), 900);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testId10_Tstb9() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(1000);
		assertEquals(baseEntity.getId(), 1000);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetId_EfJZ0() {
		BaseEntity baseEntity = new BaseEntity();
		Integer expected = baseEntity.getId();
		assertEquals(expected, baseEntity.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_BaseEntity_isNew_2_xGMn1_PlbX0() {
		BaseEntity baseEntity = new BaseEntity();
		baseEntity.setId(1);
		boolean expected = false;
		boolean actual = baseEntity.isNew();
		assertEquals(expected, actual);
	}

}