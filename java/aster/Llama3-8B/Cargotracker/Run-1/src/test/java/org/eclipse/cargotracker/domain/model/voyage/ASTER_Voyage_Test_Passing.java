/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Passing {
  Voyage voyage;
  Voyage anotherVoyage;
  @Mock
  VoyageNumber voyageNumber;
  @Mock
  Schedule schedule;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_1() throws Exception {
    VoyageNumber voyageNumber = Mockito.mock(VoyageNumber.class);
    Schedule schedule = Mockito.mock(Schedule.class);
    voyage = new Voyage(voyageNumber, schedule);
    anotherVoyage = new Voyage(voyageNumber, schedule);
    assertEquals(voyage, voyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_2() throws Exception {
    VoyageNumber voyageNumber = Mockito.mock(VoyageNumber.class);
    Schedule schedule = Mockito.mock(Schedule.class);
    voyage = new Voyage(voyageNumber, schedule);
    anotherVoyage = new Voyage(voyageNumber, schedule);
    assertEquals(anotherVoyage, anotherVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_3() throws Exception {
    VoyageNumber voyageNumber = Mockito.mock(VoyageNumber.class);
    Schedule schedule = Mockito.mock(Schedule.class);
    voyage = new Voyage(voyageNumber, schedule);
    anotherVoyage = new Voyage(voyageNumber, schedule);
    assertNotEquals(voyage, anotherVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_QDLd0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage.equals(voyage);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_wcts1() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_TsHT2() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage.equals(new Object());
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentVoyage_uQmv3() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    boolean result = voyage1.equals(voyage2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_wbqK0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(voyage.getSchedule(), schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_EQnX0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals("Voyage 123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_ryDK0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    VoyageNumber actual = voyage.getVoyageNumber();
    assertEquals("123", actual.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs() throws Exception {
    voyage = new Voyage(voyageNumber, schedule);
    // Arrange
    Voyage otherVoyage = new Voyage(voyageNumber, schedule);
    // Act
    boolean result = voyage.sameIdentityAs(otherVoyage);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsSameObject_lMbF0() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = voyage1;
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsDifferentObject_Wkbl1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsNull_IpzO2() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.sameIdentityAs(null));
  }
}