/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_AGvS0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "deadline";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_eJRo0_XocF0() {
    String originUnLocode = "USNY";
    String destinationUnLocode = "USLA";
    String deadline = "20230228";
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_LocationListWithLessThan4Locations_oVgv2_HoIn0_1() {
    List<String> allLocations = new ArrayList<>();
    allLocations.add("origin");
    allLocations.add("location1");
    allLocations.add("destination");
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination", "deadline");
    assertEquals(1, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_LocationListWithLessThan4Locations_oVgv2_HoIn0_2() {
    List<String> allLocations = new ArrayList<>();
    allLocations.add("origin");
    allLocations.add("location1");
    allLocations.add("destination");
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination", "deadline");
    assertEquals(2, result.get(0).getTransitEdges().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_SingleLocationChunk_FVAq0_mDLq0_1() {
    List<String> allLocations = new ArrayList<>();
    allLocations.add("origin");
    allLocations.add("location1");
    allLocations.add("location2");
    allLocations.add("location3");
    allLocations.add("location4");
    allLocations.add("destination");
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination", "20220202");
    assertEquals(1, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_SingleLocationChunk_FVAq0_mDLq0_2() {
    List<String> allLocations = new ArrayList<>();
    allLocations.add("origin");
    allLocations.add("location1");
    allLocations.add("location2");
    allLocations.add("location3");
    allLocations.add("location4");
    allLocations.add("destination");
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination", "20220202");
    assertEquals(1, result.get(0).getTransitEdges().size());
  }
}