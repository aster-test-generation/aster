/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_EBWL0() {
    EventLogger eventLogger = new EventLogger();
    String result = eventLogger.getCompletionTimePattern();
    assertEquals("DATE_TIME_FORMAT", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_CAJq0() {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = eventLogger.getVoyageNumber();
    assertEquals("Expected voyage number", null, voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_VSjM0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("Expected trackingId", null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_fGpe0() {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertEquals("", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_AAiY0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> expected = new ArrayList<SelectItem>();
    List<SelectItem> actual = eventLogger.getLocations();
    assert actual.equals(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_mLYN0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> expected = new ArrayList<>();
    List<SelectItem> actual = eventLogger.getTrackingIds();
    assert actual.equals(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_WtES0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    assert voyages != null;
  }
}