/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocode_hdHo1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getFromUnLocode();
    assertEquals("fromUnLocode", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_bfwk1() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setToUnLocode("testToUnLocode");
    assertEquals("testToUnLocode", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jFJs0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("TransitEdge{voyageNumber=voyageNumber, fromUnLocode=fromUnLocode, toUnLocode=toUnLocode, fromDate=" + transitEdge.getFromDate() + ", toDate=" + transitEdge.getToDate() + "}", transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_PUcf1() {
    TransitEdge transitEdge = new TransitEdge("testVoyageNumber", "testFromUnLocode", "testToUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String voyageNumber = transitEdge.getVoyageNumber();
    assertEquals("testVoyageNumber", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_pSnK0() {
    TransitEdge transitEdge = new TransitEdge("test", "test", "test", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime toDate = LocalDateTime.of(2022, 1, 1, 0, 0);
    transitEdge.setToDate(toDate);
    assert transitEdge.getToDate().equals(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_vpbm1() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("testFromUnLocode");
    assertEquals("testFromUnLocode", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_lSLE0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = transitEdge.getFromDate();
    assert fromDate != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_czKw0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getToUnLocode();
    assertEquals("toUnLocode", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_JjGc1() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber("TestVoyageNumber");
    assertEquals("TestVoyageNumber", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_klBs0() {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime fromDate = LocalDateTime.now();
    transitEdge.setFromDate(fromDate);
    assertEquals(fromDate, transitEdge.getFromDate());
  }
}