/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.shared.DomainObjectUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Passing {
  @Mock
  private DomainObjectUtils domainObjectUtils;
  private RoutingStatus routingStatus;
  @Mock
  private HandlingEvent handlingEvent;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  private HandlingEvent lastEvent;
  private Delivery delivery;
  @Mock
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;
  private TransportStatus transportStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_wZRf0() {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(delivery);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_yhJp1() {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_gIUq2() {
    Delivery delivery = new Delivery();
    Object obj = new Object();
    boolean result = delivery.equals(obj);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatus() {
    delivery = new Delivery();
    RoutingStatus expectedRoutingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(expectedRoutingStatus);
    assertEquals(expectedRoutingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatus_osUd0() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.NOT_ROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRoutingStatus() {
    delivery = new Delivery();
    delivery.setRoutingStatus(routingStatus);
    // Act
    RoutingStatus actual = delivery.getRoutingStatus();
    // Assert
    assertEquals(routingStatus, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_GIbp0_GTlk0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("DEHAM"), "Hamburg");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }
}