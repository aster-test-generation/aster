/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoRoute_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationCode_HTFH0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("originUnLocode", "originName"), new Location("finalDestinationUnLocode", "finalDestinationName"), LocalDate.now(), false, false, new Location("lastKnownLocationUnLocode", "lastKnownLocationName"), "transportStatus", new ArrayList<>());
    assertEquals("lastKnownLocationUnLocode", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalDestinationName_Ntrh1_pMMV0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode1", "origin"), new Location("unLocode2", "finalDestination"), LocalDate.now(), false, false, new Location("unLocode3", "lastKnownLocation"), "transportStatus", new ArrayList<>());
    assertEquals("unLocode3", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationCode_xUIY0_bjBd0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("originUnLocode", "originName"), new Location("finalDestinationUnLocode", "finalDestinationName"), LocalDate.now(), false, false, new Location("lastKnownLocationUnLocode", "lastKnownLocationName"), "transportStatus", new ArrayList<>());
    String result = cargoRoute.getLastKnownLocationCode();
    assertEquals("lastKnownLocationUnLocode", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsRoutedFalse_mkRC1_apoG0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode1", "name"), new Location("unLocode2", "name"), LocalDate.now(), false, false, new Location("unLocode3", "name"), "transportStatus", new ArrayList<>());
    boolean result = cargoRoute.isRouted();
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimedTrue_mcwe0_dnzB0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name1"), new Location("unLocode", "name2"), LocalDate.now(), true, true, new Location("unLocode3", "name3"), "transportStatus", new ArrayList<>());
    boolean result = cargoRoute.isClaimed();
    assert result == true;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimedFalse_XJDn1_pinn0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("XJDn1", "name"), new Location("YJHD", "name"), LocalDate.now(), true, false, new Location("XJDn1", "name"), "transportStatus", new ArrayList<>());
    boolean result = cargoRoute.isClaimed();
    assert result == false;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_iDiQ0_hVur0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode1", "name1"), LocalDate.now(), false, false, new Location("unLocode2", "name2"), "transportStatus", List.of());
    String result = cargoRoute.getLastKnownLocationCode();
    assert result != null;
    assert result.equals("unLocode2");
  }
}