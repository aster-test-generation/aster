/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_Jxag0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = "12345";
    String destinationUnLocode = "DEEMN";
    facade.changeDestination(trackingId, destinationUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoNullDestination_pISa2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    String destination = null;
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      defaultBookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_ItineraryCreation_sxPP0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_hpIg0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoItinerariesEmpty_WLrQ4() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<Itinerary> itineraries = new ArrayList<>();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoRouteCandidatesEmpty_UBCM5() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<Itinerary> itineraries = Arrays.asList(new Itinerary());
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoRouteCandidatesNotEmpty_EIzl6_1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<Itinerary> itineraries = Arrays.asList(new Itinerary());
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoRouteCandidatesNotEmpty_EIzl6_2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<Itinerary> itineraries = Arrays.asList(new Itinerary());
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertFalse(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_JFYO0_qcTn0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = UUID.randomUUID().toString();
    LocalDate arrivalDeadline = LocalDate.now();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingId);
    defaultBookingServiceFacade.changeDeadline(trackingId, arrivalDeadline);
    verify(cargoRoute, times(1)).getArrivalDeadline();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_ItineraryAssembler_QUUs1_BNwy0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoTrackingIdNull_Mxax1_fid1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      defaultBookingServiceFacade.requestPossibleRoutesForCargo(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("trackingId cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoTrackingIdEmpty_VjWq2_fid1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      defaultBookingServiceFacade.requestPossibleRoutesForCargo("");
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("trackingId cannot be null or empty", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoRouteCandidatesNotEmpty_EIzl6() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<Itinerary> itineraries = Arrays.asList(new Itinerary());
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertNotNull(routeCandidates);
    assertFalse(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoBookingServiceNull_qpgp3_KHvM0_fid3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(null);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("null", e.getMessage());
    }
  }
}