/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.shared.DomainObjectUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  @Mock
  private DomainObjectUtils domainObjectUtils;
  private RoutingStatus routingStatus;
  @Mock
  private HandlingEvent handlingEvent;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  private HandlingEvent lastEvent;
  private Delivery delivery;
  @Mock
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;
  private TransportStatus transportStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected() throws Exception {
    MockitoAnnotations.initMocks(this);
    delivery = new Delivery();
    // Arrange
    boolean expectedMisdirected = true;
    // Act
    delivery.setMisdirected(expectedMisdirected);
    // Assert
    Mockito.verify(delivery, Mockito.times(1)).setMisdirected(expectedMisdirected);
    Assertions.assertEquals(expectedMisdirected, delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetCalculatedAt() throws Exception {
    calculatedAt = LocalDateTime.now();
    Mockito.when(delivery.getCalculatedAt()).thenReturn(calculatedAt);
    delivery.setCalculatedAt(calculatedAt);
    Mockito.verify(delivery, Mockito.times(1)).setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTransportStatus() throws Exception {
    delivery = new Delivery();
    delivery.setTransportStatus(transportStatus);
    // Arrange
    TransportStatus expectedStatus = TransportStatus.valueOf("LOAD");
    // Act
    TransportStatus actualStatus = delivery.getTransportStatus();
    // Assert
    assertEquals(expectedStatus, actualStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected() {
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    delivery.setMisdirected(true);
    boolean result = delivery.isMisdirected();
    Assertions.assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetEstimatedTimeOfArrival() {
    eta = LocalDateTime.now();
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Act
    LocalDateTime result = delivery.getEstimatedTimeOfArrival();
    // Assert
    assertEquals(eta, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentVoyage_ybIb1() throws Exception {
    Voyage currentVoyage = new Voyage();
    Delivery delivery = new Delivery();
    Mockito.when(domainObjectUtils.nullSafe(delivery, Voyage.NONE)).thenReturn(currentVoyage);
    assertEquals(delivery.getCurrentVoyage(), currentVoyage);
  }
}