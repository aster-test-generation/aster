/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoStatus_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirectedTrue_Iqkl0() {
    CargoStatus cargoStatus = new CargoStatus("123", "destination", "statusText", true, "eta", "nextExpectedActivity", new ArrayList<>());
    assertTrue(cargoStatus.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirectedFalse_zURZ1() {
    CargoStatus cargoStatus = new CargoStatus("123", "destination", "statusText", false, "eta", "nextExpectedActivity", new ArrayList<>());
    assertFalse(cargoStatus.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_BFPj0() {
    CargoStatus cargoStatus = new CargoStatus("123456", "destination", "statusText", false, "eta", "nextExpectedActivity", new java.util.ArrayList<>());
    assertEquals("123456", cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_xVTZ0() {
    CargoStatus cargoStatus = new CargoStatus("123", "New York", "In Transit", false, "2023-03-15", "Delivery", new java.util.ArrayList<>());
    assertEquals("New York", cargoStatus.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_KoFl0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "Destination", "In Transit", false, "2023-03-15", "Next Activity", new java.util.ArrayList<>());
    assertEquals("In Transit", cargoStatus.getStatusText());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextExpectedActivity_fCOF0() {
    CargoStatus cargoStatus = new CargoStatus("123", "destination", "statusText", false, "eta", "nextExpectedActivity", new java.util.ArrayList<TrackingEvents>());
    assertEquals("nextExpectedActivity", cargoStatus.getNextExpectedActivity());
  }
}