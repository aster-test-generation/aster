/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.interfaces.Coordinates;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CargoTrackingViewAdapter_Test_Failing {
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private Coordinates coordinates;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusText_Unknown_LwDa0() throws Exception {
    CargoTrackingViewAdapter cargotrackingviewadapter = new CargoTrackingViewAdapter(new Cargo(), new ArrayList<>());
    Cargo cargo = new Cargo();
    Delivery delivery = new Delivery();
    when(cargo.getDelivery()).thenReturn(delivery);
    TransportStatus transportStatus = TransportStatus.UNKNOWN;
    when(delivery.getTransportStatus()).thenReturn(transportStatus);
    String result = cargotrackingviewadapter.getStatusText();
    assertEquals("Unknown", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId_jMpE0() {
    TrackingId trackingId = new TrackingId("12345");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter cargotrackingviewadapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    when(cargo.getDelivery()).thenReturn(null);
    when(cargo.getDelivery().getLastKnownLocation()).thenReturn(null);
    when(cargo.getDelivery().getLastKnownLocation().getUnLocode()).thenReturn(new UnLocode("12345"));
    when(cargo.getDelivery().getLastKnownLocation().getUnLocode().getIdString()).thenReturn("12345");
    String result = cargotrackingviewadapter.getLastKnownLocationCode();
    assertEquals("12345", result);
  }
}