/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_bsQp0() {
    TrackingId trackingId = new TrackingId("testId");
    String result = trackingId.getIdString();
    assertEquals("testId", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_IHtG0() {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(id1);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_fpkt1() {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_KSGE2() {
    TrackingId id1 = new TrackingId("id");
    Object obj = new Object();
    boolean result = id1.equals(obj);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_wEBi3() {
    TrackingId id1 = new TrackingId("id");
    TrackingId id2 = new TrackingId("id");
    boolean result = id1.equals(id2);
    assert id1.sameValueAs(id2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_IZmJ0() {
    TrackingId trackingId = new TrackingId("testId");
    String result = trackingId.toString();
    assert result.equals("testId");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsSameId_fhws0() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsDifferentId_rPit1() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsNull_ABOx2() {
    TrackingId trackingId1 = new TrackingId("123");
    boolean result = trackingId1.sameValueAs(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_mxiw0() {
    TrackingId trackingId = new TrackingId("testId");
    int expectedHashCode = "testId".hashCode();
    int actualHashCode = trackingId.hashCode();
    assert actualHashCode == expectedHashCode;
  }
}