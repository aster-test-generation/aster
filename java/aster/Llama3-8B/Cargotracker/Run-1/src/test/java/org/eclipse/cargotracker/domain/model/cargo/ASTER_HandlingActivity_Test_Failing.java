/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HandlingActivity_Test_Failing {
  @Mock
  private Voyage voyage;
  @Mock
  private HandlingEvent.Type type;
  private HandlingActivity handlingActivity;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmptyWhenAllFieldsAreNull_jPKT0() {
    HandlingActivity ha = new HandlingActivity(HandlingEvent.Type.LOAD, null, null);
    boolean result = ha.isEmpty();
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyage_iqUx0() {
    UnLocode unLocode = new UnLocode("unLocode");
    Location location = new Location(unLocode, "name");
    handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, location, voyage);
    Voyage actual = handlingActivity.getVoyage();
    assertEquals(voyage, actual);
  }
}