/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTrackingFailure_qbvD1() {
    DefaultBookingServiceFacade serviceFacade = new DefaultBookingServiceFacade();
    String trackingIdValue = "12345";
    assertEquals(null, serviceFacade.loadCargoForTracking("InvalidTrackingId"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_rpxs0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    defaultBookingServiceFacade.changeDestination("12345", "DEEM");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_XlvG0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<String> expectedTrackingIds = new ArrayList<>();
    expectedTrackingIds.add("TrackingId1");
    expectedTrackingIds.add("TrackingId2");
    List<String> actualTrackingIds = defaultBookingServiceFacade.listAllTrackingIds();
    assert actualTrackingIds.equals(expectedTrackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_NJfa0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> routes = facade.listAllCargos();
    assertEquals(0, routes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineNullTrackingId_sQYD1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    LocalDate arrivalDeadline = LocalDate.now();
    facade.changeDeadline(null, arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineNullArrivalDeadline_hVCa2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = "testId";
    facade.changeDeadline(trackingId, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_DmEP0_Avas0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("trackingId");
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }
}