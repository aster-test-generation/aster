/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Itinerary_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalLocation_EmptyLegs_zPfm0() {
    Itinerary itinerary = new Itinerary();
    Location result = itinerary.getFinalArrivalLocation();
    assert result.getUnLocode().equals(Location.UNKNOWN.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalDateWhenLastLegIsNull_wfpM0() {
    Itinerary itinerary = new Itinerary();
    LocalDateTime result = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInitialDepartureLocation_EmptyLegs_yJYe0_IXxz0() {
    Itinerary itinerary = new Itinerary();
    Location result = itinerary.getInitialDepartureLocation();
    assertEquals(Location.UNKNOWN, result);
  }
}