/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;
import java.time.LocalDate;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Failing {
@Mock
private LocalDate arrivalDeadline;
@Mock
  private UnLocode unLocode;
@Mock
    private Itinerary itinerary;
private RouteSpecification routespecification;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDestination_tnLB0_xPEu0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US LAX"), "Los Angeles"), new Location(new UnLocode("US JFK"), "New York"), LocalDate.of(2022, 1, 1));
    Location destination = routeSpecification.getDestination();
    assertEquals(destination, new Location(new UnLocode("US LAX"), "Los Angeles"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_ASmC0_SuVd0() {
    UnLocode unLocode = new UnLocode("US LAX");
    Location origin = new Location(new UnLocode("US LAX"), "Los Angeles");
    UnLocode unLocode1 = new UnLocode("US JFK");
    Location destination = new Location(unLocode1, "New York");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = new HashCodeBuilder().append(origin).append(destination).append(arrivalDeadline).toHashCode();
    assertEquals(expectedHashCode, routeSpecification.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_JKeQ0_1() throws Exception {
    UnLocode unLocode = new UnLocode("CountryAndLocation");
    Location location = new Location(unLocode, "Name");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(location, location, arrivalDeadline);
    RouteSpecification anotherRouteSpecification = new RouteSpecification(location, location, arrivalDeadline);
    RouteSpecification differentRouteSpecification = new RouteSpecification(location, location, arrivalDeadline.plusDays(1));
    assertEquals(routeSpecification, anotherRouteSpecification);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_JKeQ0_2() throws Exception {
    UnLocode unLocode = new UnLocode("CountryAndLocation");
    Location location = new Location(unLocode, "Name");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(location, location, arrivalDeadline);
    RouteSpecification anotherRouteSpecification = new RouteSpecification(location, location, arrivalDeadline);
    RouteSpecification differentRouteSpecification = new RouteSpecification(location, location, arrivalDeadline.plusDays(1));
    assertNotEquals(routeSpecification, differentRouteSpecification);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_XYcy0() {
    UnLocode unLocode = new UnLocode("CountryAndLocation");
    Location origin = new Location(unLocode, "Origin");
    Location destination = new Location(unLocode, "Destination");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Mockito.when(origin.hashCode()).thenReturn(1);
    Mockito.when(destination.hashCode()).thenReturn(2);
    Mockito.when(arrivalDeadline.hashCode()).thenReturn(3);
    int actualHashCode = routeSpecification.hashCode();
    assertEquals(6, actualHashCode);
}
}