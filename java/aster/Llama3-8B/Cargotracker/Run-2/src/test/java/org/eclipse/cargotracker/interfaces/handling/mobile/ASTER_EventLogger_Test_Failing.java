/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;
import java.util.ArrayList;
import java.util.List;
import jakarta.faces.model.SelectItem;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_EventLogger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTrackingId_JXmo0() {
        EventLogger eventLogger = new EventLogger();
        String trackingId = eventLogger.getTrackingId();
        assertEquals("Expected trackingId", null, trackingId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocation_wxsH0() {
        EventLogger eventLogger = new EventLogger();
        String location = eventLogger.getLocation();
        assertEquals("Default location", location);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocations_vMeN0() {
        EventLogger eventLogger = new EventLogger();
        List<SelectItem> expected = new ArrayList<>();
        List<SelectItem> actual = eventLogger.getLocations();
        assert actual.equals(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTrackingIds_WfrV0() {
        EventLogger eventLogger = new EventLogger();
        List<SelectItem> trackingIds = eventLogger.getTrackingIds();
        List<SelectItem> expectedTrackingIds = new ArrayList<SelectItem>();
        assert expectedTrackingIds.equals(trackingIds);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVoyages_kTty0() {
        EventLogger eventLogger = new EventLogger();
        List<SelectItem> voyages = eventLogger.getVoyages();
        List<SelectItem> expectedVoyages = new ArrayList<SelectItem>();
        assert voyages != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompletionTimeValue_yDCF0_vSWS0() {
    EventLogger eventLogger = new EventLogger();
    Date completionTime = new Date();
    String result = eventLogger.getCompletionTimeValue();
    assertEquals(completionTime.toString(), result);
}
}