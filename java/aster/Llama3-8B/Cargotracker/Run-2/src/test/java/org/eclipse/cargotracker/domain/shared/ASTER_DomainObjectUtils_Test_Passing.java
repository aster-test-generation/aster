/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DomainObjectUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeNullActual_JefC0() {
    String actual = null;
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(safe, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeNotNullActual_uvxZ1() {
    String actual = "actual";
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeNullActualAndNullSafe_GTPo2() {
    String actual = null;
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeNotNullActualAndNullSafe_uBnz3() {
    String actual = "actual";
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeIntegerNullActual_vvHr6() {
    Integer actual = null;
    Integer safe = 1;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(safe, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeIntegerNotNullActual_ibHI7() {
    Integer actual = 1;
    Integer safe = 1;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeIntegerNullActualAndNullSafe_yJFk8() {
    Integer actual = null;
    Integer safe = null;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeIntegerNotNullActualAndNullSafe_gByi9() {
    Integer actual = 1;
    Integer safe = null;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
}
}