/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;
import java.util.EnumMap;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.EnumMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Passing {
@Mock
    private Cargo cargo;
private RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;
@Mock
  private RouteSpecification routeSpecification;
@Mock
  private LocationViewAdapter locationViewAdapter;
@Mock
    private Delivery delivery;
@Mock
    private RoutingStatus routingStatus;
@Mock
    private TransportStatus transportStatus;
@Mock
    private LocationViewAdapter lastKnownLocation;
@Mock
    private TrackingId trackingId;
@Mock
    private EnumMap<TransportStatus, String> transportStatusLabels;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId() {
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    // Set up the mock cargo object
    TrackingId trackingId = new TrackingId("mock-tracking-id");
    when(cargo.getTrackingId()).thenReturn(trackingId);
    // Call the method under test
    String result = realtimecargotrackingviewadapter.getTrackingId();
    // Assert the result
    assertEquals("mock-tracking-id", result);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStatusCode_Misdirected() throws Exception{
        realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
        when(cargo.getDelivery()).thenReturn(delivery);
        when(delivery.isMisdirected()).thenReturn(true);
        assertEquals("MISDIRECTED", realtimecargotrackingviewadapter.getStatusCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStatusCode_AtDestination() throws Exception{
        realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
        when(cargo.getDelivery()).thenReturn(delivery);
        when(delivery.isUnloadedAtDestination()).thenReturn(true);
        assertEquals("AT_DESTINATION", realtimecargotrackingviewadapter.getStatusCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStatusCode_TransportStatus() throws Exception{
        realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
        when(cargo.getDelivery()).thenReturn(delivery);
        when(delivery.getTransportStatus()).thenReturn(transportStatus);
        assertEquals(transportStatus.toString(), realtimecargotrackingviewadapter.getStatusCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testisMisdirected_JwfF0() {
    RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    when(cargo.getDelivery()).thenReturn(new Delivery()); // Return a misdirected delivery
    ((Delivery) cargo.getDelivery()).setUnloadedAtDestination(true);
    boolean result = realtimecargotrackingviewadapter.isAtDestination();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_isAtDestination_ANLh0() throws Exception{
    RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isUnloadedAtDestination()).thenReturn(true);
    boolean result = realtimecargotrackingviewadapter.isAtDestination();
    assertTrue(result);
}
}