/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestination_cYpZ0() {
        DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
        String trackingId = "12345";
        String destinationUnLocode = "DEHAM";
        facade.changeDestination(trackingId, destinationUnLocode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListAllTrackingIds_qSVN0() {
        DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
        List<String> trackingIds = defaultBookingServiceFacade.listAllTrackingIds();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListAllTrackingIdsCargoRepositoryFindAll_hQVt1() {
        DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
        List<Cargo> cargos = new ArrayList<>();
        List<String> trackingIds = defaultBookingServiceFacade.listAllTrackingIds();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBookNewCargoNullDestination_LAKM2() {
        DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
        String origin = "origin";
        String destination = null;
        LocalDate arrivalDeadline = LocalDate.now();
        try {
            facade.bookNewCargo(origin, destination, arrivalDeadline);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBookNewCargoNullArrivalDeadline_MEsQ3() {
        DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
        String origin = "origin";
        String destination = "destination";
        LocalDate arrivalDeadline = null;
        try {
            facade.bookNewCargo(origin, destination, arrivalDeadline);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAssignCargoToRoute_ItineraryCreation_pvDt0() {
        DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
        RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
        String trackingIdStr = "testTrackingId";
        defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_NWcQ0_JnkH0() {
    String trackingId = "testTrackingId";
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChangeDeadline_MNYq0_UksE0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = UUID.randomUUID().toString();
    LocalDate arrivalDeadline = LocalDate.now().plusDays(1);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingId);
    assertEquals(arrivalDeadline.toString(), cargoRoute.getArrivalDeadline());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AssembleItinerary_ncwO1_XBIo0_1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertNotNull(cargoRoute);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AssembleItinerary_ncwO1_XBIo0_2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("testTrackingId", cargoRoute.getTrackingId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected final destination name", cargoRoute.getFinalDestinationName(), "Expected final destination");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected final destination", cargoRoute.getFinalDestination(), "Expected final destination");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected tracking id", cargoRoute.getTrackingId(), "Expected tracking id");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_4() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected final destination code", cargoRoute.getFinalDestinationCode(), "Expected final destination code");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_5() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected origin code", cargoRoute.getOriginCode(), "Expected origin code");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_6() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected next location", cargoRoute.getNextLocation(), "Expected next location");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_7() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected origin name", cargoRoute.getOriginName(), "Expected origin name");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_8() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected origin", cargoRoute.getOrigin(), "Expected origin");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_9() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected arrival deadline", cargoRoute.getArrivalDeadline(), "Expected arrival deadline");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_10() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected last known location name", cargoRoute.getLastKnownLocationName(), "Expected last known location name");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_11() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected last known location", cargoRoute.getLastKnownLocation(), "Expected last known location");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_12() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected transport status", cargoRoute.getTransportStatus(), "Expected transport status");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_13() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected number of legs", cargoRoute.getLegs().size(), "Expected number of legs");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_AllSteps_EOme4_PHvc0_14() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(trackingIdStr);
    assertEquals("Expected last known location code", cargoRoute.getLastKnownLocationCode(), "Expected last known location code");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRequestPossibleRoutesForCargoNullTrackingId_uRYi2_zkvs0_fid3() {
    try {
        DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
        CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("trackingId cannot be null", e.getMessage());
    }
}
}