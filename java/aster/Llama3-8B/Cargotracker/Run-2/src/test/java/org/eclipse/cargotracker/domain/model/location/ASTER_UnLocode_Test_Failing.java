/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnLocode_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdString_UEus0() {
        UnLocode unLocode = new UnLocode("US LAX");
        String result = unLocode.getIdString();
        assertEquals("US LAX", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_KKak0() {
    UnLocode unLocode = new UnLocode("US LAX");
    boolean result = unLocode.equals(unLocode);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_SNMz1() {
    UnLocode unLocode = new UnLocode("US LAX");
    boolean result = unLocode.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_pjYv2() {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode("US ORD");
    boolean result = unLocode1.equals(unLocode2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectDifferentConstructor_ekDM3() {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode();
    boolean result = unLocode1.equals(unLocode2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_xGHw0() {
        UnLocode unLocode = new UnLocode("DE HAM");
        String result = unLocode.toString();
        assert result.equals("DE HAM");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringEmpty_ACQB1() {
        UnLocode unLocode = new UnLocode();
        String result = unLocode.toString();
        assert result.equals("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsSameObject_AcFS0() {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = unLocode1;
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsDifferentObject_oqNQ1() {
    UnLocode unLocode1 = new UnLocode("DE HAM");
    UnLocode unLocode2 = new UnLocode("DE HAM");
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsNullObject_Pnpd2() {
    UnLocode unLocode1 = new UnLocode("DE HAM");
    boolean result = unLocode1.sameValueAs(null);
    assert(!result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_iBQd0() {
        UnLocode unLocode1 = new UnLocode("US LAX");
        UnLocode unLocode2 = new UnLocode("US LAX");
        assertEquals(unLocode1.hashCode(), unLocode2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdStringEmpty_rkbJ1_fid1() {
        UnLocode unLocode = new UnLocode();
        String result = unLocode.getIdString();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsSameObject_AcFS0_fid1() {
    UnLocode unLocode1 = new UnLocode("DE HAM");
    UnLocode unLocode2 = unLocode1;
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert(result);
}
}