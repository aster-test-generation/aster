/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;
import java.time.LocalDateTime;
import org.eclipse.cargotracker.application.util.DateConverter;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_EventLogger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionTimePattern_mIOQ0() {
        EventLogger eventLogger = new EventLogger();
        String expected = DateConverter.DATE_TIME_FORMAT;
        String actual = eventLogger.getCompletionTimePattern();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocation_ZuYb1() {
        EventLogger eventLogger = new EventLogger();
        eventLogger.setLocation("Test Location");
        assertEquals("Test Location", eventLogger.getLocation());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionTime_MrzG0() {
        EventLogger eventLogger = new EventLogger();
        LocalDateTime completionTime = LocalDateTime.now();
        eventLogger.setCompletionTime(completionTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVoyageNumber_YXJq0() {
        EventLogger eventLogger = new EventLogger();
        String voyageNumber = "123";
        eventLogger.setVoyageNumber(voyageNumber);
        assertEquals(voyageNumber, eventLogger.getVoyageNumber());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTrackingId_oOtY0() {
        EventLogger eventLogger = new EventLogger();
        eventLogger.setTrackingId("12345");
        assertEquals("12345", eventLogger.getTrackingId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTrackingId_JXmo0_fid1() {
        EventLogger eventLogger = new EventLogger();
        String trackingId = eventLogger.getTrackingId();
    assertNull(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocation_wxsH0_fid1() {
        EventLogger eventLogger = new EventLogger();
        String location = eventLogger.getLocation();
    assertNull(location);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTrackingId_capQ0_ORhZ0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    assertEquals("trackingId", eventLogger.getTrackingId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTrackingId_mIKX1_TbNu0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("TrackingId");
    assertEquals("TrackingId", eventLogger.getTrackingId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTrackingIdNull_gjJi5_VSPl1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId(null);
    assertEquals(null, eventLogger.getTrackingId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTrackingId_RQOQ8_GpKr0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("testTrackingId");
    assertEquals("testTrackingId", eventLogger.getTrackingId());
}
}