/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Delivery_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ReturnsHashCode_Aecz0() {
        Delivery delivery = new Delivery();
        int hashCode = delivery.hashCode();
        assertEquals(0, hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_AppendRoutingStatus_rLMb8_XDJt0() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.valueOf("routingStatus")); 
    int hashCode = delivery.hashCode();
    assertEquals(new HashCodeBuilder().append("transportStatus").append("lastKnownLocation").append("currentVoyage").append(true).append("eta").append("nextExpectedActivity").append(true).append(delivery.getRoutingStatus()).toHashCode(), hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_AppendLastEvent_YwNe10_YvtY0() {
    Delivery delivery = new Delivery();
    HandlingEvent lastEvent = new HandlingEvent();
    delivery.setLastEvent(lastEvent);
    int hashCode = delivery.hashCode();
    assertEquals(new HashCodeBuilder().append("transportStatus").append("lastKnownLocation").append("currentVoyage").append(true).append("eta").append("nextExpectedActivity").append(true).append("routingStatus").append("calculatedAt").append(lastEvent.hashCode()).toHashCode(), hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_AppendMisdirected_eWlx4_aSps0() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    int hashCode = delivery.hashCode();
    assertEquals(new HashCodeBuilder().append("transportStatus").append("lastKnownLocation").append("currentVoyage").append(true).toHashCode(), hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObjectDifferentValue_HXeG6_QraD1() {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(delivery);
    Assertions.assertFalse(result);
}
}