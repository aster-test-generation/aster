/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TrackingId_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdString_UwDN0() {
        TrackingId trackingId = new TrackingId("testId");
        String result = trackingId.getIdString();
        assertEquals("testId", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_Zwfu0() {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(id1);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_YFal1() {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_XnkQ2() {
    TrackingId id1 = new TrackingId("id");
    Object obj = new Object();
    boolean result = id1.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_cOku3() {
    TrackingId id1 = new TrackingId("id");
    TrackingId id2 = new TrackingId("id");
    boolean result = id1.equals(id2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iMJG0() {
        TrackingId trackingId = new TrackingId("testId");
        String result = trackingId.toString();
        assert result.equals("testId");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsNull_rzdA0() {
    TrackingId trackingId = new TrackingId("123");
    boolean result = trackingId.sameValueAs(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsDifferentId_rXmR1() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameValueAsSameId_NJgR2() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assert result;
}
}