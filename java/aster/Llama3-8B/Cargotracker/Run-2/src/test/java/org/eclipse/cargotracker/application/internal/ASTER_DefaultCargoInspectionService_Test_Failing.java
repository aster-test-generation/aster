/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DefaultCargoInspectionService_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInspectCargoExistingCargo_aUXU0() {
        DefaultCargoInspectionService service = new DefaultCargoInspectionService();
        TrackingId trackingId = new TrackingId("existingId");
        Cargo cargo = new Cargo();
        service.inspectCargo(trackingId);
        assertEquals("existingId", trackingId.getIdString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInspectCargoNonExistingCargo_yuOp1() {
        DefaultCargoInspectionService service = new DefaultCargoInspectionService();
        TrackingId trackingId = new TrackingId("nonExistingId");
        service.inspectCargo(trackingId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInspectCargoMisdirectedCargo_xMUh2() {
        DefaultCargoInspectionService service = new DefaultCargoInspectionService();
        TrackingId trackingId = new TrackingId("misdirectedId");
        Cargo cargo = new Cargo();
        service.inspectCargo(trackingId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInspectCargoArrivedCargo_xLEd3() {
        DefaultCargoInspectionService service = new DefaultCargoInspectionService();
        TrackingId trackingId = new TrackingId("arrivedId");
        Cargo cargo = new Cargo();
        service.inspectCargo(trackingId);
    }
}