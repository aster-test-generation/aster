/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;
import java.time.LocalDateTime;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.shared.DomainObjectUtils;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Passing {
private Delivery delivery;
@Mock
    private HandlingHistory handlingHistory;
@Mock
    private LocalDateTime eta;
@Mock
    private DomainObjectUtils domainObjectUtils;
@Mock
    private HandlingActivity nextExpectedActivity;
@Mock
    private Voyage currentVoyage;
@Mock
    private RoutingStatus routingStatus;
@Mock
    private boolean isUnloadedAtDestination;
@Mock
    private HandlingEvent lastEvent;
@Mock
    private RouteSpecification routeSpecification;
@Mock
    private LocalDateTime calculatedAt;
@Mock
    private HandlingEvent handlingEvent;
@Mock
    private boolean misdirected;
@Mock
    private TransportStatus transportStatus;
@Mock
    private Itinerary itinerary;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentVoyage_qFaq0() {
        Delivery delivery = new Delivery();
        Voyage voyage = delivery.getCurrentVoyage();
        assertEquals(Voyage.NONE, voyage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_HlFA0() {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(delivery);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_LXaF1() {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentClass_SfDk2() {
    Delivery delivery = new Delivery();
    Object obj = new Object();
    boolean result = delivery.equals(obj);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRoutingStatus_yIBr0() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetMisdirected() throws Exception{
        delivery = new Delivery();
        // Arrange
        boolean expectedMisdirected = true;
        // Act
        delivery.setMisdirected(expectedMisdirected);
        // Assert
        Assertions.assertTrue(delivery.isMisdirected());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnloadedAtDestination() throws Exception {
        delivery = new Delivery();
        // Arrange
        boolean expected = true;
        // Act
        delivery.setUnloadedAtDestination(expected);
        // Assert
        Assertions.assertTrue(isUnloadedAtDestination);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTransportStatus() throws Exception {
        delivery = new Delivery();
        TransportStatus expectedStatus = TransportStatus.IN_PORT;
        delivery.setTransportStatus(expectedStatus);
        assertEquals(expectedStatus, delivery.getTransportStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
        // Create another Delivery object with the same attributes
        Delivery anotherDelivery = new Delivery(handlingEvent, itinerary, routeSpecification);
        // Assert that both objects are equal
        // Create another Delivery object with different attributes
        HandlingEvent differentHandlingEvent = Mockito.mock(HandlingEvent.class);
        Itinerary differentItinerary = Mockito.mock(Itinerary.class);
        RouteSpecification differentRouteSpecification = Mockito.mock(RouteSpecification.class);
        Delivery differentDelivery = new Delivery(differentHandlingEvent, differentItinerary, differentRouteSpecification);
        // Assert that both objects are not equal
        assertEquals(delivery, anotherDelivery);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
        // Create another Delivery object with the same attributes
        Delivery anotherDelivery = new Delivery(handlingEvent, itinerary, routeSpecification);
        // Assert that both objects are equal
        // Create another Delivery object with different attributes
        HandlingEvent differentHandlingEvent = Mockito.mock(HandlingEvent.class);
        Itinerary differentItinerary = Mockito.mock(Itinerary.class);
        RouteSpecification differentRouteSpecification = Mockito.mock(RouteSpecification.class);
        Delivery differentDelivery = new Delivery(differentHandlingEvent, differentItinerary, differentRouteSpecification);
        // Assert that both objects are not equal
        assertNotEquals(delivery, differentDelivery);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCalculatedAt() throws Exception{
        calculatedAt = LocalDateTime.now();
        delivery = new Delivery();
        delivery.setCalculatedAt(calculatedAt);
        assertEquals(calculatedAt, delivery.getCalculatedAt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRoutingStatus() throws Exception {
        delivery = new Delivery();
        RoutingStatus expectedRoutingStatus = RoutingStatus.ROUTED;
        delivery.setRoutingStatus(expectedRoutingStatus);
        assertEquals(expectedRoutingStatus, delivery.getRoutingStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetEstimatedTimeOfArrival() throws Exception{
        eta = LocalDateTime.now();
        delivery = new Delivery();
        Mockito.when(delivery.getEstimatedTimeOfArrival()).thenReturn(eta);
        assertEquals(eta, delivery.getEstimatedTimeOfArrival());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentVoyage_UqGP0() throws Exception {
    Voyage currentVoyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Delivery delivery = new Delivery();
    Mockito.when(domainObjectUtils.nullSafe(delivery, Voyage.class)).thenReturn(currentVoyage);
    assertEquals(currentVoyage, delivery.getCurrentVoyage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastKnownLocation_wkBf0() throws Exception {
    UnLocode unLocode = mock(UnLocode.class);
    Location lastKnownLocation = new Location(unLocode, "name");
    delivery = new Delivery();
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastKnownLocation_UFYj0_UEei0() {
    Delivery delivery = new Delivery();
    UnLocode unLocode = new UnLocode("DEHAM");
    Location location = new Location(unLocode, "Hamburg");
    delivery.setLastKnownLocation(location);
    assertEquals(delivery.getLastKnownLocation(), new Location(unLocode, "Hamburg"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetTransportStatus_gnTt0() {
    TransportStatus transportStatus = TransportStatus.values()[0];
    delivery = new Delivery(null, new Itinerary(new ArrayList<>()), new RouteSpecification());
    TransportStatus result = delivery.getTransportStatus();
    assertEquals(transportStatus, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetTransportStatus_Ejii1() throws Exception{
    TransportStatus transportStatus = TransportStatus.values()[0];
    delivery = new Delivery();
    Mockito.when(delivery.getTransportStatus()).thenReturn(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRoutingStatus_YfhP0() throws Exception {
    Delivery delivery = new Delivery();
    TransportStatus expectedRoutingStatus = TransportStatus.valueOf("LOAD"); // Assuming TransportStatus is an enum
    delivery.setTransportStatus(expectedRoutingStatus);
    assertEquals(expectedRoutingStatus, delivery.getTransportStatus());
}
}