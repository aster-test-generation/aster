/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HandlingReport_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnLocode_WtqM0() {
        HandlingReport handlingReport = new HandlingReport();
        handlingReport.setUnLocode("TestUnLocode");
        assertEquals("TestUnLocode", handlingReport.getUnLocode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEventType_ODsn0() {
        HandlingReport handlingReport = new HandlingReport();
        handlingReport.setEventType("TestEventType");
        assertEquals("TestEventType", handlingReport.getEventType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTrackingId_DTuR0() {
        HandlingReport handlingReport = new HandlingReport();
        String trackingId = handlingReport.getTrackingId();
    assertNull(trackingId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVoyageNumber_BHdw0() {
        HandlingReport handlingReport = new HandlingReport();
        handlingReport.setVoyageNumber("Test Voyage Number");
        assertEquals("Test Voyage Number", handlingReport.getVoyageNumber());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionTime_aHBk0() {
        HandlingReport handlingReport = new HandlingReport();
        String result = handlingReport.getCompletionTime();
    assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionTime_pQVd0() {
        HandlingReport report = new HandlingReport();
        report.setCompletionTime("2022-01-01 12:00:00");
        assertEquals("2022-01-01 12:00:00", report.getCompletionTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTrackingId_aSaw0() {
        HandlingReport handlingReport = new HandlingReport();
        handlingReport.setTrackingId("testTrackingId");
        assertEquals("testTrackingId", handlingReport.getTrackingId());
    }
}