/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;
import java.time.LocalDateTime;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GraphTraversalService_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindShortestPath_IPAg0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("origin", "location1", "location2", "location3", "location4", "destination");
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindShortestPathWithMultipleCandidates_IJQG1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("origin", "location1", "location2", "location3", "location4", "location5", "location6", "destination");
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(2, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindShortestPathWithRandomChunkOfLocations_bIpk2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("origin", "location1", "location2", "location3", "location4", "location5", "location6", "destination");
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(1, result.get(0).getTransitEdges().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindShortestPath_wJXE0() {
        GraphTraversalService graphTraversalService = new GraphTraversalService();
        String originUnLocode = "origin";
        String destinationUnLocode = "destination";
        String deadline = "deadline";
        List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindShortestPathWithRandomNextDate_irbp1() {
        GraphTraversalService graphTraversalService = new GraphTraversalService();
        String originUnLocode = "origin";
        String destinationUnLocode = "destination";
        String deadline = "deadline";
        LocalDateTime date = LocalDateTime.now();
        List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindShortestPath_tzZr0_EOBi0() {
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assert candidates != null;
    assert candidates.size() > 0;
}
}