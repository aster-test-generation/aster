/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;
import java.util.EnumMap;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.EnumMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Failing {
@Mock
    private Cargo cargo;
private RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;
@Mock
  private RouteSpecification routeSpecification;
@Mock
  private LocationViewAdapter locationViewAdapter;
@Mock
    private Delivery delivery;
@Mock
    private RoutingStatus routingStatus;
@Mock
    private TransportStatus transportStatus;
@Mock
    private LocationViewAdapter lastKnownLocation;
@Mock
    private TrackingId trackingId;
@Mock
    private EnumMap<TransportStatus, String> transportStatusLabels;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStatusCode_NotRouted() throws Exception{
        realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
        when(cargo.getDelivery()).thenReturn(delivery);
        when(delivery.getRoutingStatus()).thenReturn(routingStatus);
        when(routingStatus == RoutingStatus.NOT_ROUTED).thenReturn(true);
        assertEquals("NOT_ROUTED", realtimecargotrackingviewadapter.getStatusCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStatusCode_MisRouted() throws Exception{
        realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
        when(cargo.getDelivery()).thenReturn(delivery);
        when(delivery.getRoutingStatus()).thenReturn(routingStatus);
        when(routingStatus == RoutingStatus.MISROUTED).thenReturn(true);
        assertEquals("MISROUTED", realtimecargotrackingviewadapter.getStatusCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStatusCode_Misdirected_iTZQ0() throws Exception{
    RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Delivery delivery = new Delivery();
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isUnloadedAtDestination()).thenReturn(false);
    assertEquals("MISDIRECTED", realtimecargotrackingviewadapter.getStatusCode());
}
}