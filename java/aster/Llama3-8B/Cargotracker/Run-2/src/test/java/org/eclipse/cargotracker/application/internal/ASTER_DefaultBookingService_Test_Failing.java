/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;
import java.time.LocalDate;
import java.util.List;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DefaultBookingService_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestination_bExU0() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        TrackingId trackingId = new TrackingId("123");
        UnLocode unLocode = new UnLocode("DE FRA");
        defaultBookingService.changeDestination(trackingId, unLocode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestinationNullTrackingId_olWL1() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        UnLocode unLocode = new UnLocode("DE FRA");
        defaultBookingService.changeDestination(null, unLocode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestinationNullUnLocode_RIpB2() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        TrackingId trackingId = new TrackingId("123");
        defaultBookingService.changeDestination(trackingId, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestinationInvalidTrackingId_uSYM3() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        TrackingId trackingId = new TrackingId("Invalid");
        UnLocode unLocode = new UnLocode("DE FRA");
        defaultBookingService.changeDestination(trackingId, unLocode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChangeDestinationInvalidUnLocode_xCRQ4() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        TrackingId trackingId = new TrackingId("123");
        UnLocode unLocode = new UnLocode("Invalid");
        defaultBookingService.changeDestination(trackingId, unLocode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssignCargoToRoute_wIpz0() {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    TrackingId trackingId = new TrackingId("123");
    defaultBookingService.assignCargoToRoute(itinerary, trackingId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBookNewCargo_BHVQ0() {
        DefaultBookingService defaultBookingService = new DefaultBookingService();
        UnLocode originUnLocode = new UnLocode("US LAX");
        UnLocode destinationUnLocode = new UnLocode("US JFK");
        LocalDate arrivalDeadline = LocalDate.now();
        TrackingId trackingId = defaultBookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
        assertNotNull(trackingId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRequestPossibleRoutesForCargoCargoFound_YzSV0() {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("testId");
    Cargo cargo = new Cargo();
    List<Itinerary> result = defaultBookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(result.size(), 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRequestPossibleRoutesForCargoCargoNotFound_KhNA1() {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("testId");
    List<Itinerary> result = defaultBookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(result.size(), 0);
}
}