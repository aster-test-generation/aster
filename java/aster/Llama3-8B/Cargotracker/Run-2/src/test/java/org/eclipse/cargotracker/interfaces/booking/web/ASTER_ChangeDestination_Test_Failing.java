/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ChangeDestination_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertNotNull(cargoRoute);
        assertEquals("getFinalDestinationName", cargoRoute.getFinalDestinationName());
        assertEquals("getFinalDestination", cargoRoute.getFinalDestination());
        assertEquals("getTrackingId", cargoRoute.getTrackingId());
        assertEquals("getFinalDestinationCode", cargoRoute.getFinalDestinationCode());
        assertEquals("getOriginCode", cargoRoute.getOriginCode());
        assertEquals("getNextLocation", cargoRoute.getNextLocation());
        assertEquals("getOriginName", cargoRoute.getOriginName());
        assertEquals("getOrigin", cargoRoute.getOrigin());
        assertEquals("getArrivalDeadline", cargoRoute.getArrivalDeadline());
        assertEquals("getLastKnownLocationName", cargoRoute.getLastKnownLocationName());
        assertEquals("getLastKnownLocation", cargoRoute.getLastKnownLocation());
        assertEquals("getTransportStatus", cargoRoute.getTransportStatus());
        assertNotNull(cargoRoute.getLegs());
        assertEquals("getLastKnownLocationCode", cargoRoute.getLastKnownLocationCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDestinationUnlocode_AZza0() {
        ChangeDestination changeDestination = new ChangeDestination();
        String expected = "expectedUnlocode";
        String actual = changeDestination.getDestinationUnlocode();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTrackingId_mZaZ0() {
        ChangeDestination changeDestination = new ChangeDestination();
        String trackingId = changeDestination.getTrackingId();
        assertEquals("Expected trackingId", "actual trackingId", trackingId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_1() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertNotNull(cargoRoute);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_2() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getFinalDestinationName", cargoRoute.getFinalDestinationName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_3() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getFinalDestination", cargoRoute.getFinalDestination());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_4() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getTrackingId", cargoRoute.getTrackingId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_5() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getFinalDestinationCode", cargoRoute.getFinalDestinationCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_6() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getOriginCode", cargoRoute.getOriginCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_7() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getNextLocation", cargoRoute.getNextLocation());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_8() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getOriginName", cargoRoute.getOriginName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_9() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getOrigin", cargoRoute.getOrigin());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_10() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getArrivalDeadline", cargoRoute.getArrivalDeadline());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_11() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getLastKnownLocationName", cargoRoute.getLastKnownLocationName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_12() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getLastKnownLocation", cargoRoute.getLastKnownLocation());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_13() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getTransportStatus", cargoRoute.getTransportStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_14() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertNotNull(cargoRoute.getLegs());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCargo_ffLR0_15() {
        ChangeDestination changeDestination = new ChangeDestination();
        CargoRoute cargoRoute = changeDestination.getCargo();
        assertEquals("getLastKnownLocationCode", cargoRoute.getLastKnownLocationCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDestinationUnlocode_AZza0_fid2() {
        ChangeDestination changeDestination = new ChangeDestination();
        String expected = "expectedUnlocode";
        String actual = changeDestination.getDestinationUnlocode();
    assertNull(expected);
    }
}