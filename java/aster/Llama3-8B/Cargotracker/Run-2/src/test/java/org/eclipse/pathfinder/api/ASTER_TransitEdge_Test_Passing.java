/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;
import java.time.LocalDateTime;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TransitEdge_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFromUnLocode_fVqo1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getFromUnLocode();
    assertEquals("fromUnLocode", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetToUnLocode_BhIe0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setToUnLocode("testToUnLocode");
    assertEquals("testToUnLocode", transitEdge.getToUnLocode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_POLa0() {
        TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
        String result = transitEdge.toString();
        assert result.equals("TransitEdge{voyageNumber=voyageNumber, fromUnLocode=fromUnLocode, toUnLocode=toUnLocode, fromDate=" + transitEdge.getFromDate() + ", toDate=" + transitEdge.getToDate() + '}');
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVoyageNumber_wtHl0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String voyageNumber = transitEdge.getVoyageNumber();
    assertEquals("voyageNumber", voyageNumber);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetToDate_qrmT0() {
        TransitEdge transitEdge = new TransitEdge("VoyageNumber", "FromUnLocode", "ToUnLocode", LocalDateTime.now(), LocalDateTime.now());
        LocalDateTime toDate = transitEdge.getToDate();
        assert toDate != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFromUnLocode_TvBp0() {
        TransitEdge transitEdge = new TransitEdge();
        transitEdge.setFromUnLocode("TestUnLocode");
        assertEquals("TestUnLocode", transitEdge.getFromUnLocode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetToUnLocode_XEhx0() {
    TransitEdge transitEdge = new TransitEdge("VoyageNumber", "FromUnLocode", "ToUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getToUnLocode();
    assertEquals("ToUnLocode", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVoyageNumber_iJBW0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber("Test Voyage Number");
    assertEquals("Test Voyage Number", transitEdge.getVoyageNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetFromDate_yklZ0() {
        TransitEdge transitEdge = new TransitEdge();
        LocalDateTime fromDate = LocalDateTime.now();
        transitEdge.setFromDate(fromDate);
        assertEquals(fromDate, transitEdge.getFromDate());
    }
}