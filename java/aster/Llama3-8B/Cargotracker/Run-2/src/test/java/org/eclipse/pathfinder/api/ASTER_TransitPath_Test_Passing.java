/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TransitPath_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTransitEdges_MGvd0_1() {
        TransitPath transitPath = new TransitPath();
        List<TransitEdge> transitEdges = transitPath.getTransitEdges();
        assertNotNull(transitEdges);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTransitEdges_MGvd0_2() {
        TransitPath transitPath = new TransitPath();
        List<TransitEdge> transitEdges = transitPath.getTransitEdges();
        assertEquals(0, transitEdges.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_xocw0() {
        List<TransitEdge> transitEdges = new ArrayList<>();
        TransitPath transitPath = new TransitPath(transitEdges);
        String result = transitPath.toString();
        assert result.equals("TransitPath{transitEdges=[]}");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTransitEdges_Xnoe0() {
        TransitPath transitPath = new TransitPath();
        List<TransitEdge> transitEdges = new ArrayList<>();
        transitEdges.add(new TransitEdge());
        transitPath.setTransitEdges(transitEdges);
    }
}