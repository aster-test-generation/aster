/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Passing {
Voyage voyage;
Voyage anotherVoyage;
@Mock
    VoyageNumber voyageNumber;
@Mock
    Schedule schedule;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        VoyageNumber voyageNumber = new VoyageNumber("123");
        Schedule schedule = new Schedule();
        voyage = new Voyage(voyageNumber, schedule);
        anotherVoyage = new Voyage(new VoyageNumber("123"), new Schedule());
        assertEquals(voyage, anotherVoyage);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        VoyageNumber voyageNumber = new VoyageNumber("123");
        Schedule schedule = new Schedule();
        voyage = new Voyage(voyageNumber, schedule);
        anotherVoyage = new Voyage(new VoyageNumber("123"), new Schedule());
        assertNotEquals(voyage, new Object());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        VoyageNumber voyageNumber = new VoyageNumber("123");
        Schedule schedule = new Schedule();
        voyage = new Voyage(voyageNumber, schedule);
        anotherVoyage = new Voyage(new VoyageNumber("123"), new Schedule());
        assertNotEquals(voyage, null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_lisM0() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = voyage1;
    boolean result = voyage1.equals(voyage2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsNull_nmXC1() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage.equals(null);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsDifferentObject_yBin2() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    boolean result = voyage1.equals(voyage2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsSameObject_NMRU3() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage1.equals(voyage2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSchedule_atkz0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Schedule actual = voyage.getSchedule();
    assertEquals(schedule, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CAvl0() {
        VoyageNumber voyageNumber = new VoyageNumber("123");
        Schedule schedule = new Schedule();
        Voyage voyage = new Voyage(voyageNumber, schedule);
        assertEquals("Voyage 123", voyage.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsameIdentityAs() throws Exception {
        voyage = new Voyage(voyageNumber, schedule);
        // Arrange
        Voyage otherVoyage = new Voyage(voyageNumber, schedule);
        // Act
        boolean result = voyage.sameIdentityAs(otherVoyage);
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameIdentityAsTrue_NJsW0() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage1.sameIdentityAs(voyage2);
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameIdentityAsFalse_iPXs1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    boolean result = voyage1.sameIdentityAs(voyage2);
    assert !result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSameIdentityAsNull_MxjM2() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    boolean result = voyage.sameIdentityAs(null);
    assert !result;
}
}