/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HandlingActivity_Test_Failing {
HandlingActivity handlingActivity;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEmptyWithNullTypeAndLocationAndVoyage_SVVt0() {
    HandlingActivity activity = new HandlingActivity(null, null, null);
    boolean result = activity.isEmpty();
    assert result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVoyage_BfHA0() {
    UnLocode unLocode = new UnLocode("USA");
    Location location = new Location(unLocode, "New York");
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, location, new Voyage(new VoyageNumber("123"), new Schedule()));
    Voyage actual = handlingActivity.getVoyage();
    assertEquals(new Voyage(new VoyageNumber("123"), new Schedule()), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_HOOL0_nFTs0() {
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(new VoyageNumber("2020071397"), schedule);
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, location, voyage);
    int hashCode = handlingActivity.hashCode();
    assertEquals(2020071397, hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_HOOL0_nFTs0_fid3() {
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(new VoyageNumber("123"), schedule);
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, location, voyage);
    int hashCode = handlingActivity.hashCode();
    assertEquals(123, hashCode);
}
}