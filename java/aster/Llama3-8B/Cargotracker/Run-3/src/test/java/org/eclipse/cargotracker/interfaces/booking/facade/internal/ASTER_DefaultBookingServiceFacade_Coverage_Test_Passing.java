/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.BookingService;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.CargoRouteDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoNullOrigin_GYaM1_StSm0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String destination = "destination";
    LocalDate arrivalDeadline = LocalDate.now();
    String expectedTrackingId = "expectedTrackingId";
    assertThrows(NullPointerException.class, () -> defaultBookingServiceFacade.loadCargoForRouting(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoNullDestination_MIkw2_FMwN0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    LocalDate arrivalDeadline = LocalDate.now();
    String expectedTrackingId = "expectedTrackingId";
    try {
      defaultBookingServiceFacade.loadCargoForRouting(expectedTrackingId);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidOrigin_mbic5_hSiS0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String destination = "destination";
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      defaultBookingServiceFacade.loadCargoForRouting("trackingId");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidDestination_TKZl6_xgDe0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(origin);
      fail("Expected exception");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setup_hfKA0_OarV0() {
    BookingService bookingService = mock(BookingService.class);
    CargoRouteDtoAssembler cargoRouteDtoAssembler = mock(CargoRouteDtoAssembler.class);
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    TrackingId trackingId = new TrackingId("trackingId");
  }
}