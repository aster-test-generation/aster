/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaCargoRepository_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_isYi0() throws Exception {
    JpaCargoRepository repository = new JpaCargoRepository();
    TrackingId trackingId = repository.nextTrackingId();
    String expectedId = UUID.randomUUID().toString().toUpperCase().substring(0, UUID.randomUUID().toString().toUpperCase().indexOf("-"));
    assertEquals(expectedId, trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingIdHashCode_XKYJ1() throws Exception {
    JpaCargoRepository repository = new JpaCargoRepository();
    TrackingId trackingId = repository.nextTrackingId();
    assertEquals(trackingId.hashCode(), trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindExistingTrackingId_FZYi0() throws Exception {
    JpaCargoRepository repository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("123");
    Cargo expectedCargo = new Cargo();
    Cargo actualCargo = repository.find(trackingId);
    assertEquals(expectedCargo, actualCargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindNonExistingTrackingId_vmvr1() throws Exception {
    JpaCargoRepository repository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("nonExistingId");
    Cargo actualCargo = repository.find(trackingId);
    assertNull(actualCargo);
  }
}