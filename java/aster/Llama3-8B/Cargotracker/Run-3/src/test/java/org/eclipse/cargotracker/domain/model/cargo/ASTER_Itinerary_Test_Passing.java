/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInitialDepartureLocation_EmptyLegs_ReturnsUnknown_yykp0() throws Exception {
    Itinerary itinerary = new Itinerary();
    Location result = itinerary.getInitialDepartureLocation();
    assertEquals(Location.UNKNOWN, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_xiaz0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    boolean result = itinerary.equals(itinerary);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_ctXn1() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    boolean result = itinerary.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_ITKW2() throws Exception {
    Itinerary itinerary1 = new Itinerary(new ArrayList<>());
    Itinerary itinerary2 = new Itinerary(new ArrayList<>());
    boolean result = itinerary1.equals(itinerary2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalLocation_EmptyLegs_ReturnsUnknown_jlvf0() throws Exception {
    Itinerary itinerary = new Itinerary();
    Location result = itinerary.getFinalArrivalLocation();
    assertEquals(Location.UNKNOWN, result);
  }
}