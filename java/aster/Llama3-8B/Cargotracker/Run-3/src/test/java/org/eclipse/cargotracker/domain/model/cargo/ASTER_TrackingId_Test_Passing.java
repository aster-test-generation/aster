/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithId_QNNg0() throws Exception {
    TrackingId trackingId = new TrackingId("testId");
    assertEquals("testId", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithoutId_xKBB1() throws Exception {
    TrackingId trackingId = new TrackingId();
    assertEquals("", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_dphs0() throws Exception {
    TrackingId trackingId = new TrackingId("testId");
    assertEquals("testId", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nGvU0() throws Exception {
    TrackingId trackingId = new TrackingId("testId");
    assertEquals("testId".hashCode(), trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsSameId_Wfwn0() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    assertTrue(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsDifferentId_MmTw1() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    assertFalse(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsNull_gjSP2() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    assertFalse(trackingId1.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_zKPn0() throws Exception {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(id1);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_Pnef1() throws Exception {
    TrackingId id1 = new TrackingId("id");
    boolean result = id1.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_GToJ2() throws Exception {
    TrackingId id1 = new TrackingId("id");
    Object obj = new Object();
    boolean result = id1.equals(obj);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_mDsJ3() throws Exception {
    TrackingId id1 = new TrackingId("id");
    TrackingId id2 = new TrackingId("id");
    boolean result = id1.equals(id2);
    assert id1.sameValueAs(id2);
  }
}