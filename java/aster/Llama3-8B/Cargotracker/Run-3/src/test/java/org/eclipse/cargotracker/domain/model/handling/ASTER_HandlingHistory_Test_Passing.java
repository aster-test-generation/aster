/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEvent_EmptyList_ReturnsNull_RHJl0() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    HandlingEvent result = handlingHistory.getMostRecentlyCompletedEvent();
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEvent_NonEmptyList_ReturnsLastEvent_vjIs1() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(
            new HandlingEvent(),
            new HandlingEvent(),
            new HandlingEvent()
    ));
    HandlingEvent result = handlingHistory.getMostRecentlyCompletedEvent();
    assertEquals(handlingHistory.getDistinctEventsByCompletionTime().get(2), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NXXe0() throws Exception {
    Collection<HandlingEvent> handlingEvents = new ArrayList<>();
    HandlingHistory handlingHistory = new HandlingHistory(handlingEvents);
    int expectedHashCode = handlingEvents.hashCode();
    int actualHashCode = handlingHistory.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_xoEC0() throws Exception {
    HandlingHistory obj = new HandlingHistory(new ArrayList<>());
    boolean result = obj.equals(obj);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_uYyT1() throws Exception {
    HandlingHistory obj = new HandlingHistory(new ArrayList<>());
    boolean result = obj.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_WOwP2() throws Exception {
    HandlingHistory obj1 = new HandlingHistory(new ArrayList<>());
    HandlingHistory obj2 = new HandlingHistory(new ArrayList<>());
    boolean result = obj1.equals(obj2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObjectWithDifferentCollection_KKbk3() throws Exception {
    HandlingHistory obj = new HandlingHistory(new ArrayList<>());
    boolean result = obj.equals(new HandlingHistory(new ArrayList<>()));
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllHandlingEvents_bCQR0() throws Exception {
    Collection<HandlingEvent> handlingEvents = new ArrayList<>();
    HandlingHistory handlingHistory = new HandlingHistory(handlingEvents);
    List<HandlingEvent> result = handlingHistory.getAllHandlingEvents();
    assert result == handlingEvents;
  }
}