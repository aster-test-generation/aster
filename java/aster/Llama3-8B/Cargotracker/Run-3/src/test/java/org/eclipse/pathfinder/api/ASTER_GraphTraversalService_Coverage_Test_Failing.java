/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_bhxm0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "deadline";
    List<TransitPath> candidates = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(3, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_byvd0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "deadline";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_IQsX4_ebOE0() {
    String originUnLocode = "IQsX4";
    String destinationUnLocode = "IQsX4";
    String deadline = "deadline";
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(result);
  }
}