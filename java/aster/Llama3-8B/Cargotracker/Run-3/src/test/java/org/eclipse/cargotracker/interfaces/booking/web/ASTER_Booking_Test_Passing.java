/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import jakarta.faces.application.FacesMessage;
import java.time.LocalDate;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_GFiW0() throws Exception {
    Booking booking = new Booking();
    String expected = "expectedDestinationUnlocode";
    String actual = booking.getDestinationUnlocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_hfWT0() throws Exception {
    Booking booking = new Booking();
    long expectedDuration = 0;
    long actualDuration = booking.getDuration();
    assertEquals(expectedDuration, actualDuration);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadline_pdrt0() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    booking.setArrivalDeadline(arrivalDeadline);
    assert booking.getArrivalDeadline().equals(arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetReturnValue_Vemc0() throws Exception {
    Booking booking = new Booking();
    String returnValue = booking.getReturnValue();
    assertEquals("/admin/dashboard.xhtml", returnValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginName_Feuc0() throws Exception {
    Booking booking = new Booking();
    String originName = booking.getOriginName();
    assertEquals("Expected origin name", originName, "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_rnUd0() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode("LHR");
    assertEquals("London Heathrow", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSameOriginAndDestination_Qfhs0() throws Exception {
    Booking booking = new Booking();
    String result = booking.register();
    assertEquals("Origin and destination cannot be the same.", FacesMessage.SEVERITY_ERROR);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterDifferentOriginAndDestination_IGYD1() throws Exception {
    Booking booking = new Booking();
    String result = booking.register();
    assertEquals("/admin/dashboard.xhtml", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_uMqn0() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = booking.getArrivalDeadline();
    assert arrivalDeadline != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_wCUw0() throws Exception {
    Booking booking = new Booking();
    String originUnlocode = booking.getOriginUnlocode();
    assertEquals("Expected originUnlocode", originUnlocode, "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_oxGc0() throws Exception {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("LON");
    String destinationName = booking.getDestinationName();
    String expectedDestinationName = "London Heathrow";
    assert expectedDestinationName.equals(destinationName);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_bjSu0() throws Exception {
    Booking booking = new Booking();
    LocalDate today = booking.getToday();
    assertEquals(LocalDate.now(), today);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationName_SODB0() throws Exception {
    Booking booking = new Booking();
    String destinationName = booking.getDestinationName();
    assertEquals("Expected destination name", destinationName, "actual destination name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdatedWhenDurationIsGreaterThanOrEqualToMinJourneyDuration_IRmq0() throws Exception {
    Booking booking = new Booking();
    Date today = new Date();
    Date arrivalDeadline = new Date(today.getTime() + 1000 * 60 * 60 * 24 * 5); // 5 days from today
    booking.deadlineUpdated();
    assertEquals(true, booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdatedWhenDurationIsLessThanMinJourneyDuration_WXLj1() throws Exception {
    Booking booking = new Booking();
    Date today = new Date();
    Date arrivalDeadline = new Date(today.getTime() + 1000 * 60 * 60 * 24 * 1); // 1 day from today
    booking.deadlineUpdated();
    assertEquals(false, booking.isBookable());
  }
}