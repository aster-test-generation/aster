/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  private FacesMessage FacesMessage = new FacesMessage();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_ENAp0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String result = eventLogger.getCompletionTimePattern();
    assertEquals("DATE_TIME_FORMAT", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_ljBm0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = eventLogger.getVoyageNumber();
    assertEquals("Expected voyage number", "Expected voyage number", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_SZGP0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertEquals("Default location", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_EWYq0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("Default tracking id", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_ZgeC0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assert locations != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_Rdan0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = eventLogger.getEventType();
    assertEquals(HandlingEvent.Type.class, eventType.getClass());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_WgrG0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(4, eventTypes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_YOjX0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime expected = LocalDateTime.now();
    LocalDateTime actual = eventLogger.getCompletionTime();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_EttF0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("Test Location");
    assertEquals("Test Location", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_AKoD0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assert eventLogger.getCompletionTime().equals(completionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_FEsP0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    List<SelectItem> expectedTrackingIds = new ArrayList<>();
    expectedTrackingIds.add(new SelectItem("1", "Tracking ID 1"));
    expectedTrackingIds.add(new SelectItem("2", "Tracking ID 2"));
    assertEquals(expectedTrackingIds, trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_EjdU0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    assert voyages != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_ERWi0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("TestVoyageNumber");
    assertEquals("TestVoyageNumber", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_oUwL0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("testTrackingId");
    assertEquals("testTrackingId", eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeNull_ZSXS5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(null);
    assertNull(eventLogger.getEventType());
  }
}