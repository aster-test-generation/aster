/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithDefaultConstructor_wkVa0() throws Exception {
    UnLocode unLocode = new UnLocode();
    assertEquals("", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithCountryAndLocationConstructor_ygvP1() throws Exception {
    UnLocode unLocode = new UnLocode("DE HAM");
    assertEquals("DE HAM", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_wGeo0() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    assertEquals("US LAX", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringEmpty_Vyrt1() throws Exception {
    UnLocode unLocode = new UnLocode();
    assertEquals("", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_ReVL0() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    boolean result = unLocode.equals(unLocode);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_oJou1() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    boolean result = unLocode.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_CQPE2() throws Exception {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode("FR PAR");
    boolean result = unLocode1.equals(unLocode2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameValue_gtnh3() throws Exception {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode("US LAX");
    boolean result = unLocode1.equals(unLocode2);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsSameObject_oKYL0() throws Exception {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = unLocode1;
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsDifferentObjectSameValue_ThnB1() throws Exception {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode("US LAX");
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsDifferentObjectDifferentValue_ZFKk2() throws Exception {
    UnLocode unLocode1 = new UnLocode("US LAX");
    UnLocode unLocode2 = new UnLocode("US JFK");
    boolean result = unLocode1.sameValueAs(unLocode2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_VrPq1() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    int result = unLocode.hashCode();
    assertEquals(unLocode.hashCode(), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeEmpty_DXSJ2() throws Exception {
    UnLocode unLocode = new UnLocode();
    int result = unLocode.hashCode();
    assertEquals(unLocode.hashCode(), result);
  }
}