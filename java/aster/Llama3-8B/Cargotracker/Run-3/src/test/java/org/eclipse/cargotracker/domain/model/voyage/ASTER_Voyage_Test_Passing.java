/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Voyage_Test_Passing {
  VoyageNumber voyageNumber;
  Schedule schedule;
  Voyage voyage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs() throws Exception {
    voyage = new Voyage(voyageNumber, schedule);
    // Arrange
    Voyage otherVoyage = new Voyage(voyageNumber, schedule);
    // Act
    boolean result = voyage.sameIdentityAs(otherVoyage);
    // Assert
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_sYmr0_1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertNotNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_sYmr0_2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(voyage.getSchedule(), schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_eAvE0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    VoyageNumber actual = voyage.getVoyageNumber();
    VoyageNumber expected = new VoyageNumber("12345");
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_lAkG0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals("Voyage 123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_zhPC0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("1"), new Schedule());
    assertEquals(true, voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_wdtY1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("1"), new Schedule());
    assertEquals(false, voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_sszK2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("1"), new Schedule());
    assertEquals(false, voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_Dhuk3() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("1"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("2"), new Schedule());
    assertEquals(false, voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsNull_NfTj0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.sameIdentityAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsDifferentVoyageNumber_HobU1() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsSameVoyageNumber_DzQh2() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }
}