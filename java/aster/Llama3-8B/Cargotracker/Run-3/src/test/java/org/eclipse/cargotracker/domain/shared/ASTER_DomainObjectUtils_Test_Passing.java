/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeNullActual_eeNA0() throws Exception {
    String actual = null;
    String safe = "safe";
    assertEquals(safe, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeNotNullActual_FVSo1() throws Exception {
    String actual = "actual";
    String safe = "safe";
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeNullActualAndNullSafe_lDeK2() throws Exception {
    String actual = null;
    String safe = null;
    assertEquals(null, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeNotNullActualAndNullSafe_cmBp3() throws Exception {
    String actual = "actual";
    String safe = null;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeIntegerNullActual_lnKD6() throws Exception {
    Integer actual = null;
    Integer safe = 1;
    assertEquals(safe, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeIntegerNotNullActual_Nfph7() throws Exception {
    Integer actual = 1;
    Integer safe = 1;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeIntegerNullActualAndNullSafe_nLmr8() throws Exception {
    Integer actual = null;
    Integer safe = null;
    assertEquals(null, DomainObjectUtils.nullSafe(actual, safe));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeIntegerNotNullActualAndNullSafe_SFCn9() throws Exception {
    Integer actual = 1;
    Integer safe = null;
    assertEquals(actual, DomainObjectUtils.nullSafe(actual, safe));
  }
}