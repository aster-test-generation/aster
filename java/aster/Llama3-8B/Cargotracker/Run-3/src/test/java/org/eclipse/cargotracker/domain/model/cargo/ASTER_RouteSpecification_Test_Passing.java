/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  private UnLocode unLocode;
  private RouteSpecification routespecification;
  private Itinerary itinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_JSpc0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USNYC"), "New York"), new Location(new UnLocode("USLA"), "Los Angeles"), LocalDate.of(2022, 1, 1));
    Location origin = routeSpecification.getOrigin();
    assertEquals(new Location(new UnLocode("USNYC"), "New York"), origin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_Afqy0() throws Exception {
    UnLocode unLocode = new UnLocode("USNYC");
    Location origin = new Location(unLocode, "New York");
    unLocode = new UnLocode("USLA");
    Location destination = new Location(unLocode, "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    LocalDate result = routeSpecification.getArrivalDeadline();
    assert result.equals(arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_bEkG0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USNYC"), "New York"), new Location(new UnLocode("USLA"), "Los Angeles"), LocalDate.parse("2022-01-01"));
    Location destination = routeSpecification.getDestination();
    assertEquals(new Location(new UnLocode("USLA"), "Los Angeles"), destination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_CWkA0() throws Exception {
    RouteSpecification route = new RouteSpecification(new Location(new UnLocode("USNYC"), "New York"),
            new Location(new UnLocode("USLAX"), "Los Angeles"),
            java.time.LocalDate.parse("2022-01-01"));
    int result = route.hashCode();
    assertEquals(result, new HashCodeBuilder().append(route.getOrigin()).append(route.getDestination()).append(route.getArrivalDeadline()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_HWrX0() throws Exception {
    RouteSpecification route = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    boolean result = route.equals(route);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_oTmL1() throws Exception {
    RouteSpecification route1 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    RouteSpecification route2 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    boolean result = route1.equals(route2);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_FuKm2() throws Exception {
    RouteSpecification route = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    boolean result = route.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentType_dPCX3() throws Exception {
    RouteSpecification route = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    Object obj = new Object();
    boolean result = route.equals(obj);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedByNullItinerary_zZgY0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    boolean result = routeSpecification.isSatisfiedBy(null);
    assert !result;
  }
}