/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_RVij0() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "deadline";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathNullOrigin_PHoU1() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = null;
    String destinationUnLocode = "destination";
    String deadline = "deadline";
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathNullDestination_pbdL2() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = null;
    String deadline = "deadline";
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathNullDeadline_QNrc3() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = null;
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_sPRK0() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allVertices = List.of("origin", "destination1", "destination2", "destination3");
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination1", "20220101");
    assertEquals(1, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithMultipleCandidates_uGHc1() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allVertices = List.of("origin", "destination1", "destination2", "destination3", "destination4");
    List<TransitPath> result = graphTraversalService.findShortestPath("origin", "destination1", "20220101");
    assertEquals(2, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_XKBA0() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    List<TransitPath> result = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(3, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathOriginNull_ndrQ1() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = null;
    String destinationUnLocode = "destination";
    String deadline = "20230228";
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected exception");
    } catch (Exception e) {
      assertEquals("Missing origin UN location code.", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathDestinationNull_caZD2() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = null;
    String deadline = "20230228";
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected exception");
    } catch (Exception e) {
      assertEquals("Missing destination UN location code.", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathDeadlineInvalid_owZY3() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "origin";
    String destinationUnLocode = "destination";
    String deadline = "1234567";
    try {
      graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
      fail("Expected exception");
    } catch (Exception e) {
      assertEquals("Deadline value must be eight characters long.", e.getMessage());
    }
  }
}