/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.when;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_cdvV0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = "12345";
    String destinationUnLocode = "DEHAM";
    defaultBookingServiceFacade.changeDestination(trackingId, destinationUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_JPsH0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "testTrackingId";
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRouteWithValidTrackingId_tXBX1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "validTrackingId";
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRouteWithInvalidTrackingId_dhMl2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    String trackingIdStr = "invalidTrackingId";
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRouteWithNullRouteCandidate_tOIp3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdStr = "testTrackingId";
    defaultBookingServiceFacade.assignCargoToRoute(trackingIdStr, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_NullTrackingId_ReturnsNull_gPUp1() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdValue = null;
    CargoStatus actualCargoStatus = defaultBookingServiceFacade.loadCargoForTracking(trackingIdValue);
    assertNull(actualCargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_EmptyTrackingId_ReturnsNull_QCzd2() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdValue = "";
    CargoStatus actualCargoStatus = defaultBookingServiceFacade.loadCargoForTracking(trackingIdValue);
    assertNull(actualCargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_TrackingIdNotExists_ReturnsNull_dLyk3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdValue = "nonExistingTrackingId";
    CargoStatus actualCargoStatus = defaultBookingServiceFacade.loadCargoForTracking(trackingIdValue);
    assertNull(actualCargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_Cyvv0_XeTc0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = UUID.randomUUID().toString();
    LocalDate arrivalDeadline = LocalDate.now();
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingId);
    assertEquals(arrivalDeadline, cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoNullArrivalDeadline_tcaL3_uPzq0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    String destination = "destination";
    when(defaultBookingServiceFacade.loadCargoForRouting("trackingId")).thenThrow(new NullPointerException());
    assertThrows(NullPointerException.class, () -> defaultBookingServiceFacade.loadCargoForRouting("trackingId"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidArrivalDeadlineAndOrigin_nQKn7_ehff0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String destination = "destination";
    when(defaultBookingServiceFacade.loadCargoForRouting(anyString())).thenThrow(new Exception("Invalid origin and arrival deadline"));
    assertThrows(Exception.class, () -> defaultBookingServiceFacade.loadCargoForRouting(destination));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidArrivalDeadlineAndDestination_qTtH8_jLEd0() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(origin);
    assertThrows(Exception.class, () -> defaultBookingServiceFacade.loadCargoForRouting(origin));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidOrigin_mbic5_hSiS0_fid3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String destination = "destination";
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      defaultBookingServiceFacade.loadCargoForRouting("trackingId");
    } catch (Exception e) {
      assertEquals("Invalid origin", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoInvalidDestination_TKZl6_xgDe0_fid3() {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "origin";
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting(origin);
      fail("Expected exception");
    } catch (Exception e) {
      assertEquals("Invalid destination", e.getMessage());
    }
  }
}