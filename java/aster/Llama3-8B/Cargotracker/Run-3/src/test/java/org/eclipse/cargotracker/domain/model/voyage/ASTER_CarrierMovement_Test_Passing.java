/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime arrivalTime;
  CarrierMovement carriermovement;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_rOag0() throws Exception {
    UnLocode unLocode = new UnLocode("USNYC");
    Location departureLocation = new Location(unLocode, "New York");
    Location arrivalLocation = new Location(unLocode, "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now().plusHours(1);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    LocalDateTime result = carrierMovement.getDepartureTime();
    assert result.equals(departureTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_nglq0() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    Location departureLocation = new Location(unLocode, "Los Angeles");
    UnLocode unLocode1 = new UnLocode("DE FRA");
    Location arrivalLocation = new Location(unLocode1, "Frankfurt");
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now();
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location result = carrierMovement.getArrivalLocation();
    assertEquals(arrivalLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_CQgO0() throws Exception {
    UnLocode unLocode = new UnLocode("US LAX");
    Location departureLocation = new Location(unLocode, "Los Angeles");
    UnLocode unLocode1 = new UnLocode("US JFK");
    Location arrivalLocation = new Location(unLocode1, "New York");
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now();
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location actual = carrierMovement.getDepartureLocation();
    assert actual == departureLocation;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_vsBX0() throws Exception {
    CarrierMovement cm = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USEET"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    assertEquals(true, cm.equals(cm));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_gWnK1() throws Exception {
    CarrierMovement cm = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USEET"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    assertEquals(false, cm.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentClass_XhFw2() throws Exception {
    CarrierMovement cm = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USEET"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    assertEquals(false, cm.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_Hiqs3() throws Exception {
    CarrierMovement cm1 = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USEET"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    CarrierMovement cm2 = new CarrierMovement(new Location(new UnLocode("USEET"), "New York"), new Location(new UnLocode("USLAX"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    assertEquals(false, cm1.equals(cm2));
  }
}