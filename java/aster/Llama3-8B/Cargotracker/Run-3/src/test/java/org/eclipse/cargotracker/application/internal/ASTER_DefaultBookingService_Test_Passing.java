/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_VGeP0() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123");
    UnLocode unLocode = new UnLocode("DE FRA");
    defaultBookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_RCwc0() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("testId");
    LocalDate newDeadline = LocalDate.now().plusDays(1);
    defaultBookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_IeZe0() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US LAX");
    UnLocode destinationUnLocode = new UnLocode("JP TYO");
    LocalDate arrivalDeadline = LocalDate.now();
    TrackingId expectedTrackingId = defaultBookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(expectedTrackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_xRBP0() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    TrackingId trackingId = new TrackingId("testId");
    defaultBookingService.assignCargoToRoute(itinerary, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRouteNullItinerary_kJEz1() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("testId");
    defaultBookingService.assignCargoToRoute(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRouteNullTrackingId_nxjC2() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    defaultBookingService.assignCargoToRoute(itinerary, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_gHsh0() throws Exception {
    DefaultBookingService defaultBookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("testId");
    List<Itinerary> result = defaultBookingService.requestPossibleRoutesForCargo(trackingId);
    assert result.isEmpty();
  }
}