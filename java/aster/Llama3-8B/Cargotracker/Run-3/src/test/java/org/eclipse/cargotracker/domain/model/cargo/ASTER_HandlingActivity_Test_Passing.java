/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingActivity_Test_Passing {
  private Voyage voyage;
  private HandlingActivity handlingactivity;
  private HandlingActivity handlingActivity;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyage() throws Exception {
    handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USA"), "New York"), voyage);
    // Act
    Voyage actual = handlingActivity.getVoyage();
    // Assert
    assertEquals(voyage, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmptyWhenAllFieldsAreNull_lyrv0() throws Exception {
    HandlingActivity activity = new HandlingActivity();
    boolean result = activity.isEmpty();
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmptyWhenTypeIsNotNull_XNmt1() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.LOAD, null, null);
    boolean result = activity.isEmpty();
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmptyWhenLocationIsNotNull_XNYR2() throws Exception {
    HandlingActivity activity = new HandlingActivity(null, new Location(null, null), null);
    boolean result = activity.isEmpty();
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmptyWhenVoyageIsNotNull_UstS3() throws Exception {
    HandlingActivity activity = new HandlingActivity(null, null, new Voyage(new VoyageNumber(""), new Schedule()));
    boolean result = activity.isEmpty();
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_CYNz0() throws Exception {
    HandlingActivity ha = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    boolean result = ha.equals(ha);
    assert result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_ugNE1() throws Exception {
    HandlingActivity ha = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    boolean result = ha.equals(null);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentType_dCjY2() throws Exception {
    HandlingActivity ha = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    Object obj = new Object();
    boolean result = ha.equals(obj);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentHandlingActivity_xlgX3() throws Exception {
    HandlingActivity ha1 = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    HandlingActivity ha2 = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USLA"), "Los Angeles"), new Voyage(new VoyageNumber("456"), new Schedule()));
    boolean result = ha1.equals(ha2);
    assert !result;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNull_KzCd1() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity();
    Voyage voyage = handlingActivity.getVoyage();
    assertEquals(null, voyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationNull_qgok2() throws Exception {
    HandlingActivity activity = new HandlingActivity();
    Location location = activity.getLocation();
    assertEquals(null, location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_iCaJ0() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    int result = activity.hashCode();
    assertEquals(result, new HashCodeBuilder().append(HandlingEvent.Type.LOAD).append(new Location(new UnLocode("USNYC"), "New York").hashCode()).append(new Voyage(new VoyageNumber("123"), new Schedule()).hashCode()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode2_lkpT1() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USLA"), "Los Angeles"), new Voyage(new VoyageNumber("456"), new Schedule()));
    int result = activity.hashCode();
    assertEquals(result, new HashCodeBuilder().append(HandlingEvent.Type.UNLOAD).append(new Location(new UnLocode("USLA"), "Los Angeles").hashCode()).append(new Voyage(new VoyageNumber("456"), new Schedule()).hashCode()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode3_SwMn2() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("CND"), "Toronto"), new Voyage(new VoyageNumber("789"), new Schedule()));
    int result = activity.hashCode();
    assertEquals(result, new HashCodeBuilder().append(HandlingEvent.Type.RECEIVE).append(new Location(new UnLocode("CND"), "Toronto").hashCode()).append(new Voyage(new VoyageNumber("789"), new Schedule()).hashCode()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode4_sOwZ3() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.CLAIM, new Location(new UnLocode("GBL"), "London"), new Voyage(new VoyageNumber("012"), new Schedule()));
    int result = activity.hashCode();
    assertEquals(result, new HashCodeBuilder().append(HandlingEvent.Type.CLAIM).append(new Location(new UnLocode("GBL"), "London").hashCode()).append(new Voyage(new VoyageNumber("012"), new Schedule()).hashCode()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode5_vbKZ4() throws Exception {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.CUSTOMS, new Location(new UnLocode("DE"), "Berlin"), new Voyage(new VoyageNumber("345"), new Schedule()));
    int result = activity.hashCode();
    assertEquals(result, new HashCodeBuilder().append(HandlingEvent.Type.CUSTOMS).append(new Location(new UnLocode("DE"), "Berlin").hashCode()).append(new Voyage(new VoyageNumber("345"), new Schedule()).hashCode()).toHashCode());
  }
}