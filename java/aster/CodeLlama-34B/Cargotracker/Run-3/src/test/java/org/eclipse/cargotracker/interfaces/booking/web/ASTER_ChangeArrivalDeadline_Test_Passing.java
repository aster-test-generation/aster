/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ChangeArrivalDeadline_Test_Passing {
  public void testGetCargo_dwwt0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertNotNull(cargoRoute);
  }

  public void testGetCargoFinalDestinationName_BWDM1() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Final Destination Name", cargoRoute.getFinalDestinationName());
  }

  public void testGetCargoFinalDestination_odtI2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Final Destination", cargoRoute.getFinalDestination());
  }

  public void testGetCargoTrackingId_EINZ3() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
  }

  public void testGetCargoFinalDestinationCode_lqwx4() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Final Destination Code", cargoRoute.getFinalDestinationCode());
  }

  public void testGetCargoOriginCode_HaNG5() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Origin Code", cargoRoute.getOriginCode());
  }

  public void testGetCargoNextLocation_pAPf6() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Next Location", cargoRoute.getNextLocation());
  }

  public void testGetCargoOriginName_kgvk7() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Origin Name", cargoRoute.getOriginName());
  }

  public void testGetCargoOrigin_ZUfr8() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Origin", cargoRoute.getOrigin());
  }

  public void testGetCargoArrivalDeadline_ORLk9() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_PVna0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertNotNull(arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDates_TlXQ1() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate differentDate = LocalDate.of(2022, 12, 31);
    assertNotEquals(arrivalDeadline, differentDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithSameDates_OUGu2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate sameDate = LocalDate.of(2022, 12, 31);
    assertEquals(arrivalDeadline, sameDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithNullDate_MbZs3() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertNull(arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithInvalidDate_IJrx4() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate invalidDate = LocalDate.of(2022, 2, 31);
    assertThrows(IllegalArgumentException.class, () -> arrivalDeadline.plusDays(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithValidDate_dzal5() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate validDate = LocalDate.of(2022, 2, 28);
    assertDoesNotThrow(() -> arrivalDeadline.plusDays(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithLeapYear_MUCg6() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate leapYear = LocalDate.of(2024, 2, 29);
    assertEquals(arrivalDeadline, leapYear);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithNonLeapYear_WjWR7() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    LocalDate nonLeapYear = LocalDate.of(2023, 2, 28);
    assertNotEquals(arrivalDeadline, nonLeapYear);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadline_bkee0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    changeArrivalDeadline.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_verz0_1() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    String trackingId = changeArrivalDeadline.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_verz0_2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    String trackingId = changeArrivalDeadline.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_Jrvv1_2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    String trackingId = changeArrivalDeadline.getTrackingId();
    assertEquals("1234567890", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNull_IXQI2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    String trackingId = changeArrivalDeadline.getTrackingId();
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_null_ihWD0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId(null);
    assertNull(changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_emptyString_jWDD1() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId("");
    assertEquals("", changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_validString_mGjK2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId("1234567890");
    assertEquals("1234567890", changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_invalidString_Oqgy3() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId("abcdefghij");
    assertNotEquals("abcdefghij", changeArrivalDeadline.getTrackingId());
  }
}