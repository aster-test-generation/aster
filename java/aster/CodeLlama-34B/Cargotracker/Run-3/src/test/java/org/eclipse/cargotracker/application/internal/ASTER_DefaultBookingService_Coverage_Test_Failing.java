/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  private DefaultBookingService defaultBookingService;
  private Logger logger;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_LoRY0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    UnLocode unLocode = new UnLocode("CNHKG");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithInvalidTrackingId_JtzW1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("invalid");
    UnLocode unLocode = new UnLocode("CNHKG");
    try {
      bookingService.changeDestination(trackingId, unLocode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid tracking id", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithInvalidUnLocode_xuLM2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    UnLocode unLocode = new UnLocode("invalid");
    try {
      bookingService.changeDestination(trackingId, unLocode);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid UN/LOCODE", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullTrackingId_GOGT3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    UnLocode unLocode = new UnLocode("CNHKG");
    try {
      bookingService.changeDestination(trackingId, unLocode);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("Tracking id cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullUnLocode_XKtX4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    UnLocode unLocode = null;
    try {
      bookingService.changeDestination(trackingId, unLocode);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("UN/LOCODE cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullTrackingId_BsOi0() {
    DefaultBookingService service = new DefaultBookingService();
    List<Itinerary> itineraries = service.requestPossibleRoutesForCargo(null);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_CargoNotFound_TCRa1() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    List<Itinerary> itineraries = service.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_RoutesFound_Btif2() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    List<Itinerary> itineraries = service.requestPossibleRoutesForCargo(trackingId);
    assertEquals(1, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_RoutingServiceError_heEx3() {
    DefaultBookingService service = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    List<Itinerary> itineraries = service.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }
}