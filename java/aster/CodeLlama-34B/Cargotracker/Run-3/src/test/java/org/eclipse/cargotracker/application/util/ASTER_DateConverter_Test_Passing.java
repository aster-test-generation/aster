/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateWithValidDate_sRHR0() throws Exception {
    String date = "2022-01-01";
    LocalDate expected = LocalDate.of(2022, 1, 1);
    assertEquals(expected, DateConverter.toDate(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateWithNullDate_UMCi2() throws Exception {
    String date = null;
    assertThrows(NullPointerException.class, () -> DateConverter.toDate(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateWithValidLeapYear_mJOh9() throws Exception {
    String date = "2024-02-29";
    LocalDate expected = LocalDate.of(2024, 2, 29);
    assertEquals(expected, DateConverter.toDate(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateWithValidNonLeapYear_rmHK11() throws Exception {
    String date = "2022-02-28";
    LocalDate expected = LocalDate.of(2022, 2, 28);
    assertEquals(expected, DateConverter.toDate(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_IHMt0() throws Exception {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    String expected = "2022-12-25T10:15:30";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNull_FCrY1() throws Exception {
    LocalDateTime dateTime = null;
    String expected = "";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyString_MvRl2() throws Exception {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    String expected = "";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithInvalidFormat_EdSi3() throws Exception {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    String expected = "2022-12-25T10:15:30";
    String actual = DateConverter.toString(dateTime);
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateTime_validDateTimeString_JtOw0() throws Exception {
    String datetime = "2022-01-01T12:30:45";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 30, 45);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToDateTime_nullDateTimeString_apmv2() throws Exception {
    String datetime = null;
    assertThrows(NullPointerException.class, () -> DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_empty_wSAQ1() throws Exception {
    assertEquals("", DateConverter.toString(LocalDate.of(0, 0, 0)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_valid_pfbJ2() throws Exception {
    assertEquals("2022-01-01", DateConverter.toString(LocalDate.of(2022, 1, 1)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalid_SLMt3() throws Exception {
    assertNotEquals("2022-01-01", DateConverter.toString(LocalDate.of(2022, 1, 2)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_leapYear_reQT4() throws Exception {
    assertEquals("2024-02-29", DateConverter.toString(LocalDate.of(2024, 2, 29)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nonLeapYear_IIOn5() throws Exception {
    assertNotEquals("2023-02-29", DateConverter.toString(LocalDate.of(2023, 2, 29)));
  }
}