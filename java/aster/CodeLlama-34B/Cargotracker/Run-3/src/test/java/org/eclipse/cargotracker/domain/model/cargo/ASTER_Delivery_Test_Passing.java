/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Test_Passing {
  private HandlingEvent lastEvent;
  private boolean misdirected;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_FLAM0() throws Exception {
    Delivery delivery = new Delivery();
    assertTrue(delivery.equals(delivery));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_RNCk1() throws Exception {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    assertFalse(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNullObject_qSKA2() throws Exception {
    Delivery delivery = new Delivery();
    assertFalse(delivery.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentTypeObject_TULh3() throws Exception {
    Delivery delivery = new Delivery();
    String str = "Delivery";
    assertFalse(delivery.equals(str));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetCalculatedAt_CGkK0() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetCalculatedAtWithNull_MpHT1() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(null);
    assertNull(delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetCalculatedAtWithSameValue_luoS2_1() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetCalculatedAtWithDifferentValue_Gdtp3_1() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    LocalDateTime newCalculatedAt = calculatedAt.plusDays(1);
    delivery.setCalculatedAt(newCalculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetCalculatedAtWithDifferentValue_Gdtp3_2() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    LocalDateTime newCalculatedAt = calculatedAt.plusDays(1);
    delivery.setCalculatedAt(newCalculatedAt);
    assertEquals(newCalculatedAt, delivery.getCalculatedAt());
  }
}