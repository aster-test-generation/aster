/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_GkVb0() throws Exception {
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0, 0);
    CarrierMovement carrierMovement = new CarrierMovement(
            new Location(new UnLocode("US"), "New York"),
            new Location(new UnLocode("US"), "Los Angeles"),
            departureTime,
            LocalDateTime.of(2022, 1, 1, 12, 0, 0));
    assertEquals(departureTime, carrierMovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_wSRq0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location departureLocation = new Location(unLocode, "Chicago");
    Location arrivalLocation = new Location(unLocode, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 2, 10, 0, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location actualArrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(arrivalLocation, actualArrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_NullArrivalLocation_fTRk1() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location departureLocation = new Location(unLocode, "Chicago");
    Location arrivalLocation = null;
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 2, 10, 0, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location actualArrivalLocation = carrierMovement.getArrivalLocation();
    assertNull(actualArrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_INTp0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    assertTrue(carrierMovement.equals(carrierMovement));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_siWM1() throws Exception {
    CarrierMovement carrierMovement1 = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    CarrierMovement carrierMovement2 = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    assertFalse(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_Rjcl2() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    assertFalse(carrierMovement.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_DifferentDepartureLocation_mNma4() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    assertTrue(carrierMovement.equals(new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_Aslp0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location departureLocation = new Location(unLocode, "Chicago");
    Location arrivalLocation = new Location(unLocode, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 2, 10, 0, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location actualDepartureLocation = carrierMovement.getDepartureLocation();
    assertEquals(departureLocation, actualDepartureLocation);
  }
}