/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingActivity_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_pIxM0() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertTrue(handlingActivity.equals(handlingActivity));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValues_VZfG1() throws Exception {
    HandlingActivity handlingActivity1 = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    HandlingActivity handlingActivity2 = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertTrue(handlingActivity1.equals(handlingActivity2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValues_MctI2() throws Exception {
    HandlingActivity handlingActivity1 = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    HandlingActivity handlingActivity2 = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("4567"), new Schedule()));
    assertFalse(handlingActivity1.equals(handlingActivity2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_EaRP3() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertFalse(handlingActivity.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmpty_typeNotNull_jRxx0() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("US"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    assertFalse(handlingActivity.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmpty_locationNotNull_VejW1() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("US"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    assertFalse(handlingActivity.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmpty_voyageNotNull_Pqjs2() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("US"), "New York"), new Voyage(new VoyageNumber("123"), new Schedule()));
    assertFalse(handlingActivity.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsEmpty_allNull_gNOq3() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity();
    assertTrue(handlingActivity.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType1_haUz0() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123456789"), new Schedule()));
    assertEquals(HandlingEvent.Type.LOAD, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType2_LNkO1() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("9876543210"), new Schedule()));
    assertEquals(HandlingEvent.Type.UNLOAD, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType3_ohXh2() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("USLAX"), "Los Angeles"), new Voyage(new VoyageNumber("1234567890"), new Schedule()));
    assertEquals(HandlingEvent.Type.RECEIVE, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType4_Moys3() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CLAIM, new Location(new UnLocode("USDAL"), "Dallas"), new Voyage(new VoyageNumber("0987654321"), new Schedule()));
    assertEquals(HandlingEvent.Type.CLAIM, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType5_zlMi4() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CUSTOMS, new Location(new UnLocode("USHOU"), "Houston"), new Voyage(new VoyageNumber("1098765432"), new Schedule()));
    assertEquals(HandlingEvent.Type.CUSTOMS, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType6_CZXY5() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("9876543210"), new Schedule()));
    assertEquals(HandlingEvent.Type.LOAD, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType7_aXqh6() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USLAX"), "Los Angeles"), new Voyage(new VoyageNumber("1234567890"), new Schedule()));
    assertEquals(HandlingEvent.Type.UNLOAD, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType8_blNV7() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("USDAL"), "Dallas"), new Voyage(new VoyageNumber("0987654321"), new Schedule()));
    assertEquals(HandlingEvent.Type.RECEIVE, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType9_FXAP8() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CLAIM, new Location(new UnLocode("USHOU"), "Houston"), new Voyage(new VoyageNumber("1098765432"), new Schedule()));
    assertEquals(HandlingEvent.Type.CLAIM, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_type_location_voyage_blwz0() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0101"), new Schedule()));
    int expectedHashCode = new HashCodeBuilder().append(HandlingEvent.Type.LOAD).append(new Location(new UnLocode("USCHI"), "Chicago")).append(new Voyage(new VoyageNumber("0101"), new Schedule())).toHashCode();
    assertEquals(expectedHashCode, handlingActivity.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_type_location_VZKd1() throws Exception {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"));
    int expectedHashCode = new HashCodeBuilder().append(HandlingEvent.Type.LOAD).append(new Location(new UnLocode("USCHI"), "Chicago")).toHashCode();
    assertEquals(expectedHashCode, handlingActivity.hashCode());
  }
}