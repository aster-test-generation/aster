/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_bvcL0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimePattern = eventLogger.getCompletionTimePattern();
    assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", completionTimePattern);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_oGvO0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = eventLogger.getVoyageNumber();
    assertEquals("Voyage number should be empty", "", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithValue_yHFi1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("12345");
    String voyageNumber = eventLogger.getVoyageNumber();
    assertEquals("Voyage number should be 12345", "12345", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNull_fPEl2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber(null);
    String voyageNumber = eventLogger.getVoyageNumber();
    assertNull("Voyage number should be null", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_YYEF0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_StZs1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("1234567890", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_yzUe0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.RECEIVE, eventTypes.get(HandlingEvent.Type.RECEIVE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_yzUe0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.LOAD, eventTypes.get(HandlingEvent.Type.LOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_yzUe0_3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.UNLOAD, eventTypes.get(HandlingEvent.Type.UNLOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_yzUe0_4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.CLAIM, eventTypes.get(HandlingEvent.Type.CLAIM));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_yzUe0_5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.CUSTOMS, eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_Keug0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertNotNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_Keug0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertEquals("location", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWithNull_oIgW1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWithEmptyString_rSEZ2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertEquals("", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWithInvalidString_gtda3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertNotEquals("invalid_location", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWithValidString_NzVg4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
    assertEquals("valid_location", location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypeWithNullStringAndValidType_NZLB14() throws Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_vNHU0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = eventLogger.getCompletionTime();
    assertNotNull(completionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeWithNonNullCompletionTime_axDM1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeWithNullCompletionTime_FDoe2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(null);
    assertNull(eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_WDba0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertNotNull(trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_WDba0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_dhDB0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("location");
    assertEquals("location", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithNull_fvbN1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation(null);
    assertNull(eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithEmptyString_YnGG2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("");
    assertEquals("", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithInvalidString_upYz3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("invalid");
    assertEquals("invalid", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithValidString_Wrop4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("valid");
    assertEquals("valid", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithDifferentCases_ntdD5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("LoCation");
    assertEquals("LoCation", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithDifferentCasesAndSpacesAndSpecialCharacters_ISef7() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("  LoCation  !@#$%^&*()_+-=[]{}|;':\"<>,./?~");
    assertEquals("  LoCation  !@#$%^&*()_+-=[]{}|;':\"<>,./?~", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithDifferentTime3_aEUT9() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now().plusSeconds(10);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_YTZO0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertNotNull(completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_YTZO0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2023-02-28T12:34:56.123456", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithNull_hdTG1_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("null", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithEmptyString_xYuO2_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithInvalidDate_fgZn3_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("Invalid date", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithInvalidTimeZone_gXvt7_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("Invalid time zone", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithInvalidFormat_vpdB9_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("Invalid format", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_thQf0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertEquals(0, eventLogger.getTrackingIds().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_thQf0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertEquals(0, eventLogger.getLocations().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_thQf0_3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertEquals(0, eventLogger.getVoyages().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_LOAD_PRRU0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    assertEquals(HandlingEvent.Type.LOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_UNLOAD_FjQT1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.UNLOAD);
    assertEquals(HandlingEvent.Type.UNLOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_RECEIVE_RpYT2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.RECEIVE);
    assertEquals(HandlingEvent.Type.RECEIVE, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_CLAIM_Qlfp3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CLAIM);
    assertEquals(HandlingEvent.Type.CLAIM, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_CUSTOMS_FAOg4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CUSTOMS);
    assertEquals(HandlingEvent.Type.CUSTOMS, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_null_ruYb5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(null);
    assertNull(eventLogger.getEventType());
  }
}