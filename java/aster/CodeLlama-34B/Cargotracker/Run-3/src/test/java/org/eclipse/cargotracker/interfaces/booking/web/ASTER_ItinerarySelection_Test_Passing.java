/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ItinerarySelection_Test_Passing {
  public void testGetCargo_EgEN0() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute);
  }

  public void testGetCargoFinalDestinationName_drkF1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination Name", cargoRoute.getFinalDestinationName());
  }

  public void testGetCargoFinalDestination_Ehri2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination", cargoRoute.getFinalDestination());
  }

  public void testGetCargoTrackingId_YNFi3() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
  }

  public void testGetCargoFinalDestinationCode_owlZ4() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination Code", cargoRoute.getFinalDestinationCode());
  }

  public void testGetCargoOriginCode_CajL5() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin Code", cargoRoute.getOriginCode());
  }

  public void testGetCargoNextLocation_fsBk6() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Next Location", cargoRoute.getNextLocation());
  }

  public void testGetCargoOriginName_oSOL7() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin Name", cargoRoute.getOriginName());
  }

  public void testGetCargoOrigin_qZhJ8() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin", cargoRoute.getOrigin());
  }

  public void testGetCargoArrivalDeadline_obBO9() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
  }

  public void testSetTrackingId_aRHU0() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("1234567890");
    assertEquals("1234567890", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithNull_Fvsc1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId(null);
    assertNull(itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithEmptyString_EfaL2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("");
    assertEquals("", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithInvalidString_fyIf3() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("abcdefghij");
    assertEquals("abcdefghij", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithValidString_pZgF4() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("1234567890");
    assertEquals("1234567890", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithDifferentValidString_mezz5() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("0987654321");
    assertEquals("0987654321", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithSameValidString_pqjv6() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("1234567890");
    assertEquals("1234567890", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithDifferentInvalidString_vMEj7() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("abcdefghij");
    assertEquals("abcdefghij", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithSameInvalidString_zHKg8() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId("abcdefghij");
    assertEquals("abcdefghij", itinerarySelection.getTrackingId());
  }

  public void testSetTrackingIdWithNullAndEmptyString_CMtc9() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.setTrackingId(null);
    assertNull(itinerarySelection.getTrackingId());
    itinerarySelection.setTrackingId("");
    assertEquals("", itinerarySelection.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditates_empty_IOAP0() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertTrue(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditates_null_QAfR2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_zHBx0_1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_zHBx0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_IisZ0_1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_IisZ0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_wTAj1_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertEquals("1234567890", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNull_EquR2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNull(trackingId);
  }
}