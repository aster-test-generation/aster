/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.BookingService;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.CargoRouteDtoAssembler;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.LocationDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
  private LocationDtoAssembler locationDtoAssembler;
  private BookingService bookingService;
  private CargoRouteDtoAssembler cargoRouteDtoAssembler;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_PsgM0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "ABC";
    String destination = "DEF";
    LocalDate arrivalDeadline = LocalDate.now();
    String expectedTrackingId = "XYZ";
    String actualTrackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals(expectedTrackingId, actualTrackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_tRQo0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertNotNull(trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_tRQo0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ValidTrackingId_cHGa0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ValidTrackingId_cHGa0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_InvalidTrackingId_Ssgy1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("invalidTrackingId");
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_withInvalidOrigin_yRue1_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "INVALID";
    String destination = "DEF";
    LocalDate arrivalDeadline = LocalDate.now();
    try {
      facade.bookNewCargo(origin, destination, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid origin", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_tRQo0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertNotNull(trackingIds);
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ValidTrackingId_cHGa0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_TrackingId_Mxml0_VOvq0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoNull_dCxa1_Pvlp0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertEquals(trackingIdValue, cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_3() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_4() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_5() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_6() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_7() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_8() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertNull(cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoStatusDtoAssembler_NullCargoAndHandlingEvents_UlhP6_QcLn0_9() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "testTrackingId";
    TrackingId trackingId = new TrackingId(trackingIdValue);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingIdValue);
    assertEquals(0, cargoRoute.getLegs().size());
  }
}