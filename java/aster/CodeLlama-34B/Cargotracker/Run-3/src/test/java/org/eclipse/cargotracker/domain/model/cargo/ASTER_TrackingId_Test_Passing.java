/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withId_AteL0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    String idString = trackingId.getIdString();
    assertEquals("12345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutId_nAcI1() throws Exception {
    TrackingId trackingId = new TrackingId();
    String idString = trackingId.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withNullId_WPrk2() throws Exception {
    TrackingId trackingId = new TrackingId(null);
    String idString = trackingId.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withEmptyId_RwXR3() throws Exception {
    TrackingId trackingId = new TrackingId("");
    String idString = trackingId.getIdString();
    assertEquals("", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withInvalidId_SEru4() throws Exception {
    TrackingId trackingId = new TrackingId("invalid_id");
    String idString = trackingId.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withValidId_leadingZero_zqnW9() throws Exception {
    TrackingId trackingId = new TrackingId("012345");
    String idString = trackingId.getIdString();
    assertEquals("012345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withValidId_trailingZero_vWHT10() throws Exception {
    TrackingId trackingId = new TrackingId("123450");
    String idString = trackingId.getIdString();
    assertEquals("123450", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withValidId_leadingAndTrailingZero_BfuE11() throws Exception {
    TrackingId trackingId = new TrackingId("0123450");
    String idString = trackingId.getIdString();
    assertEquals("0123450", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_oOTa0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertTrue(trackingId.equals(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_GvYc1() throws Exception {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("67890");
    assertFalse(trackingId1.equals(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_UwAJ2() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertFalse(trackingId.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_EmptyId_ddMQ0() throws Exception {
    TrackingId trackingId = new TrackingId();
    assertEquals("", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_NonEmptyId_GiWs1() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890");
    assertEquals("1234567890", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_NullId_oGQl2() throws Exception {
    TrackingId trackingId = new TrackingId(null);
    assertEquals("", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_EmptyStringId_Acfp3() throws Exception {
    TrackingId trackingId = new TrackingId("");
    assertEquals("", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_hlGm0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertTrue(trackingId.sameValueAs(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObject_XJln1() throws Exception {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("12345");
    assertFalse(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentValues_zmGl3() throws Exception {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("54321");
    assertFalse(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_null_mORV0() throws Exception {
    TrackingId trackingId = new TrackingId(null);
    assertEquals(0, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_emptyString_VfHG1() throws Exception {
    TrackingId trackingId = new TrackingId("");
    assertEquals(0, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_fsam2() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withSpecialChars_Qyqf3() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withNewline_OvSu5() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\n");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withTab_aSBr6() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\t");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withCarriageReturn_DbOY7() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\r");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withFormFeed_HmKf9() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\f");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withVerticalTab_YQuO10() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\u000B");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withNullChar_OJge11() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\0");
    assertEquals(1234567890, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_withNonPrintableChar_QAQU12() throws Exception {
    TrackingId trackingId = new TrackingId("1234567890\u0001");
    assertEquals(1234567890, trackingId.hashCode());
  }
}