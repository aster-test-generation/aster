/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginWithNullOriginAndDestination_mOOv4() throws Exception {
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    RouteSpecification routeSpecification = new RouteSpecification(null, null, arrivalDeadline);
    assertNull(routeSpecification.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginWithNullOriginAndDestinationAndArrivalDeadline_JQeq7() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(null, null, null);
    assertNull(routeSpecification.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetArrivalDeadline_WFpJ0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location origin = new Location(unLocode, "Chicago");
    Location destination = new Location(unLocode, "New York");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(arrivalDeadline, routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetArrivalDeadlineWithNullOrigin_PsXN1() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location destination = new Location(unLocode, "New York");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(null, destination, arrivalDeadline);
    assertNull(routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetArrivalDeadlineWithNullDestination_wKHs2() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location origin = new Location(unLocode, "Chicago");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, null, arrivalDeadline);
    assertNull(routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetArrivalDeadlineWithNullArrivalDeadline_gZct3() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location origin = new Location(unLocode, "Chicago");
    Location destination = new Location(unLocode, "New York");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    assertNull(routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetArrivalDeadlineWithInvalidArrivalDeadline_vBKe4() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location origin = new Location(unLocode, "Chicago");
    Location destination = new Location(unLocode, "New York");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertThrows(IllegalArgumentException.class, () -> routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_YJmG0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_kHZt1() throws Exception {
    RouteSpecification routeSpecification1 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    assertFalse(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_HElv2() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentOriginAndDestination_mDRm3() throws Exception {
    RouteSpecification routeSpecification1 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(new Location(new UnLocode("US"), "Chicago"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDate.now());
    assertFalse(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_ValidOriginDestinationArrivalDeadline_nOcD0() throws Exception {
    UnLocode unLocode = new UnLocode("US");
    Location origin = new Location(unLocode, "New York");
    Location destination = new Location(unLocode, "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = new HashCodeBuilder().append(origin).append(destination).append(arrivalDeadline).toHashCode();
    assertEquals(expectedHashCode, routeSpecification.hashCode());
  }
}