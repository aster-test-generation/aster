/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.routing;

import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ExternalRoutingService_Coverage_Test_Failing {
  private Logger logger;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFetchRoutesForSpecification1_oaMH0() {
    ExternalRoutingService externalRoutingService = new ExternalRoutingService();
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = externalRoutingService.fetchRoutesForSpecification(routeSpecification);
    assertNotNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFetchRoutesForSpecification2_omMj1() {
    ExternalRoutingService externalRoutingService = new ExternalRoutingService();
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = externalRoutingService.fetchRoutesForSpecification(routeSpecification);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFetchRoutesForSpecification3_LRFN2() {
    ExternalRoutingService externalRoutingService = new ExternalRoutingService();
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = externalRoutingService.fetchRoutesForSpecification(routeSpecification);
    assertTrue(itineraries.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFetchRoutesForSpecification4_IVRV3() {
    ExternalRoutingService externalRoutingService = new ExternalRoutingService();
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = externalRoutingService.fetchRoutesForSpecification(routeSpecification);
    assertFalse(itineraries.contains(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFetchRoutesForSpecification5_LwLi4() {
    ExternalRoutingService externalRoutingService = new ExternalRoutingService();
    RouteSpecification routeSpecification = new RouteSpecification();
    List<Itinerary> itineraries = externalRoutingService.fetchRoutesForSpecification(routeSpecification);
    assertFalse(itineraries.contains(new Itinerary()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_throwsExceptionWhenGraphTraversalUrlIsNull_LPfX3_Zicr0() {
    ExternalRoutingService service = new ExternalRoutingService();
    try {
      service.init();
      fail("Expected exception to be thrown");
    } catch (IllegalArgumentException e) {
      assertEquals("Graph traversal URL cannot be null", e.getMessage());
    }
  }
}