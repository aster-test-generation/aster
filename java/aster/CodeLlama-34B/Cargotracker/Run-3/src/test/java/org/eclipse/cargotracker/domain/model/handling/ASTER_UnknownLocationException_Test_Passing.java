/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnknownLocationException_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage1_RKBE0() throws Exception {
    UnLocode unlocode = new UnLocode("US");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode US exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage2_MiFv1() throws Exception {
    UnLocode unlocode = new UnLocode("CA");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode CA exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage3_HsGn2() throws Exception {
    UnLocode unlocode = new UnLocode("GB");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode GB exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage4_YxeM3() throws Exception {
    UnLocode unlocode = new UnLocode("FR");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode FR exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage5_FIuR4() throws Exception {
    UnLocode unlocode = new UnLocode("DE");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode DE exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage6_CunJ5() throws Exception {
    UnLocode unlocode = new UnLocode("JP");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode JP exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage7_CKLn6() throws Exception {
    UnLocode unlocode = new UnLocode("CN");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode CN exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage8_VIxB7() throws Exception {
    UnLocode unlocode = new UnLocode("IN");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode IN exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage9_kOwx8() throws Exception {
    UnLocode unlocode = new UnLocode("AU");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode AU exists in the system.", exception.getMessage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMessage10_XHfg9() throws Exception {
    UnLocode unlocode = new UnLocode("BR");
    UnknownLocationException exception = new UnknownLocationException(unlocode);
    assertEquals("No location with UN locode BR exists in the system.", exception.getMessage());
  }
}