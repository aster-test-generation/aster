/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaLocationRepository_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_wjWl0_1() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    List<Location> locations = repository.findAll();
    for (Location location : locations) {
    }
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_wjWl0_2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    List<Location> locations = repository.findAll();
    for (Location location : locations) {
    }
    assertEquals(10, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithEmptyResult_rUiL1_1() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    List<Location> locations = repository.findAll();
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithEmptyResult_rUiL1_2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    List<Location> locations = repository.findAll();
    assertEquals(0, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithNullResult_Pyav2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    List<Location> locations = repository.findAll();
    assertNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_OtVE0_1() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("US");
    Location location = repository.find(unLocode);
    assertNotNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_OtVE0_2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("US");
    Location location = repository.find(unLocode);
    assertEquals("New York", location.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_OtVE0_3() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("US");
    Location location = repository.find(unLocode);
    assertEquals(unLocode, location.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindDifferentUnLocode_sRUq1_1() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("CA");
    Location location = repository.find(unLocode);
    assertNotNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindDifferentUnLocode_sRUq1_2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("CA");
    Location location = repository.find(unLocode);
    assertEquals("Toronto", location.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindDifferentUnLocode_sRUq1_3() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("CA");
    Location location = repository.find(unLocode);
    assertEquals(unLocode, location.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindNullUnLocode_IyqM2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    Location location = repository.find(null);
    assertNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindInvalidUnLocode_LAwO3() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("invalid");
    Location location = repository.find(unLocode);
    assertNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindValidUnLocodeNoMatch_RFpN4() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("US");
    Location location = repository.find(unLocode);
    assertNull(location);
  }
}