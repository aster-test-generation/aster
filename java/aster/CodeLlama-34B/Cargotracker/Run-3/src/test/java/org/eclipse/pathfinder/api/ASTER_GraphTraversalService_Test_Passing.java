/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ValidInput_GYoU0_1() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(3, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidOrigin_QlKM1() throws Exception {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_OriginAndDestinationUNLocationCodes_GnHZ0_1() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_RandomNumberOfCandidates_qRJe2() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertTrue(candidates.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_TransitEdges_mnWO3_2() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(1, candidates.get(0).getTransitEdges().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_TransitEdges_mnWO3_3() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_TransitEdges_mnWO3_4() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals("USNYC", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }
}