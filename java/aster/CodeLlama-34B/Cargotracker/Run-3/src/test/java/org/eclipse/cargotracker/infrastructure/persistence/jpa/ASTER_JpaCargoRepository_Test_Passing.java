/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.enterprise.event.Event;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.infrastructure.events.cdi.CargoUpdated;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaCargoRepository_Test_Passing {
  @Inject
  @CargoUpdated
  private Event<Cargo> cargoUpdated;
  @PersistenceContext
  private EntityManager entityManager;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_jVQi0_1() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> cargos = cargoRepository.findAll();
    for (Cargo cargo : cargos) {
    }
    assertNotNull(cargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_jVQi0_2() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> cargos = cargoRepository.findAll();
    for (Cargo cargo : cargos) {
    }
    assertEquals(10, cargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithEmptyResult_vaCt1_1() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> cargos = cargoRepository.findAll();
    assertNotNull(cargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithEmptyResult_vaCt1_2() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> cargos = cargoRepository.findAll();
    assertEquals(0, cargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAllWithNullResult_TwAS2() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> cargos = cargoRepository.findAll();
    assertNull(cargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithValidTrackingId_UArz0_1() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("valid_tracking_id");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithValidTrackingId_UArz0_2() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("valid_tracking_id");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertEquals(trackingId, cargo.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithInvalidTrackingId_BmPf1() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("invalid_tracking_id");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithNullTrackingId_boRK2() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = null;
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithTrackingIdThatDoesNotExist_Hlau3() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("non_existent_tracking_id");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithTrackingIdThatIsAnEmptyString_IWBM5() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_rsOv0_1() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = jpaCargoRepository.nextTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_rsOv0_2() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = jpaCargoRepository.nextTrackingId();
    assertEquals(12, trackingId.getIdString().length());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_rsOv0_3() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = jpaCargoRepository.nextTrackingId();
    assertTrue(trackingId.getIdString().matches("[A-Z0-9]+"));
  }
}