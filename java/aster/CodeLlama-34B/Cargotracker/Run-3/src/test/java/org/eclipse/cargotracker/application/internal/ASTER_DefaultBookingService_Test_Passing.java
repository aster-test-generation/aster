/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoReturnsNonNullTrackingId_GMOQ0() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoReturnsTrackingIdWithNonNullIdString_qPeq1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoReturnsTrackingIdWithUniqueIdString_nWRu2() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    TrackingId trackingId1 = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    TrackingId trackingId2 = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotEquals(trackingId1.getIdString(), trackingId2.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoReturnsTrackingIdWithValidIdString_zvDa3() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertTrue(trackingId.getIdString().matches("[A-Z]{3}[0-9]{3}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_ValidTrackingId_ZEDU0_1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("12345");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(1, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_InvalidTrackingId_XhHQ1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }
}