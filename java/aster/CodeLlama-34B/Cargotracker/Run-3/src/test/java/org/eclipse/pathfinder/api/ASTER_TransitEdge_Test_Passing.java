/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  private TransitEdge edge;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocode_CMsn0() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithNull_esuo1() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", null, "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNull(edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithEmptyString_zhNc2() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithInvalidString_UKzp3() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "invalid", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("invalid", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithSpecialCharacters_yVpZ6() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode!@#$%^&*()_+", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode!@#$%^&*()_+", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithMultipleValues_OpAG7_1() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode1", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode2", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode3", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode1", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithMultipleValues_OpAG7_2() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode1", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode2", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode3", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode2", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetFromUnLocodeWithMultipleValues_OpAG7_3() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode1", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode2", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge = new TransitEdge("voyageNumber", "fromUnLocode3", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode3", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_AOND0() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("newToUnLocode");
    assertEquals("newToUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithNull_owVV1() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode(null);
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithEmptyString_AcjD2() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("");
    assertEquals("", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithInvalidUnLocode_wzZV3() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("invalidUnLocode");
    assertEquals("invalidUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithValidUnLocode_mWOJ4() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("validUnLocode");
    assertEquals("validUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithDifferentUnLocode_GEyt5() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("differentUnLocode");
    assertEquals("differentUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithSameUnLocode_nBQg6() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("toUnLocode");
    assertEquals("toUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithNullFromDate_GZCh7() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now());
    edge.setToUnLocode("newToUnLocode");
    assertEquals("newToUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithNullToDate_PspO8() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    edge.setToUnLocode("newToUnLocode");
    assertEquals("newToUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_voyageNumber_JpDC0() throws Exception {
    TransitEdge edge = new TransitEdge("12345", "USCHI", "USNYC", LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 1, 1, 0, 0));
    String expected = "TransitEdge{voyageNumber=12345, fromUnLocode=USCHI, toUnLocode=USNYC, fromDate=2022-01-01T00:00, toDate=2022-01-01T00:00}";
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_zJZZ0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyage123", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String voyageNumber = transitEdge.getVoyageNumber();
    assertEquals("voyage123", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_DVvH0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime toDate = transitEdge.getToDate();
    assertEquals(LocalDateTime.now(), toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_uzhU0() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_zMNM1() throws Exception {
    String fromUnLocode = "newFromUnLocode";
    edge.setFromUnLocode(fromUnLocode);
    assertEquals(fromUnLocode, edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeNull_fMLb2() throws Exception {
    edge.setFromUnLocode(null);
    assertNull(edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeEmpty_jgiU3() throws Exception {
    edge.setFromUnLocode("");
    assertEquals("", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeInvalid_soKS4() throws Exception {
    edge.setFromUnLocode("invalid");
    assertEquals("invalid", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeDifferentCase_bZGw5() throws Exception {
    edge.setFromUnLocode("FROMUNLOCODE");
    assertEquals("FROMUNLOCODE", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeDifferentCase2_uhIV6() throws Exception {
    edge.setFromUnLocode("fromunlocode");
    assertEquals("fromunlocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeDifferentCase3_LhHB7() throws Exception {
    edge.setFromUnLocode("FromUnLocode");
    assertEquals("FromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeDifferentCase4_MSTI8() throws Exception {
    edge.setFromUnLocode("fromUnLocode");
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_EZIc0() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
    assertEquals(LocalDateTime.now(), fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_cDJX0() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("toUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNull_nllJ1() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", null, LocalDateTime.now(), LocalDateTime.now());
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithEmptyString_GMpU2() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidValue_plEb4() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "invalid", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("invalid", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromDate_YoAa5() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now());
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullToDate_pboW6() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromAndToDate_bGbM7() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, null);
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidFromDate_zuie8() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now());
    assertNotEquals("toUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidToDate_YiIJ9() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().minusDays(1));
    assertNotEquals("toUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidFromAndToDate_VglT10() throws Exception {
    edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().minusDays(1));
    assertNotEquals("toUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_pMGY0() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("newVoyageNumber");
    assertEquals("newVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNull_lCsm1() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber(null);
    assertNull(edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithEmptyString_QMtk2() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("");
    assertEquals("", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithInvalidString_qqsP3() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("invalidVoyageNumber");
    assertEquals("invalidVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithValidString_nMnp4() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("validVoyageNumber");
    assertEquals("validVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithSameString_trKH5() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("voyage1");
    assertEquals("voyage1", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithDifferentString_avRc6() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("differentVoyageNumber");
    assertEquals("differentVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNullAndEmptyString_mfnW7_1() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber(null);
    edge.setVoyageNumber("");
    assertNull(edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNullAndEmptyString_mfnW7_2() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber(null);
    edge.setVoyageNumber("");
    assertEquals("", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithInvalidAndValidString_mxod8_1() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("invalidVoyageNumber");
    edge.setVoyageNumber("validVoyageNumber");
    assertEquals("invalidVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithInvalidAndValidString_mxod8_2() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("invalidVoyageNumber");
    edge.setVoyageNumber("validVoyageNumber");
    assertEquals("validVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithSameAndDifferentString_FWqm9_1() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("voyage1");
    edge.setVoyageNumber("differentVoyageNumber");
    assertEquals("voyage1", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithSameAndDifferentString_FWqm9_2() throws Exception {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("voyage1");
    edge.setVoyageNumber("differentVoyageNumber");
    assertEquals("differentVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_OfDk0() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.now();
    edge.setFromDate(fromDate);
    assertEquals(fromDate, edge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateWithNull_EUuM1() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setFromDate(null);
    assertNull(edge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateWithInvalidDate_amoW2() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.of(2023, 1, 1, 0, 0, 0);
    edge.setFromDate(fromDate);
    assertNotEquals(fromDate, edge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateWithValidDate_ZYkP3() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.of(2023, 1, 1, 0, 0, 0);
    edge.setFromDate(fromDate);
    assertEquals(fromDate, edge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateWithPastDate_dHxU4() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.of(2022, 1, 1, 0, 0, 0);
    edge.setFromDate(fromDate);
    assertNotEquals(fromDate, edge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateWithFutureDate_AuGx5() throws Exception {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.of(2024, 1, 1, 0, 0, 0);
    edge.setFromDate(fromDate);
    assertEquals(fromDate, edge.getFromDate());
  }
}