/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDate_XsqP0() {
    String date = "2022-01-01";
    LocalDate expected = LocalDate.of(2022, 1, 1);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDate_LBbA1() {
    String date = "2022-01-32";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_NullDate_lusD2() {
    String date = null;
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_EmptyDate_qdTU3() {
    String date = "";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidFormat_UlNN4() {
    String date = "2022-01-01T00:00:00";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidFormat_qXpJ5() {
    String date = "2022-01-01T00:00:00";
    LocalDate expected = LocalDate.of(2022, 1, 1);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidYear_qvQI6() {
    String date = "2022-01-01";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidMonth_wZMk7() {
    String date = "2022-13-01";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidLeapYear_hqHe9() {
    String date = "2024-02-29";
    LocalDate expected = LocalDate.of(2024, 2, 29);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidLeapYear_Swqb10() {
    String date = "2023-02-29";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidNonLeapYear_bExY11() {
    String date = "2022-02-28";
    LocalDate expected = LocalDate.of(2022, 2, 28);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidNonLeapYear_ULLX12() {
    String date = "2022-02-29";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_neXl0() {
    LocalDateTime dateTime = LocalDateTime.of(2023, 3, 15, 10, 30, 0);
    String expected = "2023-03-15T10:30:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNull_yjfl1() {
    LocalDateTime dateTime = null;
    String expected = null;
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithInvalidDate_KYkl2() {
    LocalDateTime dateTime = LocalDateTime.of(2023, 2, 30, 10, 30, 0);
    String expected = "2023-03-01T10:30:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithInvalidTime_tlDX3() {
    LocalDateTime dateTime = LocalDateTime.of(2023, 3, 15, 25, 30, 0);
    String expected = "2023-03-15T10:30:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithInvalidDateTime_vNil4() {
    LocalDateTime dateTime = LocalDateTime.of(2023, 2, 30, 25, 30, 0);
    String expected = "2023-03-01T10:30:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidInput_ReturnsLocalDateTime_gTvr0() {
    String datetime = "2022-01-01T12:30:00";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 30, 0);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_LocalDate_aLJA0() {
    LocalDate date = LocalDate.of(2022, 10, 15);
    String expected = "2022-10-15";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_LocalDateTime_gfkK1() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 10, 15, 12, 0, 0);
    String expected = "2022-10-15T12:00:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDate_PxCP5() {
    LocalDate date = LocalDate.of(2022, 10, 32);
    String expected = "2022-10-32";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDateTime_cesx6() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 10, 32, 12, 0, 0);
    String expected = "2022-10-32T12:00:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDate_LBbA1_fid2() {
    String date = "2022-01-32";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_NullDate_lusD2_fid2() {
    String date = null;
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidMonth_wZMk7_fid2() {
    String date = "2022-13-01";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidLeapYear_Swqb10_fid2() {
    String date = "2023-02-29";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidNonLeapYear_bExY11_fid2() {
    String date = "2022-02-28";
    LocalDate expected = LocalDate.of(2022, 2, 28);
    String actual = DateConverter.toString(expected);
    assertEquals(date, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidNonLeapYear_ULLX12_fid2() {
    String date = "2022-02-29";
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDate_PxCP5_fid2() {
    LocalDate date = LocalDate.of(2022, 10, 31);
    String expected = "2022-10-31";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDateTime_cesx6_fid2() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 10, 31, 12, 0, 0);
    String expected = "2022-10-31T12:00:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }
}