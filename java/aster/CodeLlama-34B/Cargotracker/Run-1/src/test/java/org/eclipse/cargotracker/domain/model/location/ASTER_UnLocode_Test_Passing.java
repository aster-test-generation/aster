/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_cYNb1() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_CcwM0() {
    UnLocode unLocode = new UnLocode("USCHI");
    assertTrue(unLocode.sameValueAs(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObject_zRcv1() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentInput_ggyw4_2() {
    UnLocode unlocode1 = new UnLocode("USCHI");
    UnLocode unlocode2 = new UnLocode("CAVAN");
    int expectedHashCode1 = "USCHI".hashCode();
    int expectedHashCode2 = "CAVAN".hashCode();
    int actualHashCode1 = unlocode1.hashCode();
    int actualHashCode2 = unlocode2.hashCode();
    assertEquals(expectedHashCode2, actualHashCode2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SameInput_kWAn5_1() {
    UnLocode unlocode1 = new UnLocode("USCHI");
    UnLocode unlocode2 = new UnLocode("USCHI");
    int expectedHashCode = "USCHI".hashCode();
    int actualHashCode1 = unlocode1.hashCode();
    int actualHashCode2 = unlocode2.hashCode();
    assertEquals(expectedHashCode, actualHashCode1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SameInput_kWAn5_2() {
    UnLocode unlocode1 = new UnLocode("USCHI");
    UnLocode unlocode2 = new UnLocode("USCHI");
    int expectedHashCode = "USCHI".hashCode();
    int actualHashCode1 = unlocode1.hashCode();
    int actualHashCode2 = unlocode2.hashCode();
    assertEquals(expectedHashCode, actualHashCode2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_MultipleInputsWithEmpty_Yvfk8_UgRW0() {
    UnLocode unLocode = new UnLocode("USCHI");
    String idString = unLocode.getIdString();
    assertEquals("USCHI", idString);
  }
}