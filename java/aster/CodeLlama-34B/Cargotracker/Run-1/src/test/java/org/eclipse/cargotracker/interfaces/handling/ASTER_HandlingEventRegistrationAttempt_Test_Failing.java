/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyValues_RlRe2() {
    LocalDateTime registrationDate = LocalDateTime.of(2022, 12, 12, 12, 12, 12);
    LocalDateTime completionDate = LocalDateTime.of(2022, 12, 12, 12, 12, 12);
    TrackingId trackingId = new TrackingId("");
    VoyageNumber voyageNumber = new VoyageNumber("");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, type, unLocode);
    String expected = "HandlingEventRegistrationAttempt{" + "registrationTime=" + registrationDate + ", completionTime=" + completionDate + ", trackingId=" + trackingId + ", voyageNumber=" + voyageNumber + ", type=" + type + ", unLocode=" + unLocode + '}';
    String actual = attempt.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullVoyageNumber_fMgG3() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            null,
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals("1234567890", attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullUnLocode_kYkh5() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber("1234567890"),
            HandlingEvent.Type.LOAD,
            null
    );
    assertEquals("1234567890", attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyUnLocode_HDzR6() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber("1234567890"),
            HandlingEvent.Type.LOAD,
            new UnLocode("")
    );
    assertEquals("1234567890", attempt.getTrackingId().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithNullType_idVa6() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber("1234567890"),
            null,
            new UnLocode("USCHI")
    );
    UnLocode unLocode = attempt.getUnLocode();
    assertNull(unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType_bpxU0_fid2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now();
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertEquals(HandlingEvent.Type.LOAD, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTypeWithNullType_FHDU1_fid2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now();
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, null, unLocode);
    assertNull(attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTypeWithInvalidType_kqNW2_fid2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now();
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, HandlingEvent.Type.CLAIM, unLocode);
    assertNotEquals(HandlingEvent.Type.LOAD, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTypeWithNullRegistrationDate_WAAC3_fid2() {
    LocalDateTime completionDate = LocalDateTime.now();
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(null, completionDate, trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertNull(attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTypeWithNullCompletionDate_gPOM4_fid2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, null, trackingId, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertNull(attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTypeWithNullTrackingId_GFzB5_fid2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now();
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    UnLocode unLocode = new UnLocode("US");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, null, voyageNumber, HandlingEvent.Type.LOAD, unLocode);
    assertNull(attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullVoyageNumber_fMgG3_fid2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            null,
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertNull(attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyVoyageNumber_tzRS4() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber(""),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals("", attempt.getTrackingId().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullUnLocode_kYkh5_fid2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber("1234567890"),
            HandlingEvent.Type.LOAD,
            null
    );
    assertNull(attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyUnLocode_HDzR6_fid2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("1234567890"),
            new VoyageNumber("1234567890"),
            HandlingEvent.Type.LOAD,
            new UnLocode("")
    );
    assertEquals("", attempt.getTrackingId().getIdString());
  }
}