/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.File;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventFilesCheckpoint_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_xzIm0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(0, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithNonZeroFilePointer_IkoS1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(10);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(10, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithNegativeFilePointer_xlrp2() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(-10);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(-10, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithMaxValueFilePointer_foNa3() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(Long.MAX_VALUE);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(Long.MAX_VALUE, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithMinValueFilePointer_qyNn4() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(Long.MIN_VALUE);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(Long.MIN_VALUE, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointer_FvkU0() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    checkpoint.setFilePointer(0);
    assertEquals(0, checkpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNegativeValue_DpTR1() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    checkpoint.setFilePointer(-1);
    assertEquals(-1, checkpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithLargeValue_lmiL2() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    checkpoint.setFilePointer(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, checkpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithInvalidValue_KSXV3() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    checkpoint.setFilePointer(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, checkpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCurrentFile_emptyFiles_HfAv0() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File currentFile = checkpoint.currentFile();
    assertNull(currentFile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithNullFilePointer_umnj5_XSji0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0L);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(0L, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithInvalidFilePointer_NGQF6_FhES0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0L);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(0, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithNullFilePointerAndNonZeroFilePointer_klhW8_SqkJ0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0);
    eventFilesCheckpoint.setFilePointer(10);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(10, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNullValue_KQPi4_oxPX0() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    checkpoint.setFilePointer(0L);
    assertEquals(0L, checkpoint.getFilePointer());
  }
}