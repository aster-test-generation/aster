/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingEvents_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_True_Sgkv0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    assertTrue(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_False_foem1() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_NullDescription_rcAk5() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_EmptyDescription_WURt6() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_InvalidDescription_GhEX7() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "invalid", "time");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_NullTime_jqCR8() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_EmptyTime_FluO9() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_InvalidTime_tXpg10() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "invalid");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescription_gUCU0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    String actualDescription = trackingEvents.getDescription();
    assertEquals("description", actualDescription);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithEmptyDescription_nIEf1() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
    String actualDescription = trackingEvents.getDescription();
    assertEquals("", actualDescription);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithNullDescription_MJpq2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
    String actualDescription = trackingEvents.getDescription();
    assertEquals(null, actualDescription);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithInvalidTime_lXUp3() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "invalid time");
    String actualDescription = trackingEvents.getDescription();
    assertEquals("description", actualDescription);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithNullTime_LxPY4() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", null);
    String actualDescription = trackingEvents.getDescription();
    assertEquals("description", actualDescription);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_expected_wGra0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    String actual = trackingEvents.getTime();
    assertEquals("time", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_null_MCxK2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", null);
    String actual = trackingEvents.getTime();
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_empty_iUSo3() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "");
    String actual = trackingEvents.getTime();
    assertEquals("", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_invalid_fclu5() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "invalid");
    String actual = trackingEvents.getTime();
    assertEquals("invalid", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_nullDescription_eYYH6() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
    String actual = trackingEvents.getTime();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_timeDescription_ltlw9() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "time", "time");
    String actual = trackingEvents.getTime();
    assertEquals("time", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_emptyExpected_dEmw15_lrwx0() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    String actual = trackingEvents.getTime();
    assertEquals("time", actual);
  }
}