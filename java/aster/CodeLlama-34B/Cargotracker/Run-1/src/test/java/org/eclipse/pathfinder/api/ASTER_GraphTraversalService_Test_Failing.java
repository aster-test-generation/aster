/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_ApwN0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals(3, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_SlfT1_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals(1, candidates.size());
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_SlfT1_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("DEHAM", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath4_SgRI3_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals(1, candidates.size());
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
    assertEquals("DEHAM", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidOriginAndDestination_QeUt0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidOriginAndDestination_QeUt0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals(1, candidates.size());
    assertEquals("A", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
    assertEquals("E", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidOriginAndDestination_QeUt0_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals(1, candidates.size());
    assertEquals("E", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidOrigin_boxG1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("F", "E", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDestination_qYST2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "F", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDeadline_Zgzk3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertNotNull(candidates);
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertNotNull(candidates);
    assertEquals(1, candidates.size());
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertNotNull(candidates);
    assertEquals("USNYC", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertFalse(candidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertNotNull(candidates);
    assertEquals("USNYC", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertEquals(1, candidates.size());
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_SlfT1_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath3_DBDH2_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("USCHI", candidates.get(1).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath3_DBDH2_3_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("DEHAM", candidates.get(1).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath4_SgRI3_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("USCHI", candidates.get(2).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath4_SgRI3_3_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals("DEHAM", candidates.get(2).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidOriginAndDestination_QeUt0_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals("A", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidOriginAndDestination_QeUt0_3_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2023-02-28");
    assertEquals("E", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_1_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath1_HBEi0_3_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals("USNYC", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_1_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_2_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertEquals("USNYC", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kqLF1_3_fid1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USNYC", "USCHI", "2023-02-28");
    assertEquals("USCHI", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }
}