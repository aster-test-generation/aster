/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ChangeArrivalDeadline_Test_Failing {
  private ChangeArrivalDeadline changeArrivalDeadline;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_oSmI0() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertNull(LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_oSmI0_fid2() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.now(), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDates_hmpd1_1() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.of(2023, 1, 1), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDates_hmpd1_2() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.of(2023, 12, 31), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDates_hmpd1_3() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.of(2024, 1, 1), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDateFormats_BAvA3_1() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.parse("2023-01-01"), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDateFormats_BAvA3_2() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.parse("2023-12-31"), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDateFormats_BAvA3_3() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.parse("2024-01-01"), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_Ughc0_mJCr0_1() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.load();
    assertNotNull(changeArrivalDeadline.getCargo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_Ughc0_mJCr0_2() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.load();
    assertNotNull(changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDates_hmpd1() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.of(2023, 1, 1), arrivalDeadline);
    assertEquals(LocalDate.of(2023, 12, 31), arrivalDeadline);
    assertEquals(LocalDate.of(2024, 1, 1), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithDifferentDateFormats_BAvA3() {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertEquals(LocalDate.parse("2023-01-01"), arrivalDeadline);
    assertEquals(LocalDate.parse("2023-12-31"), arrivalDeadline);
    assertEquals(LocalDate.parse("2024-01-01"), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_tWsN1() {
    String trackingId = "1234567890";
    changeArrivalDeadline.setTrackingId(trackingId);
    assertEquals(trackingId, changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNull_cbTf2() {
    changeArrivalDeadline.setTrackingId(null);
    assertNull(changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyString_IOXj3() {
    changeArrivalDeadline.setTrackingId("");
    assertEquals("", changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithInvalidString_Uimg4() {
    changeArrivalDeadline.setTrackingId("invalid");
    assertEquals("invalid", changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithValidString_gLNR5() {
    changeArrivalDeadline.setTrackingId("1234567890");
    assertEquals("1234567890", changeArrivalDeadline.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithDifferentString_ZgsT6() {
    changeArrivalDeadline.setTrackingId("9876543210");
    assertEquals("9876543210", changeArrivalDeadline.getTrackingId());
  }
}