/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullVoyageNumber_PfSa6() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber(null), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumber_QQOP1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage null";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumberAndSchedule_pvUP3() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage null";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumber_SzqY1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertNotNull(voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumberAndSchedule_vRdF3() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertNotNull(voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Schedule_eemO1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = schedule.hashCode();
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Both_Hgya2() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = voyageNumber.hashCode() + schedule.hashCode();
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullVoyageNumber_kwDU3() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = 0;
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentSchedule_BiiO5_fid1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullVoyageNumber_PfSa6_fid1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(null, new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithNullSchedule_vVSl1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Voyage voyage = new Voyage(voyageNumber, null);
    assertNull(voyage.getSchedule());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullSchedule_nIkH2_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage 12345";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumber_SzqY1_fid1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertNull(voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullSchedule_nbil2_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals(voyageNumber, voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumberAndSchedule_vRdF3_fid1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertNull(voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_NullVoyageNumber_Fzfb2_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Voyage other = new Voyage(null, schedule);
    assertFalse(voyage.sameIdentityAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullSchedule_iImV4_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = voyageNumber.hashCode();
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullBoth_GqQI5_fid1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = 0;
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}