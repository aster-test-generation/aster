/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CarrierMovement_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_SpYX0_NNgq0_1() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(new UnLocode("CA"), arrivalLocation.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_lOfb0_OJLP1() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USNYC"), "New York"), LocalDateTime.now(), LocalDateTime.now().plusHours(1));
    assertEquals(LocalDateTime.now().plusHours(1), carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_nullDepartureTime_VeHY1_Uuxg0() {
    Location departureLocation = new Location(new UnLocode("USCHI"), "New York");
    Location arrivalLocation = new Location(new UnLocode("USLAX"), "Los Angeles");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, null, LocalDateTime.now().plusHours(1));
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_nullArrivalTime_eBHN2_tguG0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), null);
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_nullDepartureAndArrivalTime_ZrFG3_jvqm0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USNYC"), "New York"), null, null);
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullDepartureLocation_pIYg1_LIZs0() {
    UnLocode unLocode = new UnLocode("USCHI");
    Location arrivalLocation = new Location(unLocode, "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(null, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = new HashCodeBuilder().append((Object) null).append(departureTime).append(arrivalLocation).append(arrivalTime).toHashCode();
    int actualHashCode = carrierMovement.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_SpYX0_NNgq0_1_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(new UnLocode("CA"), arrivalLocation.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_SpYX0_NNgq0_2() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals("Los Angeles", arrivalLocation.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_RHag1_axgo0_3_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(LocalDateTime.now(), carrierMovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_RHag1_axgo0_4_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(LocalDateTime.now(), carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_lOfb0_yhzC0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now().plusHours(1));
    assertEquals(LocalDateTime.now().plusHours(1), carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_nullDepartureTime_VeHY1_Uuxg0_fid3() {
    Location departureLocation = new Location(new UnLocode("US"), "New York");
    Location arrivalLocation = new Location(new UnLocode("US"), "Los Angeles");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, null, LocalDateTime.now().plusHours(1));
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_nullDepartureAndArrivalTime_ZrFG3_jvqm0_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), null, null);
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullDepartureLocation_pIYg1_LIZs0_fid3() {
    UnLocode unLocode = new UnLocode("US");
    Location arrivalLocation = new Location(unLocode, "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(null, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = new HashCodeBuilder().append((Object) null).append(departureTime).append(arrivalLocation).append(arrivalTime).toHashCode();
    int actualHashCode = carrierMovement.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}