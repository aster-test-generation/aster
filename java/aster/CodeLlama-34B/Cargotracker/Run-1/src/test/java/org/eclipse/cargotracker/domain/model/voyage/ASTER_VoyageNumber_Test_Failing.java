/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_NullNumber_yXgD2() {
    VoyageNumber voyageNumber = new VoyageNumber(null);
    String idString = voyageNumber.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithoutNumber_rOnm1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String expected = "";
    String actual = voyageNumber.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_null_KrwZ0() {
    VoyageNumber voyageNumber = new VoyageNumber(null);
    assertEquals(0, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_AArU2() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    assertEquals(12345, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_invalidString_GhEe3() {
    VoyageNumber voyageNumber = new VoyageNumber("abcdef");
    assertEquals(0, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_NullNumber_yXgD2_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String idString = voyageNumber.getIdString();
    assertNotNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_null_KrwZ0_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertEquals(0, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nonEmptyString_AArU2_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("46792755");
    assertEquals(46792755, voyageNumber.hashCode());
  }
}