/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.internal;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphDao_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListLocations_SMyB0() {
    GraphDao graphDao = new GraphDao();
    List<String> expectedLocations = new ArrayList<>(Arrays.asList("CNHKG", "AUMEL", "SESTO", "FIHEL", "USCHI", "JNTKO", "DEHAM", "CNSHA", "NLRTM", "SEGOT", "CNHGH", "USNYC", "USDAL"));
    List<String> actualLocations = graphDao.listLocations();
    assertEquals(expectedLocations, actualLocations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListLocationsWithDifferentList_ArNt3() {
    GraphDao graphDao = new GraphDao();
    List<String> expectedLocations = new ArrayList<>(Arrays.asList("CNHKG", "AUMEL", "SESTO", "FIHEL", "USCHI", "JNTKO", "DEHAM", "CNSHA", "NLRTM", "SEGOT", "CNHGH", "USNYC", "USDAL"));
    List<String> actualLocations = graphDao.listLocations();
    assertTrue(actualLocations.containsAll(expectedLocations));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListLocationsWithNullList_bVWE2_fid1() {
    GraphDao graphDao = new GraphDao();
    List<String> expectedLocations = null;
    List<String> actualLocations = graphDao.listLocations();
    assertNull(expectedLocations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_1() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertEquals(13, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_2() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("CNHKG"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_3() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("AUMEL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_4() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("SESTO"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_5() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("FIHEL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_6() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("USCHI"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_7() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("JNTKO"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_8() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("DEHAM"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_9() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("CNSHA"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_10() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("NLRTM"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_11() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("SEGOT"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_12() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("CNHGH"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_13() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("USNYC"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_peuh0_rCup0_14() {
    GraphDao graphDao = new GraphDao();
    List<String> locations = graphDao.listLocations();
    assertTrue(locations.contains("USDAL"));
  }
}