/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withId_GPAJ0() {
    TrackingId trackingId = new TrackingId("12345");
    String idString = trackingId.getIdString();
    assertEquals("12345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutId_dJuK1() {
    TrackingId trackingId = new TrackingId();
    String idString = trackingId.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_znec0() {
    TrackingId trackingId = new TrackingId("12345");
    assertTrue(trackingId.equals(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_uqcj1() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("67890");
    assertFalse(trackingId1.equals(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_pKPx2() {
    TrackingId trackingId = new TrackingId("12345");
    assertFalse(trackingId.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValue_BLaI4() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("12345");
    assertTrue(trackingId1.equals(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ZMNM7() {
    TrackingId trackingId = new TrackingId("12345");
    Object object = new Object();
    assertFalse(trackingId.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_bacA0() {
    TrackingId trackingId = new TrackingId("1234567890");
    String expected = "1234567890";
    String actual = trackingId.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameId_PTzY0() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("12345");
    assertTrue(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentId_LVRI1() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("67890");
    assertFalse(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withId_RuTh0() {
    TrackingId trackingId = new TrackingId("12345");
    int expectedHashCode = "12345".hashCode();
    int actualHashCode = trackingId.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withEmptyId_OdDy2() {
    TrackingId trackingId = new TrackingId("");
    int expectedHashCode = 0;
    int actualHashCode = trackingId.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_withDifferentId_zXFj3() {
    TrackingId trackingId = new TrackingId("12345");
    int expectedHashCode = "54321".hashCode();
    int actualHashCode = trackingId.hashCode();
    assertNotEquals(expectedHashCode, actualHashCode);
  }
}