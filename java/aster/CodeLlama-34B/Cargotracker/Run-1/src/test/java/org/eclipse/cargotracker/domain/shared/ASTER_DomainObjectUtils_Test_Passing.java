/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_NullActual_xIEP0() {
    String actual = null;
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(safe, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_NullSafe_jNth1() {
    String actual = "actual";
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_BothNull_wFwX2() {
    String actual = null;
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_BothNotNull_kPiZ3() {
    String actual = "actual";
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_SafeIsEmptyString_nDsg5() {
    String actual = "actual";
    String safe = "";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_BothEmptyString_mScP6() {
    String actual = "";
    String safe = "";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_ActualIsNullObject_nKnW10() {
    Object actual = null;
    Object safe = new Object();
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(safe, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_SafeIsNullObject_dpzw11() {
    Object actual = new Object();
    Object safe = null;
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_BothNullObject_BKRt12() {
    Object actual = null;
    Object safe = null;
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_BothNotNullObject_krEp13() {
    Object actual = new Object();
    Object safe = new Object();
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(actual, result);
  }
}