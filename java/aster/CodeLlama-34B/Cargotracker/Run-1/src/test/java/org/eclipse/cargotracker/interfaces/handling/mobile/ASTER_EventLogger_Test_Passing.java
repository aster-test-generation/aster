/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNull_zwKV1() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_HzaH3() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNotEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithInvalidString_buKk4() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNotEquals("invalid", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullTrackingId_TLAg6() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId(null);
    String trackingId = eventLogger.getTrackingId();
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyTrackingId_UcIs7() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("");
    String trackingId = eventLogger.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyTrackingId_Dppy8() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("non-empty");
    String trackingId = eventLogger.getTrackingId();
    assertNotEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithValidTrackingId_xICh10() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("valid");
    String trackingId = eventLogger.getTrackingId();
    assertEquals("valid", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.RECEIVE, eventTypes.get(HandlingEvent.Type.RECEIVE));
    assertEquals(HandlingEvent.Type.LOAD, eventTypes.get(HandlingEvent.Type.LOAD));
    assertEquals(HandlingEvent.Type.UNLOAD, eventTypes.get(HandlingEvent.Type.UNLOAD));
    assertEquals(HandlingEvent.Type.CLAIM, eventTypes.get(HandlingEvent.Type.CLAIM));
    assertEquals(HandlingEvent.Type.CUSTOMS, eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNonEmptyMap_tjPZ2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertFalse(eventTypes.isEmpty());
    assertEquals(5, eventTypes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithDuplicateKeys_brqi3() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.RECEIVE, eventTypes.get(HandlingEvent.Type.RECEIVE));
    assertEquals(HandlingEvent.Type.LOAD, eventTypes.get(HandlingEvent.Type.LOAD));
    assertEquals(HandlingEvent.Type.UNLOAD, eventTypes.get(HandlingEvent.Type.UNLOAD));
    assertEquals(HandlingEvent.Type.CLAIM, eventTypes.get(HandlingEvent.Type.CLAIM));
    assertEquals(HandlingEvent.Type.CUSTOMS, eventTypes.get(HandlingEvent.Type.CUSTOMS));
    assertEquals(HandlingEvent.Type.RECEIVE, eventTypes.get(HandlingEvent.Type.RECEIVE));
    assertEquals(HandlingEvent.Type.LOAD, eventTypes.get(HandlingEvent.Type.LOAD));
    assertEquals(HandlingEvent.Type.UNLOAD, eventTypes.get(HandlingEvent.Type.UNLOAD));
    assertEquals(HandlingEvent.Type.CLAIM, eventTypes.get(HandlingEvent.Type.CLAIM));
    assertEquals(HandlingEvent.Type.CUSTOMS, eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullKey_CBgR4() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_ZoWA0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("New York");
    assertEquals("New York", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithNull_ymMC1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation(null);
    assertNull(eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithEmptyString_UqWw2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("");
    assertEquals("", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithInvalidString_oOXn3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("Invalid location");
    assertEquals("Invalid location", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_PatL0() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_jCQH0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("12345");
    assertEquals("12345", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNull_fpJl1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber(null);
    assertNull(eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithEmptyString_BABQ2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("");
    assertEquals("", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithInvalidString_ylyF3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("invalid");
    assertEquals("invalid", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNegativeNumber_KRhA5() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("-12345");
    assertEquals("-12345", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithZero_mwdv6() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("0");
    assertEquals("0", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_null_XWDk5() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(null);
    assertNull(eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_wgpe0_fid1() {
    EventLogger eventLogger = new EventLogger();
    String completionTimePattern = eventLogger.getCompletionTimePattern();
    assertEquals("M/d/yyyy h:m a", completionTimePattern);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0_1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.RECEIVE, eventTypes.get(HandlingEvent.Type.RECEIVE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0_2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.LOAD, eventTypes.get(HandlingEvent.Type.LOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0_3() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.UNLOAD, eventTypes.get(HandlingEvent.Type.UNLOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0_4() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.CLAIM, eventTypes.get(HandlingEvent.Type.CLAIM));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_PXos0_5() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.CUSTOMS, eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithEmptyMap_mgRY1_fid1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertFalse(eventTypes.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNonEmptyMap_tjPZ2_2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(5, eventTypes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_sNKQ0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("1234567890");
  }
}