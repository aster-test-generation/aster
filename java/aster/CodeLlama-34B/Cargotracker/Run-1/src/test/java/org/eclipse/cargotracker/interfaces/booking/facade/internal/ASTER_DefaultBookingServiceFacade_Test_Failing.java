/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_NullTrackingId_tgcF0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting(null);
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_lLxc0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_empty_AAzG1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_zayx0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_NullTrackingId_tgcF0_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoStatus cargoStatus = facade.loadCargoForTracking(null);
    assertNull(cargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_zayx0_1_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_zayx0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRoutingWithInvalidTrackingId_WsCf1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("invalidTrackingId");
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDestination_bRBI2_KaNd0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "ABC";
    String destination = "INVALID";
    LocalDate arrivalDeadline = LocalDate.now();
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidArrivalDeadline_VLBk3_QYnN0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "ABC";
    String destination = "DEF";
    LocalDate arrivalDeadline = LocalDate.now().minusDays(1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullArrivalDeadline_Myyt6_GNxS0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "ABC";
    String destination = "DEF";
    LocalDate arrivalDeadline = null;
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithEmptyOrigin_WDSc7_SQks0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "";
    String destination = "DEF";
    LocalDate arrivalDeadline = LocalDate.now();
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_AuGI0_amdQ0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> cargos = facade.listAllCargos();
    for (CargoRoute cargo : cargos) {
    }
    assertNotNull(cargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_AuGI0_amdQ0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> cargos = facade.listAllCargos();
    for (CargoRoute cargo : cargos) {
    }
    assertEquals(10, cargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_lLxc0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(10, trackingIds.size());
    for (int i = 0; i < 10; i++) {
      assertEquals("trackingId" + i, trackingIds.get(i));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_zayx0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }
}