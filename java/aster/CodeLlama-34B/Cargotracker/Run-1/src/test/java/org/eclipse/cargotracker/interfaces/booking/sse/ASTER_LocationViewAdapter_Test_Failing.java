/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.Coordinates;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LocationViewAdapter_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithNullLocation_DMjN2() {
    LocationViewAdapter locationViewAdapter = new LocationViewAdapter(null);
    String expected = null;
    String actual = locationViewAdapter.getUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNameWithNullLocation_DUAN1() {
    LocationViewAdapter locationViewAdapter = new LocationViewAdapter(null);
    String name = locationViewAdapter.getName();
    assertNull(name);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCoordinatesWithNullLocation_CEMA1() {
    LocationViewAdapter locationViewAdapter = new LocationViewAdapter(null);
    Coordinates coordinates = locationViewAdapter.getCoordinates();
    assertNull(coordinates);
  }
}