/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocode_tWAL0() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithNull_iAVS1() {
    TransitEdge edge = new TransitEdge("voyage1", null, "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNull(edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithEmptyString_VMwX2() {
    TransitEdge edge = new TransitEdge("voyage1", "", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithInvalidString_KXkS3() {
    TransitEdge edge = new TransitEdge("voyage1", "invalid", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("invalid", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithNullVoyageNumber_MZFc5() {
    TransitEdge edge = new TransitEdge(null, "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithInvalidVoyageNumber_bAwc7() {
    TransitEdge edge = new TransitEdge("fromUnLocode", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithNullToUnLocode_HaKc13() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", null, LocalDateTime.now(), LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_SWVe0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("newToUnLocode");
    assertEquals("newToUnLocode", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithNull_GQwL1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode(null);
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithEmptyString_DYYf2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("");
    assertEquals("", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithInvalidString_OJYn3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("invalid");
    assertEquals("invalid", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocodeWithValidString_ukRG4() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToUnLocode("valid");
    assertEquals("valid", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllNullValues_YYRt6() {
    TransitEdge transitEdge = new TransitEdge(null, null, null, null, null);
    String expected = "TransitEdge{" + "voyageNumber=" + null + ", fromUnLocode=" + null + ", toUnLocode=" + null + ", fromDate=" + null + ", toDate=" + null + '}';
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_UJDj0() {
    TransitEdge transitEdge = new TransitEdge("voyage123", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String voyageNumber = transitEdge.getVoyageNumber();
    assertEquals("voyage123", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_ZfzZ0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime newToDate = LocalDateTime.now().plusDays(1);
    edge.setToDate(newToDate);
    assertEquals(newToDate, edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithNull_PZIh1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(null);
    assertNull(edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithInvalidDate_iJAm2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime invalidDate = LocalDateTime.of(2024, 2, 29, 0, 0, 0);
    edge.setToDate(invalidDate);
    assertNotNull(edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithNullFromDate_JRPi1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithNullToDate_bSLa2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithNullFromAndToDate_rfAp3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, null);
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithInvalidToDate_dgAa5() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithInvalidFromAndToDate_fbKd6() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertEquals(LocalDateTime.now().minusDays(1), toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_JXhq0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setFromUnLocode("newFromUnLocode");
    assertEquals("newFromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_Valid_pWIH0() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_Invalid_iQDx1() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
    assertNotEquals(LocalDateTime.now().plusDays(1), fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_Null_YKOA2() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", null, null);
    LocalDateTime fromDate = edge.getFromDate();
    assertNull(fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_zBLG0() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("to1", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNull_zAgL1() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", null, LocalDateTime.now(), LocalDateTime.now());
    assertNull(edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithEmptyString_krZQ2() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidUnLocode_kiTn3() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "invalid", LocalDateTime.now(), LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullToDate_pspw6() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", LocalDateTime.now(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidFromDate_xmWS7() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", LocalDateTime.now().minusDays(1), LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithInvalidToDate_GPgW8() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", LocalDateTime.now(), LocalDateTime.now().minusDays(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_AniP0() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("newVoyageNumber");
    assertEquals("newVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNull_HeQL1() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber(null);
    assertNull(edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithEmptyString_Ofis2() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("");
    assertEquals("", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithInvalidString_yTQh3() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("invalidVoyageNumber");
    assertEquals("invalidVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithValidString_lqFN4() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("validVoyageNumber");
    assertEquals("validVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithDifferentCase_Iapv5() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("VoYaGe1");
    assertEquals("VoYaGe1", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithDifferentCaseAndInvalidString_DhMJ6() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("InVaLiDvOyAgE1");
    assertEquals("InVaLiDvOyAgE1", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithDifferentCaseAndValidString_dGnI7() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("VaLiDvOyAgE1");
    assertEquals("VaLiDvOyAgE1", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_VRXw0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime fromDate = LocalDateTime.now();
    edge.setFromDate(fromDate);
    Assertions.assertEquals(fromDate, edge.getFromDate());
  }
}