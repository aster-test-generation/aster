/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ItinerarySelection_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination Name", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_3() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination", cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_4() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_5() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Final Destination Code", cargoRoute.getFinalDestinationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_6() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin Code", cargoRoute.getOriginCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_7() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Next Location", cargoRoute.getNextLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_8() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin Name", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_9() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Origin", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_10() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_11() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Last Known Location Name", cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_12() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Last Known Location", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_13() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Transport Status", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_14() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(10, cargoRoute.getLegs().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0_15() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals("Last Known Location Code", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_UrDp0_1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_lLMj0_EvqX0_1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.load();
    assertNotNull(itinerarySelection.getCargo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_lLMj0_EvqX0_2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.load();
    assertNotNull(itinerarySelection.getRouteCandidates());
    assertTrue(itinerarySelection.getRouteCandidates().size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_empty_vZXk0_fid1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertTrue(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_UrDp0_2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_HXIc1_2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertEquals("1234567890", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_lLMj0_EvqX0_2_fid1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.load();
    assertTrue(itinerarySelection.getRouteCandidates().size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_bAkV0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertNotNull(cargoRoute);
    assertEquals("Final Destination Name", cargoRoute.getFinalDestinationName());
    assertEquals("Final Destination", cargoRoute.getFinalDestination());
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
    assertEquals("Final Destination Code", cargoRoute.getFinalDestinationCode());
    assertEquals("Origin Code", cargoRoute.getOriginCode());
    assertEquals("Next Location", cargoRoute.getNextLocation());
    assertEquals("Origin Name", cargoRoute.getOriginName());
    assertEquals("Origin", cargoRoute.getOrigin());
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
    assertEquals("Last Known Location Name", cargoRoute.getLastKnownLocationName());
    assertEquals("Last Known Location", cargoRoute.getLastKnownLocation());
    assertEquals("Transport Status", cargoRoute.getTransportStatus());
    assertEquals(10, cargoRoute.getLegs().size());
    assertEquals("Last Known Location Code", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_UrDp0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNonEmptyString_HXIc1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
    assertEquals("1234567890", trackingId);
  }
}