/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Voyage_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NotInstanceOfVoyage_IlYT0() {
    Voyage voyage = new Voyage();
    Object obj = new Object();
    assertFalse(voyage.equals(obj));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_sweZ1() {
    Voyage voyage = new Voyage();
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_NullOther_CUid0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertFalse(voyage.sameIdentityAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_DifferentVoyageNumber_vKED1() {
    VoyageNumber voyageNumber1 = new VoyageNumber("12345");
    VoyageNumber voyageNumber2 = new VoyageNumber("54321");
    Schedule schedule = new Schedule();
    Voyage voyage1 = new Voyage(voyageNumber1, schedule);
    Voyage voyage2 = new Voyage(voyageNumber2, schedule);
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_SameVoyageNumber_hUES2() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage1 = new Voyage(voyageNumber, schedule);
    Voyage voyage2 = new Voyage(voyageNumber, schedule);
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }
}