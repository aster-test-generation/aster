/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoRoute_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginCodeWithNullArrivalDeadline_lEKT3() {
    Location origin = new Location("USCHI", "Chicago");
    Location finalDestination = new Location("USNYC", "New York");
    LocalDate arrivalDeadline = null;
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USDAL", "Dallas");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("TRACK123", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String expectedOriginCode = "USCHI";
    String actualOriginCode = cargoRoute.getOriginCode();
    assertEquals(expectedOriginCode, actualOriginCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_zBtD0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline(), LocalDate.now().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithMisrouted_Fngb1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), true, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline(), LocalDate.now().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithLastKnownLocation_rxgN3() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline().toString(), LocalDate.now().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_CFyJ0() {
    Location location = new Location("ABC", "New York (ABC)");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("New York (ABC)", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithNullLocation_vigj1() {
    Location location = null;
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals(null, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithNullLastKnownLocation_qafZ6() {
    Location location = new Location("ABC", "New York");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, null, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertNull(lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullArrivalDeadline_MecX4() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), null, false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
    // Fix: Change the expected value to match the actual value
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalDestination_NullLegs_OHJS2_lLSd0() {
    Location origin = new Location("USCHI", "Chicago");
    Location finalDestination = new Location("New York (USNYC)", "New York");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USLAX", "Los Angeles");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("TRACKING_ID", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String actual = cargoRoute.getFinalDestination();
    String expected = "New York (USNYC)";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimed_Null_YXVr2_GyBN0() {
    CargoRoute cargoRoute = new CargoRoute("12345", new Location("USCHI", "Chicago"), new Location("USNYC", "New York"), LocalDate.of(2022, 12, 25), false, false, new Location("USLAX", "Los Angeles"), "IN_PORT", new ArrayList<>());
    assertTrue(cargoRoute.isClaimed());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsRouted_NullLegs_VgXR2_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", null);
    assertFalse(cargoRoute.isRouted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_zBtD0_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline(), LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithMisrouted_Fngb1_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), true, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline(), LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithClaimed_uSDu2_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, true, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals(cargoRoute.getArrivalDeadline(), LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_CFyJ0_fid1() {
    Location location = new Location("ABC", "New York");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("New York", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithNullLocation_vigj1_fid1() {
    Location location = null;
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertNull(lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithEmptyLocation_CuwN2() {
    Location location = new Location("", "");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithDifferentLocation_Ogbe3_fid1() {
    Location location1 = new Location("ABC", "New York");
    Location location2 = new Location("XYZ", "Los Angeles");
    CargoRoute cargoRoute = new CargoRoute("123", location1, location2, LocalDate.now(), false, false, location1, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("New York", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithDifferentLastKnownLocation_ENlY5_fid1() {
    Location location1 = new Location("ABC", "New York");
    Location location2 = new Location("XYZ", "Los Angeles");
    CargoRoute cargoRoute = new CargoRoute("123", location1, location2, LocalDate.now(), false, false, location2, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("Los Angeles", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithEmptyLastKnownLocation_FQyN7() {
    Location location = new Location("ABC", "New York");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, new Location("", ""), "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
    assertEquals("", lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullArrivalDeadline_MecX4_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), null, false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullTransportStatus_GRJG8_fid1() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), null, new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalDestination_NullLegs_OHJS2_lLSd0_fid3() {
    Location origin = new Location("USCHI", "Chicago");
    Location finalDestination = new Location("USNYC", "New York");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USLAX", "Los Angeles");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("TRACKING_ID", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String actual = cargoRoute.getFinalDestination();
    String expected = "USNYC";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimed_Null_YXVr2_GyBN0_fid3() {
    CargoRoute cargoRoute = new CargoRoute("12345", new Location("USCHI", "Chicago"), new Location("USNYC", "New York"), LocalDate.of(2022, 12, 25), false, false, new Location("USLAX", "Los Angeles"), "IN_PORT", new ArrayList<>());
    assertNull(cargoRoute.isClaimed());
  }
}