/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingEvents_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_Null_zHui2_pxNP0() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    assertTrue(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_nullExpected_nuXO14_NkJG0() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    String actual = trackingEvents.getTime();
    assertEquals(null, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_NullDescription_rcAk5_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_EmptyDescription_WURt6_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_InvalidDescription_GhEX7_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "invalid", "time");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_NullTime_jqCR8_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", null);
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_EmptyTime_FluO9_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_InvalidTime_tXpg10_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "invalid");
    assertFalse(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_unexpected_odET1() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    String actual = trackingEvents.getTime();
    assertEquals("", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_nullDescription_eYYH6_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
    String actual = trackingEvents.getTime();
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_emptyDescription_Ojoc7() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
    String actual = trackingEvents.getTime();
    assertEquals("", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_invalidDescription_ltlw9() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "invalid", "time");
    String actual = trackingEvents.getTime();
    assertEquals("invalid", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_Null_zHui2_pxNP0_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    assertNull(trackingEvents.isExpected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_nullExpected_nuXO14_NkJG0_fid2() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    String actual = trackingEvents.getTime();
    assertNull(actual);
  }
}