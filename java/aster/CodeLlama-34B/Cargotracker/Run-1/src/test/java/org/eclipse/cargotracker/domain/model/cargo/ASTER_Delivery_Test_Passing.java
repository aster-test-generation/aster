/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Passing {
  private Voyage currentVoyage;
  private boolean isUnloadedAtDestination;
  @NotNull
  private boolean misdirected;
  private RoutingStatus routingStatus;
  private TransportStatus transportStatus;
  private HandlingEvent lastEvent;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected_PeoI0() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirectedFalse_cQbw1() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(false);
    assertFalse(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected_IEpA0() {
    Delivery delivery = new Delivery();
    boolean result = delivery.isMisdirected();
    assertEquals(false, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected2_pSCx1() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    boolean result = delivery.isMisdirected();
    assertEquals(true, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestination_PxNv0() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestinationWithFalse_agqq1() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(false);
    assertFalse(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_zOkD0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(Location.UNKNOWN, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithNonNullLocation_sabi1() {
    Delivery delivery = new Delivery();
    Location location = new Location(new UnLocode("USCHI"), "Chicago");
    delivery.setLastKnownLocation(location);
    Location lastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(location, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithNullLocation_gIqF2() {
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(null);
    Location lastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(Location.UNKNOWN, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatus_VUaR0() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.IN_PORT);
    assertEquals(TransportStatus.IN_PORT, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithValidValue_lKfB3() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.ONBOARD_CARRIER);
    assertEquals(TransportStatus.ONBOARD_CARRIER, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsSameObject_Ifdp0() {
    Delivery delivery = new Delivery();
    assertTrue(delivery.equals(delivery));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNullObject_tAKS2() {
    Delivery delivery = new Delivery();
    assertFalse(delivery.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentTypeObject_tlYg3() {
    Delivery delivery = new Delivery();
    assertFalse(delivery.equals("delivery"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_LvVw0() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAtWithNull_vekd1() {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(null);
    assertNull(delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatus_slsa0() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithDifferentRoutingStatus_FZsf1() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.MISROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertNotEquals(RoutingStatus.ROUTED, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithNullRoutingStatus_SPmV2() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = null;
    delivery.setRoutingStatus(routingStatus);
    assertNull(delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_ephc0_fid1() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("USCHI"), "Chicago");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithNull_HRiq1_fid1() {
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_sDLg2_1() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("USCHI"), "Chicago");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode("USNYC"), "New York");
    delivery.setLastKnownLocation(differentLocation);
    assertNotEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutingStatus_LjEN0_fid1() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = delivery.getRoutingStatus();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithNull_lcpD1_fid1() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithInvalidValue_JnMT2_fid1() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.CLAIMED);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_FFEs1_fid1() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    assertTrue(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAtWithInvalidValue_ifGU2_fid1() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.of(1970, 1, 1, 0, 0, 0);
    delivery.setCalculatedAt(calculatedAt);
  }
}