/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  private Voyage currentVoyage;
  private boolean isUnloadedAtDestination;
  @NotNull
  private boolean misdirected;
  private RoutingStatus routingStatus;
  private TransportStatus transportStatus;
  private HandlingEvent lastEvent;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_ephc0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithNull_HRiq1() {
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(null);
    assertNull(delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_sDLg2() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(differentLocation);
    assertNotEquals(lastKnownLocation, delivery.getLastKnownLocation());
    assertEquals(differentLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutingStatus_LjEN0() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = delivery.getRoutingStatus();
    assertEquals(RoutingStatus.NOT_ROUTED, routingStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithNull_lcpD1() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(null);
    assertEquals(TransportStatus.UNKNOWN, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithInvalidValue_JnMT2() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.CLAIMED);
    assertEquals(TransportStatus.UNKNOWN, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsDifferentObject_FFEs1() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    assertFalse(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAtWithInvalidValue_ifGU2() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.of(1970, 1, 1, 0, 0, 0);
    delivery.setCalculatedAt(calculatedAt);
    assertNotEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_sDLg2_2() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("AAA"), "A");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode("BBB"), "B");
    delivery.setLastKnownLocation(differentLocation);
    assertEquals(differentLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_sDLg2_1_fid2() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(differentLocation);
    assertNotEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_sDLg2_2_fid2() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode(""), "");
    delivery.setLastKnownLocation(differentLocation);
    assertEquals(differentLocation, delivery.getLastKnownLocation());
  }
}