/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ListCargo_Test_Failing {
  private ListCargo listCargo;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNotRoutedCargos_NHLF0_1() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = listCargo.getNotRoutedCargos();
    assertNotNull(notRoutedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNotRoutedCargos_NHLF0_2() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = listCargo.getNotRoutedCargos();
    assertEquals(0, notRoutedCargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yyTS0_aVvJ0_2() {
    ListCargo listCargo = new ListCargo();
    listCargo.init();
    assertEquals(0, listCargo.getRoutedUnclaimedCargos().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yyTS0_aVvJ0_3() {
    ListCargo listCargo = new ListCargo();
    listCargo.init();
    assertEquals(0, listCargo.getClaimedCargos().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNotRoutedCargos_NHLF0() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = listCargo.getNotRoutedCargos();
    assertNotNull(notRoutedCargos);
    assertEquals(0, notRoutedCargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClaimedCargos_Srrr1() {
    List<CargoRoute> claimedCargos = listCargo.getClaimedCargos();
    assertEquals(0, claimedCargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yyTS0_aVvJ0_1() {
    ListCargo listCargo = new ListCargo();
    listCargo.init();
    assertEquals(0, listCargo.getNotRoutedCargos().size());
  }
}