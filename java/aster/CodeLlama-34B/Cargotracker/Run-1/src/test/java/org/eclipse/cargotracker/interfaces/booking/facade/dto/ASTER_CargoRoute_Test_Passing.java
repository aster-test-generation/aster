/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoRoute_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginCodeWithNullFinalDestination_XGLT2() {
    Location origin = new Location("USCHI", "Chicago");
    Location finalDestination = null;
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USDAL", "Dallas");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("TRACK123", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String expectedOriginCode = "USCHI";
    String actualOriginCode = cargoRoute.getOriginCode();
    assertEquals(expectedOriginCode, actualOriginCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsRouted_EmptyLegs_RNIM0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertFalse(cargoRoute.isRouted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadlineWithClaimed_uSDu2() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, true, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimed_True_TDCn0() {
    CargoRoute cargoRoute = new CargoRoute("12345", new Location("USCHI", "Chicago"), new Location("USNYC", "New York"), LocalDate.of(2022, 12, 25), false, true, new Location("USLAX", "Los Angeles"), "IN_PORT", new ArrayList<>());
    assertTrue(cargoRoute.isClaimed());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimed_False_kVtE1() {
    CargoRoute cargoRoute = new CargoRoute("12345", new Location("USCHI", "Chicago"), new Location("USNYC", "New York"), LocalDate.of(2022, 12, 25), false, false, new Location("USLAX", "Los Angeles"), "IN_PORT", new ArrayList<>());
    assertFalse(cargoRoute.isClaimed());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithDifferentLocation_Ogbe3() {
    Location location1 = new Location("ABC", "New York");
    Location location2 = new Location("XYZ", "Los Angeles");
    CargoRoute cargoRoute = new CargoRoute("123", location1, location2, LocalDate.now(), false, false, location1, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithSameLocation_FCnz4() {
    Location location = new Location("ABC", "New York");
    CargoRoute cargoRoute = new CargoRoute("123", location, location, LocalDate.now(), false, false, location, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationWithDifferentLastKnownLocation_ENlY5() {
    Location location1 = new Location("ABC", "New York");
    Location location2 = new Location("XYZ", "Los Angeles");
    CargoRoute cargoRoute = new CargoRoute("123", location1, location2, LocalDate.now(), false, false, location2, "In Transit", new ArrayList<Leg>());
    String lastKnownLocation = cargoRoute.getLastKnownLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatus_AalT0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullTrackingId_ddmK1() {
    CargoRoute cargoRoute = new CargoRoute(null, new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullOrigin_xllH2() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", null, new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullFinalDestination_NrBl3() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), null, LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullLastKnownLocation_LWys7() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, null, "transportStatus", new ArrayList<Leg>());
    assertEquals("transportStatus", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatusWithNullTransportStatus_GRJG8() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), null, new ArrayList<Leg>());
    assertNull(cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalDestinationName_lHKm0_ZkLo0() {
    Location finalDestination = new Location("JFK", "New York");
    CargoRoute cargoRoute = new CargoRoute("12345", new Location("LAX", "Los Angeles"), finalDestination, LocalDate.now(), false, false, finalDestination, "IN_TRANSIT", Collections.emptyList());
    String actual = cargoRoute.getFinalDestinationName();
    String expected = "New York";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_Gmri0_EnFI0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullTrackingId_RqKU1_AVGZ0() {
    CargoRoute cargoRoute = new CargoRoute(null, new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertNull(cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyTrackingId_coEF2_jywG0() {
    CargoRoute cargoRoute = new CargoRoute("", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithInvalidTrackingId_RiXu4_PuTF0() {
    CargoRoute cargoRoute = new CargoRoute("invalidTrackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("invalidTrackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullOrigin_Zctx5_gnZm0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", null, new Location("unLocode", "name"), LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullFinalDestination_UjGY6_sRxI0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), null, LocalDate.now(), false, false, new Location("unLocode", "name"), "transportStatus", new ArrayList<Leg>());
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullLastKnownLocation_ejcD8_peYd0() {
    CargoRoute cargoRoute = new CargoRoute("trackingId", new Location("unLocode", "name"), new Location("unLocode", "name"), LocalDate.now(), false, false, null, "transportStatus", new ArrayList<Leg>());
    assertEquals("trackingId", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginCode_JfHD0_sEpM0() {
    Location origin = new Location("USCHI", "Chicago");
    Location finalDestination = new Location("USNYC", "New York");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USDAL", "Dallas");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("TRACK123", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String expectedOriginCode = "USCHI";
    String actualOriginCode = cargoRoute.getOriginCode();
    assertEquals(expectedOriginCode, actualOriginCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginCodeWithNullOrigin_QsNF1_zqFz0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 25);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USNYC", "New York");
    String transportStatus = "IN_TRANSIT";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("TRACK123", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String expectedOriginCode = "USNYC";
    String actualOriginCode = cargoRoute.getOriginCode();
    assertEquals(expectedOriginCode, actualOriginCode);
  }
}