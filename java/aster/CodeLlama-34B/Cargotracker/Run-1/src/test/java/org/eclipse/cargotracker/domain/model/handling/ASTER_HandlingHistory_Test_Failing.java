/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDistinctEventsByCompletionTime_nullEvents_oMIr4() {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(null, null, null));
    List<HandlingEvent> actual = handlingHistory.getDistinctEventsByCompletionTime();
    assertTrue(actual.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllHandlingEventsWithNullList_pivC2() {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertEquals(0, allHandlingEvents.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_emptyHandlingEvents_PAUv0() {
    HandlingHistory handlingHistory = new HandlingHistory(Collections.emptyList());
    assertEquals(0, handlingHistory.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullHandlingEvents_nAgT3() {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    assertEquals(0, handlingHistory.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullHandlingEvent_loAc4() {
    HandlingEvent handlingEvent = null;
    HandlingHistory handlingHistory = new HandlingHistory(Collections.singletonList(handlingEvent));
    assertEquals(0, handlingHistory.hashCode());
  }
}