/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_wgpe0() {
    EventLogger eventLogger = new EventLogger();
    String completionTimePattern = eventLogger.getCompletionTimePattern();
    assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", completionTimePattern);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_rWnD0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNotNull(trackingId);
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyString_bHGC2() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithValidString_dYnq5() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals("valid", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithInvalidTrackingId_kvQZ9() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("invalid");
    String trackingId = eventLogger.getTrackingId();
    assertNotEquals("invalid", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithEmptyMap_mgRY1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertTrue(eventTypes.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.RECEIVE));
    assertNull(eventTypes.get(HandlingEvent.Type.LOAD));
    assertNull(eventTypes.get(HandlingEvent.Type.UNLOAD));
    assertNull(eventTypes.get(HandlingEvent.Type.CLAIM));
    assertNull(eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_bzjR0() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = eventLogger.getCompletionTime();
    assertNotNull(completionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_NSCW0() {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertNotNull(completionTimeValue);
    assertEquals("2023-02-28T12:34:56.000Z", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithNull_HzLJ1() {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertNull(completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XNEs0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertNotNull(eventLogger.getTrackingIds());
    assertNotNull(eventLogger.getLocations());
    assertNotNull(eventLogger.getVoyages());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_rWnD0_1() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithInvalidTrackingId_kvQZ9_fid1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("not equal");
    String trackingId = eventLogger.getTrackingId();
    assertNotEquals("not equal", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5_1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.RECEIVE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5_2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.LOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5_3() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.UNLOAD));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5_4() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.CLAIM));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesWithNullValue_LDnl5_5() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNull(eventTypes.get(HandlingEvent.Type.CUSTOMS));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_NSCW0_1() {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertNotNull(completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithNull_HzLJ1_fid1() {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals(null, completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValueWithInvalidDate_iAHY2_2() {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2023-02-28T12:34:56.000Z", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XNEs0_1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertNotNull(eventLogger.getTrackingIds());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XNEs0_2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertNotNull(eventLogger.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XNEs0_3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
    assertNotNull(eventLogger.getVoyages());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_mFBH0_Seon0_1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    for (int i = 0; i < 10; i++) {
      SelectItem voyage = voyages.get(i);
      assertNotNull(voyage);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_mFBH0_Seon0_2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    for (int i = 0; i < 10; i++) {
      SelectItem voyage = voyages.get(i);
      assertNotNull(voyage);
    }
    assertEquals(10, voyages.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_mFBH0_Seon0_1_fid2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    for (int i = 0; i < 10; i++) {
      SelectItem voyage = voyages.get(i);
    }
    assertNotNull(voyages);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_mFBH0_Seon0_2_fid2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> voyages = eventLogger.getVoyages();
    for (int i = 0; i < 10; i++) {
      SelectItem voyage = voyages.get(i);
    }
    assertEquals(10, voyages.size());
  }
}