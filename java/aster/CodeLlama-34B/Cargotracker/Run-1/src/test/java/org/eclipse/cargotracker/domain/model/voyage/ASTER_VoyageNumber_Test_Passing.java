/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_ValidNumber_YvaA0() {
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    String idString = voyageNumber.getIdString();
    assertEquals("1234567890", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_InvalidNumber_ZKrL1() {
    VoyageNumber voyageNumber = new VoyageNumber("abcdefghij");
    String idString = voyageNumber.getIdString();
    assertEquals("abcdefghij", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_EmptyNumber_KYxd3() {
    VoyageNumber voyageNumber = new VoyageNumber("");
    String idString = voyageNumber.getIdString();
    assertEquals("", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_NegativeNumber_OEef6() {
    VoyageNumber voyageNumber = new VoyageNumber("-1234567890");
    String idString = voyageNumber.getIdString();
    assertEquals("-1234567890", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_ZeroNumber_yKFK7() {
    VoyageNumber voyageNumber = new VoyageNumber("0");
    String idString = voyageNumber.getIdString();
    assertEquals("0", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_LargeNumber_qitu8() {
    VoyageNumber voyageNumber = new VoyageNumber("1234567890123456789012345678901234567890");
    String idString = voyageNumber.getIdString();
    assertEquals("1234567890123456789012345678901234567890", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_HmUY0() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_mMhA1() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_SUAG2() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    assertFalse(voyageNumber.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValue_sbnP4() {
    VoyageNumber voyageNumber1 = new VoyageNumber("1234");
    VoyageNumber voyageNumber2 = new VoyageNumber("5678");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClassDifferentValue_kFTE6() {
    VoyageNumber voyageNumber1 = new VoyageNumber("1234");
    Object object = new Object();
    assertFalse(voyageNumber1.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameNumber_SrJH0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("12345");
    VoyageNumber voyageNumber2 = new VoyageNumber("12345");
    assertTrue(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentNumber_axVh1() {
    VoyageNumber voyageNumber1 = new VoyageNumber("12345");
    VoyageNumber voyageNumber2 = new VoyageNumber("54321");
    assertFalse(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNumber_ctfx0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    String expected = "12345";
    String actual = voyageNumber.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_emptyString_JUlJ1() {
    VoyageNumber voyageNumber = new VoyageNumber("");
    assertEquals(0, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithoutNumber_rOnm1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String expected = "";
    String actual = voyageNumber.toString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_invalidString_GhEe3_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber("abcdef");
    assertEquals(-1424385949, voyageNumber.hashCode());
  }
}