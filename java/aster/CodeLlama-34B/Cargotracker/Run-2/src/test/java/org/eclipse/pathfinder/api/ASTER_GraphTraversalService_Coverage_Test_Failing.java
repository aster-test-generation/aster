/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_XJWT0() {
    GraphTraversalService gts = new GraphTraversalService();
    List<String> allLocations = new ArrayList<>();
    allLocations.add("A");
    allLocations.add("B");
    allLocations.add("C");
    allLocations.add("D");
    allLocations.add("E");
    List<TransitPath> candidates = gts.findShortestPath("A", "E", "2022-01-01");
    assertEquals(5, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ubom0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("ABC", "DEF", "2022-01-01");
    assertNotNull(candidates);
    assertEquals(3, candidates.size());
    for (TransitPath candidate : candidates) {
      assertNotNull(candidate.getTransitEdges());
      assertEquals(3, candidate.getTransitEdges().size());
      for (TransitEdge edge : candidate.getTransitEdges()) {
        assertNotNull(edge.getVoyageNumber());
        assertNotNull(edge.getFromUnLocode());
        assertNotNull(edge.getToUnLocode());
        assertNotNull(edge.getFromDate());
        assertNotNull(edge.getToDate());
      }
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ubom0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("ABC", "DEF", "2022-01-01");
    for (TransitPath candidate : candidates) {
      for (TransitEdge edge : candidate.getTransitEdges()) {
      }
    }
    assertNotNull(candidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ubom0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("ABC", "DEF", "2022-01-01");
    for (TransitPath candidate : candidates) {
      for (TransitEdge edge : candidate.getTransitEdges()) {
      }
    }
    assertEquals(3, candidates.size());
  }
}