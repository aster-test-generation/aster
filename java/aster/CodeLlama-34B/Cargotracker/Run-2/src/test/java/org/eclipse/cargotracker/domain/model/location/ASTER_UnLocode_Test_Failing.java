/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Failing {
  private UnLocode unlocode;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_ValidCountryAndLocation_JgGC0() {
    unlocode = new UnLocode("US-NYC");
    assertEquals("US-NYC", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_InvalidCountryAndLocation_knnB1() {
    unlocode = new UnLocode("INVALID");
    assertEquals("INVALID", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_NullCountryAndLocation_kBMK2() {
    unlocode = new UnLocode(null);
    assertNull(unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_EmptyCountryAndLocation_LJNK3() {
    unlocode = new UnLocode("");
    assertEquals("", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_NonAlphanumericCountryAndLocation_FJto5() {
    unlocode = new UnLocode("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithSpecialCharacters_PeFj6() {
    unlocode = new UnLocode("US-NYC-123");
    assertEquals("US-NYC-123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithDashes_lYMM7() {
    unlocode = new UnLocode("US-NYC-123-456");
    assertEquals("US-NYC-123-456", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithUnderscores_mWZI8() {
    unlocode = new UnLocode("US_NYC_123");
    assertEquals("US_NYC_123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithSpaces_xuuT9() {
    unlocode = new UnLocode("US NYC 123");
    assertEquals("US NYC 123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithTabs_JCBs10() {
    unlocode = new UnLocode("US\tNYC\t123");
    assertEquals("US\tNYC\t123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithNewlines_KnOh11() {
    unlocode = new UnLocode("US\nNYC\n123");
    assertEquals("US\nNYC\n123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithCarriageReturns_tVMd12() {
    unlocode = new UnLocode("US\rNYC\r123");
    assertEquals("US\rNYC\r123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_CountryAndLocationWithFormFeeds_xmYJ13() {
    unlocode = new UnLocode("US\fNYC\f123");
    assertEquals("US\fNYC\f123", unlocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_YZjF0() {
    UnLocode unLocode = new UnLocode("US");
    assertEquals(unLocode.hashCode(), unLocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValue_ExhS2() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("CACF");
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ValidInput_Fzim0() {
    UnLocode unLocode = new UnLocode("US");
    String expected = "US";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_InvalidInput_IZeQ1() {
    UnLocode unLocode = new UnLocode("INVALID");
    String expected = "INVALID";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_NullInput_QHNu2() {
    UnLocode unLocode = new UnLocode("");
    String expected = "";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_EmptyInput_EXMu3() {
    UnLocode unLocode = new UnLocode("");
    String expected = "EXMu3";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_SpecialCharactersInput_iLWa6() {
    UnLocode unLocode = new UnLocode("!@#$%^&*()_+");
    String expected = "!@#$%^&*()_+";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MultipleSpecialCharactersInput_qlnb7() {
    UnLocode unLocode = new UnLocode("!@#$%^&*()_+ !@#$%^&*()_+");
    String expected = "!@#$%^&*()_+ !@#$%^&*()_+";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MixedInput_lILy8() {
    UnLocode unLocode = new UnLocode("US1234567890");
    String expected = "US1234567890";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MixedInputWithSpecialCharacters_Plqg10() {
    UnLocode unLocode = new UnLocode("US!@#$%^&*()_+");
    String expected = "US!@#$%^&*()_+";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MixedInputWithWhitespaceAndSpecialCharacters_slCu11() {
    UnLocode unLocode = new UnLocode("US 1234567890 !@#$%^&*()_+");
    String expected = "US 1234567890 !@#$%^&*()_+";
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_yFFa0() {
    UnLocode unLocode = new UnLocode("US");
    assertEquals(unLocode, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_Null_aRBf2() {
    UnLocode unLocode = new UnLocode("US");
    assertTrue(unLocode.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_EmptyString_Lamn0() {
    UnLocode unlocode = new UnLocode("Lamn0");
    assertEquals(0, unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NonEmptyString_AMgb1() {
    UnLocode unlocode = new UnLocode("AMgb1");
    assertEquals("AMgb1".hashCode(), unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullString_gDzp2() {
    UnLocode unlocode = new UnLocode("");
    assertEquals(0, unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_InvalidString_fRRy3() {
    UnLocode unlocode = new UnLocode("ABC");
    assertEquals("ABC".hashCode(), unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentObjects_HVuL5() {
    UnLocode unlocode1 = new UnLocode("HVuL5");
    UnLocode unlocode2 = new UnLocode("XYZ");
    assertNotEquals(unlocode1.hashCode(), unlocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_SameObjects_ITAD6() {
    UnLocode unlocode = new UnLocode("ABC");
    assertEquals(unlocode.hashCode(), unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentInstances_kEKC7() {
    UnLocode unlocode1 = new UnLocode("ABCD");
    UnLocode unlocode2 = new UnLocode("ABCD");
    assertEquals(unlocode1.hashCode(), unlocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_YZjF0_fid1() {
    UnLocode unLocode = new UnLocode("US");
    assertTrue(unLocode.equals(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValue_QbZr1_fid1() {
    UnLocode unLocode1 = new UnLocode("US");
    UnLocode unLocode2 = new UnLocode("US");
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValue_ExhS2_fid1() {
    UnLocode unLocode1 = new UnLocode("US");
    UnLocode unLocode2 = new UnLocode("CA");
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_NullInput_QHNu2_fid1() {
    UnLocode unLocode = new UnLocode(null);
    String expected = null;
    String actual = unLocode.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_yFFa0_fid1() {
    UnLocode unLocode = new UnLocode("US");
    assertTrue(unLocode.sameValueAs(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObject_Tbkb1_fid1() {
    UnLocode unLocode1 = new UnLocode("US");
    UnLocode unLocode2 = new UnLocode("US");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_Null_aRBf2_fid1() {
    UnLocode unLocode = new UnLocode("US");
    assertFalse(unLocode.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullString_gDzp2_fid1() {
    UnLocode unlocode = new UnLocode(null);
    assertEquals(0, unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_InvalidString_fRRy3_fid1() {
    UnLocode unlocode = new UnLocode("ABC");
    assertNotEquals("XYZ".hashCode(), unlocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentObjects_HVuL5_fid1() {
    UnLocode unlocode1 = new UnLocode("ABC");
    UnLocode unlocode2 = new UnLocode("XYZ");
    assertNotEquals(unlocode1.hashCode(), unlocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentInstances_kEKC7_fid1() {
    UnLocode unlocode1 = new UnLocode("ABC");
    UnLocode unlocode2 = new UnLocode("ABC");
    assertEquals(unlocode1.hashCode(), unlocode2.hashCode());
  }
}