/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withDate_fqqp2_fid2() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    assertEquals("12/25/2022 10:15 AM", DateConverter.toString(dateTime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withTimeZoneAndOffsetAndDaylightSavingTimeAndLeapYear_ixVz8_fid2() {
    LocalDateTime dateTime = LocalDateTime.of(2024, 12, 25, 10, 15, 30);
    assertEquals("12/25/2024 10:15 AM", DateConverter.toString(dateTime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidDateTimeString_IqtQ0_fid2() {
    String datetime = "2022-01-01T12:00:00";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_EmptyDateTimeString_THqg3_fid2() {
    String datetime = "";
    LocalDateTime expected = null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZoneAndOffsetAndColon_jOEU8_fid2() {
    String datetime = "2022-01-01T12:00:00+05:00[Asia/Kolkata]:";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_validDate_FyKF1_fid2() {
    LocalDate date = LocalDate.of(2022, 1, 1);
    assertEquals("1/1/2022", DateConverter.toString(date));
  }
}