/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.File;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventFilesCheckpoint_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextFile_emptyList_PKCL2() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File file = checkpoint.nextFile();
    assertNull(file);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_lineCoverage_dyPP0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = eventFilesCheckpoint.getFilePointer();
    assertEquals(0, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointer_ITAR0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = 100;
    eventFilesCheckpoint.setFilePointer(filePointer);
    assertEquals(filePointer, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNegativeValue_FWZK1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = -100;
    eventFilesCheckpoint.setFilePointer(filePointer);
    assertEquals(filePointer, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithZeroValue_GPVM2() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = 0;
    eventFilesCheckpoint.setFilePointer(filePointer);
    assertEquals(filePointer, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithMaxValue_fCid3() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = Long.MAX_VALUE;
    eventFilesCheckpoint.setFilePointer(filePointer);
    assertEquals(filePointer, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithMinValue_tFGb4() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = Long.MIN_VALUE;
    eventFilesCheckpoint.setFilePointer(filePointer);
    assertEquals(filePointer, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCurrentFile_emptyFiles_QuUT0() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File currentFile = checkpoint.currentFile();
    assertNull(currentFile);
  }
}