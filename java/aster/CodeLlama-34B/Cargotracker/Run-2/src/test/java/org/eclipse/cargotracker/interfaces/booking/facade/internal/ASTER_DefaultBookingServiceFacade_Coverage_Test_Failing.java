/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.LocationDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
  private DefaultBookingServiceFacade defaultBookingServiceFacade;
  private LocationDtoAssembler locationDtoAssembler;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_TDVq0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDestination("trackingId", "destinationUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithInvalidTrackingId_PKbl1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDestination("invalidTrackingId", "destinationUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_tytt0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDeadline("trackingId", LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithInvalidTrackingId_QFUt1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDeadline("invalidTrackingId", LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_GDbf0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("trackingId");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRoutingWithInvalidTrackingId_bYNT1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("invalidTrackingId");
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_XAwk0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "ABC";
    String destination = "DEF";
    LocalDate arrivalDeadline = LocalDate.now();
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_OAZJ0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertNotNull(trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_OAZJ0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargosWithEmptyList_nQSj1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<Cargo> cargos = new ArrayList<>();
    List<CargoRoute> routes = facade.listAllCargos();
    assertEquals(0, routes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargosWithNullList_Cwzh2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<Cargo> cargos = null;
    List<CargoRoute> routes = facade.listAllCargos();
    assertEquals(0, routes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_OAZJ0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertNotNull(trackingIds);
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_EmptyTrackingId_yiOL0() {
    defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("");
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullTrackingId_SjmC1() {
    defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo(null);
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_ValidTrackingId_Xshq2() {
    defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertEquals(1, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_InvalidTrackingId_VTxA3() {
    defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("invalidTrackingId");
    assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_MultipleItineraries_PnYa4() {
    defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = defaultBookingServiceFacade.requestPossibleRoutesForCargo("trackingId");
    assertEquals(2, routeCandidates.size());
  }
}