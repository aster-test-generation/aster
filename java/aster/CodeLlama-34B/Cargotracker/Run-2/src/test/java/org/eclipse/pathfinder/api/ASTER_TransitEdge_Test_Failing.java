/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithInvalidString_LDny3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "not equal", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("not equal", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jVMs0() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=voyage1, fromUnLocode=from1, toUnLocode=to1, fromDate=" + LocalDateTime.now() + ", toDate=" + LocalDateTime.now() + '}';
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullFromUnLocode_XOTz2() {
    TransitEdge edge = new TransitEdge("voyage1", null, "to1", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=voyage1, fromUnLocode=null, toUnLocode=to1, fromDate=" + LocalDateTime.now() + ", toDate=" + LocalDateTime.now() + '}';
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullToUnLocode_Pzdq3() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", null, LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=voyage1, fromUnLocode=from1, toUnLocode=null, fromDate=" + LocalDateTime.now() + ", toDate=" + LocalDateTime.now() + '}';
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_rTNA0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.now());
    assertEquals(LocalDateTime.now().toString(), edge.getToDate().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidToDate_MUjd5() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNotNull(toDate);
    assertEquals(LocalDateTime.now().minusDays(1), toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidFromAndToDate_sXwY6() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNotNull(toDate);
    assertEquals(LocalDateTime.now().minusDays(1), toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_DqUx0() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
    assertEquals(LocalDateTime.now().plusDays(1), fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDateWithNullToDate_lMup2() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    LocalDateTime fromDate = edge.getFromDate();
    assertEquals(LocalDateTime.now().toString(), fromDate.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromUnLocode_WuAQ2() {
    TransitEdge edge = new TransitEdge("voyageNumber", null, "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertEquals(null, toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullToDate_jGgY5() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    String toUnLocode = edge.getToUnLocode();
    assertEquals(null, toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithInvalidString_LDny3_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "invalid", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("invalid", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullFromDate_rBpO4_fid1() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", null, LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=voyage1, fromUnLocode=from1, toUnLocode=to1, fromDate=null, toDate=" + LocalDateTime.now() + '}';
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_rTNA0_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.now());
    assertEquals(LocalDateTime.now(), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithInvalidDate_KsHs2_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2023, 2, 29, 12, 0, 0)); // Invalid date
    assertEquals(LocalDateTime.now(), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithInvalidTime_vonJ7_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2023, 2, 28, 24, 0, 0)); // Invalid time
    assertEquals(LocalDateTime.now(), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_NullFromDate_VETY1_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidFromDate_fJiy4_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidToDate_MUjd5_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidFromAndToDate_sXwY6_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().minusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_DqUx0_fid1() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
    assertEquals(LocalDateTime.now(), fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDateWithNullToDate_lMup2_fid1() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    LocalDateTime fromDate = edge.getFromDate();
    assertEquals(LocalDateTime.now(), fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullVoyageNumber_sjry1_fid1() {
    TransitEdge edge = new TransitEdge(null, "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertNull(toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromUnLocode_WuAQ2_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", null, "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertNull(toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromDate_oMIv4_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertNull(toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullToDate_jGgY5_fid1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    String toUnLocode = edge.getToUnLocode();
    assertNull(toUnLocode);
  }
}