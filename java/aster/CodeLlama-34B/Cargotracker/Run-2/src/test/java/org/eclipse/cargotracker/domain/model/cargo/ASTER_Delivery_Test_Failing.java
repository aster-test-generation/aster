/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  @NotNull
  private boolean misdirected;
  @Embedded
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private RoutingStatus routingStatus;
  private boolean isUnloadedAtDestination;
  private HandlingEvent lastEvent;
  private LocalDateTime calculatedAt;
  private LocalDateTime eta;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithNull_oPAC1() {
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(null);
    assertNull(delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocationWithDifferentLocation_zSDb2() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("test"), "test");
    delivery.setLastKnownLocation(lastKnownLocation);
    Location differentLocation = new Location(new UnLocode("different"), "different");
    delivery.setLastKnownLocation(differentLocation);
    assertEquals(differentLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_dKhk0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("test"), "test");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithDifferentValues_OqIU1_1_fid2() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus1 = RoutingStatus.NOT_ROUTED;
    RoutingStatus routingStatus2 = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus1);
    delivery.setRoutingStatus(routingStatus2);
    assertEquals(routingStatus1, delivery.getRoutingStatus());
  }
}