/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.File;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventFilesCheckpoint_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextFile_validFile_ZHgw0() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File file = checkpoint.nextFile();
    assertNotNull(file);
    assertEquals(file.getName(), "file1.txt");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithInvalidValue_OAUP5() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = -1;
    try {
      eventFilesCheckpoint.setFilePointer(filePointer);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid file pointer: " + filePointer, e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextFile_validFile_ZHgw0_1() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File file = checkpoint.nextFile();
    assertNotNull(file);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextFile_validFile_ZHgw0_2() {
    EventFilesCheckpoint checkpoint = new EventFilesCheckpoint();
    File file = checkpoint.nextFile();
    assertEquals(file.getName(), "file1.txt");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithInvalidValue_OAUP5_fid1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = -1;
    try {
      eventFilesCheckpoint.setFilePointer(filePointer);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Invalid file pointer: -1", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNullValue_mpJe6_kpBi0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = 0;
    try {
      eventFilesCheckpoint.setFilePointer(filePointer);
      assertNull(eventFilesCheckpoint.getFilePointer());
    } catch (NullPointerException e) {
      assertEquals("File pointer cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNullValue_mpJe6_kpBi0_fid2() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = 0;
    try {
      eventFilesCheckpoint.setFilePointer(filePointer);
      fail("Expected NullPointerException");
    } catch (NullPointerException e) {
      assertEquals("File pointer cannot be null", e.getMessage());
    }
  }
}