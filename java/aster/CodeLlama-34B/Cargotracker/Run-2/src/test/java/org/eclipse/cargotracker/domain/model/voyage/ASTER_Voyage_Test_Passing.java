/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Passing {
  Voyage voyage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals() throws Exception {
    voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Voyage that = new Voyage(new VoyageNumber("12345"), new Schedule());
    assertTrue(voyage.equals(that));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_XaMo0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameIdentity_ckei1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentIdentity_ENik2() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_FFbs4() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullSchedule_TenB6() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage.equals(new Voyage(new VoyageNumber("123"), new Schedule())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_YqTv0_1() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertNotNull(schedule);
  }

  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_YqTv0_2() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(1, schedule.getCarrierMovements().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_YqTv0_3() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithEmptySchedule_MaHY5_2() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(0, schedule.getCarrierMovements().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_Ivue0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage 12345";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_IJqL0_1() {
    Voyage voyage = new Voyage(new VoyageNumber("1234"), new Schedule());
    VoyageNumber voyageNumber = voyage.getVoyageNumber();
    assertEquals("1234", voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_SameVoyageNumber_arvA0() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Voyage other = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.sameIdentityAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_DifferentVoyageNumber_YXip1() {
    VoyageNumber voyageNumber1 = new VoyageNumber("1234");
    VoyageNumber voyageNumber2 = new VoyageNumber("5678");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber1, schedule);
    Voyage other = new Voyage(voyageNumber2, schedule);
    assertFalse(voyage.sameIdentityAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_voyageNumber_BbIT0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = voyageNumber.hashCode();
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }
}