/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  private TrackingId trackingId;
  private RouteSpecification routeSpecification;
  @Embedded
  @NotNull
  private Itinerary itinerary;
  @Embedded
  @NotNull
  private Delivery delivery;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullRouteSpecification_BplO2() {
    Cargo cargo = new Cargo(new TrackingId("123456789"), null);
    assertNull(cargo.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteSpecificationWithNullRouteSpecification_bzes2() {
    Cargo cargo = new Cargo(new TrackingId("12345"), null);
    RouteSpecification routeSpecification = cargo.getRouteSpecification();
    assertNull(routeSpecification);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullRouteSpecification_FOdW2_zdct0() {
    UnLocode unLocode = new UnLocode("US");
    Location origin = new Location(unLocode, "New York");
    Location destination = new Location(unLocode, "Los Angeles");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, null);
    assertEquals("1234567890", cargo.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullRouteSpecification_FOdW2_zdct0_fid1() {
    UnLocode unLocode = new UnLocode("USCHI");
    Location origin = new Location(unLocode, "New York");
    Location destination = new Location(unLocode, "Los Angeles");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, null);
    assertEquals("1234567890", cargo.toString());
  }
}