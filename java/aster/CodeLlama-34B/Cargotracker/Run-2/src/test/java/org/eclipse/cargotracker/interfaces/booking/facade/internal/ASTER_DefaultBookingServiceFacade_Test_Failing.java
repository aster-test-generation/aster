/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_InvalidOrigin_Jqdu1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = "USNYC";
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullOrigin_ZZtR4() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = null;
    String destination = "USNYC";
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullDestination_sppJ5() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = null;
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullArrivalDeadline_XDGr6() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = "USNYC";
    LocalDate arrivalDeadline = null;
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_qSqi0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    for (int i = 0; i < 10; i++) {
      trackingIds.add(String.valueOf(i));
    }
    assertEquals(10, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_emptyRepository_syKf1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(0, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRoutingWithNullTrackingId_QuMu1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting(null);
    assertNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_InvalidOrigin_Jqdu1_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = "USNYC";
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullOrigin_ZZtR4_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = null;
    String destination = "USNYC";
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullDestination_sppJ5_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = null;
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullArrivalDeadline_XDGr6_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String origin = "USLAX";
    String destination = "USNYC";
    LocalDate arrivalDeadline = null;
    String trackingId = facade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_qSqi0_1_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_qSqi0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<String> trackingIds = facade.listAllTrackingIds();
    assertEquals(10, trackingIds.size());
    for (int i = 0; i < 10; i++) {
      assertEquals("trackingId" + i, trackingIds.get(i));
    }
  }
}