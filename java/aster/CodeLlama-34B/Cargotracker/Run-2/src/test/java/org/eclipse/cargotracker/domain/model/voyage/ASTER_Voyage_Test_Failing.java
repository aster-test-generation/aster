/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Failing {
  Voyage voyage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullVoyageNumber_nIpg5() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(new Voyage(null, new Schedule())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullVoyageNumber_nIpg5_fid1() {
    Voyage voyage = new Voyage(null, new Schedule());
    assertFalse(voyage.equals(new Voyage(new VoyageNumber("123"), new Schedule())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullSchedule_TenB6_fid1() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), null);
    assertFalse(voyage.equals(new Voyage(new VoyageNumber("123"), new Schedule())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_YqTv0_3_fid1() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(1, schedule.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithNullVoyageNumber_AtpM1() {
    Voyage voyage = new Voyage(null, new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithNullSchedule_tBoY2() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), null);
    Schedule schedule = voyage.getSchedule();
    assertNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithNullVoyageNumberAndSchedule_iDuv3() {
    Voyage voyage = new Voyage(null, null);
    Schedule schedule = voyage.getSchedule();
    assertNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithEmptyVoyageNumber_wWDJ4() {
    Voyage voyage = new Voyage(new VoyageNumber(""), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleWithEmptySchedule_MaHY5_3() {
    Voyage voyage = new Voyage(new VoyageNumber("12345"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertEquals(0, schedule.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumber_cdZd1() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage null";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullSchedule_XKrL2() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage 12345";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumberAndSchedule_TRJs3() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage null";
    String actual = voyage.toString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_IJqL0_2() {
    Voyage voyage = new Voyage(new VoyageNumber("1234"), new Schedule());
    VoyageNumber voyageNumber = voyage.getVoyageNumber();
    assertEquals(1234, voyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumber_XZUw1() {
    Voyage voyage = new Voyage(null, new Schedule());
    VoyageNumber voyageNumber = voyage.getVoyageNumber();
    assertNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullSchedule_NQDG2() {
    Voyage voyage = new Voyage(new VoyageNumber("1234"), null);
    VoyageNumber voyageNumber = voyage.getVoyageNumber();
    assertNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumberAndSchedule_BEqW3() {
    Voyage voyage = new Voyage(null, null);
    VoyageNumber voyageNumber = voyage.getVoyageNumber();
    assertNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_SameVoyageNumberAndDifferentSchedule_RuOq5() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    Schedule schedule1 = new Schedule();
    Schedule schedule2 = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule1);
    Voyage other = new Voyage(voyageNumber, schedule2);
    assertFalse(voyage.sameIdentityAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_schedule_HGzq1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = schedule.hashCode();
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_both_wiEx2() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = voyageNumber.hashCode() + schedule.hashCode();
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullVoyageNumber_eJsk3() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = 0;
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullSchedule_jKHu4() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = voyageNumber.hashCode();
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_nullBoth_KoMG5() {
    VoyageNumber voyageNumber = null;
    Schedule schedule = null;
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = 0;
    int actual = voyage.hashCode();
    assertEquals(expected, actual);
  }
}