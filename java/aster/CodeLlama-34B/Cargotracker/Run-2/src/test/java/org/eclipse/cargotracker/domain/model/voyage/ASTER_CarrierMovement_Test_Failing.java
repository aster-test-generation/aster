/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CarrierMovement_Test_Failing {
  private LocalDateTime departureTime;
  CarrierMovement carriermovement;
  private LocalDateTime arrivalTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_nullDepartureAndArrivalLocations_QdHl4() {
    CarrierMovement carrierMovement = new CarrierMovement(
            null,
            null,
            LocalDateTime.of(2022, 1, 1, 10, 0, 0),
            LocalDateTime.of(2022, 1, 1, 11, 0, 0)
    );
    LocalDateTime departureTime = carrierMovement.getDepartureTime();
    assertNull(departureTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_ZDaN1() {
    CarrierMovement carrierMovement1 = new CarrierMovement();
    CarrierMovement carrierMovement2 = new CarrierMovement();
    assertFalse(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_nullDepartureAndArrivalLocations_QdHl4_fid1() {
    CarrierMovement carrierMovement = new CarrierMovement(
            null,
            null,
            LocalDateTime.of(2022, 1, 1, 10, 0, 0),
            LocalDateTime.of(2022, 1, 1, 11, 0, 0)
    );
    LocalDateTime departureTime = carrierMovement.getDepartureTime();
    assertNotNull(departureTime);
    assertEquals(LocalDateTime.of(2022, 1, 1, 10, 0, 0), departureTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_CMun0_MhOH0_1() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals(new UnLocode("USLAX"), departureLocation.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocationWithSameLocation_oiEd1_zzwe0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals(departureLocation, departureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocationWithNullDepartureLocation_tTvs2_UNwI0() {
    CarrierMovement carrierMovement = new CarrierMovement(null, new Location(new UnLocode("USLAX"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertNull(departureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTimeWithNullDepartureTime_gAel1_puMk0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "Los Angeles"), new Location(new UnLocode("USNYC"), "New York"), null, LocalDateTime.of(2022, 1, 1, 12, 0));
    assertNull(carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValueAs_JufK5_EeHh0_fid3() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USNYC");
    Location location1 = new Location(unLocode1, "Chicago");
    Location location2 = new Location(unLocode2, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    assertFalse(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_CMun0_MhOH0_1_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals(new UnLocode("US"), departureLocation.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_CMun0_MhOH0_2_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals("New York", departureLocation.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocationWithSameLocation_oiEd1_jWyN1_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals(new Location(new UnLocode("US"), "New York"), departureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocationWithNullDepartureLocation_tTvs2_UNwI0_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(null, new Location(new UnLocode("CA"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertNull(departureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_UIRh0_iUwc0_fid3() {
    Location departureLocation = new Location(new UnLocode("US"), "New York");
    Location arrivalLocation = new Location(new UnLocode("US"), "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertEquals(arrivalTime, carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTimeWithNullDepartureTime_gAel1_puMk0_fid3() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), null, LocalDateTime.of(2022, 1, 1, 12, 0));
    assertNull(carrierMovement.getArrivalTime());
  }
}