/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Coordinates_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_ValidInput_JBKe0() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double expectedLongitude = -122.4194;
    double actualLongitude = coordinates.getLongitude();
    assertEquals(expectedLongitude, actualLongitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitude_sEeL0() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(37.7749, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithNegativeLatitude_gSHs1() {
    Coordinates coordinates = new Coordinates(-37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(-37.7749, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithZeroLatitude_VpeG2() {
    Coordinates coordinates = new Coordinates(0, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(0, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithMaxLatitude_YlXB3() {
    Coordinates coordinates = new Coordinates(90, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(90, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithMinLatitude_JpSD4() {
    Coordinates coordinates = new Coordinates(-90, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(-90, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude_OlSf5() {
    Coordinates coordinates = new Coordinates(100, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(100, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude2_rmqs6() {
    Coordinates coordinates = new Coordinates(-100, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(-100, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude3_TSjJ7() {
    Coordinates coordinates = new Coordinates(Double.NaN, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(Double.NaN, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude4_SDpe8() {
    Coordinates coordinates = new Coordinates(Double.POSITIVE_INFINITY, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(Double.POSITIVE_INFINITY, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude5_nDMu9() {
    Coordinates coordinates = new Coordinates(Double.NEGATIVE_INFINITY, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(Double.NEGATIVE_INFINITY, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude6_Zjuu10() {
    Coordinates coordinates = new Coordinates(Double.MIN_VALUE, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(Double.MIN_VALUE, latitude, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLatitudeWithInvalidLatitude7_gAuD11() {
    Coordinates coordinates = new Coordinates(Double.MAX_VALUE, -122.4194);
    double latitude = coordinates.getLatitude();
    assertEquals(Double.MAX_VALUE, latitude, 0.0001);
  }
}