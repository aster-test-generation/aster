/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Passing {
  @NotNull
  private boolean misdirected;
  @Embedded
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private RoutingStatus routingStatus;
  private boolean isUnloadedAtDestination;
  private HandlingEvent lastEvent;
  private LocalDateTime calculatedAt;
  private LocalDateTime eta;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected_jGdQ0() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirectedFalse_UQCD1() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(false);
    assertFalse(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithEmptyValues_tMzw3() {
    Delivery delivery = new Delivery();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentVoyage_zWZO0() {
    Delivery delivery = new Delivery();
    Voyage currentVoyage = delivery.getCurrentVoyage();
    assertEquals(Voyage.NONE, currentVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentVoyage2_vFWw1() {
    Delivery delivery = new Delivery();
    Voyage currentVoyage = delivery.getCurrentVoyage();
    assertNotNull(currentVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestination_FEOI0() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestinationWithFalse_abMo1() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(false);
    assertFalse(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatus_DXmK0() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.IN_PORT;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithDifferentStatus_hfHq1() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.ONBOARD_CARRIER;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithNullStatus_NDVX2() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = null;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithSameStatus_RZki3() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.NOT_RECEIVED;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithUnknownStatus_urwo4() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.UNKNOWN;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatusWithClaimedStatus_UonK5() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.CLAIMED;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_Ppfn0() {
    Delivery delivery = new Delivery();
    assertTrue(delivery.equals(delivery));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValues_tPyR1() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    assertTrue(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValues_lYcH2() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    delivery2.setTransportStatus(TransportStatus.IN_PORT);
    assertFalse(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_SopO3() {
    Delivery delivery = new Delivery();
    assertFalse(delivery.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_zcoI0() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAtNull_fzwb2() {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(null);
    assertNull(delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAtSameValue_ropc3() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatus_zJuO0() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithDifferentValues_OqIU1() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus1 = RoutingStatus.NOT_ROUTED;
    RoutingStatus routingStatus2 = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus1);
    assertEquals(routingStatus1, delivery.getRoutingStatus());
    delivery.setRoutingStatus(routingStatus2);
    assertEquals(routingStatus2, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithNullValue_PBjn2() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = null;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithSameValue_xLPZ3() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithDifferentValues_OqIU1_1() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus1 = RoutingStatus.ROUTED;
    RoutingStatus routingStatus2 = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus1);
    delivery.setRoutingStatus(routingStatus2);
    assertEquals(routingStatus1, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithDifferentValues_OqIU1_2() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus1 = RoutingStatus.NOT_ROUTED;
    RoutingStatus routingStatus2 = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus1);
    delivery.setRoutingStatus(routingStatus2);
    assertEquals(routingStatus2, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithSameValue_xLPZ3_1() {
    Delivery delivery = new Delivery();
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    delivery.setRoutingStatus(routingStatus);
    delivery.setRoutingStatus(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }
}