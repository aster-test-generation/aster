/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocode_yGEj0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithNull_Ffhi1() {
    TransitEdge edge = new TransitEdge("voyageNumber", null, "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNull(edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithEmptyString_emRn2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentCase_xIcd4_2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("FROMUNLOCODE", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithWhitespace_ZEtk5_2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals(" fromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithSpecialCharacters_XYTT6_2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fromUnLocode!", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithSpecialCharacters_XYTT6_3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fromUnLocode@#$%^&*()_+", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentLength_lOgI7_2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fromUnLocode123", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentLength_lOgI7_3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fromUnLocode1234567890", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentStartingCharacter_Xtkr8_2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("FromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentStartingCharacter_Xtkr8_3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fRomUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocodeWithDifferentStartingCharacter_Xtkr8_4() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertNotEquals("fromunlocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_gcwF0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("newToUnLocode");
    Assertions.assertEquals("newToUnLocode", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumber_NBlz1() {
    TransitEdge edge = new TransitEdge(null, "from1", "to1", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=null, fromUnLocode=from1, toUnLocode=to1, fromDate=" + LocalDateTime.now() + ", toDate=" + LocalDateTime.now() + '}';
    assertEquals(expected, edge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullFromDate_rBpO4() {
    TransitEdge edge = new TransitEdge("voyage1", "from1", "to1", null, LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=voyage1, fromUnLocode=from1, toUnLocode=to1, fromDate=null, toDate=" + LocalDateTime.now() + '}';
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_xjqV0() {
    TransitEdge edge = new TransitEdge("voyage123", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String voyageNumber = edge.getVoyageNumber();
    assertEquals("voyage123", voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithNull_CHLO1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(null);
    assertNull(edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithInvalidDate_KsHs2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2024, 2, 29, 12, 0, 0)); // Invalid date
    assertEquals(LocalDateTime.of(2024, 2, 29, 12, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithValidDate_Ulps3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2023, 2, 28, 12, 0, 0)); // Valid date
    assertEquals(LocalDateTime.of(2023, 2, 28, 12, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithPastDate_QgPT4() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2022, 2, 28, 12, 0, 0)); // Past date
    assertEquals(LocalDateTime.of(2022, 2, 28, 12, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithFutureDate_CbdZ5() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2024, 2, 28, 12, 0, 0)); // Future date
    assertEquals(LocalDateTime.of(2024, 2, 28, 12, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithInvalidTime_vonJ7() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2023, 2, 28, 23, 0, 0)); // Invalid time
    assertEquals(LocalDateTime.of(2023, 2, 28, 23, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithValidTime_jNLx8() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setToDate(LocalDateTime.of(2023, 2, 28, 12, 0, 0)); // Valid time
    assertEquals(LocalDateTime.of(2023, 2, 28, 12, 0, 0), edge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_NullFromDate_VETY1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertNotNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_NullToDate_jzQJ2() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), null);
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_NullFromAndToDate_duTE3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, null);
    LocalDateTime toDate = edge.getToDate();
    assertNull(toDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_InvalidFromDate_fJiy4() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now().minusDays(1), LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_bQQM0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setFromUnLocode("newFromUnLocode");
    assertEquals("newFromUnLocode", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeWithNull_esfB1() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setFromUnLocode(null);
    assertEquals(null, edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDateWithNullFromDate_vZDI1() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", null, LocalDateTime.now().plusDays(1));
    LocalDateTime fromDate = edge.getFromDate();
    assertNull(fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDateWithNullFromAndToDate_DGoQ3() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", null, null);
    LocalDateTime fromDate = edge.getFromDate();
    assertNull(fromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_ZXyo0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertEquals("toUnLocode", toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullVoyageNumber_sjry1() {
    TransitEdge edge = new TransitEdge(null, "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertEquals("toUnLocode", toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullToUnLocode_upoA3() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", null, LocalDateTime.now(), LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertNull(toUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocodeWithNullFromDate_oMIv4() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, LocalDateTime.now());
    String toUnLocode = edge.getToUnLocode();
    assertEquals(toUnLocode, "toUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_KIiK0() {
    TransitEdge edge = new TransitEdge("voyage1", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    edge.setVoyageNumber("newVoyageNumber");
    assertEquals("newVoyageNumber", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_ValidInputs_KsYj0() {
    TransitEdge edge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime toDate = edge.getToDate();
    assertEquals(LocalDateTime.now().plusDays(1), toDate);
  }
}