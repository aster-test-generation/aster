/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.service.RoutingService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_1() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_2() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertTrue(trackingId instanceof TrackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_3() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertEquals("USCHI-USNYC-20230101", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_4() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertEquals(31 * "USCHI".hashCode() + "USNYC".hashCode() + 20230101, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_InvalidTrackingId_cLBC1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("0000000000");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullTrackingId_pcCu2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_EmptyTrackingId_KRoD3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullCargo_Byww4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullRoutingService_vldg5() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    RoutingService routingService = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullCargoRepository_HwiF6() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    CargoRepository cargoRepository = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_InvalidRouteSpecification_MPFk7_MsRW0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_3_fid1() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
    assertEquals("USCHI-USNYC-20230101", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0_4_fid1() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
    assertEquals(31 * "USCHI".hashCode() + "USNYC".hashCode() + 20230101, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_InvalidTrackingId_cLBC1_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("0000000000");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(itineraries);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullTrackingId_pcCu2_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_EmptyTrackingId_KRoD3_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullCargo_Byww4_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullRoutingService_vldg5_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    RoutingService routingService = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullCargoRepository_HwiF6_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = new Cargo(trackingId, new RouteSpecification());
    CargoRepository cargoRepository = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_hNek0() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    UnLocode destinationUnLocode = new UnLocode("USNYC");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
    assertTrue(trackingId instanceof TrackingId);
    assertEquals("USCHI-USNYC-20230101", trackingId.getIdString());
    assertEquals(31 * "USCHI".hashCode() + "USNYC".hashCode() + 20230101, trackingId.hashCode());
  }
}