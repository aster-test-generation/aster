/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidOriginUnLocode_FrHf1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDeadline_iGHj3() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> candidates = service.findShortestPath("USCHI", "DEHAM", "2023-02-28");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_validInput_JbHS0_xPbX0_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2022-01-01");
    assertEquals(1, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_validInput_JbHS0_xPbX0_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2022-01-01");
    assertEquals("A", candidates.get(0).getTransitEdges().get(0).getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_validInput_JbHS0_xPbX0_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2022-01-01");
    assertEquals("E", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_invalidInput_CjcV1_NVyz0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "F", "2022-01-01");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_emptyInput_ccrZ2_riEx0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("", "", "2022-01-01");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_nullInput_iGXY3_fmxn0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath(null, null, "2022-01-01");
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidDeadline_xEim3_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> candidates = graphTraversalService.findShortestPath("USCHI", "USNYC", "2023-02-28");
    assertNotNull(candidates);
    assertEquals(0, candidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_validInput_JbHS0_xPbX0_3_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<String> allLocations = Arrays.asList("A", "B", "C", "D", "E");
    List<TransitPath> candidates = graphTraversalService.findShortestPath("A", "E", "2022-01-01");
    assertEquals(1, candidates.size());
    assertEquals("E", candidates.get(0).getTransitEdges().get(0).getToUnLocode());
  }
}