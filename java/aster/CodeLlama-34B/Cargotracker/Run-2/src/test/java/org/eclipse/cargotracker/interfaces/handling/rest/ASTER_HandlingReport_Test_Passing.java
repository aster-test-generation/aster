/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithValidHandlingReport_dXzU10() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("TEST");
    String actual = handlingReport.getUnLocode();
    assertEquals("TEST", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithValidHandlingReportAndNullUnLocode_BZbF13() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
    String actual = handlingReport.getUnLocode();
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocode_GbNT0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    assertEquals("USCHI", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithNull_SGWe1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
    assertNull(handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithEmptyString_WpDH2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("");
    assertEquals("", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithInvalidString_GTBV3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("INVALID");
    assertEquals("INVALID", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentValidString_uhSI5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USNYC");
    assertEquals("USNYC", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentValidStringAndNull_qkyd7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    handlingReport.setUnLocode(null);
    assertNull(handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentInvalidStringAndNull_USoF8() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("INVALID");
    handlingReport.setUnLocode(null);
    assertNull(handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentValidStringAndEmptyString_Irrd9() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    handlingReport.setUnLocode("");
    assertEquals("", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentInvalidStringAndEmptyString_tJaV10() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("INVALID");
    handlingReport.setUnLocode("");
    assertEquals("", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentValidStringAndInvalidString_BDYo11() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    handlingReport.setUnLocode("INVALID");
    assertEquals("INVALID", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithDifferentInvalidStringAndValidString_mrrF12() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("INVALID");
    handlingReport.setUnLocode("USCHI");
    assertEquals("USCHI", handlingReport.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_JlhX0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test");
    assertEquals("test", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithNull_EDGd1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType(null);
    assertNull(handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithEmptyString_SVYW2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("");
    assertEquals("", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithInvalidString_UlrA3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("invalid");
    assertEquals("invalid", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithValidString_gRGH4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("valid");
    assertEquals("valid", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithDifferentCase_BleQ5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("TEST");
    assertEquals("TEST", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithSpecialCharacters_AABK7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithMultipleWords_Wrfh8() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test event");
    assertEquals("test event", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithMaxLength_Ugyv9() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test event with a very long name");
    assertEquals("test event with a very long name", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithMinLength_daZr10() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("t");
    assertEquals("t", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithInvalidLength_PaeA11() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test event with a very long name that is too long");
    assertEquals("test event with a very long name that is too long", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithInvalidCharacters_wSss12() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test event with invalid characters");
    assertEquals("test event with invalid characters", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithValidCharacters_NPAj13() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("test event with valid characters");
    assertEquals("test event with valid characters", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithDifferentCasing_RliK14() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("TEST EVENT");
    assertEquals("TEST EVENT", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithWhitespaceAndSpecialCharacters_JkbH15() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType(" test event with whitespace and special characters ");
    assertEquals(" test event with whitespace and special characters ", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_zuOX0_2() {
    HandlingReport handlingReport = new HandlingReport();
    String voyageNumber = handlingReport.getVoyageNumber();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNull_SrSX2() {
    HandlingReport handlingReport = new HandlingReport();
    String trackingId = handlingReport.getTrackingId();
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_jHSP0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("12345");
    assertEquals("12345", handlingReport.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNull_IsAP1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber(null);
    assertNull(handlingReport.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithEmptyString_bRiC2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("");
    assertEquals("", handlingReport.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeWithNull_cmFn1() {
    HandlingReport handlingReport = new HandlingReport();
    String completionTime = handlingReport.getCompletionTime();
    assertNull(completionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_null_VMUm0() {
    HandlingReport handlingReport = new HandlingReport();
    String eventType = handlingReport.getEventType();
    assertNull(eventType);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_nonEmpty_SoJk2() {
    HandlingReport handlingReport = new HandlingReport();
    String eventType = handlingReport.getEventType();
    assertNotEquals("", eventType);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_invalid_yNnu3() {
    HandlingReport handlingReport = new HandlingReport();
    String eventType = handlingReport.getEventType();
    assertNotEquals("invalid", eventType);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_bTOe0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("1234567890");
    assertEquals("1234567890", handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithNull_dQNy1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId(null);
    assertEquals(null, handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithEmptyString_bYtT2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("");
    assertEquals("", handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithInvalidString_LwCk3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("abcdefghij");
    assertEquals("abcdefghij", handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithLongString_EDUT5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("1234567890123456789012345678901234567890");
    assertEquals("1234567890123456789012345678901234567890", handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithInvalidLengthString_NYlr6() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("12345678901234567890123456789012345678901234567890");
    assertEquals("12345678901234567890123456789012345678901234567890", handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdWithValidLengthString_mKeC7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789012345678901234567890123456789012345678901234567890");
    assertEquals("123456789012345678901234567890123456789012345678901234567890", handlingReport.getTrackingId());
  }
}