/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  CarrierMovement carriermovement;
  private LocalDateTime arrivalTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_AoMm0() {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertTrue(carrierMovement.equals(carrierMovement));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_MOpp2() {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_slFJ3() {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_ZDaN1_fid1() {
    CarrierMovement carrierMovement1 = new CarrierMovement();
    CarrierMovement carrierMovement2 = new CarrierMovement();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValueAs_ALXK4_aZTT0() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    Location location1 = new Location(unLocode1, "Chicago");
    Location location2 = new Location(unLocode2, "Chicago");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    assertTrue(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValueAs_JufK5_EeHh0() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USNYC");
    Location location1 = new Location(unLocode1, "Chicago");
    Location location2 = new Location(unLocode2, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    assertTrue(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentDepartureLocation_enpU6_QSsE0() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USNYC");
    Location location1 = new Location(unLocode1, "Chicago");
    Location location2 = new Location(unLocode2, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(location2, location2, departureTime, arrivalTime);
    assertFalse(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_CMun0_MhOH0_2() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USLAX"), "New York"), new Location(new UnLocode("CALOS"), "Los Angeles"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals("USLAX", departureLocation.getUnLocode().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocationWithSameLocation_oiEd1_jWyN1() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    Location departureLocation = carrierMovement.getDepartureLocation();
    assertEquals(new Location(new UnLocode("USCHI"), "Chicago"), departureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_UIRh0_iUwc0() {
    Location departureLocation = new Location(new UnLocode("USLAX"), "New York");
    Location arrivalLocation = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertEquals(arrivalTime, carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_arrivalLocation_eGOc1_mfRu0() {
    UnLocode unLocode = new UnLocode("USNYC");
    Location departureLocation = new Location(unLocode, "New York");
    LocalDateTime departureTime = LocalDateTime.of(2022, 12, 25, 10, 0, 0);
    Location arrivalLocation = new Location(unLocode, "Chicago");
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 12, 25, 12, 0, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = new HashCodeBuilder().append(departureLocation).append(departureTime).append(arrivalLocation).append(arrivalTime).toHashCode();
    assertEquals(expectedHashCode, carrierMovement.hashCode());
  }
}