/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Failing {
  private RealtimeCargoTrackingViewAdapter adapter;
  private Cargo cargo;
  RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected_NullCargo_gvqv2() {
    Cargo cargo = null;
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    boolean result = adapter.isMisdirected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullCargo_qtZn2() {
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(null);
    String trackingId = adapter.getTrackingId();
    assertNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisAtDestination() throws Exception {
    cargo = new Cargo();
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    cargo = new Cargo();
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    cargo = new Cargo();
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    cargo = new Cargo();
    realtimecargotrackingviewadapter = new RealtimeCargoTrackingViewAdapter(cargo);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isUnloadedAtDestination()).thenReturn(true);
    assertTrue(realtimecargotrackingviewadapter.isAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected_NullCargo_gvqv2_fid1() {
    Cargo cargo = null;
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    boolean result = adapter.isMisdirected();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutingStatus_NullCargo_hVew0() {
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(null);
    assertNull(adapter.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutingStatus_NullDelivery_weVe1_fid1() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    assertNull(adapter.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatus_vIlQ1() {
    String transportStatus = adapter.getTransportStatus();
    assertEquals("In Port", transportStatus);
  }
}