/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateString_FFzs0() {
    String dateString = "2022-01-01";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDateString_zzvm1() {
    String dateString = "2022-01-32";
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_NullDateString_fsPz2() {
    String dateString = null;
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_EmptyDateString_TWmr3() {
    String dateString = "";
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDateFormat_yPpj4() {
    String dateString = "2022-01-01T00:00:00";
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZone_bLkr5() {
    String dateString = "2022-01-01T00:00:00+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndMilliseconds_RVzh6() {
    String dateString = "2022-01-01T00:00:00.000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndMicroseconds_ZIjm7() {
    String dateString = "2022-01-01T00:00:00.000000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndNanoseconds_BHfJ8() {
    String dateString = "2022-01-01T00:00:00.000000000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndFractionalSeconds_CuCM9() {
    String dateString = "2022-01-01T00:00:00.123+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_empty_wPjz1() {
    assertEquals("", DateConverter.toString(LocalDateTime.now()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withDate_fqqp2() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    assertEquals("2022-12-25 10:15:30", DateConverter.toString(dateTime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withTime_AZEi3() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 12, 25, 10, 15, 30);
    assertEquals("10:15:30", DateConverter.toString(dateTime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withTimeZoneAndOffsetAndDaylightSavingTimeAndLeapYear_ixVz8() {
    LocalDateTime dateTime = LocalDateTime.of(2024, 12, 25, 10, 15, 30);
    assertEquals("2024-12-25 10:15:30", DateConverter.toString(dateTime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidDateTimeString_IqtQ0() {
    String datetime = "2022-01-01T12:00:00";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_InvalidDateTimeString_ASpo1() {
    String datetime = "2022-01-01T12:00:00";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertNotEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_NullDateTimeString_CUjq2() {
    String datetime = null;
    LocalDateTime expected = null;
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_EmptyDateTimeString_THqg3() {
    String datetime = "";
    LocalDateTime expected = null;
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZone_ZWlc6() {
    String datetime = "2022-01-01T12:00:00+05:00";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZoneAndOffset_kVHu7() {
    String datetime = "2022-01-01T12:00:00+05:00[Asia/Kolkata]";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZoneAndOffsetAndColon_jOEU8() {
    String datetime = "2022-01-01T12:00:00+05:00[Asia/Kolkata]:";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZoneAndOffsetAndColonAndMilliseconds_tiRG9() {
    String datetime = "2022-01-01T12:00:00+05:00[Asia/Kolkata]:123";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_validDate_FyKF1() {
    LocalDate date = LocalDate.of(2022, 1, 1);
    assertEquals("2022-01-01", DateConverter.toString(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDate_eAfM2() {
    LocalDate date = LocalDate.of(2022, 13, 1);
    assertEquals("", DateConverter.toString(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nullDateAndInvalidFormatter_GjoL7_cymn0() {
    LocalDate date = LocalDate.of(2022, 1, 1);
    assertEquals("", DateConverter.toString(date));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDateString_zzvm1_fid2() {
    String dateString = "2022-01-32";
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertNull(actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_NullDateString_fsPz2_fid2() {
    String dateString = null;
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertNull(actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_EmptyDateString_TWmr3_fid2() {
    String dateString = "";
    LocalDate expectedDate = null;
    LocalDate actualDate = DateConverter.toDate(dateString);
    assertNull(actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_InvalidDateFormat_yPpj4_fid2() {
    String dateString = "2022-01-01T00:00:00";
    LocalDate expectedDate = null;
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    assertEquals(expectedDate, actualDateTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZone_bLkr5_fid2() {
    String dateString = "2022-01-01T00:00:00+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    LocalDate actualDate = actualDateTime.toLocalDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndMilliseconds_RVzh6_fid2() {
    String dateString = "2022-01-01T00:00:00.000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    LocalDate actualDate = actualDateTime.toLocalDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndMicroseconds_ZIjm7_fid2() {
    String dateString = "2022-01-01T00:00:00.000000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    assertEquals(expectedDate, actualDateTime.toLocalDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndNanoseconds_BHfJ8_fid2() {
    String dateString = "2022-01-01T00:00:00.000000000+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    assertEquals(expectedDate, actualDateTime.toLocalDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_ValidDateStringWithTimeZoneAndFractionalSeconds_CuCM9_fid2() {
    String dateString = "2022-01-01T00:00:00.123+05:30";
    LocalDate expectedDate = LocalDate.of(2022, 1, 1);
    LocalDateTime actualDateTime = DateConverter.toDateTime(dateString);
    assertEquals(expectedDate, actualDateTime.toLocalDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_NullDateTimeString_CUjq2_fid2() {
    String datetime = null;
    LocalDateTime expected = null;
    assertNull(DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_ValidFormatDateTimeStringWithTimeZoneAndOffsetAndColonAndMilliseconds_tiRG9_fid2() {
    String datetime = "2022-01-01T12:00:00+05:00[Asia/Kolkata]:123";
    LocalDateTime expected = LocalDateTime.of(2022, 1, 1, 12, 0, 0, 123);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_invalidDateAndNullFormatter_oKYB8_MDUf0_fid2() {
    LocalDate date = LocalDate.of(2022, 12, 1); // MonthOfYear is valid
    assertEquals("2022-12-01", DateConverter.toString(date));
  }
}