/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CargoTrackingViewAdapter_Test_Failing {
  private Cargo cargo;
  CargoTrackingViewAdapter cargotrackingviewadapter;
  private TrackingId trackingId;
  private List<HandlingEvent> handlingEvents;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextExpectedActivity_NullDelivery_NKwo0() {
    Cargo cargo = new Cargo();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    String expected = null;
    String actual = adapter.getNextExpectedActivity();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullCargo_rZGC2_fid1() {
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(null, new ArrayList<HandlingEvent>());
    assertNull(adapter.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextExpectedActivity_NullDelivery_NKwo0_fid1() {
    Cargo cargo = new Cargo();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    String expected = "";
    String actual = adapter.getNextExpectedActivity();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationName_NullCargo_akxu2_fid1() {
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(null, Collections.emptyList());
    assertEquals("Unknown", adapter.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocationCode_NullCargo_qFfn3_fid1() {
    Cargo cargo = null;
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    assertNull(adapter.getLastKnownLocationCode());
  }
}