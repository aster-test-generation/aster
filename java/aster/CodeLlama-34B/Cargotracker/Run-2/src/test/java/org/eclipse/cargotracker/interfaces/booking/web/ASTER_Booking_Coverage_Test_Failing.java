/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.BookingServiceFacade;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.primefaces.PrimeFaces;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_Booking_Coverage_Test_Failing {
  private BookingServiceFacade bookingServiceFacade;
  private FacesContext context;
  private PrimeFaces primeFaces;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_Today_uXgo1() {
    Booking booking = new Booking();
    booking.init();
    LocalDate today = LocalDate.now();
    assertEquals(today, booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_YGjP0() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("DEST123");
    assertEquals("DEST123", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_QzBi0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("testUnlocode");
    assertEquals("testUnlocode", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeWithStream_sggw1() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("testUnlocode");
    assertEquals("testLocationName", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_OriginAndDestinationAreDifferent_ReturnsDashboard_Rbey2() {
    Booking booking = new Booking();
    String result = booking.register();
    assertEquals("/admin/dashboard.xhtml", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_OriginAndDestinationAreTheSame_ReturnsNull_FRqB3() {
    Booking booking = new Booking();
    String result = booking.register();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_OriginAndDestinationAreDifferent_AddsFacesMessage_iLkO4() {
    Booking booking = new Booking();
    booking.register();
    verify(context).addMessage(anyString(), any(FacesMessage.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_OriginAndDestinationAreTheSame_DoesNotAddFacesMessage_YEns5() {
    Booking booking = new Booking();
    booking.register();
    verify(context, never()).addMessage(anyString(), any(FacesMessage.class));
  }

  @Test
  public void testInit_Qmqg0_1() {
    Booking booking = new Booking();
    booking.init();
    assertEquals(LocalDate.now(), booking.getToday());
  }

  @Test
  public void testInit_Qmqg0_2() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeWithoutName_Qrqn6() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("testUnlocode");
    assertNull(booking.getOriginName());
  }
}