/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithNull_qear1() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now().plusDays(1);
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = null;
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, type, unLocode);
    assertNotNull(attempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeWithInvalid_SvvN2() {
    LocalDateTime registrationDate = LocalDateTime.now();
    LocalDateTime completionDate = LocalDateTime.now().plusDays(1);
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("INVALID");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, type, unLocode);
    assertNotNull(attempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeWithNullRegistrationDate_QXUx2_fid2() {
    LocalDateTime registrationDate = null;
    LocalDateTime completionDate = LocalDateTime.of(2022, 1, 1, 11, 0, 0);
    TrackingId trackingId = new TrackingId("1234567890");
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USCHI");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, type, unLocode);
    assertNull(attempt.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeWithNullTrackingId_sQWX3_fid2() {
    LocalDateTime registrationDate = LocalDateTime.of(2022, 1, 1, 10, 0, 0);
    LocalDateTime completionDate = LocalDateTime.of(2022, 1, 1, 11, 0, 0);
    TrackingId trackingId = null;
    VoyageNumber voyageNumber = new VoyageNumber("1234567890");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USCHI");
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(registrationDate, completionDate, trackingId, voyageNumber, type, unLocode);
    assertNull(attempt.getCompletionTime());
  }
}