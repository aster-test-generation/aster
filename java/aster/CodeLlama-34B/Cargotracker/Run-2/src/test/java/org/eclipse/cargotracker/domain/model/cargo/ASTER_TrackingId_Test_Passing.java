/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withId_fSom0() {
    TrackingId trackingId = new TrackingId("12345");
    String idString = trackingId.getIdString();
    assertEquals("12345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withoutId_xunG1() {
    TrackingId trackingId = new TrackingId();
    String idString = trackingId.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withEmptyId_XBJv3() {
    TrackingId trackingId = new TrackingId("");
    String idString = trackingId.getIdString();
    assertEquals("", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_RuUN0() {
    TrackingId trackingId = new TrackingId("12345");
    assertTrue(trackingId.equals(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObject_ISHg1() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("67890");
    assertFalse(trackingId1.equals(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_JTln2() {
    TrackingId trackingId = new TrackingId("12345");
    assertFalse(trackingId.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValue_qggO4() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("12345");
    assertTrue(trackingId1.equals(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withId_XyXl0() {
    TrackingId trackingId = new TrackingId("12345");
    assertEquals("12345", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withEmptyId_TxIP3() {
    TrackingId trackingId = new TrackingId("");
    assertEquals("", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_SameObject_NWgP0() {
    TrackingId trackingId = new TrackingId("12345");
    assertTrue(trackingId.sameValueAs(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_DifferentObject_ePbw1() {
    TrackingId trackingId1 = new TrackingId("12345");
    TrackingId trackingId2 = new TrackingId("12345");
    assertTrue(trackingId1.sameValueAs(trackingId2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_Null_PDko2() {
    TrackingId trackingId = new TrackingId("12345");
    assertFalse(trackingId.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_ValidId_rlCF0() {
    TrackingId trackingId = new TrackingId("1234567890");
    int expectedHashCode = "1234567890".hashCode();
    int actualHashCode = trackingId.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_EmptyId_bDhT2() {
    TrackingId trackingId = new TrackingId("");
    int expectedHashCode = 0;
    int actualHashCode = trackingId.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_withInvalidId_tpNG4_fid1() {
    TrackingId trackingId = new TrackingId("invalid_id");
    String idString = trackingId.getIdString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withoutId_vAMJ1_fid1() {
    TrackingId trackingId = new TrackingId();
    assertNull(trackingId.toString());
  }
}