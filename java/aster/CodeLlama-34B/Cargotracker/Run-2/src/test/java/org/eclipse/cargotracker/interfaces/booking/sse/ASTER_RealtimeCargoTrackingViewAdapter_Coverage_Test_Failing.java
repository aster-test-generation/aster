/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RealtimeCargoTrackingViewAdapter_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_NullCargo_oKOi2() {
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(null);
    LocationViewAdapter location = adapter.getLocation();
    assertNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_RoutingStatusNotRouted_Scik0() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    RoutingStatus routingStatus = RoutingStatus.NOT_ROUTED;
    cargo.getDelivery().setRoutingStatus(routingStatus);
    String statusCode = adapter.getStatusCode();
    assertEquals(routingStatus.toString(), statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_RoutingStatusMisrouted_BUFH1() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    RoutingStatus routingStatus = RoutingStatus.MISROUTED;
    cargo.getDelivery().setRoutingStatus(routingStatus);
    String statusCode = adapter.getStatusCode();
    assertEquals(routingStatus.toString(), statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_Misdirected_Glfp2() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    cargo.getDelivery().setMisdirected(true);
    String statusCode = adapter.getStatusCode();
    assertEquals("MISDIRECTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_UnloadedAtDestination_Qqgl3() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    cargo.getDelivery().setUnloadedAtDestination(true);
    String statusCode = adapter.getStatusCode();
    assertEquals("AT_DESTINATION", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_TransportStatus_Ulip4() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    TransportStatus transportStatus = TransportStatus.IN_PORT;
    cargo.getDelivery().setTransportStatus(transportStatus);
    String statusCode = adapter.getStatusCode();
    assertEquals(transportStatus.toString(), statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_RoutingStatusRouted_idtM5() {
    Cargo cargo = new Cargo();
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    RoutingStatus routingStatus = RoutingStatus.ROUTED;
    cargo.getDelivery().setRoutingStatus(routingStatus);
    String statusCode = adapter.getStatusCode();
    assertEquals(routingStatus.toString(), statusCode);
  }
}