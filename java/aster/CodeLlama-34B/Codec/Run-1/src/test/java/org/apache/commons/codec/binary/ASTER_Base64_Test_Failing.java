/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_2_AiUk1() {
        String base64String = "SGVsbG8gV29ybGQhIQ==";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_YEdC3() {
        Base64 base64 = new Base64(10);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{10, 10}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_lenient_VKfZ1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        byte[] actual = Base64.encodeBase64(binaryData, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafe_KmPJ2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
        byte[] actual = Base64.encodeBase64(binaryData, false, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_DLpN0() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        byte[] expectedResult = new byte[16];
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_1_oGXb0() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_7_dpEa6() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], actual[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NullString_DkDx1() {
        String base64 = null;
        assertNull(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_wjhz0_fid2() {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BigInteger expected = new BigInteger("12345678910");
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String1_JAsd0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_YEdC3_fid2() {
        Base64 base64 = new Base64(10);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_jmmL4() {
        Base64 base64 = new Base64();
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_strict_eDKk0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64(binaryData, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_lenient_VKfZ1_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64(binaryData, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafe_KmPJ2_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64(binaryData, false, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_DLpN0_fid2() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        byte[] expectedResult = new byte[10];
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_XMlS1_fid2() {
        byte[] binaryData = new byte[10];
        boolean isChunked = true;
        byte[] expectedResult = new byte[10];
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_3_oahm2_fid2() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        byte[] expectedResult = new byte[10];
        Base64 base64 = new Base64(10, new byte[0], false);
        byte[] actualResult = base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_4_YGZX3_fid2() {
        byte[] binaryData = new byte[10];
        boolean isChunked = true;
        byte[] expectedResult = new byte[10];
        Base64 base64 = new Base64(10, new byte[0], false);
        byte[] actualResult = base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyString_dVJU0_fid2() {
        String base64 = "";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NullString_DkDx1_fid2() {
        String base64 = null;
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64String_iwrS2_fid2() {
        String base64 = "This is not a valid base64 string";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64StringWithLineSeparator_FfjE7_fid2() {
        String base64 = "This is not a valid base64 string\n";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_1_fid2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_2_fid2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_3_fid2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 30));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_PHGT1_1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_PHGT1_2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_PHGT1_3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 30));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_PHGT1_4() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_urlSafe_OIqR2_1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertTrue(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_urlSafe_OIqR2_2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertTrue(base64.isInAlphabet((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_urlSafe_OIqR2_3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertTrue(base64.isInAlphabet((byte) 30));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_strict_LdFP0() {
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean result = Base64.isArrayByteBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_NonEmptyInput_kRXw1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 10;
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ChunkedInput_lWHl2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 10;
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_UrlSafeInput_oBmk3() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 10;
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_3() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[1], (byte) 'B');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_4() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[2], (byte) 'C');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_5() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[3], (byte) 'D');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_6() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[4], (byte) 'E');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_7() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[5], (byte) 'F');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_8() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[6], (byte) 'G');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_9() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[7], (byte) 'H');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_10() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[8], (byte) 'I');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_11() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[9], (byte) 'J');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_12() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[10], (byte) 'K');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_13() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[11], (byte) 'L');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_14() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[12], (byte) 'M');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_15() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[13], (byte) 'N');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Default_lowo0() {
        byte octet = 0;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Valid_PXRJ1() {
        byte octet = 1;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_UrlSafe_oObM4() {
        byte octet = 1;
        Base64 base64 = new Base64(true);
        assertTrue(base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString1_XTaZ0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base64.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString2_wlFU1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100});
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base64.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString3_nLOX2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, true);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base64.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString4_wkLM3() {
        Base64 base64 = new Base64(true);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base64.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString5_SEqb4() {
        Base64 base64 = new Base64(10);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base64.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_EmptyString_LJIG0() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NullString_ubER1() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidString_PKjL3() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidStringWithLineSeparator_DhBS5() {
        Base64 base64 = new Base64(10, new byte[]{10, 13});
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidStringWithUrlSafe_ZBPs7() {
        Base64 base64 = new Base64(true);
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidStringWithLineSeparatorAndUrlSafe_Pcob9() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true);
        assertFalse(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_HjVk0() throws EncoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true);
        byte[] actualOutput = base64.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentLineLengthAndLineSeparator_FjBM2() throws EncoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        Base64 base64 = new Base64(20, new byte[]{10, 13}, true);
        byte[] actualOutput = base64.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_decodingPolicyStrict_hxMA4() throws EncoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true, CodecPolicy.STRICT);
        byte[] actualOutput = base64.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_awsp0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long expected = 20;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize2_fjfn1() {
        Base64 base64 = new Base64(10);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize3_ObHR2() {
        Base64 base64 = new Base64(10, new byte[0]);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize4_YuYK3() {
        Base64 base64 = new Base64(10, new byte[0], true);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize5_etID4() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.STRICT);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize6_pxKQ5() {
        Base64 base64 = new Base64(10, new byte[0], true, CodecPolicy.LENIENT);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize7_jzcf6() {
        Base64 base64 = new Base64(10, new byte[0], false);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize8_teXT7() {
        Base64 base64 = new Base64(10, new byte[0], false, CodecPolicy.STRICT);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize9_OTOO8() {
        Base64 base64 = new Base64(10, new byte[0], false, CodecPolicy.LENIENT);
        assertEquals(10, base64.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_CmSu0() {
        Base64 base64 = new Base64(true);
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_sqmU1() {
        Base64 base64 = new Base64(false);
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(base64.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lineLength_jaMV3() {
        Base64 base64 = new Base64(10);
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lineSeparator_WiAB4() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_decodingPolicy_fdxy5() {
        Base64 base64 = new Base64(10, new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(base64.isInAlphabet(arrayOctet, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_strict_SEoS0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        String encoded = base64.encodeToString(new byte[]{1, 2, 3});
        assertEquals("AQID", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_lenient_vWkP1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        String encoded = base64.encodeToString(new byte[]{1, 2, 3});
        assertEquals("AQID", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_noUrlSafe_XfGo3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, false, CodecPolicy.STRICT);
        String encoded = base64.encodeToString(new byte[]{1, 2, 3});
        assertEquals("AQID", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_nullDecodingPolicy_Eeoc2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, null);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_swtG0() throws DecoderException {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = base64.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArrayNotMultipleOf4_Gvvb3() throws DecoderException {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = base64.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(5, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(1, output[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(2, output[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_4() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(3, output[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_5() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(4, output[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1_6() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInputArray_CDZR2() {
        Base64 base64 = new Base64();
        byte[] input = null;
        byte[] output = base64.encode(input, 0, 0);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NegativeOffset_Iwnc3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, -1, input.length);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_LengthGreaterThanInputArrayLength_XTWP4() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length + 1);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_LengthLessThanInputArrayLength_Wrcg5() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length - 1);
        assertEquals(4, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_VYsB2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy5_Vhbl4() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30});
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy6_owCV5() {
        Base64 base64 = new Base64(10);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy7_aOzA6() {
        Base64 base64 = new Base64();
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(5, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(1, output[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(2, output[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_4() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(3, output[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_5() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(4, output[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1_6() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_InvalidLength_NEgn3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base64.decode(input);
        assertNull(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_eces0() {
        byte[] expected = new byte[]{10, 13};
        byte[] actual = Base64.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_bitLengthMultipleOf8_MYXl0_fUTt0() {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_bitLengthNotMultipleOf8_ziRq1_IJWz0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_NoLineLength_uwvG4_acwe0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.encodeBase64(binaryData, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_vfLt0_ttsW0() {
        BigInteger bigInteger = new BigInteger("1234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable1_BRci0_PVVA0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        int available = base64.available(null);
        assertEquals(0, available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_bCAT1_LFZz0() throws DecoderException {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        String input = "hello";
        byte[] expected = "hello".getBytes();
        byte[] actual = base64.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringNotMultipleOf4_zGgk4_VIvk0() throws DecoderException {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        String input = "hello world";
        byte[] expected = "hello world".getBytes();
        byte[] actual = base64.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_InvalidCharacters_fycx4_KwKO0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] output = base64.decode(input);
        assertNull(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertTrue(base64.isInAlphabet((byte) 10));
        assertTrue(base64.isInAlphabet((byte) 20));
        assertTrue(base64.isInAlphabet((byte) 30));
        assertFalse(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_lenient_PHGT1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertTrue(base64.isInAlphabet((byte) 10));
        assertTrue(base64.isInAlphabet((byte) 20));
        assertTrue(base64.isInAlphabet((byte) 30));
        assertTrue(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_urlSafe_OIqR2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertTrue(base64.isInAlphabet((byte) 10));
        assertTrue(base64.isInAlphabet((byte) 20));
        assertTrue(base64.isInAlphabet((byte) 30));
        assertFalse(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData.length, 14);
        assertEquals(encodedData[0], (byte) 'A');
        assertEquals(encodedData[1], (byte) 'B');
        assertEquals(encodedData[2], (byte) 'C');
        assertEquals(encodedData[3], (byte) 'D');
        assertEquals(encodedData[4], (byte) 'E');
        assertEquals(encodedData[5], (byte) 'F');
        assertEquals(encodedData[6], (byte) 'G');
        assertEquals(encodedData[7], (byte) 'H');
        assertEquals(encodedData[8], (byte) 'I');
        assertEquals(encodedData[9], (byte) 'J');
        assertEquals(encodedData[10], (byte) 'K');
        assertEquals(encodedData[11], (byte) 'L');
        assertEquals(encodedData[12], (byte) 'M');
        assertEquals(encodedData[13], (byte) 'N');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_ndaB1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(5, output.length);
        assertEquals(1, output[0]);
        assertEquals(2, output[1]);
        assertEquals(3, output[2]);
        assertEquals(4, output[3]);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_JEDR1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base64.decode(input);
        assertEquals(5, output.length);
        assertEquals(1, output[0]);
        assertEquals(2, output[1]);
        assertEquals(3, output[2]);
        assertEquals(4, output[3]);
        assertEquals(5, output[4]);
    }
}