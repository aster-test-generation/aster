/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullPointerException_lyDK7() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = null;
        String expected = null;
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_null_NWxi0() {
        BCodec bCodec = new BCodec();
        byte[] result = bCodec.doDecoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_empty_DQQI1() {
        BCodec bCodec = new BCodec();
        byte[] result = bCodec.doDecoding(new byte[0]);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_invalidCharset_UUbW4() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8);
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding1_EBww0() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding2_Qdip1() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8);
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding3_ZfFr2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding4_hKjg3() {
        BCodec bCodec = new BCodec();
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_dVGw0() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LENIENT_szEm1() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.LENIENT);
        assertFalse(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNullDecodingPolicy_wAmT5() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, null);
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNonStrictOrLenientDecodingPolicy_BtLH6() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertFalse(e.getMessage().contains("Decoding policy must be either STRICT or LENIENT"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_null_rNbW0() {
        BCodec bCodec = new BCodec();
        byte[] bytes = null;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_nonNull_nrzK1_1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_nonNull_nrzK1_2() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertEquals(16, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_empty_tVfD2_1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_empty_tVfD2_2() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertEquals(0, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_singleByte_tXUD3_1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[1];
        bytes[0] = 1;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_singleByte_tXUD3_2() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[1];
        bytes[0] = 1;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertEquals(4, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_multipleBytes_vujf4_1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        bytes[0] = 1;
        bytes[1] = 2;
        bytes[2] = 3;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_multipleBytes_vujf4_2() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        bytes[0] = 1;
        bytes[1] = 2;
        bytes[2] = 3;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertEquals(16, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_vJDD0() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.UTF_8;
        String expected = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_differentCharset_QoYS1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.ISO_8859_1;
        String expected = "=?ISO-8859-1?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_invalidCharset_hxzC3() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.UTF_16;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_nullString_Mchc5() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = null;
        Charset sourceCharset = StandardCharsets.UTF_8;
        String expected = null;
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_STRICT_naFk0() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_LENIENT_eJKk1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String expected = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_null_Cvap2() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = null;
        String expected = null;
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_XIWq0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "=?UTF-8?B?SGVsbG8gV29ybGQh?=";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_dOuo1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_MzIS2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset1_Ydfd0() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        assertEquals(Charset.defaultCharset(), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_Prwi1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_HnHL2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_EYdi3() {
        BCodec bCodec = new BCodec();
        assertEquals(Charset.defaultCharset(), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_strict_NfCN0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encodeText(text, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_nullText_oxXr2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = null;
        String expected = null;
        String actual = bCodec.encodeText(text, "UTF-8");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_STRICT_Hdeb0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_LENIENT_knjd1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_DefaultConstructor_AJZO2() {
        BCodec bCodec = new BCodec();
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_StringConstructor_zBND3() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextNull_QUYP0() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = null;
        String expected = null;
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_NullText_qtgG0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String encodedText = bCodec.encodeText(null, StandardCharsets.UTF_8);
        assertNull(encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_NullTextAndValidCharset_uhci4() throws EncoderException {
        BCodec bCodec = new BCodec();
        Charset charset = StandardCharsets.UTF_8;
        String encodedText = bCodec.encodeText(null, charset);
        assertNull(encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNullCharset_NhUn4_eWko0() throws DecoderException {
        BCodec codec = new BCodec();
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertFalse(e.getMessage().contains("Charset cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_nullCharsetName_CXiL3_Fgir0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_NullTextAndNullCharset_tmeX2_PIQp0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String encodedText = bCodec.encodeText(null, (Charset) null);
        assertNull(encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_Jyio0_TfTe1() {
        BCodec bCodec = new BCodec();
        String value = "hello";
        String expected = "=?UTF-8?B?aGVsbG8=?=";
        try {
            String actual = bCodec.encodeText(value, StandardCharsets.UTF_8);
            assertEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Null_UTF8_VuXK7_qRoz0() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8);
        String value = null;
        String expected = null;
        try {
            String actual = bCodec.encodeText(value, StandardCharsets.UTF_8);
            assertEquals(expected, actual);
        } catch (EncoderException e) {
            fail("EncoderException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Null_UTF16_VIZp8_uFas0() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_16);
        String value = null;
        String expected = null;
        String actual = null;
        try {
            actual = bCodec.encode(value);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_nonNull_nrzK1() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
        assertEquals(16, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_empty_tVfD2() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[0];
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
        assertEquals(0, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_singleByte_tXUD3() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[1];
        bytes[0] = 1;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
        assertEquals(4, encodedBytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_multipleBytes_vujf4() {
        BCodec bCodec = new BCodec();
        byte[] bytes = new byte[10];
        bytes[0] = 1;
        bytes[1] = 2;
        bytes[2] = 3;
        byte[] encodedBytes = bCodec.doEncoding(bytes);
        assertNotNull(encodedBytes);
        assertEquals(16, encodedBytes.length);
    }
}