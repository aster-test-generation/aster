/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Blake3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithEmptyContext_fwgR2() {
        byte[] kdfContext = new byte[0];
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("kdfContext must not be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithLargeContext_fNGH3() {
        byte[] kdfContext = new byte[1000];
        for (int i = 0; i < kdfContext.length; i++) {
            kdfContext[i] = (byte) i;
        }
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("kdfContext must not be larger than 255 bytes", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithInvalidContext_zRCA3() {
        byte[] kdfContext = new byte[10];
        kdfContext[0] = -1;
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("kdfContext must not contain negative values", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_empty_LLhr0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[32];
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_nonEmpty_yvtI1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_null_CtSr2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = Blake3.hash(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_invalidLength_rYJo3() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_invalidData_jQNt4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithInvalidOffset_qpnD2_qpmQ0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        try {
            blake3.update(data, 0, 5);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithInvalidLength_aTPe3_HScR0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        try {
            blake3.update(data, 5, 0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithInvalidData_khrP1_Suiv0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        blake3.update(data);
        assertNotEquals(blake3.doFinalize(out, 0, out.length), blake3.doFinalize(out, 0, out.length));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_invalidOutLen5_UdbQ9_tEaW0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithInvalidContext_MFiQ1_fid1() {
        byte[] kdfContext = null;
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("kdfContext", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_empty_LLhr0_fid1() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_null_CtSr2_fid1() {
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_invalidLength_rYJo3_fid1() {
        byte[] data = new byte[10];
        byte[] expected = new byte[0];
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithInvalidOffset_qpnD2_qpmQ0_fid1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        try {
            blake3.update(data, -1, 5);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithInvalidLength_aTPe3_HScR0_fid1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        try {
            blake3.update(data, 5, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithInvalidData_HtAO4_oreD0_fid1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = null;
        try {
            blake3.update(data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Data must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithInvalidData_khrP1_Suiv0_fid1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        blake3.update(data);
        assertNotEquals(blake3.doFinalize(out, 0, out.length), blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNullBuffer_BhQr2_VICh0_fid1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = null;
        int offset = 0;
        int length = 32;
        try {
            blake3.doFinalize(out, offset, length);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Buffer must not be null", e.getMessage());
        }
    }
}