/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Passing {
    public void testGetDefaultBufferSize_ObBU0() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentLineLength_CAym1() {
        Base32 base32 = new Base32(20, new byte[]{1, 2, 3}, true);
        assertEquals(20, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentLineSeparator_rHRK2() {
        Base32 base32 = new Base32(10, new byte[]{4, 5, 6}, true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentUseHex_WVQA3() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, false);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentPadding_vldN4() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentDecodingPolicy_RaLZ5() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor_zObh6() {
        Base32 base32 = new Base32(true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor2_vjnb7() {
        Base32 base32 = new Base32(10);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor3_IaVp8() {
        Base32 base32 = new Base32((byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor4_KtiB9() {
        Base32 base32 = new Base32(true, (byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_hhWY0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] lineSeparator = base32.getLineSeparator();
        assertArrayEquals(new byte[]{10, 20, 30}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLength_ahyW1() {
        Base32 base32 = new Base32(10);
        byte[] lineSeparator = base32.getLineSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUseHex_NrLe2() {
        Base32 base32 = new Base32(true);
        byte[] lineSeparator = base32.getLineSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctet_PduS0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertFalse(base32.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidOctet_GoCX1() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isInAlphabet((byte) 50));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NegativeOctet_XMnm2() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertFalse(base32.isInAlphabet((byte) -10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ZeroOctet_XRYb3() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertFalse(base32.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_6_RHMv5() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_7_KwoL6() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_EmptyString_hcCB0() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidString_rCMP2() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidString_vIVf3() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidStringWithPadding_FFyB4() {
        Base32 base32 = new Base32(true, (byte) '=');
        assertFalse(base32.isInAlphabet("abcdefghijklmnopqrstuvwxyz="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidStringWithPadding_ENtr5() {
        Base32 base32 = new Base32(true, (byte) '=');
        assertFalse(base32.isInAlphabet("abcdefghijklmnopqrstuvwxyz1234567890="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLength_nullArray_RfVz0() {
        byte[] array = null;
        int expected = 0;
        int actual = Base32.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLength_nonNullArray_NluK1() {
        byte[] array = new byte[10];
        int expected = 10;
        int actual = Base32.toLength(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_RKuL0() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long expectedLength = 22;
        long actualLength = base32.getEncodedLength(pArray);
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_emptyArray_mWqf0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[0];
        byte[] output = base32.encode(input);
        assertArrayEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_emptyArray_gylX0() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet(new byte[0], true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_allValidChars_XIIB1() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7', '8', '9', '='};
        assertFalse(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_noUseHex_ftTX8() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, false, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_vKbi0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[0];
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_1() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy1_HxJl0() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy2_YzOV1() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy5_FOtP4() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, false, (byte) 61, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy6_WShc5() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, false, (byte) 61, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyArray_aoXn0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[0];
        byte[] output = base32.decode(input);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_emptyArray_Iyfn0() {
        Base32 base32 = new Base32();
        assertFalse(base32.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_nullArray_MdrH1() {
        Base32 base32 = new Base32();
        assertFalse(base32.containsAlphabetOrPad(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_arrayWithAlphabet_Ayrq2() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_arrayWithPad_Mneq3() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '='};
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_invalidChars_nZyk2_WkFF0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '~', '[', ']', '{', '}', '|', '\\', '<', '>', '?', '/'};
        assertFalse(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_padChar_MCSA4_RlMw0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'='};
        assertTrue(base32.containsAlphabetOrPad(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_carriageReturn_FXQA3_SASB0() {
        byte byteToCheck = '\r';
        assertTrue(Base32.isWhiteSpace(byteToCheck));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_KhAH0_dcFS0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_noPadding_UUFw2_HyMD0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 0, CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_noLineLength_ePsA6_ewZx0() {
        Base32 base32 = new Base32(0, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults1_hrUq0_WCwu0_3() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3, 4, 5}, true, (byte) 6, CodecPolicy.STRICT);
        Base32.Context context = new Base32.Context();
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 10;
        int len = base32.readResults(b, bPos, bAvail, context);
        assertEquals(0, context.pos);
    }
}