/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_notByteArray_zCyF0() throws org.apache.commons.codec.EncoderException {
        BinaryCodec codec = new BinaryCodec();
        try {
            codec.encode("not a byte array");
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_rpgD2_1() throws org.apache.commons.codec.EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        Object encoded = codec.encode(raw);
        assertNotNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_rpgD2_2() throws org.apache.commons.codec.EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        Object encoded = codec.encode(raw);
        assertTrue(encoded instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NullInput_mWfQ0() {
        char[] ascii = null;
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_EmptyInput_SqkW1() {
        char[] ascii = new char[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_xbTs4() throws org.apache.commons.codec.DecoderException {
        BinaryCodec binaryCodec = new BinaryCodec();
        int ascii = 123;
        try {
            Object result = binaryCodec.decode(ascii);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NonEmptyInputWithOnes_tTAo4_PXjV0() {
        char[] ascii = new char[]{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'};
        byte[] expected = new byte[]{(byte) 0b11111111, (byte) 0b11111111};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_NonEmptyInput_qEWz2_xALn0() {
        char[] ascii = new char[]{'1', '0', '1', '0', '1', '0', '1', '0'};
        byte[] expected = new byte[]{(byte) 0b10101010};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }
}