/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Failing {
    private static final int[] CON_SALT = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    private static final int[] SALT_CHARS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    private static final int[] COV2CHAR = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    private static final Pattern CRYPT_SALT_PATTERN = Pattern.compile("^\\$[0-9a-f]{2}\\$[0-9a-f]{2}\\$[0-9a-f]{2}$");

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_FvGm1() {
        String original = "original";
        String result = UnixCrypt.crypt(original, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptySalt_cjlN3() {
        String original = "original";
        String result = UnixCrypt.crypt(original, "");
        assertEquals("*0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidSalt_vPzQ7() {
        String original = "original";
        String salt = "invalid";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_gIJg0() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String encrypted = UnixCrypt.crypt(original, null);
        assertEquals("0l8qk6aqIDcLI", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_WXkw2() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String salt = "";
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals("12345", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_IbMz3() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String salt = null;
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals("qx7n4k6suK5Lc", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullOriginal_dpDc5() {
        byte[] original = null;
        String salt = "salt";
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals(null, encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_PGKd0() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String expected = "vk3Wz.r.i9LS2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_dkCg1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_IODP0() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = null;
        String expected = "1JdMTQs7BACVo";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_srDY1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = "$0$0102030405060708$0102030405060708";
        String expected = "$0$0102030405060708$0102030405060708";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_GtHX3() {
        byte[] original = new byte[0];
        String salt = "$0$0102030405060708$0102030405060708";
        String expected = "$0$0102030405060708$0102030405060708";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_jMPt0() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = null;
        String expected = "mOWN0/0ycFwQw";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidSalt_DXCg1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = "invalid_salt";
        String expected = "Invalid salt value: invalid_salt";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_AWob0() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String expected = "7YVFzndX0i4Lc";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_lGTi0() {
        byte[] original = "htymlrcCvUZ0U".getBytes();
        String salt = null;
        String expected = "htymlrcCvUZ0U";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_TXHs1() {
        byte[] original = "Hello World".getBytes();
        String salt = "";
        String expected = "Hello World";
        String actual = UnixCrypt.crypt(original);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_JTvS2() {
        byte[] original = "abTDspx1rilDk".getBytes();
        String salt = "ab";
        String expected = "abTDspx1rilDk";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_goWE3() {
        byte[] original = "abTDspx1rilDk".getBytes();
        String salt = "abcd";
        String expected = "abTDspx1rilDk";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullOriginal_oSKw4() {
        byte[] original = null;
        String salt = "ab";
        String expected = null;
        String actual = UnixCrypt.crypt(original, salt);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullSalt_yrno0() {
        byte[] original = new byte[10];
        String salt = null;
        String expected = "HEuTHx6K4g8ms";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullOriginal_WABD4() {
        byte[] original = null;
        String salt = "ab";
        String expected = null;
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_FvGm1_fid1() {
        String original = "original";
        String result = UnixCrypt.crypt(original, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptyOriginal_eBMV2() {
        String salt = "salt";
        String result = UnixCrypt.crypt("", salt);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptySalt_cjlN3_fid1() {
        String original = "original";
        String result = UnixCrypt.crypt(original, "");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidOriginalAndSalt_dOXS4_fid1() {
        String original = "original";
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("saltoriginal", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidOriginal_rldI6_fid1() {
        String original = "invalid";
        String salt = "salt";
        String result = UnixCrypt.crypt(original, salt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidSalt_vPzQ7_fid1() {
        String original = "original";
        String salt = "invalid";
        String result = UnixCrypt.crypt(original, salt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidOriginalAndSalt_pMgj8_fid1() {
        String original = "invalid";
        String salt = "invalid";
        String result = UnixCrypt.crypt(original, salt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_gIJg0_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String encrypted = UnixCrypt.crypt(original, null);
        assertEquals("12345", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_GcOb1_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String salt = "salt";
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals("12345salt", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_IbMz3_fid1() {
        byte[] original = new byte[]{1, 2, 3, 4, 5};
        String salt = null;
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals("12345", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_yLOM4() {
        byte[] original = new byte[]{};
        String salt = "salt";
        String encrypted = UnixCrypt.crypt(original, salt);
        assertEquals("", encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_PGKd0_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_uzsz2_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "abc";
        String expected = "Invalid salt value: abc";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_MTiy3_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_IODP0_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = null;
        String expected = "$0$0102030405060708$0102030405060708";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_jMPt0_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = null;
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidSalt_DXCg1_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = "invalid_salt";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidSalt_uCUI2_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptyOriginal_syoS3_fid1() {
        byte[] original = new byte[]{};
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_OriginalLengthLessThanKeyLength_JYkG4_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_OriginalLengthGreaterThanKeyLength_vorz5_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_OriginalLengthGreaterThanKeyLengthAndSaltLength_LTRz7_fid1() {
        byte[] original = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a};
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_InvalidSalt_uhHw1_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "invalid";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptNullSalt_lGTi0_fid1() {
        byte[] original = "Hello World".getBytes();
        String salt = null;
        String expected = "Hello World";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptySalt_TXHs1_fid1() {
        byte[] original = "Hello World".getBytes();
        String salt = "";
        String expected = "Hello World";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptValidSalt_JTvS2_fid1() {
        byte[] original = "Hello World".getBytes();
        String salt = "ab";
        String expected = "Hello World";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptInvalidSalt_goWE3_fid1() {
        byte[] original = "Hello World".getBytes();
        String salt = "abcd";
        String expected = "Hello World";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptEmptyOriginal_tsig5() {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullSalt_yrno0_fid1() {
        byte[] original = new byte[10];
        String salt = null;
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidSalt_eScc1_fid1() {
        byte[] original = new byte[10];
        String salt = "invalid";
        String expected = "Invalid salt value: invalid";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_DLlZ2_fid1() {
        byte[] original = new byte[10];
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_emptyOriginal_BeeA3_fid1() {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullOriginal_WABD4_fid1() {
        byte[] original = null;
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidOriginalAndSaltWithDifferentCharsetAndInvalidOriginal_aYNo9_Pudp0_fid1() {
        String original = "invalid";
        String salt = "salt";
        String result = UnixCrypt.crypt(original.getBytes(StandardCharsets.UTF_8), salt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidSalt_InvalidKey_boOp4_VbKK0_fid1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String key = "invalid";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
}