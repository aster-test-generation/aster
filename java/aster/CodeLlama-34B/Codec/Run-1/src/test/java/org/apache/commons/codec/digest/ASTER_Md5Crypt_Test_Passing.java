/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptyKey_dXyq1() {
        String result = Md5Crypt.apr1Crypt(new byte[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_InvalidKey_JTxG3() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_Zpbs4() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "salt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_InvalidKeyAndSalt_MCMU5() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "salt");
        assertEquals("$apr1$salt$9qsYgU.f.xt6a.iBPa2XR1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_Lwab1_1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = null;
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_Lwab1_3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = null;
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(37, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_RtLe4_1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_RtLe4_2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(salt + "$", result.substring(0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_RtLe4_3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(27, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_aEbk0() {
        String key = "password";
        String salt = "salt";
        String expectedHash = "apr1$salt$password";
        String actualHash = Md5Crypt.apr1Crypt(key, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_BpWf2() {
        String key = "password";
        String expectedHash = "apr1$password";
        String actualHash = Md5Crypt.apr1Crypt(key, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKey_ITnV3() {
        String salt = "salt";
        String expectedHash = "$apr1$salt$AnXM5PAEa9T4ruYbwPoUh/";
        String actualHash = Md5Crypt.apr1Crypt("", salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidKey_Dkhz5() {
        String salt = "salt";
        String expectedHash = "apr1$salt$";
        String actualHash = Md5Crypt.apr1Crypt("invalid_key", salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_aVvr6() {
        String key = "password";
        String expectedHash = "apr1$password";
        String actualHash = Md5Crypt.apr1Crypt(key, "invalid_salt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidKeyAndSalt_kiSf9() {
        String expectedHash = "$apr1$invalid$UheeDByLkJSLov.U6/D6R/";
        String actualHash = Md5Crypt.apr1Crypt("invalid_key", "invalid_salt");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_UNmY3() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        String prefix = "";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("salt$Kpac23NPPgXGqUI82f3Lj1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_Ucei0() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKey_ramH6() {
        byte[] keyBytes = new byte[0];
        String result = Md5Crypt.md5Crypt(keyBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithDifferentKeyBytesAndSalt_BWyr9() {
        byte[] keyBytes1 = new byte[16];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_xrlX4() {
        String key = "key";
        String salt = "salt";
        String expected = "$apr1$salt$SIEjnTNXwIVcTbLzs4p120";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_DifferentSalt_xMcQ5() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt(key, "different_salt");
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_DifferentKey_EHvC6() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt("different_key", salt);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_DifferentKeyAndSalt_Vxqp7() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt("different_key", "different_salt");
        assertNotEquals(expected, actual);
    }
}