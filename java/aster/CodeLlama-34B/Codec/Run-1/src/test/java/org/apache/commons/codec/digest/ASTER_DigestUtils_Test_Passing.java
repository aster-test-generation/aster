/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Passing {
    private static final String MD2_ALGORITHM = "MD2";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithInvalidDataType_GElh7() throws IOException {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_fNeL0() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertNotNull(digest);
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_UWOy0() {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertNotNull(md2Digest);
        assertEquals(MessageDigestAlgorithms.MD2, md2Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_sBCN0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA3_512, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyString_CpnT1() {
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest3_dFhj2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_kOOH0() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_ScBH0() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA3_384, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_vxDX1() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA3_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithInvalidData_XeQP3() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha256Hex(data);
        assertNotEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_CEiW0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithEmptyData_kbJd2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_empty_Qref1() {
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithInvalidData_YFBC3() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca7314058bb36d3e05e19";
        String actual = DigestUtils.md2Hex(data);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_UPYv0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("hello world".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyValueToDigest_iaeA3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap(new byte[0]);
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNullName_iPpB7() {
        byte[] data = new byte[10];
        byte[] expected = new byte[64];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_NullAlgorithm_MHDK0() {
        assertFalse(DigestUtils.isAvailable(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_iWTa1() {
        assertFalse(DigestUtils.isAvailable("invalid_algorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidAlgorithm_RctN2() {
        assertTrue(DigestUtils.isAvailable("SHA-256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithInvalidData_aiCm3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullDigest_Ewll5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyString_yiXM1() {
        String data = "";
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withValidAlgorithmAndNullDefaultMessageDigest_returnsMessageDigest_vaFl4() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest actualMessageDigest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(actualMessageDigest);
        assertEquals(algorithm, actualMessageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithEmptyString_jzcx1() {
        String data = "";
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_UdoV0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
        assertEquals(32, updatedDigest.getDigestLength());
        assertEquals("SHA-256", updatedDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyValueToDigest_qefT3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = new byte[0];
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_eiMe0() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_YFao0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
        assertEquals(MessageDigestAlgorithms.MD5, md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithConstructor_dkDr4() {
        MessageDigest md5Digest = new DigestUtils(MessageDigestAlgorithms.MD5).getMd5Digest();
        assertNotNull(md5Digest);
        assertEquals(MessageDigestAlgorithms.MD5, md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_JUYd0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithConstructor_Xjyb1() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256).getSha512_256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithString_sLnB2() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256.toString()).getSha512_256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_fNeL0_1() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_fNeL0_2() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_UWOy0_1() {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertNotNull(md2Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_UWOy0_2() {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertEquals(MessageDigestAlgorithms.MD2, md2Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_sBCN0_1() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_sBCN0_2() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_512, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest3_dFhj2_1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest3_dFhj2_2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_kOOH0_1() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_kOOH0_2() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_ScBH0_1() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_ScBH0_2() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_384, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_vxDX1_1() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_vxDX1_2() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_TEvB0_1() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_TEvB0_2() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_224, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withValidAlgorithmAndNullDefaultMessageDigest_returnsMessageDigest_vaFl4_1() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest actualMessageDigest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(actualMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withValidAlgorithmAndNullDefaultMessageDigest_returnsMessageDigest_vaFl4_2() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest actualMessageDigest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals(algorithm, actualMessageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cwOz0_1() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x30;
        expected[1] = (byte) 0x31;
        expected[2] = (byte) 0x32;
        expected[3] = (byte) 0x33;
        expected[4] = (byte) 0x34;
        expected[5] = (byte) 0x35;
        expected[6] = (byte) 0x36;
        expected[7] = (byte) 0x37;
        expected[8] = (byte) 0x38;
        expected[9] = (byte) 0x39;
        expected[10] = (byte) 0x3A;
        expected[11] = (byte) 0x3B;
        expected[12] = (byte) 0x3C;
        expected[13] = (byte) 0x3D;
        expected[14] = (byte) 0x3E;
        expected[15] = (byte) 0x3F;
        expected[16] = (byte) 0x40;
        expected[17] = (byte) 0x41;
        expected[18] = (byte) 0x42;
        expected[19] = (byte) 0x43;
        expected[20] = (byte) 0x44;
        expected[21] = (byte) 0x45;
        expected[22] = (byte) 0x46;
        expected[23] = (byte) 0x47;
        expected[24] = (byte) 0x48;
        expected[25] = (byte) 0x49;
        expected[26] = (byte) 0x4A;
        expected[27] = (byte) 0x4B;
        expected[28] = (byte) 0x4C;
        expected[29] = (byte) 0x4D;
        expected[30] = (byte) 0x4E;
        expected[31] = (byte) 0x4F;
        expected[32] = (byte) 0x50;
        expected[33] = (byte) 0x51;
        expected[34] = (byte) 0x52;
        expected[35] = (byte) 0x53;
        expected[36] = (byte) 0x54;
        expected[37] = (byte) 0x55;
        expected[38] = (byte) 0x56;
        expected[39] = (byte) 0x57;
        expected[40] = (byte) 0x58;
        expected[41] = (byte) 0x59;
        expected[42] = (byte) 0x5A;
        expected[43] = (byte) 0x5B;
        expected[44] = (byte) 0x5C;
        expected[45] = (byte) 0x5D;
        expected[46] = (byte) 0x5E;
        expected[47] = (byte) 0x5F;
        byte[] actual = DigestUtils.sha384(data);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cwOz0_2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x30;
        expected[1] = (byte) 0x31;
        expected[2] = (byte) 0x32;
        expected[3] = (byte) 0x33;
        expected[4] = (byte) 0x34;
        expected[5] = (byte) 0x35;
        expected[6] = (byte) 0x36;
        expected[7] = (byte) 0x37;
        expected[8] = (byte) 0x38;
        expected[9] = (byte) 0x39;
        expected[10] = (byte) 0x3A;
        expected[11] = (byte) 0x3B;
        expected[12] = (byte) 0x3C;
        expected[13] = (byte) 0x3D;
        expected[14] = (byte) 0x3E;
        expected[15] = (byte) 0x3F;
        expected[16] = (byte) 0x40;
        expected[17] = (byte) 0x41;
        expected[18] = (byte) 0x42;
        expected[19] = (byte) 0x43;
        expected[20] = (byte) 0x44;
        expected[21] = (byte) 0x45;
        expected[22] = (byte) 0x46;
        expected[23] = (byte) 0x47;
        expected[24] = (byte) 0x48;
        expected[25] = (byte) 0x49;
        expected[26] = (byte) 0x4A;
        expected[27] = (byte) 0x4B;
        expected[28] = (byte) 0x4C;
        expected[29] = (byte) 0x4D;
        expected[30] = (byte) 0x4E;
        expected[31] = (byte) 0x4F;
        expected[32] = (byte) 0x50;
        expected[33] = (byte) 0x51;
        expected[34] = (byte) 0x52;
        expected[35] = (byte) 0x53;
        expected[36] = (byte) 0x54;
        expected[37] = (byte) 0x55;
        expected[38] = (byte) 0x56;
        expected[39] = (byte) 0x57;
        expected[40] = (byte) 0x58;
        expected[41] = (byte) 0x59;
        expected[42] = (byte) 0x5A;
        expected[43] = (byte) 0x5B;
        expected[44] = (byte) 0x5C;
        expected[45] = (byte) 0x5D;
        expected[46] = (byte) 0x5E;
        expected[47] = (byte) 0x5F;
        byte[] actual = DigestUtils.sha384(data);
        assertEquals(48, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_UdoV0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_UdoV0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(32, updatedDigest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_UdoV0_3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals("SHA-256", updatedDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_eiMe0_1() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_eiMe0_2() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_YFao0_1() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_YFao0_2() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertEquals(MessageDigestAlgorithms.MD5, md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithConstructor_dkDr4_1() {
        MessageDigest md5Digest = new DigestUtils(MessageDigestAlgorithms.MD5).getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithConstructor_dkDr4_2() {
        MessageDigest md5Digest = new DigestUtils(MessageDigestAlgorithms.MD5).getMd5Digest();
        assertEquals(MessageDigestAlgorithms.MD5, md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_JUYd0_1() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_JUYd0_2() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithConstructor_Xjyb1_1() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256).getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithConstructor_Xjyb1_2() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256).getSha512_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithString_sLnB2_1() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256.toString()).getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithString_sLnB2_2() {
        MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.SHA_512_256.toString()).getSha512_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestString_eVbP1_omjL0() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        byte[] expected = digestUtils.digest(data.getBytes());
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithStringAndByteArray_DCtV3_YGeM0_1() throws IOException {
        String algorithm = "SHA-256";
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_DBFS2_Gbww0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, new byte[0]);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidDigest_KaGA4_ckYg0() {
        assertFalse(DigestUtils.isAvailable("invalid_digest"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidDigest_LRzJ5_NCLh0() {
        assertTrue(DigestUtils.isAvailable(MessageDigestAlgorithms.SHA_512_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidName_GfAg7_WDGH0() {
        assertFalse(DigestUtils.isAvailable("invalid_name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidName_tecq8_jtFh1() {
        assertTrue(DigestUtils.isAvailable("SHA-512/256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_MOHI0_PYcb0_1() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_MOHI0_PYcb0_2() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        digest = DigestUtils.getSha3_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullName_fHyJ4_fRgG0() {
        DigestUtils digestUtils = new DigestUtils(MessageDigestAlgorithms.SHA_512_256);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithValidAlgorithm_Qfrg3_PebJ0_1() {
        MessageDigest md5Digest = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithValidAlgorithm_Qfrg3_PebJ0_2() {
        MessageDigest md5Digest = DigestUtils.getDigest(MessageDigestAlgorithms.MD5);
        assertEquals(MessageDigestAlgorithms.MD5, md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyData_YLrv2_HKSy0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest("".getBytes());
        assertNotNull(actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithInvalidData_zStQ5_ugeu0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest(new byte[0]);
        assertNotNull(actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyDataAndNullDigest_JokU7_TFyE0_1() throws NoSuchAlgorithmException {
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest("".getBytes());
        assertNotNull(actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidMessageDigestAndValueToDigest_txvd2_INHL0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String valueToDigest = "test";
        MessageDigest actual = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(actual);
        assertEquals(messageDigest, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidData_Jago2_fcov0() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, data);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest2_EddG1_BVKY0() {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            DigestUtils digestUtils = new DigestUtils(digest);
            MessageDigest messageDigest = digestUtils.getMessageDigest();
            assertSame(digest, messageDigest);
        } catch (NoSuchAlgorithmException e) {
            fail("Failed to get message digest");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_BwZB2_mazR0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] data = "Hello, World!".getBytes();
        byte[] expectedDigest = messageDigest.digest(data);
        assertArrayEquals(expectedDigest, DigestUtils.digest(messageDigest, data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_aZRl0_Ugmr0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = messageDigest.digest(data.array());
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex3_vibM2_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello World!";
        String expected = "7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithData_YeKC1_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "05e279a01ef997348f8d204e08a932f70af7c62e2c0199e330e3e0e89573c3577b8041c64aa452ba30b801d9bbd6e299afe9fa23582649136130f588e0469f9c";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_jADG0_fid2() {
        String data = "Hello, World!";
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithLongString_IxJN3_fid2() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "9294727a3638bb1c1381850d89dfee98f819dbb5";
        String actual = DigestUtils.sha1Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithSpecialCharacters_wwvn4_fid2() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "1e003664fcaac9a1934b1a7fc5ff482e75602420";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithUnicodeCharacters_RaEA5_fid2() {
        String data = ", !";
        String expected = "48809dc2c05b34fedca5d8827527715b71f62940";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithInvalidInput_jqhQ6_fid2() {
        String data = "invalid input";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_UDhw0_fid2() {
        String data = "Hello, World!";
        String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_ThBV1_fid2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        byte[] expected = new byte[32];
        byte[] actual = digestUtils.digest(data.getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_FTIc0_fid2() {
        MessageDigest digest = DigestUtils.getDigest("SHA-256");
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
        try {
            DigestUtils.getDigest("invalid-algorithm");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("java.security.NoSuchAlgorithmException: invalid-algorithm MessageDigest not available", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_BNmg0_fid2() {
        byte[] data = "Hello World".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.shaHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_moQE0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actualHash = DigestUtils.sha256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_ylGI0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "aa9ad8a49f31d2ddcabbb7010a1566417cff803fef50eba239558826f872e468c5743e7f026b0a8e5b2d7a1cc465cdbe";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384HexWithNullDigest_zuzw5_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "aa9ad8a49f31d2ddcabbb7010a1566417cff803fef50eba239558826f872e468c5743e7f026b0a8e5b2d7a1cc465cdbe";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_nonEmpty_yUOj2_fid2() {
        String data = "Hello, World!";
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_LWQX0_fid2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithValidData_npHc2_fid2() {
        String data = "Hello World";
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.md2Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_XpNL0_fid2() {
        String data = "Hello, World!";
        String expected = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1b9246fb30382f2776e89bf929f453791b67c9240ec25";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyString_qfLY1_fid2() {
        String data = "";
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_ZyWG0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_aagk0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithLargeData_JnSj3_fid2() {
        byte[] data = new byte[10000];
        String expected = "3a78d48b669178347daa903538ba25f60818e8f96e9efa5aafef09230fb305322f7368ace800c124f6dc0e76b51e2b5233e5001d4f13654706a1cf02febf246e";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_emZD0_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_224(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_2_uChm1_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_3_fYmf2_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_GXaX0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithEmptyData_nrjS2_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_ValidData_BViA2_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_lISG0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_hIPU0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_PZfI0_fid2() {
        String data = "Hello, World!";
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_FggM0_fid2() {
        byte[] data = new byte[32];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[32];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha512_256(data);
    }

    @Test
    @Timeout(value = -79, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_vtqT1_fid2() {
        byte[] data = new byte[32];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[32];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + -79);
        }
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_Tgoq0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "38e05c33d7b067127f217d8c856e554fcff09c9320b8a5979ce2ff5d95dd27ba35d1fba50c562dfd1d6cc48bc9c5baa4390894418cc942d968f97bcb659419ed";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyData_zCXp2_fid2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withValidAlgorithm_returnsMessageDigest_LUVF0_fid2() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance(algorithm);
        MessageDigest actualMessageDigest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_mQpe0_fid2() {
        String data = "Hello, World!";
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithLongString_VvnO3_fid2() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "8ba760cac29cb2b2ce66858ead169174057aa1298ccd581514e6db6dee3285280ee6e3a54c9319071dc8165ff061d77783100d449c937ff1fb4cd1bb516a69b9";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithSpecialCharacters_NNeE4_fid2() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "bcd525159b0ea2277b757477014fd943fb2e06846799366d828f8ae7c39f0e10e0d64d7dbfde69524fd58775abfe9b0ba2391acf82495e916f3aca9b614c4d31";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithEmptyData_ZiVi2_fid2() {
        byte[] data = new byte[]{};
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.md5(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_ValidData_VAlS2_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_BTGd0_fid2() {
        String data = "Hello, World!";
        String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_NullData_hVfx0_fid2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ValidData_cWlG2_fid2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        assertEquals(32, digestUtils.getSha512_256Digest().digest(data).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithData_ybPi1_fid2() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String expected = "af892867fc065e22a69d6f4f2d23f38e2883145c9427a4305046a87a";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithInvalidConstructor_Xmhr5_fid2() {
        MessageDigest md5Digest = new DigestUtils("MD5").getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithInvalidAlgorithm_hLva3_fid2() {
        MessageDigest digest = new DigestUtils("SHA-512/256").getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_InputStream_uQnm0_JGZI0_fid2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca73691f3e9cbc415e1864";
        String actual = DigestUtils.md2Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_kCnG0_GBuW0_fid2() throws IOException {
        byte[] data = new byte[0];
        String expected = "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithLargeData_naAo2_KRXf0_fid2() throws IOException {
        byte[] data = new byte[1000000];
        String expected = "cb2679d674f0565ad17c666d5ea5746f747fd94650fe2d105571f7e36231674c";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_Ejlj0_AjGn0_fid2() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.sha(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNullAlgorithm_eNlp5_Veyg0_fid2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{104, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = DigestUtils.sha256(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithEmptyInputStream_Bncu2_pqbZ0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] expected = digest.digest("".getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest("".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithInvalidDigest_yEQf7_ObBa0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] expected = digest.digest("Hello, World!".getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest("Hello, World!".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_EqvC0_Inwi0_fid2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expectedResult = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
        String actualResult = DigestUtils.sha512_256Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithEmptyInputStream_DBNM2_ElRd0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = new byte[0];
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNullDigest_OpDe6_UTUH0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullMessageDigest_hYlu6_CRkr0_fid2() throws NoSuchAlgorithmException {
        MessageDigest md = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullAlgorithm_ROIR6_tqqx0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithInvalidName_yAsy6_mvjy0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        String name = "SHA-512";
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullName_Hctr7_vjQD0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        String name = null;
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullDigest_QXIs5_EFQi0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_MxXb0_DGqb1_fid2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithValidName_VDPA11_YbYm0_fid2() {
        byte[] data = new byte[10];
        String name = "MD2";
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.getDigest(name).digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithInvalidAlgorithm_MAcV2_IZUV0_fid2() {
        MessageDigest digest = DigestUtils.getSha256Digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullData_aRsD6_EguL0_fid2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.getSha512_256Digest().digest(new byte[0]);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNonEmptyData_GUPM3_aMzg0_fid2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "rw");
        data.write("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndByteArray_zaSZ1_eOsz0_fid2() throws IOException {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withNullAlgorithm_doesNotThrowException_Bgvd2_HAuQ0() {
        String algorithm = null;
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        try {
            DigestUtils.getDigest(algorithm, defaultMessageDigest);
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_ssqs3_VwlG0_fid2() {
        String data = "Hello, World!";
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        String actual = digestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }
}