/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Failing {
    private static final String KEY = "secret";
    private static final byte[] VALUE_TO_DIGEST = "hello world".getBytes();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_dxiP0_2() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_256, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithInvalidKey_uHIo1() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacMd5_jqDt0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacSha1_nCjX1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacSha224_unno2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacSha256_ifih3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacSha384_yrBu4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHmacSha512_YLDJ5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_dmCN0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1WithEmptyKey_Zsvk3() {
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha1("", valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_GPfx0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "my_key");
        byte[] valueToDigest = "my_value".getBytes();
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = hmacUtils.hmac(ByteBuffer.wrap(valueToDigest));
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_emptyKey_lsum7() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithInvalidFile_tTfU8() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] expected = new byte[0];
        byte[] actual = hmacUtils.hmac(new File("invalid_file.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_NullAlgorithm_lDBD7() {
        HmacAlgorithms algorithm = null;
        assertNull(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_rjCl0() {
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] valueToDigest = new byte[]{0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20};
        byte[] expectedResult = new byte[]{0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30};
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_NTMc0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0xFF);
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullKey_VSbl1() {
        String valueToDigest = "my_value";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0x00);
        byte[] actual = HmacUtils.hmacSha384(null, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyKey_xzOw3() {
        String valueToDigest = "my_value";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0x00);
        byte[] actual = HmacUtils.hmacSha384("", valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyValueToDigest_jFSQ4() {
        String key = "my_key";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0xFF);
        byte[] actual = HmacUtils.hmacSha384(key, "");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_nullMac_cCPz6() {
        byte[] valueToDigest = "Hello, World!".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(null, valueToDigest);
        assertNull(updatedMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_1_YmRh0_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_2_pOgT1_1() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithInvalidKey_uHIo1_fid1() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1WithNullKey_Fiwg1() {
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha1(null, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1WithNullValueToDigest_zHAL2_fid1() {
        String key = "my_key";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha1(key, null);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_yrfd0_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-MD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_GhLx1_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-SHA-1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_IqkQ2_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-SHA-224"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_euNZ3_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-SHA-256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_gvTO4_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-SHA-384"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_tKWm5_fid1() {
        assertTrue(HmacUtils.isAvailable("HMAC-SHA-512"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_oOUn0_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expected = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_lwgx0_fid1() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "testKey");
        File file = new File("testFile.txt");
        String expectedHex = "6815b3669393448fd1f990961c5e5a95007275e75096b2a5c33e3f493448fd1f99";
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorWithStringAndByteArray_HzYA2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC-MD5", "key".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_QkQn0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_vHly1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_SZrm2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_tQwc3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_grSU4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha512_qDeY5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key");
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithInvalidFile_tTfU8_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("invalid_file.txt"));
        byte[] actual = hmacUtils.hmac(new File("invalid_file.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_llCP6_fid1() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
        assertFalse(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_NullAlgorithm_lDBD7_fid1() {
        HmacAlgorithms algorithm = null;
        assertFalse(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullKey_VSbl1_fid1() {
        String valueToDigest = "my_value";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0xFF);
        byte[] actual = HmacUtils.hmacSha384(null, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullValueToDigest_KfZA2_fid1() {
        String key = "my_key";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0xFF);
        byte[] actual = HmacUtils.hmacSha384(key, null);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyKey_xzOw3_fid1() {
        String valueToDigest = "my_value";
        byte[] expected = new byte[48];
        Arrays.fill(expected, (byte) 0xFF);
        byte[] actual = HmacUtils.hmacSha384("", valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_GXRn0_fid1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_1_YmRh0_2_fid1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(16, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_2_pOgT1_2_fid1() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(32, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_3_pFAZ2_1() {
        byte[] key = new byte[64];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_3_pFAZ2_2() {
        byte[] key = new byte[64];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(64, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_4_DDNh3_1() {
        byte[] key = new byte[128];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_4_DDNh3_2() {
        byte[] key = new byte[128];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(128, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_5_hSkO4_1() {
        byte[] key = new byte[256];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_5_hSkO4_2() {
        byte[] key = new byte[256];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(256, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_6_Kfhx5_1() {
        byte[] key = new byte[512];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_6_Kfhx5_2() {
        byte[] key = new byte[512];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(512, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_7_TOCt6_1() {
        byte[] key = new byte[1024];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_7_TOCt6_2() {
        byte[] key = new byte[1024];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(1024, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_8_OKhe7_1() {
        byte[] key = new byte[2048];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_8_OKhe7_2() {
        byte[] key = new byte[2048];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(2048, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_9_WFkl8_1() {
        byte[] key = new byte[4096];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_9_WFkl8_2() {
        byte[] key = new byte[4096];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(4096, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_10_gRqW9_1() {
        byte[] key = new byte[8192];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_10_gRqW9_2() {
        byte[] key = new byte[8192];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(8192, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_11_eQqk10_1() {
        byte[] key = new byte[16384];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_11_eQqk10_2() {
        byte[] key = new byte[16384];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(16384, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_SRPS0_1() {
        byte[] key = new byte[64];
        Mac mac = HmacUtils.getHmacSha512(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_512, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithInvalidKey_kBVS1() {
        byte[] key = new byte[63];
        try {
            HmacUtils.getHmacSha512(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Key length must be 64 bytes", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_EmptyKey_Vtbo1() {
        byte[] key = new byte[0];
        byte[] valueToDigest = new byte[16];
        String expectedResult = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_EmptyValueToDigest_xLAj2() {
        byte[] key = new byte[16];
        byte[] valueToDigest = new byte[0];
        String expectedResult = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_DifferentAlgorithms_aHiy3() {
        byte[] key = new byte[16];
        byte[] valueToDigest = new byte[16];
        String expectedResult = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_tzAE0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_NullValueToDigest_rTMW3() throws IOException {
        byte[] key = "secret".getBytes();
        InputStream valueToDigest = null;
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_dHLc0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "8743b52063cd84097a65d1633f5c74f5";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithInvalidAlgorithm_LwVv6() {
        byte[] key = new byte[16];
        try {
            Mac mac = HmacUtils.getInitializedMac("InvalidAlgorithm", key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals(e.getMessage(), "Invalid HMAC algorithm: InvalidAlgorithm");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithNullKey_xeAq8() {
        try {
            Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals(e.getMessage(), "Invalid HMAC key: null");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithEmptyKey_UXeo9() {
        byte[] key = new byte[0];
        try {
            Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals(e.getMessage(), "Invalid HMAC key: empty");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_qChF0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};
        byte[] expectedResult = new byte[]{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F};
        byte[] actualResult = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_tssN0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_2_xygJ1() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_3_kweB2() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key.getBytes());
        byte[] actualResult = hmacUtils.hmac(valueToDigest.getBytes());
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_PDDo0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_KcOP0() {
        String key = "testKey";
        String valueToDigest = "testValue";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e001209";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithDifferentKey_VgAh1() {
        String key = "differentKey";
        String valueToDigest = "testValue";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithDifferentValueToDigest_OyYM2() {
        String key = "testKey";
        String valueToDigest = "differentValue";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e001209";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithDifferentKeyAndValueToDigest_Mfal3() {
        String key = "differentKey";
        String valueToDigest = "differentValue";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithValidAlgorithmAndKey_yWPI0_1() {
        String algorithm = "HMAC_SHA_256";
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithValidAlgorithmAndKey_yWPI0_2() {
        String algorithm = "HMAC_SHA_256";
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertEquals(algorithm, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithValidAlgorithmAndKey_yWPI0_3() {
        String algorithm = "HMAC_SHA_256";
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithInvalidAlgorithm_ydpz1() {
        String algorithm = "InvalidAlgorithm";
        byte[] key = new byte[32];
        try {
            HmacUtils.getInitializedMac(algorithm, key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid algorithm: " + algorithm, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_zQwg0() {
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] valueToDigest = new byte[]{0x06, 0x07, 0x08, 0x09, 0x0A};
        byte[] expectedResult = new byte[]{0x1A, 0x2B, 0x3C, 0x4D, 0x5E};
        byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithNullKey_mnfD1() {
        byte[] valueToDigest = new byte[]{0x06, 0x07, 0x08, 0x09, 0x0A};
        try {
            HmacUtils.hmacMd5(null, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("key must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithEmptyKey_aQOE3() {
        byte[] key = new byte[0];
        byte[] valueToDigest = new byte[]{0x06, 0x07, 0x08, 0x09, 0x0A};
        try {
            HmacUtils.hmacMd5(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("key must not be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_CyNN0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        String expectedResult = "1234567890abcdef";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_MD5_WnTx0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA1_ktqa1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "5994471abb01112afcc18159f6cc74b4f511b998";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA224_NSaq2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "7580627b05122194e14115fe292d7991";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA256_DVQj3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "5797d435e9e2c8e508e5368e31a689c1";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_dUxK0_HZMO0_1() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        key = new byte[0];
        valueToDigest = new byte[0];
        expectedResult = "";
        actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        key = null;
        valueToDigest = null;
        expectedResult = null;
        actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithNullKey_vEQQ6_geoV0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, new byte[0]);
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        byte[] actualResult = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_RibI0_xoXA0() throws IOException {
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        byte[] valueToDigest = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_Dgfd1_vyRM0() throws IOException {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        byte[] valueToDigest = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        HmacUtils hmacUtils = new HmacUtils(algorithm, key);
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_bWAH0_ibEF0_1() throws IOException {
        byte[] key = "secret".getBytes();
        byte[] valueToDigest = "hello world".getBytes();
        String expectedResult = "5d41402abc4b2a76b9719d911017c592";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        key = new byte[0];
        valueToDigest = "hello world".getBytes();
        expectedResult = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        key = "secret".getBytes();
        valueToDigest = new byte[0];
        expectedResult = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        key = null;
        valueToDigest = "hello world".getBytes();
        expectedResult = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_SWzI0_TaMA0_1() throws IOException {
        byte[] key = "secret".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedResult = "68b1558935697be2d80fbe7374a3883fc200ef59e8b4f71535cf6496e5c6d75d";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = new byte[0];
        valueToDigest = new byte[0];
        expectedResult = "";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = null;
        valueToDigest = null;
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_TScN0_lvqE0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_OpIG1_pIfE0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "0a4d55a8d778e5022fab701977c5d83cb4780a87";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_bJco2_Zltg0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "730e109bd7e2c24e81e473278989d6139901a89951817843209eb157979";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_PGqO3_kyPi0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_rvPf4_UvxP0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e7f1a34491482930901b0e275e94279a43";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_VAEo0_gCQy0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expectedResult = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
        byte[] actualResult = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullKey_sTpv3_HMdT0() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, new byte[0]);
        File file = new File("testFile.txt");
        String expectedHex = "6815b3669393448fd1f990961c5e5a95007275e75096b2a5c33e3f493448fd1f99";
        String actualHex = hmacUtils.hmacHex(file);
        assertNotEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_hRwx0_Pxfc0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "secret".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256WithNullKey_eIxC1_jLMK0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = null;
        byte[] valueToDigest = "valueToDigest".getBytes();
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256WithEmptyKey_IIAl3_HaaM0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = new byte[0];
        byte[] valueToDigest = "valueToDigest".getBytes();
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384WithStringKey_JcNY1_USMU0() {
        Mac mac = HmacUtils.getHmacSha384("key".getBytes());
        assertEquals(HmacAlgorithms.HMAC_SHA_384, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_NullKey_AOdA2_WOfL0() throws IOException {
        byte[] key = null;
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_EmptyKey_EzyT4_BMzG0() throws IOException {
        byte[] key = "".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithNullAlgorithm_mXyD7_lCcp0() {
        byte[] key = new byte[16];
        try {
            Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals(e.getMessage(), "Invalid HMAC algorithm: null");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_md5_HCzH0_kzaV0() {
        try {
            Mac mac = Mac.getInstance("HmacMD5");
            byte[] valueToDigest = "Hello, World!".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha224_sKbh2_mqkj0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA224");
            byte[] valueToDigest = "Hello, World!".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha256_Olsq3_fKHE0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = "Hello, World!".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha384_yiNI4_EOSA0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA384");
            byte[] valueToDigest = "Hello, World!".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha512_vBHo5_vraA0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA512");
            byte[] valueToDigest = "Hello, World!".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_emptyValueToDigest_Aaco8_wdIg0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = new byte[0];
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertNull(updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_dxiP0() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
        assertEquals(HmacAlgorithms.HMAC_SHA_256, mac.getAlgorithm());
        assertEquals(32, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_MD5_FlOR0() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, KEY);
        String expected = "8b1a9953c4611296a827abf8c47804d7";
        String actual = hmacUtils.hmacHex(VALUE_TO_DIGEST);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA1_rzMS1() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, KEY);
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232800";
        String actual = hmacUtils.hmacHex(VALUE_TO_DIGEST);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA224_WNwU2() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, KEY);
        String expected = "730e109bd7a8a32b17364e49c9022e76684d784e";
        String actual = hmacUtils.hmacHex(VALUE_TO_DIGEST);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA256_ymyR3() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, KEY);
        String expected = "5797fc79ba2f769cf71033e2c9e4b495991b3e30";
        String actual = hmacUtils.hmacHex(VALUE_TO_DIGEST);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_SHA384_vbML4() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, KEY);
        String expected = "3373e109bd7a8a32b17364e49c9022e76684d784e";
        String actual = hmacUtils.hmacHex(VALUE_TO_DIGEST);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_1_YmRh0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(16, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_2_pOgT1() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(32, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_3_pFAZ2() {
        byte[] key = new byte[64];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(64, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_4_DDNh3() {
        byte[] key = new byte[128];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(128, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_5_hSkO4() {
        byte[] key = new byte[256];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(256, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_6_Kfhx5() {
        byte[] key = new byte[512];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(512, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_7_TOCt6() {
        byte[] key = new byte[1024];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(1024, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_8_OKhe7() {
        byte[] key = new byte[2048];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(2048, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_9_WFkl8() {
        byte[] key = new byte[4096];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(4096, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_10_gRqW9() {
        byte[] key = new byte[8192];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(8192, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_11_eQqk10() {
        byte[] key = new byte[16384];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_1, mac.getAlgorithm());
        assertEquals(16384, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_SRPS0() {
        byte[] key = new byte[64];
        Mac mac = HmacUtils.getHmacSha512(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_512, mac.getAlgorithm());
        assertEquals(64, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithValidAlgorithmAndKey_yWPI0() {
        String algorithm = "HMAC_SHA_256";
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
        assertEquals(algorithm, mac.getAlgorithm());
        assertEquals(key.length, mac.getMacLength());
    }
}