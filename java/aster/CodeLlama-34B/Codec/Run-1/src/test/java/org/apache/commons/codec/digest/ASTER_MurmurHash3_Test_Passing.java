/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Passing {
    private static int fmix32(int hash) {
        hash ^= hash >>> 16;
        hash *= 0x85ebca6b;
        hash ^= hash >>> 13;
        hash *= 0xc2b2ae35;
        hash ^= hash >>> 16;
        return hash;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_IlKI5() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_emptyData_KDht0() {
        byte[] data = new byte[0];
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_nullData_Jgpq8() {
        byte[] data = null;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_differentSeed_YbEK3() {
        byte[] data = new byte[1];
        data[0] = 1;
        long result = MurmurHash3.hash64(data, 0, data.length, 123456789);
        assertNotEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeedOffsetAndLength_heXU7() {
        byte[] data = new byte[10];
        long seed = 1234567890;
        int offset = 5;
        int length = 5;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_IvYr0_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNonZeroSeed_pmdX1_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 1);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNonZeroSeed_pmdX1_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 1);
        assertNotEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNonZeroSeed_pmdX1_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 1);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_dFpL2_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, -1);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_dFpL2_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, -1);
        assertNotEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_dFpL2_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, -1);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithEmptyData_jGZN3_1() {
        byte[] data = new byte[0];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithEmptyData_jGZN3_2() {
        byte[] data = new byte[0];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithEmptyData_jGZN3_3() {
        byte[] data = new byte[0];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_OuVd4_1() {
        byte[] data = null;
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_OuVd4_2() {
        byte[] data = null;
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_OuVd4_3() {
        byte[] data = null;
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_KxSI6_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_KxSI6_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_KxSI6_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthEqualToDataLength_vlhI8_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 10, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroIntData_ynfq8() {
        int seed = 123456789;
        long data1 = 0;
        long data2 = 0;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_JCcC0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 539065883;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_hnPR1_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123456789;
        int expected = 490484255;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_TJdb2_fid1() {
        byte[] data = new byte[10];
        int length = 5;
        int seed = 0;
        int expected = 760066800;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_POsd3_fid1() {
        byte[] data = new byte[10];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        int length = 10;
        int seed = 0;
        int expected = -339716372;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_invalidLength_lPqk6_fid1() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, 0, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMaxValue_JmJd2_fid1() {
        long result = MurmurHash3.hash64(Integer.MAX_VALUE);
        assertEquals(result, -3346427532449733484L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMinValue_KgzQ3_fid1() {
        long result = MurmurHash3.hash64(Integer.MIN_VALUE);
        assertEquals(8556184431802652730L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentData_NaiL1_fid1() {
        byte[] data = new byte[]{11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentData_DNsr4_fid1() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentDataAndLength_vmxB6_fid1() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 50;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_VCdu1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 1;
        int length = 7;
        int seed = 123456789;
        long expected = 123456789;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_rgeJ0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ibbs1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentData_sgKW2_fid1() {
        long hash = MurmurHash3.hash64((short) 2);
        long expected = 3035465092553905197L;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMaxShort_WIxZ4_fid1() {
        long hash = MurmurHash3.hash64(Short.MAX_VALUE);
        long expected = 8203922229944212153L;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_pjWo1_fid1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expectedHash = 12345;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_MRMg0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_MuBy1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = -219293655;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_rewg0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = -1878065415;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_MJvZ1_fid1() {
        int seed = 987654321;
        long data = 1234567890L;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_ekpB2_fid1() {
        int seed = 123456789;
        long data = 9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeedAndData_pGhd3_fid1() {
        int seed = 987654321;
        long data = 9876543210L;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_ZItg5_fid1() {
        int seed = 123456789;
        long data = 0L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeed_snXW7_fid1() {
        int seed = Integer.MAX_VALUE;
        long data = 1234567890L;
        int expectedHash = 596259923;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeedAndData_KsFD9_fid1() {
        int seed = Integer.MAX_VALUE;
        long data = Long.MAX_VALUE;
        int expectedHash = 1888424355;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jywR0_fid1() {
        int seed = 123456789;
        long data = 1234567890L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_vpSa0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_CRWZ0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = -1878065415;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_sHfF1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expectedHash = -219293655;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_KLVX0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        int expected = 120583055;
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_LGHl1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 987654321;
        int expected = -296684047;
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32EmptyString_yWEL0_fid1() {
        String data = "";
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32SingleCharacterString_hwoH2_fid1() {
        String data = "a";
        int expected = 1086686554;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32MultipleCharacterString_wMfv3_fid1() {
        String data = "abc";
        int expected = -885266671;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32SpecialCharacters_bAXD4_fid1() {
        String data = "!@#$%^&*()_+";
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentByteArrayLengths_llWo6_1_fid1() {
        byte[] bytes = new byte[10];
        int expected = 1504809123;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        bytes = new byte[20];
        actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentLengths_ZDqW8_1_fid1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        actual = MurmurHash3.hash32(bytes, 0, 5, 123);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNonZeroSeed_pmdX1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 1);
        assertEquals(2, result.length);
        assertNotEquals(0, result[0]);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeSeed_dFpL2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, -1);
        assertEquals(2, result.length);
        assertNotEquals(0, result[0]);
        assertNotEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithEmptyData_jGZN3() {
        byte[] data = new byte[0];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_OuVd4() {
        byte[] data = null;
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithZeroLength_KxSI6() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }
}