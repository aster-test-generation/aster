/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_PEfh0() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec();
        assertNull(codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_nhdd1() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        assertArrayEquals(bytes, codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithAlwaysEncodeChars_PsKa3() throws org.apache.commons.codec.DecoderException {
        byte[] alwaysEncodeChars = new byte[]{1, 2, 3};
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
        byte[] bytes = new byte[]{4, 5, 6};
        assertArrayEquals(bytes, codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithPlusForSpace_mEkk4() throws org.apache.commons.codec.DecoderException {
        PercentCodec codec = new PercentCodec(null, true);
        byte[] bytes = new byte[]{7, 8, 9};
        assertArrayEquals(bytes, codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_KsZd0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        assertNull(codec.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_GUef1() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonByteArray_ppHe2() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        String input = "test";
        assertThrows(EncoderException.class, () -> codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_NqLd4() throws EncoderException {
        PercentCodec codec = new PercentCodec(null, true);
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, codec.encode(input));
    }
}