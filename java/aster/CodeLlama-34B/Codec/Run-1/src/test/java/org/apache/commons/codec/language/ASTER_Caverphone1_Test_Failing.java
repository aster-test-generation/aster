/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone1_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_YjhD0_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cough");
        assertEquals("cou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_EcAn1_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("rough");
        assertEquals("rou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_yUry2_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("tough");
        assertEquals("tou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_bqXu3_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("enough");
        assertEquals("enou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode5_WjqK4_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("gn");
        assertEquals("2n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode6_UZIT5_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("mb");
        assertEquals("m2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode7_cTmn6_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cq");
        assertEquals("2q", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode8_xJsc7_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("ci");
        assertEquals("si", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode9_QpVB8() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("ce");
        assertEquals("se", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode10_PzLn9_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cy");
        assertEquals("sy", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode11_WqGN10_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("tch");
        assertEquals("2ch", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode12_PTWY11_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("c");
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode13_Rhxk12() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("q");
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode14_rqEa13_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("x");
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode15_AYGr14_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("v");
        assertEquals("f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode16_EYZy15_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("dg");
        assertEquals("2g", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_differentSpecialChars_LNqm6_fid1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "hello";
        String str2 = "hllo";
        assertFalse(caverphone1.isEncodeEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_differentWhitespace_ABHu8_fid1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "hello";
        String str2 = "hello ";
        assertFalse(caverphone1.isEncodeEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_differentNewlines_oGym9_fid1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "hello";
        String str2 = "hello\n";
        assertFalse(caverphone1.isEncodeEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_differentTabs_ZEvo10_fid1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "hello";
        String str2 = "hello\t";
        assertFalse(caverphone1.isEncodeEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_differentCarriageReturns_KGav11_fid1() throws EncoderException {
        Caverphone1 caverphone1 = new Caverphone1();
        String str1 = "hello";
        String str2 = "hello\r";
        assertFalse(caverphone1.isEncodeEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_RPDF0_fid1() throws EncoderException {
        Caverphone1 caverphone = new Caverphone1();
        String input = "hello";
        String expected = "H3110";
        String actual = caverphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_gJyO3() throws EncoderException {
        Caverphone1 caverphone = new Caverphone1();
        String input = "";
        String expected = "";
        String actual = caverphone.encode(input);
        assertEquals(expected, actual);
    }
}