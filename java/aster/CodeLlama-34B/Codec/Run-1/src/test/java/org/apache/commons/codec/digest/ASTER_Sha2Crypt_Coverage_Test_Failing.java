/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Sha2Crypt_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithEmptySalt_ifEY3_KQJZ0() {
        byte[] keyBytes = "password".getBytes();
        String salt = "";
        String expected = "$5$rounds=535000$16bytesalt$32byteshashvalue";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, "16bytesalt");
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullKeyBytes_MwhL6_qyCn0() {
        byte[] keyBytes = null;
        String salt = "$5$rounds=535000$16bytesalt";
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithEmptySalt_ifEY3_KQJZ0_fid3() {
        byte[] keyBytes = "password".getBytes();
        String salt = "";
        String expected = "$5$rounds=535000$16bytesalt$32byteshashvalue";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithValidSalt_rOvV4_DeID0_fid3() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=535000$16bytesalt";
        String expected = "$5$rounds=535000$16bytesalt$32byteshashvalue";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullKeyBytes_MwhL6_qyCn0_fid3() {
        byte[] keyBytes = null;
        String salt = "$5$rounds=535000$16bytesalt";
        String expected = "$5$rounds=535000$16bytesalt$32byteshashvalue";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        Assertions.assertEquals(expected, actual);
    }
}