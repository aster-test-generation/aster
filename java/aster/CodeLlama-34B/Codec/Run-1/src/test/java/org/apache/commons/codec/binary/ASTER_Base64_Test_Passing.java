/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_urlSafeTrue_DSmS0() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_urlSafeFalse_zcCg1() {
        Base64 base64 = new Base64(false);
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_urlSafeNotSet_CNuh2() {
        Base64 base64 = new Base64();
        assertFalse(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_1_FCzM0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_3_gzeR2() {
        String base64String = "SGVsbG8gV29ybGQhIQ==";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger_wjhz0() {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BigInteger expected = new BigInteger("0");
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String1_JAsd0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = Base64.encodeBase64String(binaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_VxJQ0() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{10, 13}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_OVWJ1() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, false);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{10, 13}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_BhLw2() {
        Base64 base64 = new Base64(10, new byte[]{10, 13});
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[]{10, 13}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_strict_eDKk0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64(binaryData, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_XMlS1() {
        byte[] binaryData = new byte[10];
        boolean isChunked = true;
        byte[] expectedResult = new byte[10];
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_3_oahm2() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        byte[] expectedResult = new byte[10];
        Base64 base64 = new Base64(10, new byte[0], false);
        byte[] actualResult = base64.encodeBase64(binaryData, isChunked);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_4_YGZX3() {
        byte[] binaryData = new byte[10];
        boolean isChunked = true;
        byte[] expectedResult = new byte[10];
        Base64 base64 = new Base64(10, new byte[0], false);
        byte[] actualResult = base64.encodeBase64(binaryData, isChunked);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyString_dVJU0() {
        String base64 = "";
        assertTrue(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64String_iwrS2() {
        String base64 = "This is not a valid base64 string";
        assertTrue(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64String_FUPW3() {
        String base64 = "VGhpcyBpcyBhIHN0cmluZyB0byByZWFzb24gYnkgcmVhbGx5IGluIHRoaXMgaXMgYSB0aGUgbGluZSBhbmQgYW5kIGFsbCBwYXJhbWV0ZXJz";
        assertTrue(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64StringWithLineSeparator_fvdD4() {
        String base64 = "VGhpcyBpcyBhIHN0cmluZyB0byByZWFzb24gYnkgcmVhbGx5IGluIHRoaXMgaXMgYSB0aGUgbGluZSBhbmQgYW5kIGFsbCBwYXJhbWV0ZXJz\n";
        assertTrue(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64StringWithLineSeparator_FfjE7() {
        String base64 = "This is not a valid base64 string\n";
        assertTrue(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64StringWithLineSeparatorAndUrlSafeCharacters_taYz9() {
        String base64 = "This is not a valid base64 string\n";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 20));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_strict_jVln0_4() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertFalse(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_urlSafe_OIqR2_4() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        assertFalse(base64.isInAlphabet((byte) 40));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_EmptyInput_Cddf0() {
        byte[] binaryData = new byte[0];
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 0;
        byte[] expectedOutput = new byte[0];
        byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_allBase64_KALG0() {
        byte[] arrayOctet = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_allWhitespace_crQp1() {
        byte[] arrayOctet = new byte[]{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        assertTrue(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_1() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData.length, 14);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_XxMW0_2() {
        byte[] binaryData = new byte[10];
        for (int i = 0; i < binaryData.length; i++) {
            binaryData[i] = (byte) i;
        }
        byte[] encodedData = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(encodedData[0], (byte) 'A');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Invalid_chgp2() {
        byte octet = -1;
        assertFalse(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Padding_Saki3() {
        byte octet = Base64.PAD_DEFAULT;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_strict_qJlx0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_lenient_XqYR1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_urlSafe_sCzp2() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_lineLength_vggy3() {
        Base64 base64 = new Base64(10);
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_lineSeparator_vUnt4() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30});
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_emptyString_phoJ5() {
        Base64 base64 = new Base64();
        byte[] result = base64.decode("");
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_invalidString_xTkG7() {
        Base64 base64 = new Base64();
        byte[] result = base64.decode("dGVzdA==");
        assertArrayEquals(new byte[]{116, 101, 115, 116}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidString_cUFm2() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidStringWithLineSeparator_cyIp4() {
        Base64 base64 = new Base64(10, new byte[]{10, 13});
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidStringWithUrlSafe_sWPe6() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidStringWithLineSeparatorAndUrlSafe_Prpy8() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true);
        assertTrue(base64.isInAlphabet("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLength_nullArray_KNHY0() {
        byte[] array = null;
        int result = Base64.toLength(array);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLength_nonNullArray_rSYS1() {
        byte[] array = new byte[10];
        int result = Base64.toLength(array);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_LWKa0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.encode(input);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_strictPolicy_akso0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertTrue(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_nonStrictDecodingPolicy_FhYq3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertFalse(base64.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_YlLR0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.encode(input, 0, input.length);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy1_rIkp0() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy2_EHKc1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, false, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_PCFI3() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, false);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy8_JNbp7() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy9_gyEj8() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, false, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyArray_IAXo0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.decode(input);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullArray_kEjX2() {
        Base64 base64 = new Base64();
        byte[] input = null;
        byte[] output = base64.decode(input);
        assertNull(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor1_GVBp1() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, true);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor2_UvJZ2() {
        Base64 base64 = new Base64(10, new byte[]{10, 13}, false);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor3_RDlm3() {
        Base64 base64 = new Base64(10, new byte[]{10, 13});
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor4_eCAo4() {
        Base64 base64 = new Base64(10);
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor5_GrXE5() {
        Base64 base64 = new Base64();
        assertNotNull(base64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_nullArray_XzPI0() {
        Base64 base64 = new Base64();
        assertFalse(base64.containsAlphabetOrPad(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_emptyArray_UXkZ1() {
        Base64 base64 = new Base64();
        assertFalse(base64.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_arrayWithOnlyAlphabet_iCrr3() {
        Base64 base64 = new Base64();
        byte[] arrayOctet = new byte[]{'a', 'b', 'c'};
        assertTrue(base64.containsAlphabetOrPad(arrayOctet));
    }
}