/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone_Test_Failing {
    private Caverphone caverphone;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_NullString_poyP2() {
        Caverphone caverphone = new Caverphone();
        String str1 = null;
        String str2 = null;
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_NQMD1() {
        String source = "hello";
        String expected = "H3110";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithEmptyString_rzyf2() {
        String source = "";
        String expected = "";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithNullString_tXZr3() {
        String source = null;
        String expected = null;
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithSpecialCharacters_Nmwy4() {
        String source = "hllo";
        String expected = "H3110";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithUppercase_TYoJ6() {
        String source = "HELLO";
        String expected = "H3110";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithMixedCase_FJlO8() {
        String source = "HeLlO";
        String expected = "H3110";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithMultipleWords_nvQu9() {
        String source = "hello world";
        String expected = "H3110 W6430";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithMultipleWordsAndSpecialCharacters_LxnO10() {
        String source = "hello world!";
        String expected = "H3110 W6430";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithMultipleWordsAndAccents_mFck11() {
        String source = "hllo wrld";
        String expected = "H3110 W6430";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithMultipleWordsAndUppercase_kOwz12() {
        String source = "HELLO WORLD";
        String expected = "H3110 W6430";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_BDMo0() {
        Caverphone caverphone = new Caverphone();
        String input = "hello";
        Object output = caverphone.encode(input);
        assertEquals("H110", output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ctqj0() {
        Caverphone caverphone = new Caverphone();
        String str = "hello";
        String expected = "H3110";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }
}