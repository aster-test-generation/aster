/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_wTkz0() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expectedHash = Sha2Crypt.sha512Crypt(keyBytes);
        String actualHash = Crypt.crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha512Salt_xCgi1() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA512_PREFIX + "salt";
        String expectedHash = Sha2Crypt.sha512Crypt(keyBytes, salt);
        String actualHash = Crypt.crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSha256Salt_afnK2() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + "salt";
        String expectedHash = Sha2Crypt.sha256Crypt(keyBytes, salt);
        String actualHash = Crypt.crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMd5Salt_RsTz3() {
        byte[] keyBytes = "password".getBytes();
        String salt = Md5Crypt.MD5_PREFIX + "salt";
        String expectedHash = Md5Crypt.md5Crypt(keyBytes, salt);
        String actualHash = Crypt.crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptySalt_QhNz3() {
        String key = "key";
        String result = Crypt.crypt(key, "");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptyKey_tNkN1_fid2() {
        String salt = "salt";
        String result = Crypt.crypt("", salt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_SaoS2_fid2() {
        String key = "key";
        String result = Crypt.crypt(key, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptySalt_QhNz3_fid2() {
        String key = "key";
        String result = Crypt.crypt(key, "");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidKeyAndSalt_aEDm4_2_fid2() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
        assertEquals(result, "key:salt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_UunJ0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String expected = "0102030405060708";
        String actual = Crypt.crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKey_iCYF1() {
        byte[] keyBytes = null;
        String expected = null;
        String actual = Crypt.crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_nsmi2() {
        byte[] keyBytes = new byte[0];
        String expected = "";
        String actual = Crypt.crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptyKeyAndNullSalt_bWNR4() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String expected = "0102030405060708";
        String actual = Crypt.crypt(keyBytes, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptyKeyAndEmptySalt_ZTdw5() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String expected = "0102030405060708";
        String actual = Crypt.crypt(keyBytes, "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptyKeyAndNonEmptySalt_QLHQ6() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        String expected = "0102030405060708";
        String actual = Crypt.crypt(keyBytes, "salt");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_NRYH1() {
        String result = Crypt.crypt("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidKey_xQWt2() {
        String result = Crypt.crypt("key");
        assertEquals("key", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidKey_ZPKk3() {
        String result = Crypt.crypt("invalid_key");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_WnHZ4() {
        String result = Crypt.crypt("key", null);
        assertEquals("key", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_DtcQ5() {
        String result = Crypt.crypt("key", "");
        assertEquals("key", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_zsPZ6() {
        String result = Crypt.crypt("key", "salt");
        assertEquals("key", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_JhIM7() {
        String result = Crypt.crypt("key", "invalid_salt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidKeyAndSalt_aEDm4() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
        assertNotNull(result);
        assertEquals(result, "key:salt");
    }
}