/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Failing {
    public void testGetDefaultBufferSize_ObBU0() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentLineLength_CAym1() {
        Base32 base32 = new Base32(20, new byte[]{1, 2, 3}, true);
        assertEquals(20, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentLineSeparator_rHRK2() {
        Base32 base32 = new Base32(10, new byte[]{4, 5, 6}, true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentUseHex_WVQA3() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, false);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentPadding_vldN4() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentDecodingPolicy_RaLZ5() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3}, true, (byte) 4, CodecPolicy.STRICT);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor_zObh6() {
        Base32 base32 = new Base32(true);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor2_vjnb7() {
        Base32 base32 = new Base32(10);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor3_IaVp8() {
        Base32 base32 = new Base32((byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    public void testGetDefaultBufferSizeWithDifferentConstructor4_KtiB9() {
        Base32 base32 = new Base32(true, (byte) 4);
        assertEquals(10, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_LzPh0() {
        Base32 base32 = new Base32(32, new byte[]{0x0D, 0x0A}, true, (byte) 0x3D, CodecPolicy.STRICT);
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A};
        byte[] actual = base32.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_GztD1() {
        Base32 base32 = new Base32(32, new byte[]{0x0D, 0x0A}, true, (byte) 0x3D, CodecPolicy.LENIENT);
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A};
        byte[] actual = base32.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_1_ffFB0() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "041061050O3GG(((";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_2_GByZ1() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "041061050O3GG(((";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_3_Wisw2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, false, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AEBAGBAFAYDQQ(((";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_4_aQDB3() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, false, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AEBAGBAFAYDQQ(((";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NullString_AKmi1() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_NMdf0() throws DecoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] actualOutput = base32.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_Xxxk1() throws DecoderException {
        String input = "1234567890";
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] actualOutput = base32.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeDifferentConstructorParameters_DlVe3() throws DecoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Base32 base32 = new Base32(5, new byte[]{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] actualOutput = base32.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLength_ahyW1_fid2() {
        Base32 base32 = new Base32(10);
        byte[] lineSeparator = base32.getLineSeparator();
        assertArrayEquals(new byte[]{10}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUseHex_NrLe2_fid2() {
        Base32 base32 = new Base32(true);
        byte[] lineSeparator = base32.getLineSeparator();
        assertArrayEquals(new byte[]{10}, lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctet_PduS0_fid2() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isInAlphabet((byte) 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidOctet_GoCX1_fid2() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        assertFalse(base32.isInAlphabet((byte) 50));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_1_ffFB0_fid2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_2_GByZ1_fid2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_3_Wisw2_fid2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, false, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_4_aQDB3_fid2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, false, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NullString_AKmi1_fid2() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidStringWithPadding_FFyB4_fid2() {
        Base32 base32 = new Base32(true, (byte) '=');
        assertTrue(base32.isInAlphabet("abcdefghijklmnopqrstuvwxyz="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_Ifsp0() throws EncoderException {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{16, 32, 48, 64, 80};
        byte[] actualOutput = base32.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_RKuL0_fid2() {
        Base32 base32 = new Base32(8, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        long expectedLength = 16;
        long actualLength = base32.getEncodedLength(pArray);
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_allValidChars_XIIB1_fid2() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7', '8', '9', '='};
        assertTrue(base32.isInAlphabet(arrayOctet, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_1_fid2() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(5, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_2() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(1, output[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_3() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(2, output[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_4() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(3, output[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_5() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(4, output[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1_6() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_gtKr2() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, true, (byte) 61);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_NEpQ3() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, false, (byte) 61);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy7_pbkG6() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, true);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy8_ADzL7() {
        Base32 base32 = new Base32(32, new byte[]{10, 13}, false);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy9_HPNC8() {
        Base32 base32 = new Base32(32, new byte[]{10, 13});
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy10_GBXY9() {
        Base32 base32 = new Base32(32);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_1() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(16, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_2() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(65, output[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_3() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(66, output[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_4() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(67, output[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_5() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(68, output[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_6() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(69, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_7() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(70, output[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_8() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(71, output[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_9() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(72, output[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_10() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(73, output[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_11() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(74, output[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_12() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(75, output[10]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_13() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(76, output[11]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_14() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(77, output[12]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_15() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(78, output[13]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_16() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(79, output[14]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1_17() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(80, output[15]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullArray_tSSd2() {
        Base32 base32 = new Base32();
        byte[] input = null;
        byte[] output = base32.decode(input);
        assertEquals(0, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChunkSeparator_wNqJ0() {
        byte[] expected = new byte[]{(byte) 0x0A};
        byte[] actual = Base32.getChunkSeparator();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_1_qkgz0_jSlt0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_2_AWqI1_RVom0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobH6";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_3_CyjS2_UYLJ0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobH6";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_4_ZqlA3_IPXr0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobH6";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_5_Sdkh4_uVmp0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.STRICT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobH6";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_6_VXAa5_ZmDO0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobH6";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LENIENT_noPadding_Utxq3_pAcX0() {
        Base32 base32 = new Base32(10, new byte[]{10, 20, 30}, true, (byte) 0, CodecPolicy.LENIENT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_STRICT_noLineSeparator_RivV4_UEcV0() {
        Base32 base32 = new Base32(10, null, true, (byte) 40, CodecPolicy.STRICT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LENIENT_noLineSeparator_VocF5_VOED0() {
        Base32 base32 = new Base32(10, null, true, (byte) 40, CodecPolicy.LENIENT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecoding_LENIENT_noLineLength_bSHO7_pVov0() {
        Base32 base32 = new Base32(0, new byte[]{10, 20, 30}, true, (byte) 40, CodecPolicy.LENIENT);
        assertTrue(base32.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults1_hrUq0_WCwu0_1() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3, 4, 5}, true, (byte) 6, CodecPolicy.STRICT);
        Base32.Context context = new Base32.Context();
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 10;
        int len = base32.readResults(b, bPos, bAvail, context);
        assertEquals(5, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults1_hrUq0_WCwu0_2() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3, 4, 5}, true, (byte) 6, CodecPolicy.STRICT);
        Base32.Context context = new Base32.Context();
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 10;
        int len = base32.readResults(b, bPos, bAvail, context);
        assertEquals(5, context.readPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadResults1_hrUq0_WCwu0_4() {
        Base32 base32 = new Base32(10, new byte[]{1, 2, 3, 4, 5}, true, (byte) 6, CodecPolicy.STRICT);
        Base32.Context context = new Base32.Context();
        byte[] b = new byte[10];
        int bPos = 0;
        int bAvail = 10;
        int len = base32.readResults(b, bPos, bAvail, context);
        assertEquals(0, context.eof);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyArray_Jlba1() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input, 0, input.length);
        assertEquals(5, output.length);
        assertEquals(1, output[0]);
        assertEquals(2, output[1]);
        assertEquals(3, output[2]);
        assertEquals(4, output[3]);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyArray_ZFug1() {
        Base32 base32 = new Base32(8, new byte[]{10, 13}, true, (byte) 61, CodecPolicy.STRICT);
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80};
        byte[] output = base32.decode(input);
        assertEquals(16, output.length);
        assertEquals(65, output[0]);
        assertEquals(66, output[1]);
        assertEquals(67, output[2]);
        assertEquals(68, output[3]);
        assertEquals(69, output[4]);
        assertEquals(70, output[5]);
        assertEquals(71, output[6]);
        assertEquals(72, output[7]);
        assertEquals(73, output[8]);
        assertEquals(74, output[9]);
        assertEquals(75, output[10]);
        assertEquals(76, output[11]);
        assertEquals(77, output[12]);
        assertEquals(78, output[13]);
        assertEquals(79, output[14]);
        assertEquals(80, output[15]);
    }
}