/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithDefaultConstructor_UQEN0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String defaultCharset = codec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetConstructor_mbcc1() {
        Charset charset = Charset.forName("UTF-16");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
        String defaultCharset = codec.getDefaultCharset();
        assertEquals("UTF-16", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharsetNameConstructor_DZoa2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-32");
        String defaultCharset = codec.getDefaultCharset();
        assertEquals("UTF-32", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Uaux0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "=3DHello, World!";
        Charset sourceCharset = Charset.forName("US-ASCII");
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_vtey2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "";
        Charset sourceCharset = Charset.forName("US-ASCII");
        String expected = "";
        String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullString_NuAI3() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        Charset sourceCharset = Charset.forName("US-ASCII");
        String expected = null;
        String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_CoKW0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] actual = codec.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_wSgW1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String actual = codec.decode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_szAW2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = null;
        Object expected = null;
        Object actual = codec.decode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_dqHL0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] expectedOutput = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] actualOutput = codec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_SvWV1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello world";
        String expectedOutput = "hello world";
        String actualOutput = codec.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_ngai2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = null;
        Object expectedOutput = null;
        Object actualOutput = codec.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_ZWXl0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, Charset.defaultCharset());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_emptyString_LJHV1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("", Charset.defaultCharset());
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ascii_UjkI2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("Hello, World!", Charset.forName("US-ASCII"));
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_utf8_qAVI3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("Hello, World!", Charset.forName("UTF-8"));
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_yxMP4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String result = codec.encode("Hello, World!", Charset.defaultCharset());
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonStrict_lash5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String result = codec.encode("Hello, World!", Charset.defaultCharset());
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_FLjB6() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String result = codec.encode("Hello, World!", Charset.forName("UTF-8"));
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charsetName_bDug7() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String result = codec.encode("Hello, World!", Charset.forName("UTF-8"));
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithDefaultConstructor_akqR0() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec();
        Charset charset = qpCodec.getCharset();
        assertEquals(Charset.defaultCharset(), charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetConstructor_pHMW1() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset);
        assertEquals(charset, qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetNameConstructor_rtLB2() {
        String charsetName = "UTF-8";
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charsetName);
        assertEquals(Charset.forName(charsetName), qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithStrictConstructor_Krwy3() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(true);
        Charset charset = qpCodec.getCharset();
        assertEquals(Charset.defaultCharset(), charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithCharsetAndStrictConstructor_NCkj4() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset, true);
        assertEquals(charset, qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithNullCharset_lGyX5() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec((Charset) null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithNullCharsetName_aZEJ6() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithInvalidCharsetName_WdJf7() {
        String charsetName = "invalid_charset";
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetWithInvalidCharset_vgfq8() {
        Charset charset = Charset.forName("US-ASCII");
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset);
        assertEquals(Charset.forName("US-ASCII"), qpCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_Ckzk0() {
        boolean strict = true;
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_alXm1() {
        boolean strict = false;
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_bytes_null_HNpr2() {
        boolean strict = true;
        byte[] bytes = null;
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        byte[] expected = null;
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_bytes_empty_GCJT4() {
        boolean strict = true;
        byte[] bytes = new byte[]{};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        byte[] expected = new byte[]{};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable1_fSEw0() {
        QuotedPrintableCodec qp = new QuotedPrintableCodec(true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = qp.encodeQuotedPrintable(BitSet.valueOf(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), bytes, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_1() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(16, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_2() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x01, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_3() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x02, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_4() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x03, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_5() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x04, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_6() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x05, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_7() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x06, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_8() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x07, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_9() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x08, result[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_10() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x09, result[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_11() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0A, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_12() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0B, result[10]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_13() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0C, result[11]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_14() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0D, result[12]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_15() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0E, result[13]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_16() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x0F, result[14]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0_17() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0x10, result[15]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_xLol1() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_dzpo2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        byte[] input = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_xexv0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "=3D".getBytes();
        byte[] expectedOutput = "=".getBytes();
        byte[] actualOutput = codec.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyInput_uaaz2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "".getBytes();
        byte[] expectedOutput = "".getBytes();
        byte[] actualOutput = codec.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_true_QYQI0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_false_ZlFt1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_UTF8_rYVa2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_ISO88591_jZkl3() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_USASCII_ZkXm4() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.US_ASCII);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullString_hrUs0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DifferentEncoding_jtxh3() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expectedResult = "Hello, World!";
        String result = codec.encode(sourceStr, sourceCharset);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DifferentLineLength_IajV4_etBk0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        int lineLength = 76;
        String expectedResult = "Hello, World!";
        String result = codec.encode(sourceStr, sourceCharset);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_null_dXvP0_hETn0() {
        byte[] bytes = null;
        byte[] expected = null;
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_empty_ZQex1_stVg0() {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_singleChar_OQjG2_tqaM0() {
        byte[] bytes = new byte[]{65};
        byte[] expected = new byte[]{65};
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Unexpected exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_multipleChars_cGKP3_MMta0() {
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_escapedChar_Zxfj4_ysfS0() {
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70};
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_escapedChar_CR_OwHr5_APKA0() {
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 13};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70};
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_escapedChar_LF_EVua6_PeUE0() {
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 10};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70};
        try {
            byte[] actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_nullOrEmpty_bvGx7_CMiK0() {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        } catch (DecoderException e) {
        }
        assertArrayEquals(expected, actual);
        bytes = new byte[0];
        expected = new byte[0];
        actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        } catch (DecoderException e) {
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_iKrW0() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(16, result.length);
        assertEquals(0x01, result[0]);
        assertEquals(0x02, result[1]);
        assertEquals(0x03, result[2]);
        assertEquals(0x04, result[3]);
        assertEquals(0x05, result[4]);
        assertEquals(0x06, result[5]);
        assertEquals(0x07, result[6]);
        assertEquals(0x08, result[7]);
        assertEquals(0x09, result[8]);
        assertEquals(0x0A, result[9]);
        assertEquals(0x0B, result[10]);
        assertEquals(0x0C, result[11]);
        assertEquals(0x0D, result[12]);
        assertEquals(0x0E, result[13]);
        assertEquals(0x0F, result[14]);
        assertEquals(0x10, result[15]);
    }
}