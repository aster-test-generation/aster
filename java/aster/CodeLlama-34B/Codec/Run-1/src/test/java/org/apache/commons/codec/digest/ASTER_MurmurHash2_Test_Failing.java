/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidData_IsXQ3() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 5, 0xe17a1465);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullString_dwYB4() {
        String text = null;
        int from = 0;
        int length = 0;
        int expected = 0;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeFrom_adSP5() {
        String text = "abc";
        int from = 0;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeLength_znns6() {
        String text = "abc";
        int from = 0;
        int length = -1;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_fromGreaterThanLength_SkAI7() {
        String text = "abc";
        int from = 4;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_uHlv0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        int length = data.length;
        int seed = -1093612078;
        int expected = -1093612078;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ObKv1() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        int length = data.length;
        int seed = -1065291207;
        int expected = -1065291207;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NegativeFrom_Embg3() {
        String text = "abc";
        int from = 0;
        int length = 3;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NegativeLength_Qqbo4() {
        String text = "abc";
        int from = 0;
        int length = -1;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_FromGreaterThanLength_iaFB5() {
        String text = "abc";
        int from = 4;
        int length = 3;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_LengthGreaterThanTextLength_TtuN6() {
        String text = "abc";
        int from = 0;
        int length = 4;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NullText_lReV7() {
        String text = null;
        int from = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_InvalidFrom_OLbl9() {
        String text = "abc";
        int from = -1;
        int length = 3;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, 0, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_InvalidFromAndLength_Evkv11() {
        String text = "abc";
        int from = -1;
        int length = -1;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, 0, text.length());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nonEmptyData_SQpW1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed = 0x9747b28c;
        int expected = 0x4d947b28;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_PbCi2_1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x4d947b28;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_PbCi2_2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x4d947b28;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentLengths_EkAo3_1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length1 = data.length;
        int length2 = data.length - 1;
        int seed = 0x9747b28c;
        int expected1 = 0x4d947b28;
        int expected2 = 0x4d947b27;
        int actual1 = MurmurHash2.hash32(data, length1, seed);
        int actual2 = MurmurHash2.hash32(data, length2, seed);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentLengths_EkAo3_2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length1 = data.length;
        int length2 = data.length - 1;
        int seed = 0x9747b28c;
        int expected1 = 0x4d947b28;
        int expected2 = 0x4d947b27;
        int actual1 = MurmurHash2.hash32(data, length1, seed);
        int actual2 = MurmurHash2.hash32(data, length2, seed);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeLength_RiKB5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = -1;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidBytes_WdJy13() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyBytes_azFr5_nVlD1() {
        int result = MurmurHash2.hash32(new String(new byte[0]), 275646681, 275646681);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyData_ZGOo0() {
        long result = MurmurHash2.hash64(new byte[0], 0, 0xe17a1465);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_validData_xSFg2_fid1() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 5, 0xe17a1465);
        assertEquals(0x1234567890abcdefL, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidData_IsXQ3_fid1() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 6, 0xe17a1465);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidSeed_zKiG4() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 5, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength_Zpje5() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 0, 0xe17a1465);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyString_hqBy0_fid1() {
        String text = "";
        int from = 0;
        int length = 0;
        int expected = 0;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleCharacter_MbcN1_fid1() {
        String text = "a";
        int from = 0;
        int length = 1;
        int expected = 97;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_substring_SoPB3_fid1() {
        String text = "abcdef";
        int from = 2;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeFrom_adSP5_fid1() {
        String text = "abc";
        int from = -1;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lengthGreaterThanTextLength_dOiy8_fid1() {
        String text = "abc";
        int from = 0;
        int length = 4;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_uHlv0_fid1() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        int length = data.length;
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ObKv1_fid1() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        int length = data.length;
        int seed = 987654321;
        int expected = 987654321;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EmptyString_lxJH0() {
        String text = "";
        int from = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SingleCharacter_JaUA1() {
        String text = "a";
        int from = 0;
        int length = 1;
        long expected = 97;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NegativeFrom_Embg3_fid1() {
        String text = "abc";
        int from = -1;
        int length = 3;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_InvalidFromAndLength_Evkv11_fid1() {
        String text = "abc";
        int from = -1;
        int length = -1;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyData_UvkE0_fid1() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullData_GYjf4() {
        byte[] data = null;
        int length = 0;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zeroLength_zILH6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 0;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyString_QbeT0() {
        long result = MurmurHash2.hash64("");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleCharacter_mIjX1() {
        long result = MurmurHash2.hash64("a");
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_multipleCharacters_VLAY2() {
        long result = MurmurHash2.hash64("abc");
        assertEquals(294, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_null_gGME3_fid1() {
        long result = MurmurHash2.hash64(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidInput_GXac4() {
        long result = MurmurHash2.hash64("invalid input");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_validInput_qNHm5() {
        long result = MurmurHash2.hash64("valid input");
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_largeInput_gRsv6_fid1() {
        long result = MurmurHash2.hash64("a very long string that is longer than 100 characters");
        assertEquals(123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_specialCharacters_zosw7() {
        long result = MurmurHash2.hash64("!@#$%^&*()_+-=[]{}|;':\"<>,./?");
        assertEquals(123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_unicodeCharacters_LRjq8() {
        long result = MurmurHash2.hash64("");
        assertEquals(123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullBytes_TUws9() {
        long result = MurmurHash2.hash64(null, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyBytes_BuCk10() {
        long result = MurmurHash2.hash64(new byte[0], 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleByte_tByB11() {
        long result = MurmurHash2.hash64(new byte[]{1}, 1);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_multipleBytes_zWJq12() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9);
        assertEquals(123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidBytes_WdJy13_fid1() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, 10);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyString_xNtz0_fid1() {
        int result = MurmurHash2.hash32("");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleCharacter_Mbhw1_fid1() {
        int result = MurmurHash2.hash32("a");
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MultipleCharacters_ZFie2_fid1() {
        int result = MurmurHash2.hash32("abc");
        assertEquals(97 + 98 + 99, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LongString_llhF3_fid1() {
        int result = MurmurHash2.hash32("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
        assertEquals(1234567890, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NullString_BOSA4() {
        int result = MurmurHash2.hash32(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_smrU0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = data.length;
        int seed = 123456789;
        long expected = 1234567890123456789L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_buES1_qnrk0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 123456789;
        long expected = 1234567890123456789L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyBytes_azFr5_nVlD1_fid1() {
        int result = MurmurHash2.hash32(new String(new byte[0]), 0, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleByte_yVMs6_wMTW0() {
        int result = MurmurHash2.hash32(new byte[]{97}, 0, 1);
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleByte_yVMs6_rYgR1() {
        int result = MurmurHash2.hash32(new String(new byte[]{97}), 0, 1);
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MultipleBytes_PfRy7_SNFh0_fid1() {
        int result = MurmurHash2.hash32(new byte[]{97, 98, 99}, 3, 0);
        assertEquals(97 + 98 + 99, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_PbCi2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x4d947b28;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected1, actual1);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentLengths_EkAo3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length1 = data.length;
        int length2 = data.length - 1;
        int seed = 0x9747b28c;
        int expected1 = 0x4d947b28;
        int expected2 = 0x4d947b27;
        int actual1 = MurmurHash2.hash32(data, length1, seed);
        int actual2 = MurmurHash2.hash32(data, length2, seed);
        assertEquals(expected1, actual1);
        assertEquals(expected2, actual2);
    }
}