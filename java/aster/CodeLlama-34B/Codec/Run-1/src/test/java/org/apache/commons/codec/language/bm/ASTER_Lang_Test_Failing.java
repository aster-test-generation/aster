/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Lang_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_EmptyInput_WZwn0_urhr0() {
        Languages languages = Languages.getInstance("en");
        Lang lang = Lang.loadFromResource("languages.txt", languages);
        Languages.LanguageSet ls = lang.guessLanguages("");
        assertEquals(Languages.NO_LANGUAGES, ls);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguage_English_mjnu0_XkWW0() {
        Lang lang = Lang.loadFromResource("languageRulesResourceName", Languages.getInstance("en"));
        String text = "Hello, world!";
        String expected = "en";
        String actual = lang.guessLanguage(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResource_FDZV0_uFDC0() {
        String languageRulesResourceName = "language_rules.txt";
        Languages languages = Languages.getInstance(languageRulesResourceName);
        Lang lang = Lang.loadFromResource(languageRulesResourceName, languages);
        assertNotNull(lang);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResourceWithInvalidLanguage_BuOT2_RrZQ0() {
        String languageRulesResourceName = "language_rules.txt";
        Languages languages = Languages.getInstance(languageRulesResourceName);
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Malformed line"));
        }
    }
}