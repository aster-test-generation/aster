/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUnixSalt_zsMR4() {
        byte[] keyBytes = "password".getBytes();
        String salt = "salt";
        String expectedHash = UnixCrypt.crypt(keyBytes, salt);
        String actualHash = Crypt.crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_EmptyKey_tNkN1() {
        String salt = "salt";
        String result = Crypt.crypt("", salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_NullSalt_SaoS2() {
        String key = "key";
        String result = Crypt.crypt(key, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidKeyAndSalt_aEDm4_1() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidKeyAndSalt_aEDm4_2() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
        assertEquals(result, "sacA7YLUSAodg");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_ValidKeyAndSalt_DifferentSalt_tDxI5_2() {
        String key = "key";
        String salt = "salt";
        String result = Crypt.crypt(key, salt);
    }
}