/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_NullInput_qaGg0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertNull(colognePhonetic.colognePhonetic(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_EmptyInput_UlUD1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("", colognePhonetic.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_GermanInput_ktGX3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_singleCharacterInput_QTiK2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_AEIJOUY_JIfq6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("AEIJOUY"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_BP_kXrM7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("1", colognePhonetic.colognePhonetic("BP"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_FPVW_oMrD9() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("313", colognePhonetic.colognePhonetic("FPVW"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_GKQ_DUkO10() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("4", colognePhonetic.colognePhonetic("GKQ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_X_BiJM11() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("48", colognePhonetic.colognePhonetic("X"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_SZ_PNDW12() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("SZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_C_OrSz13() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("C"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EqualTexts_item0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hello";
        assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentTexts_ppVg1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "World";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_NullText2_cXMJ3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = null;
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EmptyText1_ELro4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "";
        String text2 = "Hello";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EmptyText2_bqtp5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentLengths_hVAH6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hello World";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentCases_vGFZ7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "hello";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentSpecialCharacters_BOVk8() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hllo";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_afUS0() {
        ColognePhonetic cp = new ColognePhonetic();
        String input = "Hello World";
        String expected = "H4LL0 W3RLD";
        String actual = cp.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_llKA0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("");
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyString_Ehui1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("Hello World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_StringWithSpecialCharacters_QOxH2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_StringWithAccentedCharacters_JwFB3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("Hll Wrld");
        assertEquals("53752", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_StringWithNewLine_XKoS5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("Hello\nWorld");
        assertEquals("053752", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_StringWithTab_fldl6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode("Hello\tWorld");
        assertEquals("053752", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_StringWithNull_SaHo7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String actual = colognePhonetic.encode(null);
        assertNull(actual);
    }
}