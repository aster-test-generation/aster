/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonByteArray_qBPv3() throws EncoderException {
        String str = "hello";
        PercentCodec codec = new PercentCodec();
        byte[] encoded = codec.encode(str.getBytes());
        assertEquals(str.getBytes(), encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_alwaysEncodeChars_egbh4() throws EncoderException {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        PercentCodec codec = new PercentCodec(new byte[]{1, 2, 3}, true);
        Object encoded = codec.encode(bytes);
        assertEquals(new byte[]{37, 48, 49, 37, 48, 50, 37, 48, 51, 4, 5}, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withPlusForSpace_mACQ4_Fuxv0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 43, 43, 43};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonAsciiChars_RBUh3_yPxE0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{-128, -64, -1};
        byte[] expected = new byte[]{37, -128, 37, -64, 37, -1};
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlusForSpace_jBsm5_RNwu0() {
        PercentCodec codec = new PercentCodec(new byte[]{32}, true);
        byte[] input = new byte[]{32};
        byte[] expected = new byte[]{43, 43, 43};
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEncoding_fvwj3_HFrh0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] result = codec.encode(bytes);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withSpace_pKjN4_gxfN1() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10};
        try {
            byte[] result = codec.encode(bytes);
            assertEquals(expected.length, result.length);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlusForSpace_jlqF4_CubR1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{' '}, true);
        byte[] input = new byte[]{1, 2, 3, 4, 5, ' '};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, '+'};
        try {
            byte[] result = percentCodec.encode(input);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AlwaysEncodeChars_qiDc5_eCqB0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{'a', 'b', 'c'}, false);
        byte[] input = new byte[]{1, 2, 3, 4, 5, 'a', 'b', 'c'};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 'a', 'b', 'c'};
        byte[] result;
        try {
            result = percentCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
            result = new byte[0];
        }
        assertEquals(expected.length, result.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], result[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEncoding_QYnc3_eSyp0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67, 68, 69};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] actual = null;
        try {
            actual = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withPlusForSpace_CkfV4_ggju0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_FImA0_fid1() throws DecoderException {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        Object output = new PercentCodec().decode(input);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_YFJB1_fid1() throws DecoderException {
        String input = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        Object output = new PercentCodec().decode(input);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonByteArray_HnIK1_fid1() throws EncoderException {
        String str = "hello";
        PercentCodec codec = new PercentCodec();
        Object encoded = codec.encode(str);
        assertEquals(str, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_alwaysEncodeChars_egbh4_fid1() throws EncoderException {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        PercentCodec codec = new PercentCodec(new byte[]{1, 2, 3}, true);
        Object encoded = codec.encode(bytes);
        assertEquals(bytes, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withPlusForSpace_mACQ4_Fuxv0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 43};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_ErRB1_Olxa0_fid1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[0];
        byte[] expectedOutput = new byte[0];
        byte[] actualOutput = percentCodec.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_sjQT2_NnAj0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpaceInInput_KKNJ4_FJaM0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AsciiChars_umCB2_FmYT0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{37, 65, 37, 66, 37, 67};
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AlwaysEncodeChars_LJjX4_WfYs0() {
        PercentCodec codec = new PercentCodec(new byte[]{65, 66, 67}, true);
        byte[] input = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{37, 65, 37, 66, 37, 67};
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlusForSpace_jBsm5_RNwu0_fid1() {
        PercentCodec codec = new PercentCodec(new byte[]{32}, true);
        byte[] input = new byte[]{32};
        byte[] expected = new byte[]{43};
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_space_VTAX4_xKyb0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{32};
        try {
            assertEquals(3, codec.encode(bytes).length);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEncoding_fvwj3_HFrh0_fid1() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] result = codec.encode(bytes);
            assertEquals(expected.length, result.length);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withSpace_pKjN4_gxfN1_fid1() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        try {
            byte[] result = codec.encode(bytes);
            assertEquals(expected.length, result.length);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAlwaysEncodeChars_fIXC5_sRfQ0() {
        PercentCodec codec = new PercentCodec(new byte[]{1, 2, 3, 4, 5}, false);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        try {
            byte[] result = codec.encode(bytes);
            assertEquals(expected.length, result.length);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PlusForSpace_jlqF4_CubR1_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{' '}, true);
        byte[] input = new byte[]{1, 2, 3, 4, 5, ' '};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, '+'};
        try {
            byte[] result = percentCodec.encode(input);
            assertEquals(expected.length, result.length);
            for (int i = 0; i < expected.length; i++) {
                assertEquals(expected[i], result[i]);
            }
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withAlwaysEncodeChars_obOL5_ZITF0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{65, 66, 67}, true);
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyInput_jFby1_aGDy0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[0];
        byte[] expectedOutput = new byte[0];
        try {
            byte[] actualOutput = percentCodec.decode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_sbXR2_KBdv0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expectedOutput = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        try {
            byte[] actualOutput = percentCodec.decode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (DecoderException e) {
            fail("Unexpected exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_mbHn3_JXfW0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91};
        byte[] expectedOutput = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] actualOutput = null;
        try {
            actualOutput = percentCodec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expectedOutput, actualOutput);
    }
}