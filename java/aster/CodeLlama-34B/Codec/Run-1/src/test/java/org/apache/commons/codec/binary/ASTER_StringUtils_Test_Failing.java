/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_ycpK0_1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{65, 66, 67};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3, -4};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-17, -65, -67};
        result = StringUtils.newStringUtf8(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_ycpK0_2() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{65, 66, 67};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3, -4};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-17, -65, -67};
        result = StringUtils.newStringUtf8(bytes);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_ycpK0_3() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{65, 66, 67};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-1, -2, -3, -4};
        result = StringUtils.newStringUtf8(bytes);
        bytes = new byte[]{-17, -65, -67};
        result = StringUtils.newStringUtf8(bytes);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_GSGA0_1() {
        String string = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUtf16(string);
        string = "";
        expected = new byte[0];
        actual = StringUtils.getBytesUtf16(string);
        string = "hello";
        expected = new byte[]{0x68, 0x65, 0x6c, 0x6c, 0x6f};
        actual = StringUtils.getBytesUtf16(string);
        string = "";
        expected = new byte[]{0x30, 0x68, 0x30, 0x6f, 0x30, 0x6b, 0x30, 0x61, 0x30, 0x6f};
        actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_fUwD0_1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUtf16Le(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_fUwD0_2() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_fUwD0_3() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUtf16Le(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_AHSJ0_1() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16(bytes);
        bytes = "hello".getBytes(StandardCharsets.UTF_16);
        result = StringUtils.newStringUtf16(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_AHSJ0_2() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16(bytes);
        bytes = "hello".getBytes(StandardCharsets.UTF_16);
        result = StringUtils.newStringUtf16(bytes);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_validBytes_wXmM2() {
        byte[] bytes = new byte[]{1, 2, 3};
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_validString_urgs1() {
        String string = "hello";
        String charsetName = "UTF-8";
        byte[] expected = new byte[]{104, 101, 108, 108, 111};
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_invalidCharsetName_oPiD2() {
        String string = "hello";
        String charsetName = "invalid";
        try {
            StringUtils.getBytesUnchecked(string, charsetName);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
            assertEquals("invalid: java.nio.charset.UnsupportedCharsetException: invalid", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_rcxH0_1() {
        String string = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUtf8(string);
        string = "";
        expected = new byte[0];
        actual = StringUtils.getBytesUtf8(string);
        string = "hello";
        expected = new byte[]{104, 101, 108, 108, 111};
        actual = StringUtils.getBytesUtf8(string);
        string = "";
        expected = new byte[]{-29, -127, -96, -29, -126, -109, -29, -127, -96, -29, -126, -109};
        actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_FBMn0() {
        byte[] bytes = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expected = "000102030405060708090A0B0C0D0E0F";
        String actual = StringUtils.newStringUtf16Be(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_OwEY1_pqQN0_1() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16LE;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUsAscii(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_OwEY1_pqQN0_2() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16LE;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUsAscii(bytes);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_OwEY1_pqQN0_3() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16LE;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUsAscii(bytes);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_yqJE1_rVeM0_1() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = "hello".getBytes(StandardCharsets.UTF_16);
        result = StringUtils.newStringUsAscii(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_yqJE1_rVeM0_2() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = "hello".getBytes(StandardCharsets.UTF_16);
        result = StringUtils.newStringUsAscii(bytes);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewString_yqJE1_rVeM0_3() {
        byte[] bytes = null;
        Charset charset = StandardCharsets.UTF_16;
        String result = StringUtils.newStringUsAscii(bytes);
        bytes = new byte[0];
        result = StringUtils.newStringUsAscii(bytes);
        bytes = "hello".getBytes(StandardCharsets.UTF_16);
        result = StringUtils.newStringUsAscii(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_ycpK0() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf8(bytes);
        assertNull(result);
        bytes = new byte[0];
        result = StringUtils.newStringUtf8(bytes);
        assertEquals("", result);
        bytes = new byte[]{65, 66, 67};
        result = StringUtils.newStringUtf8(bytes);
        assertEquals("ABC", result);
        bytes = new byte[]{-1, -2, -3};
        result = StringUtils.newStringUtf8(bytes);
        assertNotEquals("ABC", result);
        bytes = new byte[]{-1, -2, -3, -4};
        result = StringUtils.newStringUtf8(bytes);
        assertNotEquals("ABC", result);
        bytes = new byte[]{-17, -65, -67};
        result = StringUtils.newStringUtf8(bytes);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_GSGA0() {
        String string = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
        string = "";
        expected = new byte[0];
        actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
        string = "hello";
        expected = new byte[]{0x68, 0x65, 0x6c, 0x6c, 0x6f};
        actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
        string = "";
        expected = new byte[]{0x30, 0x68, 0x30, 0x6f, 0x30, 0x6b, 0x30, 0x61, 0x30, 0x6f};
        actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_fUwD0() {
        byte[] bytes = null;
        String result = StringUtils.newStringUtf16Le(bytes);
        assertNull(result);
        bytes = new byte[0];
        result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("", result);
        bytes = new byte[]{0x61, 0x62, 0x63};
        result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("abc", result);
        bytes = new byte[]{0x61, 0x62, 0x63, 0x00};
        result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_rcxH0() {
        String string = null;
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
        string = "";
        expected = new byte[0];
        actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
        string = "hello";
        expected = new byte[]{104, 101, 108, 108, 111};
        actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
        string = "";
        expected = new byte[]{-29, -127, -96, -29, -126, -109, -29, -127, -96, -29, -126, -109};
        actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }
}