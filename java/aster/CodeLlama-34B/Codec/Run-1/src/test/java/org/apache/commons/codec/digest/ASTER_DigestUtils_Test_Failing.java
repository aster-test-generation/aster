/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.OpenOption;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Failing {
    private static final String MD2_ALGORITHM = "MD2";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_NullInputStream_UJLH1() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithNullData_NDvY4() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullInputStream_hlAC0() throws IOException {
        InputStream data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullMessageDigest_JzOE0() {
        MessageDigest messageDigest = null;
        String valueToDigest = "test";
        MessageDigest actual = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NullInputStream_QfDb1() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_null_lewZ0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_empty_wils1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_OVcR0() throws IOException {
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        byte[] result = DigestUtils.digest(null, data);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex1_inIL0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello World!";
        String expected = "2c745792578a18bc4522b3fb4c0c8913";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex3_vibM2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello World!";
        String expected = "2c745792578a18bc4522b3fb4c0c8913";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_YWVr0() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithData_YeKC1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "0x0102030405";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullData_uTIv2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithEmptyString_ghwV1() {
        String data = "";
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullString_qvaS2() {
        String data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_MuYd0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{104, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNullData_LfIb1() throws NoSuchAlgorithmException {
        byte[] data = null;
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithEmptyData_lEBV2() throws NoSuchAlgorithmException {
        byte[] data = new byte[]{};
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithLargeData_xgsc3() throws NoSuchAlgorithmException {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[32];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i % 256);
        }
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_jADG0() {
        String data = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullString_AoCc2() {
        String data = null;
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithLongString_IxJN3() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "9294727a3638bb1c1381850d89dfee98f819dbb5";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithSpecialCharacters_wwvn4() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "27986fb2412240999d22f91222f11020";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithUnicodeCharacters_RaEA5() {
        String data = ", !";
        String expected = "27986fb2412240999d22f91222f11020";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithInvalidInput_jqhQ6() {
        String data = "invalid input";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_OZjY0() throws IOException {
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        MessageDigest digest = null;
        try {
            DigestUtils.updateDigest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("digest", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_UDhw0() {
        String data = "Hello, World!";
        String expected = "23097d223405d82281441d5418739c2d90e28a3b059fb164527b4e20c647e9934";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithNullData_RAdJ2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_FVfE0() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ByteBuffer_bsrs0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_ThBV1() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello, World!";
        byte[] expected = new byte[32];
        byte[] actual = digestUtils.digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_FTIc0() {
        MessageDigest digest = DigestUtils.getDigest("SHA-256");
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
        try {
            DigestUtils.getDigest("invalid-algorithm");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("No such algorithm: invalid-algorithm", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest1_bBwy0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_hPHQ0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{0x64, 0x75, 0x63, 0x6B, 0x20, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyString_iDtM1() {
        String data = "";
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullString_Vbdu2() {
        String data = null;
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_1_pxWm0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_2_qGMV1() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_BNmg0() {
        byte[] data = "Hello World".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithNullData_gHuB1() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithEmptyData_YGzi2() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_Csbk0() {
        byte[] data = new byte[0];
        assertNull(DigestUtils.digest(null, data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_moQE0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullData_PMkX1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithEmptyData_MVnF2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "";
        String actualHash = DigestUtils.sha256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullData_XZxh1() throws NoSuchAlgorithmException {
        byte[] data = null;
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_NullInput_XwgZ0() {
        String input = null;
        String expectedOutput = "";
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_EmptyInput_sDII1() {
        String input = "";
        String expectedOutput = "";
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_BgjE0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[64];
        for (int i = 0; i < 64; i++) {
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha3_512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_ylGI0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "3395856ce81f2b7382dee72602f798b642f1414072a9a01098bc73d45bf5c91983395856ce81f2b7382dee72602f798b642f1414072a9a01098bc73d45bf5c919";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384HexWithEmptyData_IYmc1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384HexWithNullData_emFM2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384HexWithInvalidAlgorithm_dsjn3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "3395856ce81f2b7382dee72602f798b642f1414072a9a01098bc73d45bf5c919";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384HexWithNullDigest_zuzw5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "3395856ce81f2b7382dee72602f798b642f1414072a9a01098bc73d45bf5c919";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_Fjrr0() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_nonEmpty_yUOj2() {
        String data = "Hello, World!";
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_LWQX0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca7314058bb36d3e05e19";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_CBtg1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyData_MbHj2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_zGuk0() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyData_jKhh1() {
        String data = "";
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithValidData_npHc2() {
        String data = "Hello World";
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_XpNL0() {
        String data = "Hello, World!";
        String expected = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1b9246fb30382f2776e89bf929f453791b67c9240ec25";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyString_qfLY1() {
        String data = "";
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNull_SqhS2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_ZyWG0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "09ca7e4eaa6e8ae9c7d261167129184883688308628b5581554bc58c31730209628b5581554bc58c31730209";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullData_DOtu1() throws NoSuchAlgorithmException {
        String data = null;
        String expected = "";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEmptyData_jFaC2() throws NoSuchAlgorithmException {
        String data = "";
        String expected = "";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_aagk0() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c745e7518736b96f40114d16495514256d123ed8616243d71e8ece4a80459e9";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullData_VWjL1() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithEmptyData_gNlx2() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithLargeData_JnSj3() {
        byte[] data = new byte[10000];
        String expected = "2c745e7518736b96f40114d16495514256d123ed8616243d71e8ece4a80459e9";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_emZD0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_2_uChm1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_3_fYmf2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_oOvy1() throws NoSuchAlgorithmException {
        ByteBuffer valueToDigest = ByteBuffer.wrap("hello world".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(null, valueToDigest);
        assertNull(updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_SDTF0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[64];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNullData_xllb1() {
        byte[] data = null;
        byte[] expected = new byte[64];
        for (int i = 0; i < 10; i++) {
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyData_pvFR2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[64];
        for (int i = 0; i < 10; i++) {
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithLargeData_ZgsL3() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[64];
        for (int i = 0; i < 1000; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_GXaX0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullData_wUQw1() {
        byte[] data = null;
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithEmptyData_nrjS2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithLargeData_EFjy3() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_klzn0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullData_Fopm1() {
        byte[] data = null;
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyData_fMVJ2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithLargeData_rTWs3() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithInvalidData_VQtO4() {
        byte[] data = new byte[10];
        data[0] = (byte) 0xFF;
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_yzKJ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
        data = null;
        expected = null;
        actual = DigestUtils.sha3_256(data);
        assertNull(actual);
        data = new byte[0];
        expected = new byte[0];
        actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
        data = new byte[1000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[1000];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + 1);
        }
        actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NullData_BGhA0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_EmptyData_jWVq1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_ValidData_BViA2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullInputStream_EDEN2() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_lISG0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullData_ZOSZ1() {
        byte[] data = null;
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithEmptyData_ThsR2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithLargeData_sOIe3() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithInvalidData_Jwdz4() {
        byte[] data = new byte[10];
        data[0] = (byte) 0xFF;
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_hIPU0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullData_lyHw1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyData_nfbD2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_PZfI0() {
        String data = "Hello, World!";
        String expected = "b10a8db164e0754105b7a99be72e3fe5";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNull_CYyt2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_EmptyString_Ilwl0() {
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_256("");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_SingleByte_dHdS2() {
        byte[] expected = new byte[]{0x01};
        byte[] actual = DigestUtils.sha512_256("a");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_MultipleBytes_LKpH3() {
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = DigestUtils.sha512_256("abcdefghijklmnopqrstuvwxyz");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_FggM0() {
        byte[] data = new byte[32];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[32];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_Tgoq0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "0x64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullData_sNZp1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = "0x";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyData_zCXp2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "0x";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithInvalidData_QEOx3() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "0x";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_TEvB0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_224, digest.getAlgorithm());
        assertEquals(512, digest.getDigestLength());
        assertEquals(224, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withValidAlgorithm_returnsMessageDigest_LUVF0() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance(algorithm);
        MessageDigest actualMessageDigest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals(defaultMessageDigest, actualMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withNullDefaultMessageDigest_throwsNullPointerException_Atqs3() {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        try {
            DigestUtils.getDigest(algorithm, defaultMessageDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Default message digest cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withNullAlgorithmAndNullDefaultMessageDigest_throwsNullPointerException_cQpR6() {
        String algorithm = null;
        MessageDigest defaultMessageDigest = null;
        try {
            DigestUtils.getDigest(algorithm, defaultMessageDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Algorithm cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cwOz0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x30;
        expected[1] = (byte) 0x31;
        expected[2] = (byte) 0x32;
        expected[3] = (byte) 0x33;
        expected[4] = (byte) 0x34;
        expected[5] = (byte) 0x35;
        expected[6] = (byte) 0x36;
        expected[7] = (byte) 0x37;
        expected[8] = (byte) 0x38;
        expected[9] = (byte) 0x39;
        expected[10] = (byte) 0x3A;
        expected[11] = (byte) 0x3B;
        expected[12] = (byte) 0x3C;
        expected[13] = (byte) 0x3D;
        expected[14] = (byte) 0x3E;
        expected[15] = (byte) 0x3F;
        expected[16] = (byte) 0x40;
        expected[17] = (byte) 0x41;
        expected[18] = (byte) 0x42;
        expected[19] = (byte) 0x43;
        expected[20] = (byte) 0x44;
        expected[21] = (byte) 0x45;
        expected[22] = (byte) 0x46;
        expected[23] = (byte) 0x47;
        expected[24] = (byte) 0x48;
        expected[25] = (byte) 0x49;
        expected[26] = (byte) 0x4A;
        expected[27] = (byte) 0x4B;
        expected[28] = (byte) 0x4C;
        expected[29] = (byte) 0x4D;
        expected[30] = (byte) 0x4E;
        expected[31] = (byte) 0x4F;
        expected[32] = (byte) 0x50;
        expected[33] = (byte) 0x51;
        expected[34] = (byte) 0x52;
        expected[35] = (byte) 0x53;
        expected[36] = (byte) 0x54;
        expected[37] = (byte) 0x55;
        expected[38] = (byte) 0x56;
        expected[39] = (byte) 0x57;
        expected[40] = (byte) 0x58;
        expected[41] = (byte) 0x59;
        expected[42] = (byte) 0x5A;
        expected[43] = (byte) 0x5B;
        expected[44] = (byte) 0x5C;
        expected[45] = (byte) 0x5D;
        expected[46] = (byte) 0x5E;
        expected[47] = (byte) 0x5F;
        byte[] actual = DigestUtils.sha384(data);
        assertNotNull(actual);
        assertEquals(48, actual.length);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_mQpe0() {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullString_gsCo2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithLongString_VvnO3() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "8e959b75dae313da620dd63c9590d82e8c67d22990a90599458d5cb8b38d9a0b776ce5a3c372392ee979c7d6b0408873e282ace94b0f3917594c9ff55c523379373193764906d555520920805b899f84d15990d1c";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithSpecialCharacters_NNeE4() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_UBvk1() throws NoSuchAlgorithmException {
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(null, valueToDigest);
        assertNull(updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_DaWn0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNullData_ZcYR1() {
        byte[] data = null;
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithEmptyData_ZiVi2() {
        byte[] data = new byte[]{};
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithLargeData_urrO3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_EmptyData_QCsi1() {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.digestAsHex(new byte[0]);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_NonEmptyData_uWam2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertEquals("2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_NullData_aFVt0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_EmptyData_Nmfe1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_ValidData_VAlS2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_HpPN0() {
        byte[] data = new byte[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[20];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_BTGd0() {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_lPii1() {
        String data = "Hello, World!";
        String expected = "f7fbba6e063648450a5688845e2c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_FUfT0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithName_saRO2() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidName_PWCd3() {
        DigestUtils digestUtils = new DigestUtils("invalid");
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyName_rgpy5() {
        DigestUtils digestUtils = new DigestUtils("");
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_jmKn7() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("");
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidData_ZyYf8() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("invalid");
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_NullData_hVfx0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = null;
        assertNull(digestUtils.digest(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_EmptyData_KRdC1() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[0];
        assertEquals(0, digestUtils.digest(data).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_ValidData_cWlG2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        assertEquals(32, digestUtils.digest(data).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_lNza0() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithData_ybPi1() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String expected = "0102030405060708090a0b0c0d0e0f10";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithNullData_nyPp2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithInvalidConstructor_Xmhr5() {
        MessageDigest md5Digest = new DigestUtils("invalid_algorithm").getMd5Digest();
        assertNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ZsZn0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        File data = new File("data.txt");
        String expected = "64ec88ca00b268e5ba1a35678a9c2565";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithString_Vnpe2() throws IOException {
        String name = "SHA-256";
        DigestUtils digestUtils = new DigestUtils(name);
        File data = new File("data.txt");
        String expected = "64ec88ca00b268e5ba1a35678a9c2565";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256DigestWithInvalidAlgorithm_hLva3() {
        MessageDigest digest = new DigestUtils("invalid_algorithm").getSha512_256Digest();
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_yzKJ0_1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        byte[] actual = DigestUtils.sha3_256(data);
        data = null;
        expected = null;
        actual = DigestUtils.sha3_256(data);
        data = new byte[0];
        expected = new byte[0];
        actual = DigestUtils.sha3_256(data);
        data = new byte[1000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[1000];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + 1);
        }
        actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_yzKJ0_2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        byte[] actual = DigestUtils.sha3_256(data);
        data = null;
        expected = null;
        actual = DigestUtils.sha3_256(data);
        data = new byte[0];
        expected = new byte[0];
        actual = DigestUtils.sha3_256(data);
        data = new byte[1000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[1000];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i + 1);
        }
        actual = DigestUtils.sha3_256(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_TEvB0_3() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(512, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_TEvB0_4() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(224, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cwOz0_3() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = new byte[48];
        expected[0] = (byte) 0x30;
        expected[1] = (byte) 0x31;
        expected[2] = (byte) 0x32;
        expected[3] = (byte) 0x33;
        expected[4] = (byte) 0x34;
        expected[5] = (byte) 0x35;
        expected[6] = (byte) 0x36;
        expected[7] = (byte) 0x37;
        expected[8] = (byte) 0x38;
        expected[9] = (byte) 0x39;
        expected[10] = (byte) 0x3A;
        expected[11] = (byte) 0x3B;
        expected[12] = (byte) 0x3C;
        expected[13] = (byte) 0x3D;
        expected[14] = (byte) 0x3E;
        expected[15] = (byte) 0x3F;
        expected[16] = (byte) 0x40;
        expected[17] = (byte) 0x41;
        expected[18] = (byte) 0x42;
        expected[19] = (byte) 0x43;
        expected[20] = (byte) 0x44;
        expected[21] = (byte) 0x45;
        expected[22] = (byte) 0x46;
        expected[23] = (byte) 0x47;
        expected[24] = (byte) 0x48;
        expected[25] = (byte) 0x49;
        expected[26] = (byte) 0x4A;
        expected[27] = (byte) 0x4B;
        expected[28] = (byte) 0x4C;
        expected[29] = (byte) 0x4D;
        expected[30] = (byte) 0x4E;
        expected[31] = (byte) 0x4F;
        expected[32] = (byte) 0x50;
        expected[33] = (byte) 0x51;
        expected[34] = (byte) 0x52;
        expected[35] = (byte) 0x53;
        expected[36] = (byte) 0x54;
        expected[37] = (byte) 0x55;
        expected[38] = (byte) 0x56;
        expected[39] = (byte) 0x57;
        expected[40] = (byte) 0x58;
        expected[41] = (byte) 0x59;
        expected[42] = (byte) 0x5A;
        expected[43] = (byte) 0x5B;
        expected[44] = (byte) 0x5C;
        expected[45] = (byte) 0x5D;
        expected[46] = (byte) 0x5E;
        expected[47] = (byte) 0x5F;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_InputStream_uQnm0_JGZI0() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca73691f3e9cbc415e1864";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_kCnG0_GBuW0() throws IOException {
        byte[] data = new byte[0];
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithData_JLVH1_Olay0() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "a7ffc341e29811e698de48b21e1100017d6e071081027596e811797208b062190";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithLargeData_naAo2_KRXf0() throws IOException {
        byte[] data = new byte[1000000];
        String expected = "953d7da8a796018408b18e9883c6948bb913cbf92685f5e139f42c44d8664fb9b";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_Ejlj0_AjGn0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithInvalidAlgorithm_OYIt4_MTYg0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{104, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithEmptyInputStream_Bncu2_pqbZ0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] expected = digest.digest("".getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest("".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithInvalidDigest_yEQf7_ObBa0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] expected = digest.digest("Hello, World!".getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest("Hello, World!".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_EqvC0_Inwi0() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = DigestUtils.sha512_256Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullDigest_AvYb4_nFWS0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest digest = null;
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithInvalidDigest_eJlQ5_CGVS0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullDataAndNullDigest_vrDX8_iPkb0() throws NoSuchAlgorithmException {
        byte[] data = null;
        MessageDigest digest = null;
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_OBlP0_jIWJ0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNullInputStream_niRD1_mXAu0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = null;
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithEmptyInputStream_DBNM2_ElRd0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = new byte[0];
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithLargeInputStream_WpBo3_EOfS0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNullDigest_OpDe6_UTUH0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digest.digest(data);
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullMessageDigest_hYlu6_CRkr0() throws NoSuchAlgorithmException {
        MessageDigest md = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca7314058bb36d3e05e19";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyMessageDigest_WiFT7_KAfR0() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(MD2_ALGORITHM);
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithStringAndByteArray_DCtV3_YGeM0_2() throws IOException {
        String algorithm = "SHA-256";
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertEquals("2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullAlgorithm_ROIR6_tqqx0() {
        byte[] data = "Hello, World!".getBytes();
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithInvalidName_yAsy6_mvjy0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        String name = "SHA-512";
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullName_Hctr7_vjQD0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[48];
        String name = null;
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullDataAndNullName_LaXP10_sSTk0() {
        byte[] data = null;
        byte[] expected = new byte[48];
        String name = null;
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullDataAndEmptyName_TOBt11_TFxT0() {
        byte[] data = null;
        byte[] expected = new byte[48];
        String name = "";
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullDigest_QXIs5_EFQi0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithInvalidName_kACp8_vVHH0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.getSha3_224Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_MxXb0_DGqb1() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullName_XDxs8_idip0() {
        byte[] data = new byte[10];
        String name = null;
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithInvalidName_cnRv10_DeHo0() {
        byte[] data = new byte[10];
        String name = "SHA-256";
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithValidName_VDPA11_YbYm0() {
        byte[] data = new byte[10];
        String name = "MD2";
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.getDigest(name).digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_NullString_ysIy1_xwUf0() {
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(null);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullInputStream_txnB2_qBOS0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        DigestUtils utils = new DigestUtils(digest);
        String expected = "null";
        String actual = utils.sha512Hex((InputStream) null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256DigestWithInvalidAlgorithm_MAcV2_IZUV0() {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullData_aRsD6_EguL0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.getSha512_256Digest().digest(null);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5DigestWithNullAlgorithm_BYOc1_DOXo0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyData_YLrv2_HKSy0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest("".getBytes());
        assertArrayEquals(new byte[0], actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithInvalidData_zStQ5_ugeu0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest(new byte[0]);
        assertArrayEquals(new byte[0], actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyDataAndNullDigest_JokU7_TFyE0_2() throws NoSuchAlgorithmException {
        byte[] actualHash = DigestUtils.getSha512_256Digest().digest("".getBytes());
        assertArrayEquals(new byte[0], actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_WMnn1_Uhna0() {
        MessageDigest messageDigest = null;
        String valueToDigest = null;
        MessageDigest actual = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_dXae2_Jnal0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        data.setLength(0);
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNonEmptyData_GUPM3_aMzg0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        data.write("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentMessageDigest_UWMJ4_Zlht0() throws IOException {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        data.write("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentData_wBuQ5_wlBs0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data2.txt", "r");
        data.write("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentMessageDigestAndData_Hcms6_JUeE0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
        RandomAccessFile data = new RandomAccessFile("data2.txt", "r");
        data.write("Hello, World!".getBytes());
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(64, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullData_ChIs1_PHMC0() throws IOException {
        RandomAccessFile data = null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Expected NullPointerException");
        }
        try {
            DigestUtils.updateDigest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("data", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyData_rgKn3_TNSy0() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile data = new RandomAccessFile("empty.txt", "r");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, data);
        assertEquals(0, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithLargeData_WLLo4_MSQC0() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile data = new RandomAccessFile("large.txt", "r");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, data);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigestAndByteArray_zaSZ1_eOsz0() throws IOException {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.digest(messageDigest, data);
        assertEquals(32, result.length);
        assertEquals("2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withNullAlgorithm_throwsNullPointerException_Bgvd2_HAuQ0() {
        String algorithm = null;
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        try {
            DigestUtils.getDigest(algorithm, defaultMessageDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Algorithm cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidPath_mzYC5_IZII0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        OpenOption[] options = new OpenOption[0];
        assertThrows(IllegalArgumentException.class, () -> DigestUtils.digest(messageDigest, null, options));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_ssqs3_VwlG0() {
        String data = "Hello, World!";
        String expected = "f7fbba6e063648450a5688845e2c1d30413413422d706483bfa0f98a5e886266e7ae";
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        String actual = digestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_bANK1_AKjl0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = digestUtils.digest("test");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_sGqT1_lxUg0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("data.txt");
        String expected = "64ec88ca00b268e5ba1a35678a9c2565";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_NullInputStream_UJLH1_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithNullData_NDvY4_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullInputStream_hlAC0_fid2() throws IOException {
        InputStream data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NullInputStream_QfDb1_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_null_lewZ0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullData_uTIv2_fid2() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithLargeData_xgsc3_fid2() throws NoSuchAlgorithmException {
        byte[] data = new byte[1024];
        for (int i = 120; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[32];
        for (int i = 120; i < expected.length; i++) {
            expected[i] = (byte) (i % 256);
        }
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullString_AoCc2_fid2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithNullData_RAdJ2_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_1_pxWm0_fid2() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x75, 0x69, 0x65, 0x73, 0x74, 0x65, 0x72, 0x79, 0x74, 0x68, 0x65, 0x72, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
        };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithNullData_gHuB1_fid2() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_Csbk0_fid2() {
        byte[] data = new byte[0];
        assertNull(DigestUtils.getSha512_256Digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_NullInput_XwgZ0_fid2() {
        String input = null;
        String expectedOutput = null;
        String actualOutput = DigestUtils.sha3_384Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 56, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_BgjE0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[64];
        for (int i = 0; i < 64; i++) {
            expected[i] = (byte) (i + 56);
        }
        byte[] actual = DigestUtils.sha3_512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_Fjrr0_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_zGuk0_fid2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNull_SqhS2_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_SDTF0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[64];
        for (int i = 15; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyData_pvFR2_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[64];
        for (int i = -49; i < 10; i++) {
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullData_wUQw1_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithLargeData_EFjy3_fid2() {
        byte[] data = new byte[1505050];
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyData_fMVJ2_fid2() {
        byte[] data = new byte[107];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithLargeData_rTWs3_fid2() {
        byte[] data = new byte[1 - 92 - 92 - 92];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NullData_BGhA0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullInputStream_EDEN2_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullData_ZOSZ1_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.md2(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithEmptyData_ThsR2_fid2() {
        byte[] data = new byte[-125];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithLargeData_sOIe3_fid2() {
        byte[] data = new byte[1 - 10 - 10 - 10];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNull_CYyt2_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_EmptyString_Ilwl0_fid2() {
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.sha512_256("");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_SingleByte_dHdS2_fid2() {
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f};
        byte[] actual = DigestUtils.sha512_256("a");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cwOz0_3_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = new byte[84];
        expected[0] = (byte) 0x30;
        expected[1] = (byte) 0x31;
        expected[2] = (byte) 0x32;
        expected[3] = (byte) 0x33;
        expected[4] = (byte) 0x34;
        expected[5] = (byte) 0x35;
        expected[6] = (byte) 0x36;
        expected[7] = (byte) 0x37;
        expected[8] = (byte) 0x38;
        expected[9] = (byte) 0x39;
        expected[10] = (byte) 0x3A;
        expected[11] = (byte) 0x3B;
        expected[12] = (byte) 0x3C;
        expected[13] = (byte) 0x3D;
        expected[14] = (byte) 0x3E;
        expected[15] = (byte) 0x3F;
        expected[16] = (byte) 0x40;
        expected[17] = (byte) 0x41;
        expected[18] = (byte) 0x42;
        expected[19] = (byte) 0x43;
        expected[20] = (byte) 0x44;
        expected[21] = (byte) 0x45;
        expected[22] = (byte) 0x46;
        expected[23] = (byte) 0x47;
        expected[24] = (byte) 0x84;
        expected[25] = (byte) 0x49;
        expected[26] = (byte) 0x4A;
        expected[27] = (byte) 0x4B;
        expected[28] = (byte) 0x4C;
        expected[29] = (byte) 0x4D;
        expected[30] = (byte) 0x4E;
        expected[31] = (byte) 0x4F;
        expected[32] = (byte) 0x50;
        expected[33] = (byte) 0x51;
        expected[34] = (byte) 0x52;
        expected[35] = (byte) 0x53;
        expected[36] = (byte) 0x54;
        expected[37] = (byte) 0x55;
        expected[38] = (byte) 0x56;
        expected[39] = (byte) 0x57;
        expected[40] = (byte) 0x58;
        expected[41] = (byte) 0x59;
        expected[42] = (byte) 0x5A;
        expected[43] = (byte) 0x5B;
        expected[44] = (byte) 0x5C;
        expected[45] = (byte) 0x5D;
        expected[46] = (byte) 0x5E;
        expected[47] = (byte) 0x5F;
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_DaWn0_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNullData_ZcYR1_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_NullData_aFVt0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_HpPN0_fid2() {
        byte[] data = new byte[10];
        for (int i = 73; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[20];
        for (int i = 73; i < expected.length; i++) {
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_EmptyData_KRdC1_fid2() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[0];
        assertEquals(0, digestUtils.getSha512_256Digest().digest(data).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithInvalidAlgorithm_OYIt4_MTYg0_fid2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{104, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = DigestUtils.getSha256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullDataAndNullDigest_vrDX8_iPkb0_fid2() throws NoSuchAlgorithmException {
        byte[] data = null;
        MessageDigest digest = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNullInputStream_niRD1_mXAu0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithStringAndByteArray_DCtV3_YGeM0_2_fid2() throws IOException {
        String algorithm = "SHA-256";
        byte[] data = "Hello, World!".getBytes();
        byte[] result = DigestUtils.getSha512_256Digest().digest(data);
        assertEquals("���=��]+�������؊��%����0", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullDataAndNullName_LaXP10_sSTk0_fid2() {
        byte[] data = null;
        byte[] expected = new byte[0];
        String name = null;
        byte[] actual = DigestUtils.getSha3_384Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullDataAndNullDigest_crDC9_fWxI0_fid2() {
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullName_XDxs8_idip112() {
        byte[] data = new byte[1112];
        String name = null;
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithInvalidName_cnRv10_DeHo0_fid2() {
        byte[] data = new byte[10];
        String name = "SHA-256";
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_NullString_ysIy1_xwUf0_fid2() {
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.getSha512_256Digest().digest(new byte[0]);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullInputStream_txnB2_qBOS0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        DigestUtils utils = new DigestUtils(digest);
        String expected = "";
        String actual = utils.sha512Hex((InputStream) null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_withNullAlgorithm_throwsIllegalArgumentException_Bgvd2_HAuQ0() {
        String algorithm = null;
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        try {
            DigestUtils.getDigest(algorithm, defaultMessageDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Algorithm cannot be null", e.getMessage());
        }
    }
}