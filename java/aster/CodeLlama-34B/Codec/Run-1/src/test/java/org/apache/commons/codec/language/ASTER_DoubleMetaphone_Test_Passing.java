/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Test_Passing {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_OAVh0() {
        doubleMetaphone = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EqualValues_rauG1() {
        String value1 = "hello";
        String value2 = "hello";
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentValues_usYI2() {
        String value1 = "hello";
        String value2 = "world";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EmptyValues_FcZY4() {
        String value1 = "";
        String value2 = "";
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentLengths_QNps5() {
        String value1 = "hello";
        String value2 = "hello world";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentCases_RcYX6() {
        String value1 = "hello";
        String value2 = "Hello";
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentPunctuation_Mvjj10() {
        String value1 = "hello";
        String value2 = "hello, world";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EqualValues_dJdI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = "hello";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentValues_lZKg1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = "world";
        boolean alternate = false;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValue1_lkmI2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = null;
        String value2 = "hello";
        boolean alternate = false;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValue2_wqWb3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = null;
        boolean alternate = false;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_AlternateTrue_RsrB4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = "world";
        boolean alternate = true;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EmptyString_mnAB6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "";
        String value2 = "";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentCases_wMCI8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = "Hello";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_ValidIndex_qriM0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = 2;
        char expected = 'l';
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_InvalidIndex_kiBq1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = -1;
        char expected = Character.MIN_VALUE;
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_EmptyString_WZwn2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "";
        int index = 0;
        char expected = Character.MIN_VALUE;
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_qpXP0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "hello";
        String expected = "HL";
        String actual = doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_sgvA1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object input = new Object();
        try {
            doubleMetaphone.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NullString_XfDH1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SingleCharacter_lHIy2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_XctD7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_pwUw8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("b", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_TNDN9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("c", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_Ezas10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("d", false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_fMol11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("f", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_FmpF12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("g", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_MYuZ14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("j", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_gNTl3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_HHQx4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("B", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_uuSA5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_Nema6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("D", false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_fxfQ7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("F", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_FfEg8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("G", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_nrbr10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("J", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_NiqH11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("K", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_ABQK12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("L", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_QiqZ13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("M", false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_ccRA14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("N", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_UEcT2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Mac", false);
        assertEquals("MK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_iNPE15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("P", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nullString_fGpY1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_silentStart_hAxt2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullValue_UqTg1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = true;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_yIks3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Mac";
        boolean alternate = true;
        String expected = "MK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_nmyz4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_zyrP10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = true;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphonePrimaryAndAlternate_CSnJ0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphonePrimaryAndAlternate_CSnJ0_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneA_wFQR2_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expectedPrimary = "A";
        String expectedAlternate = "A";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneA_wFQR2_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expectedPrimary = "A";
        String expectedAlternate = "A";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyString_eGBH0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals(null, doubleMetaphone.doubleMetaphone("", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NullString_LGda1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals(null, doubleMetaphone.doubleMetaphone(null, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_dBFF2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("TK", doubleMetaphone.doubleMetaphone("DG", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_mXdw4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("P", doubleMetaphone.doubleMetaphone("B", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_BcLk5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("C", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_WYfl7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("F", doubleMetaphone.doubleMetaphone("F", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_yknm8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("G", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_saDc10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("J", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_AEPN11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("K", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_cgyw12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("L", doubleMetaphone.doubleMetaphone("L", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_cQAf13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("M", doubleMetaphone.doubleMetaphone("M", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_cWsq14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("N", doubleMetaphone.doubleMetaphone("N", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_eXRe15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("P", doubleMetaphone.doubleMetaphone("P", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Q_gFxZ16() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("Q", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DGoD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_woJp1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullString_ufhs3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = false;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_ToIA11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAEIOUY_JjdR3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Able", false);
        assertEquals("APL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_OFfb6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Dog", false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_xlSY7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Fox", false);
        assertEquals("FKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_yEQs8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Ghost", false);
        assertEquals("KST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_aCqU9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("House", false);
        assertEquals("HS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_svce10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Jump", false);
        assertEquals("JMP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithK_vwsX11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Kite", false);
        assertEquals("KT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_ipXW12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Lion", false);
        assertEquals("LN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithM_zNOJ13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Moon", false);
        assertEquals("MN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithN_Tkqq14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Nest", false);
        assertEquals("NST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_PdZt2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("the", false);
        assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NullInput_Fixg0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertNull(doubleMetaphone.doubleMetaphone(null, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_KYqn3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("A", doubleMetaphone.doubleMetaphone("AEIOUY", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nullString_ehGo1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals(null, dm.doubleMetaphone(null, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_singleLetter_RSuT2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("A", dm.doubleMetaphone("A", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_tBrt3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Aeiouy", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone12_aXIR11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_eSHP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = true;
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_RERq2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "silent";
        boolean alternate = false;
        String expected = "SLNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_HklK4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "cab";
        boolean alternate = false;
        String expected = "KP";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_BZDY5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "dog";
        boolean alternate = false;
        String expected = "TK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_egxE6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "goat";
        boolean alternate = false;
        String expected = "KT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_JICr7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "house";
        boolean alternate = false;
        String expected = "HS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_LgDu8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "jump";
        boolean alternate = false;
        String expected = "JMP";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithK_tGsg9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "kite";
        boolean alternate = false;
        String expected = "KT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_IxwZ10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "lion";
        boolean alternate = false;
        String expected = "LN";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_EmptyString_dtMh0() {
        String value = "";
        int start = 0;
        int length = 0;
        String[] criteria = new String[]{};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_USjQ1() {
        String value = "hello";
        int start = 0;
        int length = 5;
        String[] criteria = new String[]{"hello"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartGreaterThanLength_xGNg2() {
        String value = "hello";
        int start = 6;
        int length = 5;
        String[] criteria = new String[]{"hello"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartGreaterThanLength_MultipleCriteria_MCnb5() {
        String value = "hello";
        int start = 6;
        int length = 5;
        String[] criteria = new String[]{"hello", "world"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_null_LUbX4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_null_withPhoneme_ToNg9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_fsEX2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        String expected = null;
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_wmTe0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(10);
        assertEquals(10, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithNegativeValue_JDwU2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(-1);
        assertEquals(-1, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithGreaterThanMaxValue_pago3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(100);
        assertEquals(100, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithLessThanMinValue_amIo4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(0);
        assertEquals(0, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EmptyValues_FcZY4_MYmI0() {
        String value1 = "";
        String value2 = "";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentPunctuation_Mvjj10_eRqB1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "hello";
        String value2 = "hello, world";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_FqdQ0_fid1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        int maxCodeLen = dm.getMaxCodeLen();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyString_enQn0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MultipleCharacters_iiJi3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", false);
        assertEquals("APK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Alternate_ohPw4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", true);
        assertEquals("APK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SlavoGermanic_EpSB5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("wurst", true);
        assertEquals("FRST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_whwe6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("xray", false);
        assertEquals("SR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyString_ZGAg0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NonSilentStart_UQbX3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("nonSilent", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_lFCG0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "test";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_rbmo9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Y";
        boolean alternate = true;
        String expected = "Y";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSilentStart_PWsP1_1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = false;
        String expectedPrimary = "SL";
        String expectedAlternate = "SL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSilentStart_PWsP1_2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = false;
        String expectedPrimary = "SL";
        String expectedAlternate = "SL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneE_tWeg3_1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = false;
        String expectedPrimary = "E";
        String expectedAlternate = "E";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphonePrimaryAndAlternate_CSnJ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneA_wFQR2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expectedPrimary = "A";
        String expectedAlternate = "A";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }
}