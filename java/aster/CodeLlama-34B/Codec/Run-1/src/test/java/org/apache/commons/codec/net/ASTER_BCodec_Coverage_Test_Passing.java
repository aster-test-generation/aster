/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_iXnc0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_encoding");
            fail("UnsupportedEncodingException should be thrown");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeIllegalArgumentException_ipeF1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_argument");
            fail("IllegalArgumentException should be thrown");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeinvalid_charset_EYgW0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.encode("test", "invalid_charset");
            fail("invalid_charset should have been thrown");
        } catch (EncoderException e) {
            assertEquals("invalid_charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_uAAI0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String encodedText = bCodec.encodeText(null, "UTF-8");
        assertNull(encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_Kewd1_1() throws EncoderException {
        BCodec bCodec = new BCodec();
        String text = "Hello, World!";
        String encodedText = bCodec.encodeText(text, "UTF-8");
        assertNotNull(encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_Kewd1_2() throws EncoderException {
        BCodec bCodec = new BCodec();
        String text = "Hello, World!";
        String encodedText = bCodec.encodeText(text, "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_sTzp0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object result = bCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_skcg2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_HPbg0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ozzh1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String input = "test";
        String expected = "=?UTF-8?B?dGVzdA==?=";
        assertEquals(expected, bCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_pLmR2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Integer input = 123;
        try {
            bCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_BzRB3() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String input = "test";
        String expected = "=?UTF-8?B?dGVzdA==?=";
        assertEquals(expected, bCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_BZhW4() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String input = "test";
        String expected = "=?UTF-8?B?dGVzdA==?=";
        assertEquals(expected, bCodec.encode(input));
    }
}