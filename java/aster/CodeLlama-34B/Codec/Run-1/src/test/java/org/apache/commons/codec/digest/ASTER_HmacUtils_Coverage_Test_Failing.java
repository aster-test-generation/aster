/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Failing {
    private InputStream inputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_DLKS0() throws IOException {
        byte[] key = new byte[32];
        new Random().nextBytes(key);
        String expectedHex = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(inputStream);
        String actualHex = HmacUtils.hmacSha256Hex(key, inputStream);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_HxlO0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "HmacSHA256");
        mac.init(secretKeySpec);
        mac = HmacUtils.updateHmac(mac, valueToDigest);
        assertEquals(valueToDigest.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_raTZ0_oZhq0_2() throws IOException {
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] valueToDigest = new byte[]{0x06, 0x07, 0x08, 0x09, 0x0A};
        byte[] expected = new byte[]{0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_OAQy0_gdxR0() throws IOException {
        byte[] key = "testKey".getBytes();
        byte[] valueToDigest = "testValue".getBytes();
        String expectedHex = "2ef7bde608ce5404e97d5f042f38d88dec6a94aad";
        String actualHex = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidAlgorithm_ReturnsTrue_NbzX0_fid2() {
        String algorithm = "HMAC_SHA_256";
        assertTrue(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_ecWm0_fid2() {
        String key = "testKey";
        String valueToDigest = "testValue";
        String expectedResult = "1234567890abcdef";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_fbhk0() {
        String key = "testKey";
        String valueToDigest = "testValue";
        String expectedHex = "expectedHex";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_lynq0_fid2() {
        String key = "test_key";
        String valueToDigest = "test_value";
        String expectedResult = "expected_result";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_bbzN0_fid2() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        String expected = "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a0b19ca748baf20bd23bbb";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_xgid0_hYWK0_fid2() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "test".getBytes();
        byte[] valueToDigest = "test".getBytes();
        String expected = "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a86ec2b0bb7fec3283e964";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_HxlO0() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "HmacSHA256");
        mac.init(secretKeySpec);
        mac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotNull(mac);
        assertEquals(valueToDigest.length, mac.getMacLength());
    }
}