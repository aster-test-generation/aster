/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_NullInputs_lcKm0() {
        int result = SoundexUtils.differenceEncoded(null, null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_EmptyInputs_Kvdc1() {
        int result = SoundexUtils.differenceEncoded("", "");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_DifferentLengths_KMjh2() {
        int result = SoundexUtils.differenceEncoded("abc", "abcd");
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_SameLengths_aytK3() {
        int result = SoundexUtils.differenceEncoded("abcd", "abcd");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_DifferentChars_BTWo4() {
        int result = SoundexUtils.differenceEncoded("abc", "def");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_DifferentCharsInDifferentPositions_pcTL6() {
        int result = SoundexUtils.differenceEncoded("abcd", "dcba");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_DifferentLengthsAndChars_mcRr8() {
        int result = SoundexUtils.differenceEncoded("abc", "defg");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_emptyString_vcoL0() {
        String input = "";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_singleLetter_MwRo1() {
        String input = "a";
        String expected = "A";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_multipleLetters_gtOp2() {
        String input = "abc";
        String expected = "ABC";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_mixedCase_vWOg3() {
        String input = "aBc";
        String expected = "ABC";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_Null_oSZC0() {
        assertTrue(SoundexUtils.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_EmptyString_WpRa1() {
        assertTrue(SoundexUtils.isEmpty(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_NonEmptyString_zXPp2() {
        assertFalse(SoundexUtils.isEmpty("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_NullCharSequence_KFxU3() {
        assertTrue(SoundexUtils.isEmpty((CharSequence) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_EmptyCharSequence_AIqU4() {
        assertTrue(SoundexUtils.isEmpty(new String()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_NonEmptyCharSequence_swSV5() {
        assertFalse(SoundexUtils.isEmpty(new String("abc")));
    }
}