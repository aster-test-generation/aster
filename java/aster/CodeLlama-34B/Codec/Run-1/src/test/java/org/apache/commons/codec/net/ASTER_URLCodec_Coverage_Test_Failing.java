/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_ArrayIndexOutOfBoundsException_SsYo0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        try {
            URLCodec.decodeUrl(bytes);
            Assertions.fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            Assertions.assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_DecoderException_xypj1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        try {
            URLCodec.decodeUrl(bytes);
            Assertions.fail("Expected DecoderException");
        } catch (DecoderException e) {
            Assertions.assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_pKdr0() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        Object output = codec.encode(input);
        assertEquals(output, input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_feXf1() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "hello+world";
        Object output = codec.encode(input);
        assertEquals(output, input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullCharset_FcVa4() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec(null);
        String input = "Hello, World!";
        Object result = urlCodec.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyCharset_UKRa5() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec("");
        String input = "Hello, World!";
        Object result = urlCodec.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_urlsafeNull_tACF0() {
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_feXf1_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "hello world";
        Object output = codec.encode(input);
        assertEquals(output, input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedEncodingException_orxR0_SCwq0() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            urlCodec.encode("test", "invalid-charset");
            fail("UnsupportedEncodingException should have been thrown");
        } catch (UnsupportedEncodingException e) {
            assertEquals("UnsupportedEncodingException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullString_QsnX1_nFst0() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            urlCodec.encode(null, "UTF-8");
            fail("NullPointerException should have been thrown");
        } catch (NullPointerException e) {
            assertEquals("NullPointerException", e.getMessage());
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown");
        }
    }
}