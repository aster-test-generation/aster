/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Failing {
    private static int fmix32(int hash) {
        hash ^= hash >>> 16;
        hash *= 0x85ebca6b;
        hash ^= hash >>> 13;
        hash *= 0xc2b2ae35;
        hash ^= hash >>> 16;
        return hash;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_JCcC0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_hnPR1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 123456789;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_TJdb2() {
        byte[] data = new byte[10];
        int length = 5;
        int seed = 0;
        int expected = 54321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_POsd3() {
        byte[] data = new byte[10];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        int length = 10;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_wEag4() {
        byte[] data = null;
        int length = 10;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_singleByte_fBtV1() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0xFF;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_multipleBytes_UdFm2() {
        byte[] data = new byte[4];
        data[0] = (byte) 0xFF;
        data[1] = (byte) 0xFF;
        data[2] = (byte) 0xFF;
        data[3] = (byte) 0xFF;
        int expected = 0xFFFFFFFF;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_largeData_NEsW3() {
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        int expected = 0xFFFFFFFF;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_invalidData_qDur4() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_invalidSeed_qUqZ5() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, -1);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_invalidLength_lPqk6() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, -1, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_invalidOffset_slUs7() {
        byte[] data = new byte[1];
        data[0] = (byte) 0xFF;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, -1, data.length, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_omXX0() {
        long result = MurmurHash3.hash64(123456789);
        assertEquals(123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeValue_DjiL1() {
        long result = MurmurHash3.hash64(-123456789);
        assertEquals(-123456789, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMaxValue_JmJd2() {
        long result = MurmurHash3.hash64(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMinValue_KgzQ3() {
        long result = MurmurHash3.hash64(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZero_MTxN4() {
        long result = MurmurHash3.hash64(0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOne_ZRjn5() {
        long result = MurmurHash3.hash64(1);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithTwo_SuXp6() {
        long result = MurmurHash3.hash64(2);
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithThree_XPRR7() {
        long result = MurmurHash3.hash64(3);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithFour_Rpcq8() {
        long result = MurmurHash3.hash64(4);
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithFive_QzLU9() {
        long result = MurmurHash3.hash64(5);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSix_tNjo10() {
        long result = MurmurHash3.hash64(6);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSeven_BFYH11() {
        long result = MurmurHash3.hash64(7);
        assertEquals(7, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEight_botu12() {
        long result = MurmurHash3.hash64(8);
        assertEquals(8, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNine_snmU13() {
        long result = MurmurHash3.hash64(9);
        assertEquals(9, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithTen_dSyg14() {
        long result = MurmurHash3.hash64(10);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEleven_XYen15() {
        long result = MurmurHash3.hash64(11);
        assertEquals(11, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithTwelve_DPvf16() {
        long result = MurmurHash3.hash64(12);
        assertEquals(12, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithThirteen_PERI17() {
        long result = MurmurHash3.hash64(13);
        assertEquals(13, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithFourteen_sajy18() {
        long result = MurmurHash3.hash64(14);
        assertEquals(14, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithFifteen_XlCf19() {
        long result = MurmurHash3.hash64(15);
        assertEquals(15, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSixteen_SVjl20() {
        long result = MurmurHash3.hash64(16);
        assertEquals(16, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YapV0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_GpLe1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 987654321;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_JgJH2() {
        byte[] data = new byte[]{11, 22, 33, 44, 55, 66, 77, 88, 99, 100};
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentOffset_dEcW3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 5, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_ZTIV4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 0, 5, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_NBen5() {
        byte[] data = null;
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_boRm6() {
        byte[] data = new byte[0];
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeOffset_klMx7() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, -1, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VYzM0() {
        long data = 1234567890L;
        long expectedHash = 1234567890L;
        long actualHash = MurmurHash3.hash64(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_OYjf0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 1234;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_fbVW0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_tSiw0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_rBcp0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentData_NaiL1() {
        byte[] data = new byte[]{11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentOffset_KvAj2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentLength_UUkd3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 5;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_AtTt0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_KqfR1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_VwqR4() {
        byte[] data = null;
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeOffset_GUQW5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = -1;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_UXKE0() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentOffset_uuCB1() {
        byte[] data = new byte[100];
        int offset = 10;
        int length = 100;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentLength_VceE2() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 50;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentSeed_XvSz3() {
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        int seed = 54321;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_BITG0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 0;
        int length = 8;
        int seed = 123456789;
        long expected = 123456789;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_VCdu1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int offset = 1;
        int length = 7;
        int seed = 123456789;
        long expected = 123456789;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_rgeJ0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ibbs1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_acgq0() {
        long hash = MurmurHash3.hash64((short) 1);
        long expected = 0xff51afd7ed558ccdL;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentData_sgKW2() {
        long hash = MurmurHash3.hash64((short) 2);
        long expected = 0xff51afd7ed558ccdL;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMaxShort_WIxZ4() {
        long hash = MurmurHash3.hash64(Short.MAX_VALUE);
        long expected = 0xff51afd7ed558ccdL;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithMinShort_TrEo5() {
        long hash = MurmurHash3.hash64(Short.MIN_VALUE);
        long expected = 0xc4ceb9fe1a85ec53L;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_hZPT0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = 12345;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_pjWo1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expectedHash = 12345;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_MRMg0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_MuBy1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_rewg0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = 1234567890;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_mUOH1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 1234567890;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_3_NJiF2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 0;
        int seed = 12345;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_4_vvRi3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 0;
        int seed = 12345;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_5_xsfw4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_BwdB0() {
        long data = 1234567890L;
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_zDux1() {
        long data = 1234567890L;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_qdcm2() {
        long data = -1234567890L;
        int seed = 123456789;
        int expected = -123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_LWdW3() {
        long data = 1234567890L;
        int seed = -123456789;
        int expected = -123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_zouh4() {
        long data = 0L;
        int seed = 123456789;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_PYAW5() {
        long data = 1234567890L;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxValueData_Qaqp6() {
        long data = Long.MAX_VALUE;
        int seed = 123456789;
        int expected = Integer.MAX_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxValueSeed_mWKf7() {
        long data = 1234567890L;
        int seed = Integer.MAX_VALUE;
        int expected = Integer.MAX_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinValueData_fgSn8() {
        long data = Long.MIN_VALUE;
        int seed = 123456789;
        int expected = Integer.MIN_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinValueSeed_jfnt9() {
        long data = 1234567890L;
        int seed = Integer.MIN_VALUE;
        int expected = Integer.MIN_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_BZjQ0() {
        int seed = 123456789;
        long data = 1234567890L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_MJvZ1() {
        int seed = 987654321;
        long data = 1234567890L;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_ekpB2() {
        int seed = 123456789;
        long data = 9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeedAndData_pGhd3() {
        int seed = 987654321;
        long data = 9876543210L;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_kFtN4() {
        int seed = 0;
        long data = 1234567890L;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_ZItg5() {
        int seed = 123456789;
        long data = 0L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeedAndData_qsVF6() {
        int seed = 0;
        long data = 0L;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeed_snXW7() {
        int seed = Integer.MAX_VALUE;
        long data = 1234567890L;
        int expectedHash = Integer.MAX_VALUE;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_ADpy8() {
        int seed = 123456789;
        long data = Long.MAX_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeedAndData_KsFD9() {
        int seed = Integer.MAX_VALUE;
        long data = Long.MAX_VALUE;
        int expectedHash = Integer.MAX_VALUE;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_vpSa0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_sHfF1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_KLVX0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        int expected = -1747136717;
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_LGHl1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 987654321;
        int expected = -1747136717;
        int actual = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_IvYr0_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_IvYr0_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_GVfZ5_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, -1, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_GVfZ5_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, -1, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_GVfZ5_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, -1, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthGreaterThanDataLength_RUzo7_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 11, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthGreaterThanDataLength_RUzo7_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 11, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthGreaterThanDataLength_RUzo7_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 11, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthEqualToDataLength_vlhI8_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 10, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthEqualToDataLength_vlhI8_3() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 10, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32EmptyString_yWEL0() {
        String data = "";
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32NullString_pJEy1() {
        String data = null;
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32SingleCharacterString_hwoH2() {
        String data = "a";
        int expected = 97;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32MultipleCharacterString_wMfv3() {
        String data = "abc";
        int expected = 294;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32SpecialCharacters_bAXD4() {
        String data = "!@#$%^&*()_+";
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentByteArrayLengths_llWo6_1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        bytes = new byte[20];
        actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentOffsets_BQCZ7_1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        actual = MurmurHash3.hash32(bytes, 5, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentLengths_ZDqW8_1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        actual = MurmurHash3.hash32(bytes, 0, 5, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MGAk0() {
        int seed = 1234;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_TSon1() {
        int seed = 1234;
        long data1 = 0L;
        long data2 = 0L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_wapg2() {
        int seed = 1234;
        long data1 = -1234567890L;
        long data2 = -9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_EsJx3() {
        int seed = 1234;
        long data1 = Long.MAX_VALUE;
        long data2 = Long.MAX_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinData_PxFh4() {
        int seed = 1234;
        long data1 = Long.MIN_VALUE;
        long data2 = Long.MIN_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_jnXU5() {
        int seed = 4321;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = 432156789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_dSEi0() {
        int seed = 123456789;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_tDrW1() {
        int seed = 0;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_kYwU2() {
        int seed = -123456789;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = -123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxLongData_migD3() {
        int seed = 123456789;
        long data1 = Long.MAX_VALUE;
        long data2 = Long.MAX_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinLongData_KtgD4() {
        int seed = 123456789;
        long data1 = Long.MIN_VALUE;
        long data2 = Long.MIN_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_hNNf5() {
        int seed = 123456789;
        long data1 = 0L;
        long data2 = 0L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxIntData_vOZQ6() {
        int seed = 123456789;
        long data1 = Integer.MAX_VALUE;
        long data2 = Integer.MAX_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinIntData_xMTM7() {
        int seed = 123456789;
        long data1 = Integer.MIN_VALUE;
        long data2 = Integer.MIN_VALUE;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_sameSeed_bWeX2() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expected = 1234567890;
        int actual = MurmurHash3.hash32(data1, data2, 1234567890);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidSeed_wXHg6() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expected = 0;
        int actual = MurmurHash3.hash32(data1, data2, -1);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidData_KLhc7() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expected = 0;
        int actual = MurmurHash3.hash32(data1, data2, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_VPBv0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_tsQf1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, length);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_DVzt2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 987654321;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_KTyQ3() {
        byte[] data = new byte[]{};
        int length = data.length;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_bGny4() {
        byte[] data = null;
        int length = 0;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeLength_orFf5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = -1;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroLength_hNNv6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 0;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLengthGreaterThanDataLength_JqqP7() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 11;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_defaultSeed_kSGU0_Bcvh0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_negativeLength_smPQ5_sAki0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = -1;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentSeed_NQuI1_txbI0() {
        long hash = MurmurHash3.hash64(new byte[]{(byte) 1}, 2, 3);
        long expected = 0xc4ceb9fe1a85ec53L;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentDataAndSeed_EPeQ3_hKEZ0() {
        long hash = MurmurHash3.hash64(new byte[]{2, 3}, 2, 3);
        long expected = 0xc4ceb9fe1a85ec53L;
        assertEquals(expected, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentSeedValues_hpYC5_toNX0_1() {
        String data = "abc";
        int expected = 294;
        int actual = MurmurHash3.hash32(data.getBytes(), 123);
        actual = MurmurHash3.hash32(data.getBytes(), 456);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_YapV0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 120583055;
        int expected = 120583055;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_GpLe1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = -296684047;
        int expected = -296684047;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_JgJH2_fid1() {
        byte[] data = new byte[]{11, 22, 33, 44, 55, 66, 77, 88, 99, 100};
        int seed = 250731936;
        int expected = 250731936;
        int actual = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_ZTIV4_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 63959119;
        int expected = 63959119;
        int actual = MurmurHash3.hash32(data, 0, 5, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_NBen5_fid1() {
        byte[] data = null;
        int seed = -1168058214;
        int expected = -1168058214;
        int actual = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_boRm6_fid1() {
        byte[] data = new byte[0];
        int seed = -1168058214;
        int expected = -1168058214;
        int actual = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_VYzM0_fid1() {
        long data = -286461308899903857L;
        long expectedHash = -286461308899903857L;
        long actualHash = MurmurHash3.hash64(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithDifferentDataAndOffset_FuMP5_fid1() {
        byte[] data = new byte[100];
        int offset = 10;
        int length = 100;
        int seed = 12345;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length - offset, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_hZPT0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = -990502881;
        int expectedHash = -990502881;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_3_NJiF2_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 1011272156;
        int length = 1011272156;
        int seed = 12345;
        int expected = 1011272156;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_4_vvRi3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 1011272156;
        int seed = 12345;
        int expected = 1011272156;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_5_xsfw4_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 1305033930;
        int length = 10;
        int seed = 1305033930;
        int expected = 1305033930;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_BwdB0_fid1() {
        long data = -5910822070L;
        int seed = -591082207;
        int expected = -591082207;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_zDux1_fid1() {
        long data = 8859569270L;
        int expected = 885956927;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_qdcm2_fid1() {
        long data = 6088562570L;
        int seed = 123456789;
        int expected = 608856257;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_LWdW3_fid1() {
        long data = 1234567890L;
        int seed = -1434905276;
        int expected = -1434905276;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_zouh4_fid1() {
        long data = -1402413366L;
        int seed = 123456789;
        int expected = -1402413366;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_PYAW5_fid1() {
        long data = 1234567890L;
        int seed = 1740697516;
        int expected = 1740697516;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_BZjQ0_fid1() {
        int seed = -591082207;
        long data = -5910822070L;
        int expectedHash = -591082207;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_kFtN4_fid1() {
        int seed = 1740697516;
        long data = 1234567890L;
        int expectedHash = 1740697516;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeedAndData_qsVF6_fid1() {
        int seed = 1669671676;
        long data = 1669671676L;
        int expectedHash = 1669671676;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_ADpy8_fid1() {
        int seed = -1995947612;
        long data = Long.MAX_VALUE;
        int expectedHash = -1995947612;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentOffsets_BQCZ7_1_fid1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentOffsets_BQCZ7_2_fid1() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        actual = MurmurHash3.hash32(bytes, 5, bytes.length - 5, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_IvYr0() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNegativeLength_GVfZ5() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, -1, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthGreaterThanDataLength_RUzo7() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 11, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLengthEqualToDataLength_vlhI8() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 10, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentByteArrayLengths_llWo6() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
        bytes = new byte[20];
        actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentOffsets_BQCZ7() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
        actual = MurmurHash3.hash32(bytes, 5, bytes.length, 123);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32DifferentLengths_ZDqW8() {
        byte[] bytes = new byte[10];
        int expected = 123456789;
        int actual = MurmurHash3.hash32(bytes, 0, bytes.length, 123);
        assertEquals(expected, actual);
        actual = MurmurHash3.hash32(bytes, 0, 5, 123);
        assertEquals(expected, actual);
    }
}