/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_xIPT0() {
        byte[] raw = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String actual = BinaryCodec.toAsciiString(raw);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_empty_ZUDl0() {
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(new char[0]);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_invalidInput_dqCi5() {
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(new char[]{'a', 'b', 'c'});
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_empty_hQex0() {
        byte[] raw = new byte[0];
        char[] expected = new char[0];
        char[] actual = BinaryCodec.toAsciiChars(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiChars_singleByte_qWEF1() {
        byte[] raw = new byte[]{0x01};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '1'};
        char[] actual = BinaryCodec.toAsciiChars(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArray_Null_MyiS0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray(null);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArray_EmptyString_KDJo1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray("");
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArray_ASCIIString_ilGC3_1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray("hello");
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArray_NonASCIIString_UJHP4_1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_empty_kvJM0() {
        byte[] ascii = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_invalidInput_eERd3() {
        byte[] ascii = new byte[]{'a', 'b', 'c'};
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_nullInput_zeoG4() {
        byte[] ascii = null;
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_null_YspM0() {
        assertTrue(BinaryCodec.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_empty_JpXk1() {
        assertTrue(BinaryCodec.isEmpty(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_oneElement_qPPL3() {
        assertFalse(BinaryCodec.isEmpty(new byte[]{1}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_multipleElements_cTpp4() {
        assertFalse(BinaryCodec.isEmpty(new byte[]{1, 2, 3, 4}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyInput_aXYL3() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{};
        byte[] expected = new byte[]{};
        byte[] actual = codec.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_invalidType_caHM4() {
        int[] ascii = new int[]{0x01, 0x02, 0x03};
        BinaryCodec codec = new BinaryCodec();
        try {
            codec.decode(ascii);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_empty_NLOg0() {
        byte[] raw = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_singleByte_MBYp1() {
        byte[] raw = new byte[]{(byte) 0x01};
        byte[] expected = new byte[]{'0', '0', '0', '0', '0', '0', '0', '1'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_null_KYen3() {
        byte[] raw = null;
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_allBitsSet_vtJH3_nNZp0() {
        byte[] expected = new byte[]{(byte) 0xFF};
        byte[] actual = BinaryCodec.fromAscii(new char[]{'1', '1', '1', '1', '1', '1', '1', '1'});
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_nullInput_EyAu4_WFgU0() {
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(new byte[0]);
        assertArrayEquals(expected, actual);
    }
}