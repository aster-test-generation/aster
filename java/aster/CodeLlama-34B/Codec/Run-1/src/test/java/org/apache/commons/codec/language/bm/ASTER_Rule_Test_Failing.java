/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance1_gXFU0_2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance2_hNSp1_2() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance3_yXYY2_2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidNameType_zzAf2_1() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidNameType_zzAf2_2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertEquals(0, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidRuleType_zWVY3_1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidRuleType_zWVY3_2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertEquals(0, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidLanguage_qkUy4_1() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.APPROX;
        String lang = "invalid";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidLanguage_qkUy4_2() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.APPROX;
        String lang = "invalid";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertEquals(0, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLContext_EmptyList_LBpL0() {
        Rule rule = new Rule(null, null, null, null);
        assertNull(rule.getLContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance1_gXFU0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertNotNull(rules);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance2_hNSp1() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertNotNull(rules);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance3_yXYY2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.RULES;
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        List<Rule> rules = Rule.getInstance(nameType, rt, langs);
        assertNotNull(rules);
        assertEquals(2, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidNameType_zzAf2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
        assertEquals(0, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidRuleType_zWVY3() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        String lang = "en";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
        assertEquals(0, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidLanguage_qkUy4() {
        NameType nameType = NameType.GENERIC;
        RuleType rt = RuleType.APPROX;
        String lang = "invalid";
        List<Rule> rules = Rule.getInstance(nameType, rt, lang);
        assertNotNull(rules);
        assertEquals(0, rules.size());
    }
}