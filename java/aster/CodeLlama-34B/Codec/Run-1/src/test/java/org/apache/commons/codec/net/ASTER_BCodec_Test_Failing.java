/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Strict_GVRV0() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Lenient_dpCD1() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_CharsetName_yqAG3() throws DecoderException {
        BCodec codec = new BCodec("UTF-8");
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Default_sMce4() throws DecoderException {
        BCodec codec = new BCodec();
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_UnsupportedEncodingException_OcpN5() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyString_loGS8() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String value = "";
        String expected = "";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonUTF8Charset_kWCk9() throws DecoderException {
        BCodec codec = new BCodec(Charset.forName("ISO-8859-1"));
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonUTF8CharsetName_RBko10() throws DecoderException {
        BCodec codec = new BCodec("ISO-8859-1");
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_strict_vQlQ2() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertEquals("Hello, World!", new String(result, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_lenient_Abzv3() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] result = bCodec.doDecoding("�e�j+�".getBytes(StandardCharsets.UTF_8));
        assertEquals("�e�j+�", new String(result, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_invalidInput_nIWs6() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_GEki0() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String value = "hello";
        String decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithLenientPolicy_fusG1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String value = "hello";
        String decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithCustomCharset_AaBo3() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_16);
        String value = "hello";
        String decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_nullCharset_KVVd2() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = null;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, StandardCharsets.UTF_8);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_invalidCharsetName_xLUv4() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encodeText(text, Charset.forName("invalid_charset"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextEmpty_LPfh1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "";
        String expected = "";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationMalformedEncodedContent_yUIK2() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?utf-8?Q?=E2=9C=93?=";
        String expected = "utf-8";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationCharsetTokenNotFound_Becv3() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?=E2=9C=93?=";
        String expected = "?=E2=9C=93?=";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationEncodingTokenNotFound_RpaR4() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?utf-8?=E2=9C=93?=";
        String expected = "utf-8";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextSuccess_dNvC6() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?utf-8?Q?=E2=9C=93?=";
        String expected = "✓";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_lenient_Abzv3_fid1() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertEquals("Hello, World!", new String(result, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_invalidCharset_UUbW4_fid1() {
        BCodec bCodec = new BCodec("invalid_charset");
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_invalidInput_nIWs6_fid1() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        byte[] result = bCodec.doDecoding("Hello, World!".getBytes(StandardCharsets.UTF_8));
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_GEki0_fid1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String value = "hello";
        Object decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithLenientPolicy_fusG1_fid1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String value = "hello";
        Object decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithCustomCharset_AaBo3_fid1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_16);
        String value = "hello";
        Object decodedValue = codec.decode(value);
        assertEquals(value, decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNullDecodingPolicy_wAmT5_fid1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, null);
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Decoding policy cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNonStrictOrLenientDecodingPolicy_BtLH6_fid1() throws DecoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Decoding policy must be either STRICT or LENIENT"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_vJDD0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.UTF_8;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_differentCharset_QoYS1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.ISO_8859_1;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_nullCharset_KVVd2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = null;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_invalidCharset_hxzC3_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        Charset sourceCharset = StandardCharsets.UTF_16;
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_sourceCharset_emptyString_TbTx4() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "";
        Charset sourceCharset = StandardCharsets.UTF_8;
        String expected = "";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_STRICT_naFk0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_LENIENT_eJKk1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_XIWq0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_dOuo1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_MzIS2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_strict_NfCN0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encodeText(text, "UTF-8");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_invalidCharsetName_xLUv4_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encodeText(text, "invalid_charset");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationMalformedEncodedContent_yUIK2_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?utf-8?Q?=E2=9C=93?=";
        String expected = "";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationCharsetTokenNotFound_Becv3_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?=E2=9C=93?=";
        String expected = "";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextRfc1522ViolationEncodingTokenNotFound_RpaR4_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec();
        String text = "=?utf-8?=E2=9C=93?=";
        String expected = "";
        String actual = bCodec.decodeText(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithNullCharset_NhUn4_eWko0_fid2() throws DecoderException {
        BCodec codec = new BCodec();
        String value = "hello";
        try {
            codec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Charset cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_nullCharsetName_CXiL3_Fgir0_fid2() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_Jyio0_TfTe1_fid2() {
        BCodec bCodec = new BCodec();
        String value = "hello";
        String expected = "aGVsbG8=";
        try {
            String actual = bCodec.encodeText(value, StandardCharsets.UTF_8);
            assertEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }
}