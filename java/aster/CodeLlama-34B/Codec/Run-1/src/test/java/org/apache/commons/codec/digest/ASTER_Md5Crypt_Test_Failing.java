/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKey_MicH2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08});
        assertEquals("$apr1$.aktJOPW$n8MKBTMlTUvwkcvsr4Gvp.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndInvalidSalt_cwyw6() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_InvalidKeyAndInvalidSalt_orpm9() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "");
        assertEquals("$apr1$", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_nShx0_1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_nShx0_2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(prefix + salt + "$", result.substring(0, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_nShx0_3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_Lwab1_2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = null;
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(prefix + "$", result.substring(0, 7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_QYbQ2_1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "invalid_salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_QYbQ2_2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "invalid_salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(prefix + "$", result.substring(0, 7));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_QYbQ2_3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "invalid_salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_HepQ3_1() {
        byte[] keyBytes = new byte[]{};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_HepQ3_2() {
        byte[] keyBytes = new byte[]{};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(prefix + salt + "$", result.substring(0, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_HepQ3_3() {
        byte[] keyBytes = new byte[]{};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_ocsO5_1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = null;
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_ocsO5_2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = null;
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(salt + "$", result.substring(0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_ocsO5_3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = null;
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptySalt_ddjY4() {
        String key = "password";
        String expectedHash = "apr1$password";
        String actualHash = Md5Crypt.apr1Crypt(key, "");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKeyAndSalt_xbro8() {
        String expectedHash = "apr1$";
        String actualHash = Md5Crypt.apr1Crypt("".getBytes(StandardCharsets.UTF_8), "");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_Qsmn0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        String salt = "salt";
        String expectedHash = "5eb63bbbe01eeed093cb22bb8f5acdc3";
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKeyBytes_GuzP1() {
        byte[] keyBytes = null;
        String salt = "salt";
        String expectedHash = null;
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_IeCK2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        String salt = null;
        String expectedHash = "$1$JIZXPKvf$sY76xH5vJHmnW3kRYKe/h.";
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_tGaX3() {
        byte[] keyBytes = new byte[]{};
        String salt = "salt";
        String expectedHash = "d41d8cd98f00b204e9800998ecf8427e";
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptySalt_EVXE4() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        String salt = "";
        String expectedHash = "5eb63bbbe01eeed093cb22bb8f5acdc3";
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_ebTg0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("prefix$1$salt$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_sYkZ1() {
        byte[] keyBytes = new byte[0];
        String salt = "salt";
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("prefix$1$salt$", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptySalt_PgyW2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "";
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("prefix$1$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKeyBytes_dngJ4() {
        byte[] keyBytes = null;
        String salt = "salt";
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("prefix$1$salt$", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_vgaP1() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "$1$80000000000000000000000000000000";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidKey_GqPQ2() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes, "invalid_salt");
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_tuHg3() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes, "12345678");
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKey_Ctvl4() {
        byte[] keyBytes = null;
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_aTqV2() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String salt = null;
        String expected = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, Md5Crypt.apr1Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptySalt_FyRx4() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String salt = "";
        String expected = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, Md5Crypt.apr1Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptySalt_CiSX2() {
        String key = "key";
        String expected = "$apr1$";
        String actual = Md5Crypt.apr1Crypt(key, "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullKey_aZOe1_Ssfu1() {
        String salt = "salt";
        String expected = null;
        String actual = Md5Crypt.apr1Crypt((String) null, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptyKey_dXyq1_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[0]);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKey_MicH2_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08});
        assertEquals("$apr1$0102030405060708", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_InvalidKey_JTxG3_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09});
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_Zpbs4_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "salt");
        assertEquals("$apr1$0102030405060708$salt", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_InvalidKeyAndSalt_MCMU5_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "salt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndInvalidSalt_cwyw6_fid2() {
        String result = Md5Crypt.apr1Crypt(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, "");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_nShx0() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(prefix + salt + "$", result.substring(0, 10));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_Lwab1() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = null;
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(prefix + "$", result.substring(0, 7));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_QYbQ2() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "invalid_salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(prefix + "$", result.substring(0, 7));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_HepQ3() {
        byte[] keyBytes = new byte[]{};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(prefix + salt + "$", result.substring(0, 10));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_RtLe4() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(salt + "$", result.substring(0, 5));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_ocsO5() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = null;
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
        assertEquals(salt + "$", result.substring(0, 5));
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_aEbk0_fid2() {
        String key = "password";
        String salt = "salt";
        String expectedHash = "apr1$salt$password";
        String actualHash = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_BpWf2_fid2() {
        String key = "password";
        String expectedHash = "apr1$password";
        String actualHash = Md5Crypt.apr1Crypt(key, null);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKey_ITnV3_fid2() {
        String salt = "salt";
        String expectedHash = "apr1$salt$";
        String actualHash = Md5Crypt.apr1Crypt("", salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidKey_Dkhz5_fid2() {
        String salt = "salt";
        String expectedHash = "apr1$salt$";
        String actualHash = Md5Crypt.apr1Crypt("invalid_key", salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_aVvr6_fid2() {
        String key = "password";
        String expectedHash = "apr1$password";
        String actualHash = Md5Crypt.apr1Crypt(key, "invalid_salt");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKeyAndSalt_xbro8_fid2() {
        String expectedHash = "apr1$";
        String actualHash = Md5Crypt.apr1Crypt("", "");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidKeyAndSalt_kiSf9_fid2() {
        String expectedHash = "apr1$";
        String actualHash = Md5Crypt.apr1Crypt("invalid_key", "invalid_salt");
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_IeCK2_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        String salt = null;
        String expectedHash = "5eb63bbbe01eeed093cb22bb8f5acdc3";
        String actualHash = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_UNmY3_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        String prefix = "";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("$1$salt$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_Ucei0_fid2() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_vgaP1_fid2() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "12345678";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKey_Ctvl4_fid2() {
        byte[] keyBytes = null;
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKey_ramH6_fid2() {
        byte[] keyBytes = new byte[0];
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertEquals("$1$80000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptyKey_cknO0() {
        String salt = "salt";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt("", salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptySalt_CiSX2_fid2() {
        String key = "key";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt(key, "");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullSalt_YGYi3() {
        String key = "key";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt(key, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_xrlX4_fid2() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_Lwab1_3_fid3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = null;
        String prefix = "prefix";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyPrefix_RtLe4_3_fid3() {
        byte[] keyBytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String salt = "salt";
        String prefix = "";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(16, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullKey_aZOe1_Ssfu1_fid3() {
        String salt = "salt";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt((String) null, salt);
        assertEquals(expected, actual);
    }
}