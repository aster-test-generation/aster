/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_bitLengthMultipleOf8_LUfi1() {
        BigInteger bigInt = new BigInteger("1244567890");
        int lineLength = 8;
        byte[] lineSeparator = new byte[]{10};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertEquals(bigInt.bitLength() / 8, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_LargeInput_TTrO0() {
        byte[] binaryData = new byte[1000000];
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100000;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(100000, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_SmallInput_JXyl1() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 140;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_bitLengthMultipleOf8_LUfi1_fid1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 8;
        byte[] lineSeparator = new byte[]{10};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = Base64.toIntegerBytes(bigInt);
        assertEquals(bigInt.bitLength() / 8, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_xJLC0() {
        Base64 base64 = new Base64();
        byte[] decodeTable = new byte[256];
        for (int i = 0; i < 256; i++) {
            decodeTable[i] = (byte) i;
        }
        assertTrue(base64.isInAlphabet((byte) 0));
        assertTrue(base64.isInAlphabet((byte) 255));
        assertFalse(base64.isInAlphabet((byte) -1));
        assertFalse(base64.isInAlphabet((byte) 256));
        assertFalse(base64.isInAlphabet((byte) -128));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_SmallInput_JXyl1_fid1() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_octetInRange_tPjK1_fid1() {
        byte octet = 0;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_decodeTableIndexOutOfRange_FPGo3_fid1() {
        byte octet = 100;
        assertFalse(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength1_ISMn0_fid1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long expected = 12;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength2_briE1_fid1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        long expected = 13;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength3_gxRO2_fid1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        long expected = 14;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength4_Lizs3_fid1() {
        Base64 base64 = new Base64(10, new byte[]{10, 20, 30}, true);
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        long expected = 15;
        long actual = base64.getEncodedLength(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_xJLC0_1_fid3() {
        Base64 base64 = new Base64();
        byte[] decodeTable = new byte[256];
        for (int i = 0; i < 256; i++) {
            decodeTable[i] = (byte) i;
        }
        assertTrue(base64.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_xJLC0_2_fid3() {
        Base64 base64 = new Base64();
        byte[] decodeTable = new byte[256];
        for (int i = 0; i < 256; i++) {
            decodeTable[i] = (byte) i;
        }
        assertTrue(base64.isInAlphabet((byte) 255));
    }
}