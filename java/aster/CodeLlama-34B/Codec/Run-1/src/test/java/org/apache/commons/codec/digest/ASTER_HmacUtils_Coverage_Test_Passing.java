/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Passing {
    private InputStream inputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidAlgorithm_ReturnsTrue_NbzX0() {
        String algorithm = "HMAC_SHA_256";
        assertFalse(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_ReturnsFalse_twDm1() {
        String algorithm = "InvalidAlgorithm";
        assertFalse(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithNoSuchAlgorithmException_npiK0() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        try {
            Mac.getInstance(algorithm.getName());
            HmacUtils.isAvailable(algorithm);
        } catch (NoSuchAlgorithmException e) {
            assertFalse(HmacUtils.isAvailable(algorithm));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithAvailableAlgorithm_GnSE1() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        try {
            Mac.getInstance(algorithm.getName());
            HmacUtils.isAvailable(algorithm);
            assertTrue(HmacUtils.isAvailable(algorithm));
        } catch (NoSuchAlgorithmException e) {
            assertFalse(HmacUtils.isAvailable(algorithm));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_ecWm0() {
        String key = "testKey";
        String valueToDigest = "testValue";
        String expectedResult = "56c2f0f5ce1d17465eb0b155a1d288e2bbaa761c0abd3777b51650906d4705d9100f4fed02715321b2b96edd67c9b390";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_lynq0() {
        String key = "test_key";
        String valueToDigest = "test_value";
        String expectedResult = "c6b69b7e5cc467667ea54bbf99851886052c0f62acac407560960868fcb763dfdb5798a9c665c47162a307a0df0f8a19f0a10f75cbf4652a5406ce07a9d30305";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_bbzN0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        String expected = "bb0a0f9d9402760ebe03198e6410764f4febcbe2be438418635d7a1df38c66fd09c196281805d9994170482d35111ab5";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_VuDK0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_VuDK0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_HxlO0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "HmacSHA256");
        mac.init(secretKeySpec);
        mac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_uqvB0_aOyq0() throws IOException {
        byte[] key = new byte[16];
        byte[] valueToDigest = new byte[16];
        String expected = new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_xgid0_hYWK0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "test".getBytes();
        byte[] valueToDigest = "test".getBytes();
        String expected = "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a86ec2b0bb7fec3283e964";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_OBXV0_wdKr0_1() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "mysecretkey".getBytes();
        byte[] valueToDigest = "myvalue".getBytes();
        byte[] expectedHmac = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);
        byte[] actualHmac = HmacUtils.hmacSha256(key, valueToDigest);
        for (int i = 0; i < expectedHmac.length; i++) {
        }
        assertNotNull(actualHmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_OBXV0_wdKr0_2() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "mysecretkey".getBytes();
        byte[] valueToDigest = "myvalue".getBytes();
        byte[] expectedHmac = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);
        byte[] actualHmac = HmacUtils.hmacSha256(key, valueToDigest);
        for (int i = 0; i < expectedHmac.length; i++) {
        }
        assertEquals(expectedHmac.length, actualHmac.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_raTZ0_oZhq0_1() throws IOException {
        byte[] key = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] valueToDigest = new byte[]{0x06, 0x07, 0x08, 0x09, 0x0A};
        byte[] expected = new byte[]{0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_VuDK0() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }
}