/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_null_eklG0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_emptyString_zcJO1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_EmptyStrings_jBWa0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int result = refinedSoundex.difference("", "");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_UWtv3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "";
        String expectedOutput = "";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_lfPG2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_UpperCaseLetter_WRRw0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("AEIOUYWH");
        char result = refinedSoundex.getMappingCode('A');
        assertEquals('A', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_LowerCaseLetter_vttI1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("aeiouywh");
        char result = refinedSoundex.getMappingCode('a');
        assertEquals('a', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_NonLetter_HTnV2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("");
        char result = refinedSoundex.getMappingCode('1');
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_OutOfRange_sIbg3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("AEIOUYWH");
        char result = refinedSoundex.getMappingCode('Z');
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_uppercase_IGRo5_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ABC");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_mixedCase_AYqL7_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("aBc");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_unicode_jzWx8_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a\u00A0bc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_whitespace_AMJW10() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a b c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_punctuation_CPEv11_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a,b,c");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_digits_YWlz12_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a1b2c3");
        assertEquals("A013", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_uppercaseAndSpecialCharacters_xLOE14_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ABC$%^&*()_");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_NonEmptyStrings_saxv1_fid1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int result = refinedSoundex.difference("hello", "world");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_DifferentLengths_Wqqm3_fid1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int result = refinedSoundex.difference("hello", "worlds");
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ikZS0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "hello";
        String expectedOutput = "Hi";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_jeJB0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String result = refinedSoundex.encode("hello");
        assertEquals("Hi", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_Zibl1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'a', 'b', 'c'});
        String result = refinedSoundex.encode("abc");
        assertEquals("Aabc", result);
    }

    @Test
    public void testGetMappingCode_invalidInput_EPYN0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = '!';
        assertEquals(0, refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_uppercase_bZJJ2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'a';
        assertEquals('0', refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_nonLetter_WIUA4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = '1';
        assertEquals(0, refinedSoundex.getMappingCode(c));
    }
}