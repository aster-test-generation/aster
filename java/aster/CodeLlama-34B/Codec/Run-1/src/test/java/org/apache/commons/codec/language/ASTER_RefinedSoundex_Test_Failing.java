/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacter_PZkh2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_vpan3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("abc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_specialCharacters_zUmT4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a$%^&*()_");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_uppercase_IGRo5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ABC");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_mixedCase_AYqL7() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("aBc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_unicode_jzWx8() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a\u00A0bc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_punctuation_CPEv11() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a,b,c");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_digits_YWlz12() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a1b2c3");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_specialCharactersAndDigits_jVka13() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("a$%^&*()_123");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_uppercaseAndSpecialCharacters_xLOE14() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("ABC$%^&*()_");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_NonEmptyStrings_saxv1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int result = refinedSoundex.difference("hello", "world");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_DifferentLengths_Wqqm3() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int result = refinedSoundex.difference("hello", "worlds");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ikZS0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "hello";
        String expectedOutput = "H400";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonAlphanumericString_Biut5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "!@#$%^&*()_+";
        String expectedOutput = "!@#$%^&*()_+";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_jeJB0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String result = refinedSoundex.encode("hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_Zibl1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'a', 'b', 'c'});
        String result = refinedSoundex.encode("abc");
        assertEquals("A120", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_vpan3_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.soundex("A013");
        assertEquals("A013", result);
    }

    @Test
    public void testGetMappingCode_validInput_JdNP1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = '0';
        assertEquals('0', refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_lowercase_wnCh3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = '5';
        assertEquals('5', refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_JdNP1_fid2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'A';
        assertEquals('A', refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_uppercase_bZJJ2_fid2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'a';
        assertEquals('A', refinedSoundex.getMappingCode(c));
    }

    @Test
    public void testGetMappingCode_validInput_lowercase_wnCh3_fid2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'Z';
        assertEquals('Z', refinedSoundex.getMappingCode(c));
    }
}