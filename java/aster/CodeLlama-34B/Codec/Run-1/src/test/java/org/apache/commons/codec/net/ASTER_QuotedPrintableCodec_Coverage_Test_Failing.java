/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidCharset_cmxt2() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertThrows(UnsupportedCharsetException.class, () -> codec.decode("test", "invalid_charset"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithInvalidCharset_dRiV9_DomR0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("invalid_charset");
        byte[] bytes = "Hello World!".getBytes();
        byte[] encoded = codec.encode(bytes);
        Assertions.assertEquals("Hello World!", new String(encoded));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithEmptyBytes_GKaD8_dvbj0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] bytes = "".getBytes();
        byte[] encoded = codec.encode(bytes);
        Assertions.assertEquals("", new String(encoded));
    }
}