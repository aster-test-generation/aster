/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Test_Failing {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValues_lLzM3() {
        String value1 = null;
        String value2 = null;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentAccents_tRFf7() {
        String value1 = "hello";
        String value2 = "hllo";
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentSpecialCharacters_jkCc8() {
        String value1 = "hello";
        String value2 = "hllo!";
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentNumbers_LbMY11() {
        String value1 = "hello";
        String value2 = "hello1";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentSymbols_QeUD12() {
        String value1 = "hello";
        String value2 = "hello$";
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_FqdQ0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        int maxCodeLen = dm.getMaxCodeLen();
        assertEquals(10, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyString_enQn0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MultipleCharacters_iiJi3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", false);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Alternate_ohPw4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", true);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SlavoGermanic_EpSB5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("wurst", true);
        assertEquals("WRST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_whwe6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("xray", false);
        assertEquals("XR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_Fruv13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("h", false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_Ukff2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("BCE", false);
        assertEquals("B", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_PTmp9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("H", false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_kHoc2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("silent", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NonSilentStart_UQbX3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("nonSilent", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SlavoGermanic_lIow4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("slavoGermanic", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NonSlavoGermanic_AhUe5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("nonSlavoGermanic", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Alternate_HpFv6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("alternate", true);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NonAlternate_vEyK7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("nonAlternate", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_HhKN3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
        assertEquals("AEIOUY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_lFCG0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "test";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyValue_nywY2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = true;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithE_fNzE5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = true;
        String expected = "E";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithI_qBYC6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = true;
        String expected = "I";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithO_czWz7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = true;
        String expected = "O";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithU_arpo8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "U";
        boolean alternate = true;
        String expected = "U";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_rbmo9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Y";
        boolean alternate = true;
        String expected = "Y";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSilentStart_PWsP1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSilentStart_PWsP1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneE_tWeg3_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = false;
        String expectedPrimary = "E";
        String expectedAlternate = "E";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneE_tWeg3_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = false;
        String expectedPrimary = "E";
        String expectedAlternate = "E";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneI_QxKC4_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = false;
        String expectedPrimary = "I";
        String expectedAlternate = "I";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneI_QxKC4_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = false;
        String expectedPrimary = "I";
        String expectedAlternate = "I";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneO_YaCq5_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = false;
        String expectedPrimary = "O";
        String expectedAlternate = "O";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneO_YaCq5_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = false;
        String expectedPrimary = "O";
        String expectedAlternate = "O";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_cObV0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = true;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_hKhQ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = true;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_fqAw5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Bhello";
        boolean alternate = true;
        String expected = "PHL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_mQNJ6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Chello";
        boolean alternate = true;
        String expected = "KHL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_rgHR7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Dhello";
        boolean alternate = true;
        String expected = "THL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_UhWR8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Fhello";
        boolean alternate = true;
        String expected = "FHL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_ykjK9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ghello";
        boolean alternate = true;
        String expected = "KHL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_Ntha10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hhello";
        boolean alternate = true;
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_etim3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("AEIOUY", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_orPY6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("TK", doubleMetaphone.doubleMetaphone("D", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_kSfX9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("H", doubleMetaphone.doubleMetaphone("H", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyString_UGcT2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = false;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DBrx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "abc";
        boolean alternate = true;
        String expected = "abc";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_DJkw1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "abc";
        boolean alternate = false;
        String expected = "abc";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_wdJd3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "psalm";
        boolean alternate = true;
        String expected = "psalm";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_SjXT4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "apple";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithE_wDUb5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "elephant";
        boolean alternate = true;
        String expected = "E";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithI_PEoG6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "igloo";
        boolean alternate = true;
        String expected = "I";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithO_uPVo7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ocean";
        boolean alternate = true;
        String expected = "O";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithU_HSpr8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "umbrella";
        boolean alternate = true;
        String expected = "U";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_yOeF9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "yellow";
        boolean alternate = true;
        String expected = "Y";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_rVet10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "bubble";
        boolean alternate = true;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_yJYy3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "KKtest";
        boolean alternate = true;
        String expected = "KKtest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVowel_Kxhi4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Atest";
        boolean alternate = true;
        String expected = "Atest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_xvYI5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Btest";
        boolean alternate = true;
        String expected = "Ptest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_oEzO6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ctest";
        boolean alternate = true;
        String expected = "Ktest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_GhiN7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Dtest";
        boolean alternate = true;
        String expected = "Ttest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_UnVW8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ftest";
        boolean alternate = true;
        String expected = "Ftest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_tnhm9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Gtest";
        boolean alternate = true;
        String expected = "Ktest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_uOUI10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Htest";
        boolean alternate = true;
        String expected = "Htest";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_TwoLetters_CNxF3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ab", false);
        assertEquals("AB", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Vowel_TmwY8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("AEIOUY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Consonant_ATXb9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("bcdfghjklmnpqrstvwxyz", false);
        assertEquals("BCDFGHJKLMNPQRSTVWXYZ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SpecialCharacter_MTpg10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("!@#$%^&*()_+-=[]{}|;':\"<>,./?", false);
        assertEquals("!@#$%^&*()_+-=[]{}|;':\"<>,./?", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_HandleH_SlavoGermanic_MPkO12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("H", true);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_E_SIfU4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("E", false);
        assertEquals("E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_I_uatS5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("I", false);
        assertEquals("I", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_O_mion6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("O", false);
        assertEquals("O", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_U_FImB7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("U", false);
        assertEquals("U", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Y_HowM8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Y", false);
        assertEquals("Y", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_rmVH2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("JOSE", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_VImF4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Bubble", false);
        assertEquals("PPBL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_NvpY5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Cable", false);
        assertEquals("KBL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_WrHA3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("aeiouy", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_RzHz4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("b", false);
        assertEquals("p", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_NtXp5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("c", false);
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_vAHo6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("d", false);
        assertEquals("t", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_tJRW7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("f", false);
        assertEquals("f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_PajO8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("g", false);
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_qTTR9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("h", false);
        assertEquals("h", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_cMaz10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("j", false);
        assertEquals("j", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_CpXg11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("k", false);
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_huPv12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("l", false);
        assertEquals("l", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_riTc13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("m", false);
        assertEquals("m", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_DMNR14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("n", false);
        assertEquals("n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyInput_dyWC1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("", doubleMetaphone.doubleMetaphone("", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_ktyN2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("", doubleMetaphone.doubleMetaphone("A", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_lkPA6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("J", doubleMetaphone.doubleMetaphone("D", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_emptyString_pohm0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("", dm.doubleMetaphone("", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_twoLetters_zBmF3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("AB", dm.doubleMetaphone("AB", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_threeLetters_LmNn4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABC", dm.doubleMetaphone("ABC", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fourLetters_KBUl5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCD", dm.doubleMetaphone("ABCD", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fiveLetters_MubX6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDE", dm.doubleMetaphone("ABCDE", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_sixLetters_AtUm7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDEF", dm.doubleMetaphone("ABCDEF", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_sevenLetters_CajE8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDEFG", dm.doubleMetaphone("ABCDEFG", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_eightLetters_kUnK9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDEFGH", dm.doubleMetaphone("ABCDEFGH", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nineLetters_sTnM10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDEFGHI", dm.doubleMetaphone("ABCDEFGHI", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_tenLetters_Ytig11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("ABCDEFGHIJ", dm.doubleMetaphone("ABCDEFGHIJ", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_QWTb1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_dRgd3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_sEPm1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("", doubleMetaphone.doubleMetaphone("", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_WXlG3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "bob";
        boolean alternate = false;
        String expected = "PB";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartLessThanLength_tOXG3() {
        String value = "hello";
        int start = 2;
        int length = 5;
        String[] criteria = new String[]{"hello"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartEqualToLength_MGfu4() {
        String value = "hello";
        int start = 5;
        int length = 5;
        String[] criteria = new String[]{"hello"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartLessThanLength_MultipleCriteria_uDxb6() {
        String value = "hello";
        int start = 2;
        int length = 5;
        String[] criteria = new String[]{"hello", "world"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartEqualToLength_MultipleCriteria_fRvH7() {
        String value = "hello";
        int start = 5;
        int length = 5;
        String[] criteria = new String[]{"hello", "world"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_emptyString_FgBI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_singleCharacter_fhjm1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_multipleCharacters_TcKU2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_specialCharacters_MUqo3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a$b%c");
        assertEquals("a$b%c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_emptyString_withPhoneme_xuSP5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", true);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_singleCharacter_withPhoneme_xdIz6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a", true);
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_multipleCharacters_withPhoneme_HzgX7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", true);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_specialCharacters_withPhoneme_aBQr8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a$b%c", true);
        assertEquals("a$b%c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_zRzc0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "hll";
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_ubjP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        String expected = "";
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValues_lLzM3_iLtf1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = null;
        String value2 = null;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_zAba2_KVfC0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
        String result = doubleMetaphone.encode("zAba2");
        assertEquals("TKBRNFX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithNullValue_XDwo5_tSmu0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(0);
        assertNull(dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_Ukff2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("PSCE", false);
        assertEquals("PS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyValue_nywY2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = true;
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneSilentStart_PWsP1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = false;
        String expectedPrimary = "HL";
        String expectedAlternate = "HL";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneE_tWeg3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = false;
        String expectedPrimary = "E";
        String expectedAlternate = "E";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneI_QxKC4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = false;
        String expectedPrimary = "I";
        String expectedAlternate = "I";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneO_YaCq5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = false;
        String expectedPrimary = "O";
        String expectedAlternate = "O";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
        assertEquals(expectedPrimary, actualPrimary);
        assertEquals(expectedAlternate, actualAlternate);
    }
}