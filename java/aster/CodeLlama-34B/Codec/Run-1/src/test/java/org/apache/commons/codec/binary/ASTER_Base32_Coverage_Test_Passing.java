/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_mNBQ0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[0];
        byte[] output = base32.encode(input);
        assertArrayEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonEmptyArray_nbBh1_1() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input);
        assertNotNull(output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonEmptyArray_nbBh1_2() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = base32.encode(input);
        assertEquals(8, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_UNZb0() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        Object output = base32.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_VFNP1() throws DecoderException {
        Base32 base32 = new Base32();
        String input = "hello";
        Object output = base32.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidParameter_gYSP2() throws org.apache.commons.codec.DecoderException {
        Base32 base32 = new Base32();
        Object input = new Object();
        try {
            base32.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_EmptyArray_rCUp0() {
        Base32 base32 = new Base32();
        boolean result = base32.containsAlphabetOrPad(new byte[0]);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_NonEmptyArray_rolX1() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad_NullArray_dtsM2() {
        Base32 base32 = new Base32();
        boolean result = base32.containsAlphabetOrPad(null);
        assertFalse(result);
    }
}