/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_rjnN0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c', ' '};
        byte[] encodedBytes = codec.encode(bytes);
        assertEquals(new byte[]{'a', 'b', 'c', '+'}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutSpace_SUQQ1() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] encodedBytes = codec.encode(bytes);
        assertEquals(new byte[]{'a', 'b', 'c'}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_nsaq3() throws EncoderException {
        byte[] alwaysEncodeChars = new byte[]{1, 2, 3};
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
        byte[] input = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        assertArrayEquals(expected, codec.encode(input));
    }
}