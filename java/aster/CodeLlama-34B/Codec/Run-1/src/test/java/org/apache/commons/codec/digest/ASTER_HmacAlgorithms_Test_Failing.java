/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacAlgorithms_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_HMAC_MD5_hEps0_HjHl0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("HMAC-MD5", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_HMAC_SHA_1_fKSf1_YkSC0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_SHA_1;
        assertEquals("HMAC-SHA-1", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_HMAC_SHA_224_mwKs2_GBtl0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_SHA_224;
        assertEquals("HMAC-SHA-224", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_HMAC_SHA_384_MWPG4_oxZw0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_SHA_384;
        assertEquals("HMAC-SHA-384", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_InvalidAlgorithm_PSzf6_eSfv0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Invalid algorithm", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullAlgorithm_eJRp7_Oqso0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Null algorithm", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyAlgorithm_ZAOV8_ZYoQ0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Empty algorithm", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_BlankAlgorithm_ronb9_dpvN0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Blank algorithm", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_InvalidAlgorithmName_XuoZ10_KPRn0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Invalid algorithm name", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullAlgorithmName_OjBG11_FUxY0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Null algorithm name", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EmptyAlgorithmName_BRYA12_CeFh0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Empty algorithm name", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_BlankAlgorithmName_bUMw13_aAGD0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        assertEquals("Blank algorithm name", hmacAlgorithms.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_null_TcVI6_kyPz0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_MD5;
        String expected = "HMAC-MD5";
        String actual = hmacAlgorithms.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_invalid_CUXY9_hWtE0_fid2() {
        HmacAlgorithms hmacAlgorithms = HmacAlgorithms.HMAC_SHA_512;
        String expected = "HMAC-SHA-512";
        String actual = hmacAlgorithms.toString();
        assertEquals(expected, actual);
    }
}