/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_tGGw0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        Object output = urlCodec.decode(input);
        assertEquals(output, "[65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_GKqM0() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = urlCodec.encode(input);
        assertArrayEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_string_invalidChars_ZSik7() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "hello world";
        try {
            urlCodec.encode(input);
            assertEquals("hello%20world", urlCodec.encode(input));
        } catch (EncoderException e) {
            fail("Unexpected EncoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNonUrlSafeBytes_Pcej3() {
        byte[] bytes = new byte[]{'a', 'b', 'c', 'd'};
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] expected = new byte[]{'a', 'b', 'c', '+', 'd'};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithSpace_WBFo4() {
        byte[] bytes = new byte[]{'a', 'b', 'c', ' '};
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] expected = new byte[]{'a', 'b', 'c', '+', ' ', ' '};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithEscapedChar_TvEF5() {
        byte[] bytes = new byte[]{'a', 'b', 'c', '\\'};
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] expected = new byte[]{'a', 'b', 'c', '\\', '\\'};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Xplx0() {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = "Hello, World!".getBytes();
        byte[] encodedBytes = urlCodec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInput_zJlg2() {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = "hello%20world".getBytes();
        try {
            urlCodec.decode(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Illegal hex characters in escape (%) pattern - ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_invalidUrlEncoding2_Iotq7_tGEt0() {
        byte[] bytes = new byte[]{(byte) 0xFF, 'a', 'b', 'c'};
        try {
            URLCodec.decodeUrl(bytes);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_NullCharset_IFOH2_fid1() {
        URLCodec urlCodec = new URLCodec(null);
        String encoding = urlCodec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_EmptyCharset_qIgS3_fid1() {
        URLCodec urlCodec = new URLCodec("");
        String encoding = urlCodec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_InvalidCharset_CzFb4_fid1() {
        URLCodec urlCodec = new URLCodec("invalid_charset");
        String encoding = urlCodec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_NullURLCodec_mgng5_fid1() {
        URLCodec urlCodec = null;
        String encoding = urlCodec.getEncoding();
        assertNull(encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_EmptyCharsetInURLCodec_gJUU7_fid1() {
        URLCodec urlCodec = new URLCodec("");
        String encoding = urlCodec.getEncoding();
        assertNull(encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_InvalidCharsetInURLCodec_HYmz8_fid1() {
        URLCodec urlCodec = new URLCodec("invalid_charset");
        String encoding = urlCodec.getEncoding();
        assertNull(encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_NullCharset_fzvw2_fid1() {
        URLCodec urlCodec = new URLCodec(null);
        String defaultCharset = urlCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_EmptyCharset_Zpip3_fid1() {
        URLCodec urlCodec = new URLCodec("");
        String defaultCharset = urlCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_InvalidCharset_PNZN4_fid1() {
        URLCodec urlCodec = new URLCodec("invalid_charset");
        String defaultCharset = urlCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_tGGw0_fid1() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        Object output = urlCodec.decode(input);
        assertEquals(output, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_byteArray_GKqM0_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        Object output = urlCodec.encode(input);
        assertEquals(new String(input), output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_string_vCaW1_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "hello world";
        Object output = urlCodec.encode(input);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_string_invalidChars_ZSik7_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "hello world";
        try {
            urlCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Invalid characters in input", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithSpace_WBFo4_fid1() {
        byte[] bytes = new byte[]{'a', 'b', 'c', ' '};
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] expected = new byte[]{'a', 'b', 'c', '+', ' '};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Xczb0_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        String encodedStr = urlCodec.encode(str);
        assertEquals("Hello%2C%20World%21", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_vdtS4_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!@#$%^&*()_+";
        String encodedStr = urlCodec.encode(str);
        assertEquals("Hello%2C%20World%21%40%23%24%25%5E%26*()_%2B", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonAsciiCharacters_pNRk5_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World! ";
        String encodedStr = urlCodec.encode(str);
        assertEquals("Hello%2C%20World%21%20%F0%9F%98%8A", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_lQWT0_fid1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        String charsetName = "UTF-8";
        String expected = "Hello%2C%20World%21";
        String actual = urlCodec.encode(str, charsetName);
        assertEquals(expected, actual);
    }
}