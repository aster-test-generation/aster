/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncoderException_noPM1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.encode("test", "utf-8");
            fail("EncoderException should have been thrown");
        } catch (EncoderException e) {
            assertEquals("EncoderException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_moBD1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        Object result = bCodec.decode(value);
        assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_UisE3() throws org.apache.commons.codec.DecoderException {
        Charset charset = Charset.forName("UTF-8");
        BCodec bCodec = new BCodec(charset);
        String value = "test";
        Object result = bCodec.decode(value);
        assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_KZXN4() throws org.apache.commons.codec.DecoderException {
        String charsetName = "UTF-8";
        BCodec bCodec = new BCodec(charsetName);
        String value = "test";
        Object result = bCodec.decode(value);
        assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_iXnc0_fid2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_encoding");
            fail("UnsupportedEncodingException should be thrown");
        } catch (DecoderException e) {
            assertEquals("Unsupported encoding", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeIllegalArgumentException_ipeF1_fid2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_argument");
            fail("IllegalArgumentException should be thrown");
        } catch (DecoderException e) {
            assertEquals("Illegal argument", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedCharsetException_EYgW0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.encode("test", "invalid_charset");
            fail("UnsupportedCharsetException should have been thrown");
        } catch (EncoderException e) {
            assertEquals("UnsupportedCharsetException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_Kewd1_2_fid2() throws EncoderException {
        BCodec bCodec = new BCodec();
        String text = "Hello, World!";
        String encodedText = bCodec.encodeText(text, "UTF-8");
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ozzh1_fid2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String input = "test";
        String expected = "dGVzdA==";
        assertEquals(expected, bCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_BzRB3_fid2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String input = "test";
        String expected = "dGVzdA==";
        assertEquals(expected, bCodec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_BZhW4_fid2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String input = "test";
        String expected = "dGVzdA==";
        assertEquals(expected, bCodec.encode(input));
    }
}