/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WWbb0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String expectedResult = "=?UTF-8?Q?Hello, World!?=";
        String actualResult = qCodec.encode(sourceStr);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_fnpy0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test string";
        String expected = "decoded string";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidCharset_nZCP0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String sourceCharset = "UTF-8";
        String expectedEncodedStr = "=?UTF-8?Q?Hello, World!?=";
        String actualEncodedStr = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_wXlY1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = "test";
        Object result = qCodec.decode(obj);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithCharset_MOQn4() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        Object obj = "test";
        Object result = qCodec.decode(obj);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNonNull_bHcW2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "=?UTF-8?Q?Hello World!?=";
        String charsetName = "UTF-8";
        String actual = qCodec.encodeText(text, charsetName);
        assertEquals("=?UTF-8?Q?Hello World!?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNonNullDifferentCharset_CYix3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "=?ISO-8859-1?Q?Hello World!?=";
        String charsetName = "ISO-8859-1";
        String actual = qCodec.encodeText(text, charsetName);
        assertEquals("=?ISO-8859-1?Q?Hello World!?=", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingQuotedPrintable_IbsB3() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 9};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlanks_DShM4() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{1, 2, 9};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNonBlanks_CWHg5() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{1, 2, 9};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingInvalidCharset_qZWJ7() {
        QCodec qCodec = new QCodec("invalid_charset");
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithInvalidCharset_WhFE4() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("INVALID_CHARSET");
        String expected = "=?UTF-8?Q?Hello_World?=";
        String actual = qCodec.encodeText(text, charset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withQuotedPrintableAndUnderscores_OfHo6_HRer0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, (byte) '_', (byte) '='};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, (byte) ' ', (byte) '='};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_UdnW2_QQfR0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test string";
        String expected = "decoded string";
        try {
            String actual = qCodec.decodeText(str);
            assertEquals(expected, actual);
        } catch (java.io.UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withUnderscoresAndSpacesAndQuotedPrintable_gBTM4_irbX0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, (byte) '_', (byte) ' ', 6, 7, 8, 9, (byte) '='};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, (byte) ' ', 6, 7, 8, 9, (byte) '='};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WWbb0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String expectedResult = "Hello, World!";
        String actualResult = qCodec.encode(sourceStr);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_VZaR1_fid1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test string";
        String expected = "decoded string";
        try {
            String actual = qCodec.decode(str);
            fail("Expected UnsupportedEncodingException");
        } catch (DecoderException e) {
            assertEquals(expected, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidCharset_nZCP0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expectedEncodedStr = "Hello, World!";
        String actualEncodedStr = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_TWck1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String input = "test";
        Object result = qCodec.encode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStringWithCharset_Jxty4() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String input = "test";
        Object result = qCodec.encode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextEmpty_nebD1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "";
        String charsetName = "UTF-8";
        String actual = qCodec.encodeText(text, charsetName);
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNonNull_bHcW2_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World!";
        String charsetName = "UTF-8";
        String actual = qCodec.encodeText(text, charsetName);
        assertEquals("Hello World!", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextNonNullDifferentCharset_CYix3_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World!";
        String charsetName = "ISO-8859-1";
        String actual = qCodec.encodeText(text, charsetName);
        assertEquals("Hello World!", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingQuotedPrintable_IbsB3_fid1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBlanks_DShM4_fid1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingNonBlanks_CWHg5_fid1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_dMKJ0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        Charset charset = Charset.forName("UTF-8");
        String expected = "=?UTF-8?Q?Hello_World?=";
        String actual = qCodec.encodeText(text, charset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharsetName_dIoz1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        String charsetName = "UTF-8";
        String expected = "=?UTF-8?Q?Hello_World?=";
        String actual = qCodec.encodeText(text, Charset.forName(charsetName));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_noCharsetToken_YqzG2_fid1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?=?=?=?=?=?=");
            Assertions.fail("Expected DecoderException not thrown");
        } catch (DecoderException e) {
            Assertions.assertEquals("RFC 1522 violation: charset token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_noEncodingToken_SpgC3_fid1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?=?=?=?=?=?=?=");
            Assertions.fail("Expected DecoderException not thrown");
        } catch (DecoderException e) {
            Assertions.assertEquals("RFC 1522 violation: encoding token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_noCharset_iuVu4_fid1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?=?=?=?=?=?=?=");
            Assertions.fail("Expected DecoderException not thrown");
        } catch (DecoderException e) {
            Assertions.assertEquals("RFC 1522 violation: charset not specified", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_noEncoding_fxKc5_fid1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?=?=?=?=?=?=?=");
            Assertions.fail("Expected DecoderException not thrown");
        } catch (DecoderException e) {
            Assertions.assertEquals("RFC 1522 violation: encoding not specified", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_invalidEncoding_icVL6_fid1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?=?=?=?=?=?=?=?=");
            Assertions.fail("Expected DecoderException not thrown");
        } catch (DecoderException e) {
            Assertions.assertEquals("This codec cannot decode invalid encoding", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_validInput_gSfI7() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        QCodec qCodec = new QCodec();
        try {
            String result = qCodec.decodeText("=?UTF-8?Q?=E2=9C=93?=");
            Assertions.assertEquals("", result);
        } catch (DecoderException e) {
            Assertions.fail("Unexpected exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithDefaultCharset_eeXV2_GWai0_fid3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello World";
        String expected = "=?UTF-8?Q?Hello_World?=";
        String actual = qCodec.encodeText(text, StandardCharsets.UTF_8);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withUnderscoresAndSpaces_bmmw3_TxiQ0_fid3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, (byte) '_', (byte) ' ', 6, 7, 8, 9};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, (byte) ' ', 6, 7, 8, 9};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }
}