/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacterInput_Oemp2() {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_silentMarker_MSff4() {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("SILENT"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_DnlH5() {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("ABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_silentMarker_qWaf7() {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("SILENTABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_customMapping_zxnm2() {
        Soundex soundex = new Soundex(new char[]{'A', 'B', 'C', 'D', 'E'});
        int maxLength = soundex.getMaxLength();
        assertEquals(5, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference1_dfGs0() throws EncoderException {
        Soundex soundex = new Soundex();
        int result = soundex.difference("hello", "world");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference2_HAoY1() throws EncoderException {
        Soundex soundex = new Soundex(new char[]{'h', 'e', 'l', 'l', 'o'});
        int result = soundex.difference("hello", "world");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_singleCharacter_hShi1() {
        Soundex soundex = new Soundex();
        assertEquals("A", soundex.encode("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_multipleCharacters_yASZ2() {
        Soundex soundex = new Soundex();
        assertEquals("AB", soundex.encode("AB"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_specialCaseHW_jQri3_JxJj0() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("0000", soundex.soundex("HW"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_specialCaseHW_rbkO6_BifB0() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("0000", soundex.soundex("HWABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_specialCaseHW_silentMarker_mQEK8_fVwf0() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("0000", soundex.soundex("HWSILENTABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_specialCaseHW_silentMarker_differentOrder_differentCasing_Fwtt10_UtAI0() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("0000", soundex.soundex("hWsIlEntAbC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference3_qzcD2_tYGJ0() throws EncoderException {
        Soundex soundex = new Soundex("hello", true);
        int result = soundex.difference("hello", "world");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference4_ezXa3_bAQr0() throws EncoderException {
        Soundex soundex = new Soundex("hello", false);
        int result = soundex.difference("hello", "world");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_specialCaseHW_QhHP3_bhce1() {
        Soundex soundex = new Soundex(String.valueOf(new char[]{'H', 'W'}), true);
        assertEquals("HW", soundex.encode("HW"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_specialCaseHW_jQri3_JxJj0_fid1() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("H000", soundex.soundex("HW"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDigits_specialCaseHW_silentMarker_mQEK8_fVwf0_fid1() {
        Soundex soundex = new Soundex("HW", true);
        assertEquals("H000", soundex.soundex("HWSILENTABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference3_qzcD2_tYGJ0_fid1() throws EncoderException {
        Soundex soundex = new Soundex("hello", true);
        int result = soundex.difference("hello", "world");
        assertEquals(3, result);
    }
}