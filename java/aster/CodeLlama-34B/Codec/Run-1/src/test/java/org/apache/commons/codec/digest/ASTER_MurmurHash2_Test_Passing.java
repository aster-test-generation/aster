/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_validData_xSFg2() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 5, 0xe17a1465);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidSeedAndLength_YBHk8() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3, 4, 5}, 0, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyString_hqBy0() {
        String text = "";
        int from = 0;
        int length = 0;
        int expected = 0;
        int actual = MurmurHash2.hash32(text, from, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleCharacter_MbcN1() {
        String text = "a";
        int from = 0;
        int length = 1;
        int expected = 97;
        int actual = MurmurHash2.hash32(text, from, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleCharacters_LAQq2() {
        String text = "abc";
        int from = 0;
        int length = 3;
        int expected = 479470107;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_substring_SoPB3() {
        String text = "abcdef";
        int from = 2;
        int length = 3;
        int expected = -177778542;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyData_UvkE0() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_null_gGME3() {
        long result = MurmurHash2.hash64(new byte[0], 0, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_largeInput_gRsv6() {
        long result = MurmurHash2.hash64("a very long string that is longer than 100 characters");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyString_xNtz0() {
        int result = MurmurHash2.hash32("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleCharacter_Mbhw1() {
        int result = MurmurHash2.hash32("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MultipleCharacters_ZFie2() {
        int result = MurmurHash2.hash32("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LongString_llhF3() {
        int result = MurmurHash2.hash32("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
        assertEquals(502056761, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_smrU0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = data.length;
        int seed = 123456789;
        long expected = 7741781375570417231L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_buES1_qnrk0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 123456789;
        long expected = -7230742767888949917L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyBytes_azFr5_BnAy0() {
        int result = MurmurHash2.hash32(new byte[0], 0, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MultipleBytes_PfRy7_SNFh0() {
        int result = MurmurHash2.hash32(new byte[]{97, 98, 99}, 3, 0);
        assertEquals(324500635, result);
    }
}