/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_Inwe0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = null;
        String charsetName = "UTF-8";
        String actual = urlCodec.decode(str, charsetName);
        Assertions.assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_zdAV1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "";
        String charsetName = "UTF-8";
        String actual = urlCodec.decode(str, charsetName);
        Assertions.assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_WrHP1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithUnsupportedEncodingException_ktwP2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.decode("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullString_abLU0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull(codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyString_WvXg1() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertEquals("", codec.encode("", "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidType_vZrl3() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec();
        try {
            Object output = codec.encode(new Object());
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be URL encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_lAof1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object result = urlCodec.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_rjSF2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "Hello, World!";
        Object result = urlCodec.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_yGzl3() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        Object input = new Object();
        try {
            urlCodec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + input.getClass().getName() + " cannot be URL decoded"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_urlsafeNotNull_HzkO1() {
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256);
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_bLessThanZero_rnbF2_oFtV0() {
        BitSet urlsafe = new BitSet();
        urlsafe.set(0, 256);
        byte[] bytes = new byte[]{-1, -2, -3};
        byte[] expected = new byte[]{(byte) 255, (byte) 254, (byte) 253};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringWithDefaultCharset_dRSK3_AymN1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            String result = urlCodec.decode("test", "UTF-8");
            assertEquals("test", result);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
}