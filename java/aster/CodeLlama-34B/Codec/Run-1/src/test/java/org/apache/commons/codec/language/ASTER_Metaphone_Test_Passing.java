/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Metaphone_Test_Passing {
    private Metaphone metaphone = new Metaphone();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_BTYi1() {
        Metaphone metaphone = new Metaphone();
        String txt = "Ghost";
        String expected = "G";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_PmuZ2() {
        Metaphone metaphone = new Metaphone();
        String txt = "Pit";
        String expected = "P";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone10_rVGl9() {
        Metaphone metaphone = new Metaphone();
        String txt = "Ink";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_unHT10() {
        Metaphone metaphone = new Metaphone();
        String txt = "Jam";
        String expected = "J";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone12_hJoa11() {
        Metaphone metaphone = new Metaphone();
        String txt = "Kite";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone13_ObFx12() {
        Metaphone metaphone = new Metaphone();
        String txt = "Lion";
        String expected = "L";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_nAtq0() {
        Metaphone metaphone = new Metaphone();
        String txt = "KN";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_ZuQG1() {
        Metaphone metaphone = new Metaphone();
        String txt = "G";
        String expected = "G";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_gHeH2() {
        Metaphone metaphone = new Metaphone();
        String txt = "P";
        String expected = "P";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_xdce3() {
        Metaphone metaphone = new Metaphone();
        String txt = "B";
        String expected = "B";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_Xphz4() {
        Metaphone metaphone = new Metaphone();
        String txt = "C";
        String expected = "C";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_ncYi7() {
        Metaphone metaphone = new Metaphone();
        String txt = "H";
        String expected = "H";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone9_ugLv8() {
        Metaphone metaphone = new Metaphone();
        String txt = "F";
        String expected = "F";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone10_Ahzf9() {
        Metaphone metaphone = new Metaphone();
        String txt = "J";
        String expected = "J";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_HrtX10() {
        Metaphone metaphone = new Metaphone();
        String txt = "L";
        String expected = "L";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone12_rzXA11() {
        Metaphone metaphone = new Metaphone();
        String txt = "M";
        String expected = "M";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone13_BhFM12() {
        Metaphone metaphone = new Metaphone();
        String txt = "N";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone14_mokw13() {
        Metaphone metaphone = new Metaphone();
        String txt = "R";
        String expected = "R";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_MDHi0() {
        Metaphone metaphone = new Metaphone();
        String txt = "Knight";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_ggnS1() {
        Metaphone metaphone = new Metaphone();
        String txt = "Ghost";
        String expected = "J";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_wMAH2() {
        Metaphone metaphone = new Metaphone();
        String txt = "Phrase";
        String expected = "FRS";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_DZXR3() {
        Metaphone metaphone = new Metaphone();
        String txt = "Bough";
        String expected = "B";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_yeGn4() {
        Metaphone metaphone = new Metaphone();
        String txt = "Brought";
        String expected = "BRT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone6_YQhR5() {
        Metaphone metaphone = new Metaphone();
        String txt = "Cough";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone7_dpAY6() {
        Metaphone metaphone = new Metaphone();
        String txt = "Through";
        String expected = "0R";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_YKvD7() {
        Metaphone metaphone = new Metaphone();
        String txt = "Tough";
        String expected = "T";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone9_TCyK8() {
        Metaphone metaphone = new Metaphone();
        String txt = "Dough";
        String expected = "T";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_YWSJ10() {
        Metaphone metaphone = new Metaphone();
        String txt = "Brought";
        String expected = "BT";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_rPru1() {
        Metaphone metaphone = new Metaphone();
        String txt = "G";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_NFlo10() {
        Metaphone metaphone = new Metaphone();
        String txt = "K";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone15_hwHZ14() {
        Metaphone metaphone = new Metaphone();
        String txt = "P";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_aaxq0() {
        Metaphone metaphone = new Metaphone();
        String txt = "hello";
        String expected = "HL";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_nBVg1() {
        Metaphone metaphone = new Metaphone();
        String txt = "world";
        String expected = "WRLT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_cJhX2() {
        Metaphone metaphone = new Metaphone();
        String txt = "java";
        String expected = "JF";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_rwgX3() {
        Metaphone metaphone = new Metaphone();
        String txt = "python";
        String expected = "P0N";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_OiMI4() {
        Metaphone metaphone = new Metaphone();
        String txt = "c++";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone6_vPhh5() {
        Metaphone metaphone = new Metaphone();
        String txt = "javascript";
        String expected = "JFSK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone7_ALnq6() {
        Metaphone metaphone = new Metaphone();
        String txt = "typescript";
        String expected = "TPSTSFT";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_PsLF7() {
        Metaphone metaphone = new Metaphone();
        String txt = "coffeescript";
        String expected = "KFSK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone9_aRsQ8() {
        Metaphone metaphone = new Metaphone();
        String txt = "livescript";
        String expected = "LFSK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone10_pXnJ9() {
        Metaphone metaphone = new Metaphone();
        String txt = "d3";
        String expected = "T";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_SWlH10() {
        Metaphone metaphone = new Metaphone();
        String txt = "r2d2";
        String expected = "RT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone12_uqZu11() {
        Metaphone metaphone = new Metaphone();
        String txt = "c3po";
        String expected = "KP";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone13_AqEj12() {
        Metaphone metaphone = new Metaphone();
        String txt = "bb8";
        String expected = "P";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone14_FZSt13() {
        Metaphone metaphone = new Metaphone();
        String txt = "yoda";
        String expected = "YT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_validInput_rCwJ0() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = 10;
        metaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(maxCodeLen, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_invalidInput_pdaQ1() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = -1;
        metaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(-1, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_zeroInput_oTgS3() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = 0;
        metaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(0, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_largeInput_WZDB4() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = 1000;
        metaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(1000, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_default_wQdX0() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = metaphone.getMaxCodeLen();
        assertEquals(4, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_sameStrings_NITD0() {
        String str1 = "hello";
        String str2 = "hello";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentStrings_XjsF1() {
        String str1 = "hello";
        String str2 = "world";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_nullString_wOIe2() {
        String str1 = null;
        String str2 = "hello";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_emptyString_Neyz3() {
        String str1 = "";
        String str2 = "hello";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentCases_wEGI4() {
        String str1 = "hello";
        String str2 = "Hello";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentAccents_XEQg5() {
        String str1 = "hello";
        String str2 = "hllo";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentSpecialCharacters_Fdnb6() {
        String str1 = "hello";
        String str2 = "hllo!";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentNewlines_USNN8() {
        String str1 = "hello";
        String str2 = "hello\n";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentTabs_ZsFt9() {
        String str1 = "hello";
        String str2 = "hello\t";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentCarriageReturns_bNyj10() {
        String str1 = "hello";
        String str2 = "hello\r";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_differentFormFeeds_geyz12() {
        String str1 = "hello";
        String str2 = "hello\f";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_OBRr0() {
        Metaphone metaphone = new Metaphone();
        String input = "hello";
        String expected = "HL";
        String actual = metaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_Sjop1() {
        Metaphone metaphone = new Metaphone();
        Object input = new Object();
        try {
            metaphone.encode(input);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Metaphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyInput_ZsTi3() {
        Metaphone metaphone = new Metaphone();
        String input = "";
        String expected = "";
        String actual = metaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpecialCharacters_CvDW5() {
        Metaphone metaphone = new Metaphone();
        String input = "hello!";
        String expected = "HL";
        String actual = metaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KKfG0() {
        Metaphone metaphone = new Metaphone();
        String str = "hello";
        String expected = "HLL";
        String actual = metaphone.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_MoFc1() {
        Metaphone metaphone = new Metaphone();
        String str = "";
        String expected = "";
        String actual = metaphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_lVvF2() {
        Metaphone metaphone = new Metaphone();
        String str = null;
        String expected = null;
        String actual = metaphone.encode(str);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_XlQn3() {
        Metaphone metaphone = new Metaphone();
        String str = "hello world!";
        String expected = "HLWR";
        String actual = metaphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAccentedCharacters_OukZ4() {
        Metaphone metaphone = new Metaphone();
        String str = "hllo";
        String expected = "L";
        String actual = metaphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDiacritics_kwlD5() {
        Metaphone metaphone = new Metaphone();
        String str = "hllo";
        String expected = "HLL";
        String actual = metaphone.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonLatinCharacters_uFgF6() {
        Metaphone metaphone = new Metaphone();
        String str = "";
        String expected = "KNNCH";
        String actual = metaphone.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonLatinCharactersAndSpecialCharacters_CDaR7() {
        Metaphone metaphone = new Metaphone();
        String str = "!";
        String expected = "KNNCH";
        String actual = metaphone.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonLatinCharactersAndSpecialCharactersAndAccentedCharacters_sDAg10() {
        Metaphone metaphone = new Metaphone();
        String str = "!";
        String expected = "!";
        String actual = metaphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_nullInput_POtz2_oIGi0() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(0);
        assertEquals(0, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_stringInput_LfqB6_cDrr0() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = 10;
        metaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(10, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_objectInput_AgRB7_msJR0() {
        Metaphone metaphone = new Metaphone();
        Object maxCodeLen = new Object();
        metaphone.setMaxCodeLen(10);
        assertEquals(10, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_validObjectInput_zezN10_UqnY0() {
        Metaphone metaphone = new Metaphone();
        Integer maxCodeLen = 10;
        metaphone.setMaxCodeLen(maxCodeLen.intValue());
        assertEquals(10, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_custom_qcAe1_uixo0() {
        Metaphone metaphone = new Metaphone();
        int maxCodeLen = metaphone.getMaxCodeLen();
    }
}