/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DaitchMokotoffSoundex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_MIfK0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacterInput_yPsR4() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("074000|075000");
        assertEquals("074000|075000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFoldingInput_AQVu6() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.soundex("074000|075000");
        assertEquals("074000|075000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoFoldingInput_rbTY7() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String result = soundex.soundex("074000|075000");
        assertEquals("074000|075000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_ivEM0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_zdLg2_YCwG0() throws org.apache.commons.codec.EncoderException {
        DaitchMokotoffSoundex encoder = new DaitchMokotoffSoundex();
        try {
            encoder.encode(null);
            fail("Expected EncoderException");
        } catch (NullPointerException e) {
            assertEquals("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_BRFf1_fid1() throws org.apache.commons.codec.EncoderException {
        DaitchMokotoffSoundex encoder = new DaitchMokotoffSoundex();
        String input = "test";
        String expectedOutput = "T230";
        assertEquals(expectedOutput, encoder.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_CIDm0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.soundex("test");
        assertEquals("t235", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithoutFolding_YWDi1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String result = soundex.soundex("test");
        assertEquals("t235", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_AWKH1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSingleCharacterInput_Jcpy3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("a");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexMultipleCharacterInput_yPsR4_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("abc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexSpecialCharacterInput_JSzO5_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("a-b-c");
        assertEquals("a-b-c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexFoldingInput_AQVu6_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.soundex("a-b-c");
        assertEquals("a-b-c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoFoldingInput_rbTY7_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String result = soundex.soundex("a-b-c");
        assertEquals("a-b-c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_eaxk1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonWhitespaceInput_ICnh3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexForce_qCer4() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoForce_mLLA5() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex("nm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFoldingAndBranching_JhGM2_pMIS0_fid2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.encode("test");
        assertEquals("t235|t35", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanupWithFolding_nfcs4_wOfk0_fid2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.encode("test");
        assertEquals("t235", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithoutFoldingAndBranching_lMfh3_UZbT0_fid2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String result = soundex.encode("test");
        assertEquals("t235|t35", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanupWithoutFolding_MNjM5_nQwh0_fid2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String result = soundex.encode("test");
        assertEquals("t235", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoBranching_wCdp7_BrKH0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.encode("abc"));
    }
}