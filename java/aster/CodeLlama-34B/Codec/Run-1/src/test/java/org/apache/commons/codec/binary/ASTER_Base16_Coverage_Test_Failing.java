/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base16_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNegativeLength_mqgt1_ixpL0() {
        Base16 base16 = new Base16();
        byte[] data = new byte[0];
        int offset = 0;
        int length = -1;
        try {
            base16.encode(data, offset, length, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input length exceeds maximum size for encoded data: -1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLargeLength_NKdg2_nYAr0() {
        Base16 base16 = new Base16();
        byte[] data = new byte[0];
        int offset = 0;
        int length = Integer.MAX_VALUE;
        try {
            base16.encode(data, offset, length);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input length exceeds maximum size for encoded data: " + Integer.MAX_VALUE, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNegativeLength_mqgt1_ixpL0_fid1() {
        Base16 base16 = new Base16();
        byte[] data = new byte[0];
        int offset = 0;
        int length = -1;
        try {
            base16.encode(data, offset, length, new Base16.Context());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input length exceeds maximum size for encoded data: -1", e.getMessage());
        }
    }
}