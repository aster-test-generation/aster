/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ColognePhonetic_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_PeSF0() throws Exception {
    ColognePhonetic encoder = new ColognePhonetic();
    String input = "Hello World";
    String expectedOutput = "H4LL0 W0RLD";
    String actualOutput = encoder.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NonString_qHsv1() throws Exception {
    ColognePhonetic encoder = new ColognePhonetic();
    Object input = new Object();
    try {
        encoder.encode(input);
        fail("Expected EncoderException to be thrown");
    } catch (EncoderException e) {
        assertEquals("This method's parameter was expected to be of the type " + String.class.getName() + ". But actually it was of the type " + input.getClass().getName() + ".", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyString_KeEL0() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SingleLetter_jFTA1() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("a");
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleLetters_VQNx2() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("abc");
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SpecialCharacters_Ualm3() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("$%^&*()");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Numbers_tKhs4() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("1234567890");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Uppercase_oBRz5() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Lowercase_nQXB6() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("abcdefghijklmnopqrstuvwxyz");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MixedCase_wGXk7() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode("aBcDeFgHiJkLmNoPqRsTuVwXyZ");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Null_DfFp8() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String result = colognePhonetic.encode(null);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_EqualTexts_NTEJ0() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "Hello";
    assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentTexts_erNx1() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "World";
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_NullTexts_DILm2() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = null;
    String text2 = null;
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_EmptyTexts_kmFA3() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "";
    String text2 = "";
    assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentLengths_UjSP4() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "Hello World";
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentCasing_koDu5() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "hello";
    assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentSpecialCharacters_tUmf6() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "Hell";
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentAccents_LTLJ7() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "Hllo";
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEncodeEqual_DifferentWhitespace_cqQU8() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    String text1 = "Hello";
    String text2 = "Hello ";
    assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_nullInput_AdaG0() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertNull(colognePhonetic.colognePhonetic(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_emptyInput_hfNB1() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("", colognePhonetic.colognePhonetic(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_singleCharacterInput_vjkR2() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0", colognePhonetic.colognePhonetic("A"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_multipleCharacterInput_XscZ3() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0123456789", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_specialCharacterInput_pTdO4() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0123456789", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_lowercaseInput_cHIJ5() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0123456789", colognePhonetic.colognePhonetic("abcdefghijklmnopqrstuvwxyz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_mixedCaseInput_Kdkk7() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0123456789", colognePhonetic.colognePhonetic("AbCdEfGhIjKlMnOpQrStUvWxYz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_aeiouyInput_XJCx8() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("0", colognePhonetic.colognePhonetic("aeiouy"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_bInput_NWDh9() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("1", colognePhonetic.colognePhonetic("b"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_pInput_wTfH10() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("1", colognePhonetic.colognePhonetic("p"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_dInput_Lckx11() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("2", colognePhonetic.colognePhonetic("d"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_tInput_VMPe12() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("2", colognePhonetic.colognePhonetic("t"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_singleCharacterInput_uczO2() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("1", colognePhonetic.colognePhonetic("A"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_multipleCharacterInput_QdMv3() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("AB"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_specialCharacterInput_dhRb4() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("A$"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_umlautCharacterInput_VEKs5() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_sharpSCharacterInput_PELn6() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("SS"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_specialCharacterAndSharpSCharacterInput_LAyG8() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("A$SS"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_multipleSpecialCharacterInput_AYtL11() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("A$%"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testColognePhonetic_multipleSharpSCharacterInput_cWIJ13() throws Exception {
    ColognePhonetic colognePhonetic = new ColognePhonetic();
    assertEquals("12", colognePhonetic.colognePhonetic("SSSS"));
}
}