/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.math.BigInteger;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base64_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64Chunked_JmBY0() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expectedResult = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actualResult = Base64.encodeBase64Chunked(binaryData);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_EmptyInput_tOuL0() throws Exception {
    byte[] binaryData = new byte[0];
    boolean isChunked = false;
    boolean urlSafe = false;
    int maxResultSize = 0;
    byte[] expectedOutput = new byte[0];
    byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_NonEmptyInput_KyqU1() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5 };
    boolean isChunked = false;
    boolean urlSafe = false;
    int maxResultSize = 10;
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_ChunkedInput_PjtM2() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5 };
    boolean isChunked = true;
    boolean urlSafe = false;
    int maxResultSize = 10;
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_UrlSafeInput_lDZO3() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5 };
    boolean isChunked = false;
    boolean urlSafe = true;
    int maxResultSize = 10;
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actualOutput = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_strict_mQSi0_1() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.STRICT);
    assertTrue(base64.isInAlphabet((byte) 10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_strict_mQSi0_2() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.STRICT);
    assertTrue(base64.isInAlphabet((byte) 20));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_strict_mQSi0_3() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.STRICT);
    assertTrue(base64.isInAlphabet((byte) 30));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_strict_mQSi0_4() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.STRICT);
    assertFalse(base64.isInAlphabet((byte) 40));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_lenient_sVVZ1_1() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.LENIENT);
    assertTrue(base64.isInAlphabet((byte) 10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_lenient_sVVZ1_2() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.LENIENT);
    assertTrue(base64.isInAlphabet((byte) 20));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_lenient_sVVZ1_3() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.LENIENT);
    assertTrue(base64.isInAlphabet((byte) 30));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_lenient_sVVZ1_4() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true, CodecPolicy.LENIENT);
    assertFalse(base64.isInAlphabet((byte) 40));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_urlSafe_fIIR2_1() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true);
    assertTrue(base64.isInAlphabet((byte) 10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_urlSafe_fIIR2_2() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true);
    assertTrue(base64.isInAlphabet((byte) 20));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_urlSafe_fIIR2_3() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true);
    assertTrue(base64.isInAlphabet((byte) 30));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_urlSafe_fIIR2_4() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 20, 30 }, true);
    assertFalse(base64.isInAlphabet((byte) 40));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_null_lkpk0() throws Exception {
    assertThrows(NullPointerException.class, () -> Base64.encodeInteger(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_zero_xnbQ1() throws Exception {
    byte[] expected = new byte[0];
    byte[] actual = Base64.encodeInteger(BigInteger.ZERO);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_one_pQXJ2() throws Exception {
    byte[] expected = new byte[] { 1 };
    byte[] actual = Base64.encodeInteger(BigInteger.ONE);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_negativeOne_rJNw3() throws Exception {
    byte[] expected = new byte[] { -1 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(-1));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_maxValue_YcWo4() throws Exception {
    byte[] expected = new byte[] { 127 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(Integer.MAX_VALUE));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_minValue_UnBk5() throws Exception {
    byte[] expected = new byte[] { -128 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(Integer.MIN_VALUE));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_random_Fjwr6() throws Exception {
    byte[] expected = new byte[] { 42 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(42));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_randomNegative_FYDy7() throws Exception {
    byte[] expected = new byte[] { -42 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(-42));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_large_mQTq8() throws Exception {
    byte[] expected = new byte[] { 127, 127, 127, 127, 127, 127, 127, 127 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(Long.MAX_VALUE));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInteger_largeNegative_rEdN9() throws Exception {
    byte[] expected = new byte[] { -128, -128, -128, -128, -128, -128, -128, -128 };
    byte[] actual = Base64.encodeInteger(BigInteger.valueOf(Long.MIN_VALUE));
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_1_RmJT0() throws Exception {
    String base64String = "SGVsbG8gV29ybGQh";
    byte[] expected = "Hello World!".getBytes();
    byte[] actual = Base64.decodeBase64(base64String);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_2_KvDk1() throws Exception {
    String base64String = "SGVsbG8gV29ybGQhIQ==";
    byte[] expected = "Hello World!".getBytes();
    byte[] actual = Base64.decodeBase64(base64String);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_EmptyString_CMcW0() throws Exception {
    String base64 = "";
    assertFalse(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_NonBase64String_VMrx1() throws Exception {
    String base64 = "This is not a base64 string";
    assertFalse(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Base64String_eDPV2() throws Exception {
    String base64 = "SGVsbG8gd29ybGQh";
    assertTrue(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Base64StringWithLineSeparator_dAtB3() throws Exception {
    String base64 = "SGVsbG8gd29ybGQh\r\n";
    assertTrue(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Base64StringWithUrlSafe_ZRUU4() throws Exception {
    String base64 = "SGVsbG8gd29ybGQh-";
    assertTrue(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_Base64StringWithUrlSafeAndLineSeparator_VTLD5() throws Exception {
    String base64 = "SGVsbG8gd29ybGQh-\r\n";
    assertTrue(Base64.isBase64(base64));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_defaultConstructor_voFM0() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_lineLengthConstructor_fREd1() throws Exception {
        Base64 base64 = new Base64(10);
        assertFalse(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_lineLengthAndLineSeparatorConstructor_cjmT2() throws Exception {
        Base64 base64 = new Base64(10, new byte[] { 10, 13 });
        assertFalse(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_urlSafeConstructor_ywsC3() throws Exception {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_lineLengthAndLineSeparatorAndUrlSafeConstructor_ZyDU5() throws Exception {
        Base64 base64 = new Base64(10, new byte[] { 10, 13 }, true);
        assertTrue(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_lineLengthAndLineSeparatorAndUrlSafeAndDecodingPolicyConstructor_EGXC6() throws Exception {
        Base64 base64 = new Base64(10, new byte[] { 10, 13 }, true, CodecPolicy.STRICT);
        assertTrue(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_lineLengthAndLineSeparatorAndUrlSafeAndDecodingPolicyConstructor_lenient_FlbP7() throws Exception {
        Base64 base64 = new Base64(10, new byte[] { 10, 13 }, true, CodecPolicy.LENIENT);
        assertTrue(base64.isUrlSafe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInteger1_EfJY0() throws Exception {
    byte[] pArray = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    BigInteger expected = new BigInteger("12345678910");
    BigInteger actual = Base64.decodeInteger(pArray);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_1_RytH0() throws Exception {
    byte[] binaryData = new byte[0];
    String expected = "";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_2_ulke1() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_3_IvuM2() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_4_cbeJ3() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_5_eIkj4() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_6_InTf5() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64String_7_dvBa6() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64String(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator9_AFMy8_1() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 13 }, false);
    byte[] lineSeparator = base64.getLineSeparator();
    assertEquals(2, lineSeparator.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator9_AFMy8_2() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 13 }, false);
    byte[] lineSeparator = base64.getLineSeparator();
    assertEquals(10, lineSeparator[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator9_AFMy8_3() throws Exception {
    Base64 base64 = new Base64(10, new byte[] { 10, 13 }, false);
    byte[] lineSeparator = base64.getLineSeparator();
    assertEquals(13, lineSeparator[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafeString_EmptyInput_ovzN0() throws Exception {
    byte[] binaryData = new byte[0];
    String expected = "";
    String actual = Base64.encodeBase64URLSafeString(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafeString_NonEmptyInput_kuCH1() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5 };
    String expected = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
    String actual = Base64.encodeBase64URLSafeString(binaryData);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_1_RsEo0() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = Base64.encodeBase64(binaryData, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_2_uFqi1() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = Base64.encodeBase64(binaryData, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_1_WKOf0() throws Exception {
    byte[] binaryData = new byte[10];
    boolean isChunked = true;
    boolean urlSafe = false;
    byte[] expected = new byte[10];
    byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_2_Yffl1() throws Exception {
    byte[] binaryData = new byte[10];
    boolean isChunked = false;
    boolean urlSafe = true;
    byte[] expected = new byte[10];
    byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_3_qLcw2() throws Exception {
    byte[] binaryData = new byte[10];
    boolean isChunked = true;
    boolean urlSafe = true;
    byte[] expected = new byte[10];
    byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64_4_LSYJ3() throws Exception {
    byte[] binaryData = new byte[10];
    boolean isChunked = false;
    boolean urlSafe = false;
    byte[] expected = new byte[10];
    byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeBase64_1_hmNv0() throws Exception {
    byte[] base64Data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = Base64.decodeBase64(base64Data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_EmptyArray_QPyr0() throws Exception {
    byte[] arrayOctet = new byte[0];
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_NullArray_yEym1() throws Exception {
    byte[] arrayOctet = null;
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_ValidBase64_vKfY2() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    assertTrue(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_InvalidBase64_UkEO3() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_ValidBase64WithLineSeparator_JWxc4() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
    assertTrue(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_InvalidBase64WithLineSeparator_MYzb5() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_ValidBase64WithUrlSafe_CCkQ6() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
    assertTrue(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_InvalidBase64WithUrlSafe_HeVu7() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_ValidBase64WithDecodingPolicy_HYmP8() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    assertTrue(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayByteBase64_InvalidBase64WithDecodingPolicy_PLbb9() throws Exception {
    byte[] arrayOctet = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };
    assertFalse(Base64.isArrayByteBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_valid_PfYo1() throws Exception {
    byte octet = 0;
    assertTrue(Base64.isBase64(octet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_invalid_YZVk2() throws Exception {
    byte octet = -1;
    assertFalse(Base64.isBase64(octet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_urlSafe_hMGe3() throws Exception {
    byte octet = 0;
    Base64 base64 = new Base64(true);
    assertTrue(base64.isBase64(octet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_notUrlSafe_IMFH4() throws Exception {
    byte octet = 0;
    Base64 base64 = new Base64(false);
    assertFalse(base64.isBase64(octet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_emptyArray_TtVJ0() throws Exception {
    byte[] arrayOctet = new byte[0];
    assertFalse(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_allBase64Chars_ejQw1() throws Exception {
    byte[] arrayOctet = new byte[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };
    assertTrue(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_allWhitespaceChars_yvOJ2() throws Exception {
    byte[] arrayOctet = new byte[] { ' ', '\t', '\n', '\r' };
    assertFalse(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBase64_mixedChars_ATFC3() throws Exception {
    byte[] arrayOctet = new byte[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', ' ', '\t', '\n', '\r' };
    assertTrue(Base64.isBase64(arrayOctet));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_EmptyArray_Yppv0() throws Exception {
    byte[] binaryData = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = Base64.encodeBase64URLSafe(binaryData);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_NonEmptyArray_vKGf1() throws Exception {
    byte[] binaryData = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = Base64.encodeBase64URLSafe(binaryData);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeBase64URLSafe_NullBinaryData_YxPY5() throws Exception {
    byte[] binaryData = null;
    byte[] expected = new byte[0];
    byte[] actual = Base64.encodeBase64URLSafe(binaryData);
    assertArrayEquals(expected, actual);
}
}