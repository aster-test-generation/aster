/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Languages_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceNameType_udBF0() throws Exception {
    Languages languages = Languages.getInstance(NameType.ASHKENAZI);
    assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("Hebrew", "Yiddish")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceResourceName_YSaO1() throws Exception {
    Languages languages = Languages.getInstance("languages_ashkenazi");
    assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("Hebrew", "Yiddish")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceInvalidNameType_XTBe2() throws Exception {
    Languages languages = Languages.getInstance(NameType.GENERIC);
    assertNull(languages);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithResourceName_sTFz1_1() throws Exception {
    String languagesResourceName = "languages.txt";
    Languages languages = Languages.getInstance(languagesResourceName);
    assertNotNull(languages);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithResourceName_sTFz1_2() throws Exception {
    String languagesResourceName = "languages.txt";
    Languages languages = Languages.getInstance(languagesResourceName);
    assertEquals(1, languages.getLanguages().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithResourceName_sTFz1_3() throws Exception {
    String languagesResourceName = "languages.txt";
    Languages languages = Languages.getInstance(languagesResourceName);
    assertTrue(languages.getLanguages().contains("English"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithInvalidResourceName_hbzJ2() throws Exception {
    String languagesResourceName = "invalid_languages.txt";
    Languages languages = Languages.getInstance(languagesResourceName);
    assertNull(languages);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithEmptyResourceName_gHlg3() throws Exception {
    String languagesResourceName = "";
    Languages languages = Languages.getInstance(languagesResourceName);
    assertNull(languages);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithNullResourceName_slHQ4() throws Exception {
    String languagesResourceName = null;
    Languages languages = Languages.getInstance(languagesResourceName);
    assertNull(languages);
}
}