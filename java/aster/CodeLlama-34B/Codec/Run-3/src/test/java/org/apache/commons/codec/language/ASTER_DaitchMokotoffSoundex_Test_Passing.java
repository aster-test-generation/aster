/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DaitchMokotoffSoundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_uENO0() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String input = "John";
    String expected = "J500";
    String actual = soundex.soundex(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundexWithBranching_Zsmm1() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    String input = "John";
    String expected = "J500|J500";
    String actual = soundex.soundex(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_NullInput_sXxM0() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertNull(soundex.soundex(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_EmptyInput_JgKj1() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertEquals("", soundex.soundex(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_NonEmptyInput_oCzu2() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertEquals("abc", soundex.soundex("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_Branching_QPTv3() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    assertEquals("abc|def", soundex.soundex("abc|def"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_NonBranching_fbby4() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
    assertEquals("abc", soundex.soundex("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_MultipleBranches_rzfL5() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    assertEquals("abc|def|ghi", soundex.soundex("abc|def|ghi"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSoundex_SpecialRule_fYmz6() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    assertEquals("mn|nm", soundex.soundex("mn|nm"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullInput_Klcs0() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertNull(soundex.encode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyInput_uEft1() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertEquals("", soundex.encode(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NonEmptyInput_hfxw2() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    assertNotNull(soundex.encode("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NonEmptyInputWithFolding_OTJq3() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    assertNotNull(soundex.encode("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_coMj0() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String input = "DaitchMokotoff";
    String expected = "D320";
    String actual = soundex.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_Folding_tyYO1() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
    String input = "DaitchMokotoff";
    String expected = "D320";
    String actual = soundex.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Null_tGcq2() throws Exception {
    DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
    String input = null;
    String expected = null;
    String actual = soundex.encode(input);
    assertEquals(expected, actual);
}
}