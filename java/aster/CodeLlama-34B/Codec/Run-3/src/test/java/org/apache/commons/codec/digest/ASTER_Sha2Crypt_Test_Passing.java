/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sha2Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256CryptWithValidSalt_kXwj1() throws Exception {
    byte[] keyBytes = "password".getBytes();
    String salt = "salt";
    String expectedResult = "expectedResult";
    String actualResult = Sha2Crypt.sha256Crypt(keyBytes, salt);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptWithNullSalt_tQKo0() throws Exception {
    byte[] keyBytes = new byte[16];
    String salt = null;
    String expectedHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
    String actualHash = Sha2Crypt.sha512Crypt(keyBytes, salt);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512CryptWithNonNullSalt_pNTW1() throws Exception {
    byte[] keyBytes = new byte[16];
    String salt = "12345678";
    String expectedHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
    String actualHash = Sha2Crypt.sha512Crypt(keyBytes, salt);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_CJmT0() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "1234567890abcdef";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullKey_PtpH1() throws Exception {
        byte[] keyBytes = null;
        String expected = null;
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithEmptyKey_Ervv2() throws Exception {
        byte[] keyBytes = new byte[0];
        String expected = "";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithInvalidKey_jxMk3() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = "1234567890abcdef";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithValidKey_RkHH4() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = "1234567890abcdef";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_ZMCQ0() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "e5b2959ca1649754";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSalt_NYfZ1() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "salt";
        String expected = "e5b2959ca1649754";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullKeyBytes_zKwB2() throws Exception {
        byte[] keyBytes = null;
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_KpLz3() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = null;
        String expected = "e5b2959ca1649754";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithEmptyKeyBytes_zqUy4() throws Exception {
        byte[] keyBytes = new byte[0];
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithEmptySalt_FGhP5() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "";
        String expected = "e5b2959ca1649754";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidKeyBytes_QjfE6() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidSalt_sppP7() throws Exception {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < 32; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "invalid";
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
}