/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import org.apache.commons.codec.CodecPolicy;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Base32_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_ValidOctet_ZasG0() throws Exception {
    Base32 base32 = new Base32(true, (byte) 0x00);
    assertTrue(base32.isInAlphabet((byte) 0x00));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsInAlphabet_InvalidOctet_fVLA1() throws Exception {
    Base32 base32 = new Base32(true, (byte) 0x00);
    assertFalse(base32.isInAlphabet((byte) 0xFF));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_default_qZUe0() throws Exception {
    Base32 base32 = new Base32();
    byte[] lineSeparator = base32.getLineSeparator();
    assertEquals(0, lineSeparator.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_lineLength_nazm1() throws Exception {
    Base32 base32 = new Base32(10);
    byte[] lineSeparator = base32.getLineSeparator();
    assertEquals(10, lineSeparator.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_lineSeparator_grye2() throws Exception {
    byte[] lineSeparator = new byte[] { 10, 20, 30 };
    Base32 base32 = new Base32(10, lineSeparator);
    assertEquals(lineSeparator, base32.getLineSeparator());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_useHex_hgDH3() throws Exception {
    Base32 base32 = new Base32(10, new byte[] { 10, 20, 30 }, true);
    byte[] lineSeparator = base32.getLineSeparator();
    assertEquals(10, lineSeparator.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_padding_PIeF4() throws Exception {
    Base32 base32 = new Base32(10, new byte[] { 10, 20, 30 }, true, (byte) 40);
    byte[] lineSeparator = base32.getLineSeparator();
    assertEquals(10, lineSeparator.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_decodingPolicy_XBjw5() throws Exception {
    Base32 base32 = new Base32(10, new byte[] { 10, 20, 30 }, true, (byte) 40, CodecPolicy.STRICT);
    byte[] lineSeparator = base32.getLineSeparator();
    assertEquals(10, lineSeparator.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLineSeparator_lineLengthAndLineSeparator_wUxl6() throws Exception {
    byte[] lineSeparator = new byte[] { 10, 20, 30 };
    Base32 base32 = new Base32(10, lineSeparator);
    byte[] actualLineSeparator = base32.getLineSeparator();
    assertEquals(lineSeparator, actualLineSeparator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_modulus5_zIWz7() throws Exception {
    Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.STRICT);
    byte[] input = new byte[1];
    int inPos = 0;
    int inAvail = 1;
}
}