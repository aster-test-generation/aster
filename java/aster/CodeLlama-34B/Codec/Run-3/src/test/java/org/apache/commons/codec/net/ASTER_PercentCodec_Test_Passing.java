/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PercentCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_byteArray_ZjSe0() throws EncoderException {
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    PercentCodec codec = new PercentCodec();
    byte[] actual = codec.encode(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_byteArray_fxlO0() throws DecoderException {
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    PercentCodec codec = new PercentCodec();
    Object result = codec.decode(input);
    assertEquals(input, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_string_tYqS1() throws DecoderException {
    String input = "hello world";
    PercentCodec codec = new PercentCodec();
    Object result = codec.decode(input);
    assertEquals(input, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_null_qEFM0() throws Exception {
    PercentCodec codec = new PercentCodec();
    assertNull(codec.encode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_empty_miJO1() throws Exception {
    PercentCodec codec = new PercentCodec();
    assertEquals(0, codec.encode(new byte[0]).length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_noEncode_mshE2() throws Exception {
    PercentCodec codec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3 };
    assertEquals(3, codec.encode(bytes).length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_null_hEbM0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    assertNull(percentCodec.encode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_empty_MjQu1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    assertArrayEquals(new byte[0], percentCodec.encode(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_noEncode_OtGo2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5 };
    assertArrayEquals(bytes, percentCodec.encode(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_encode_UUnd3() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    assertArrayEquals(expected, percentCodec.encode(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_wpyD0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = null;
    byte[] expectedOutput = null;
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_rlJh1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[0];
    byte[] expectedOutput = new byte[0];
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNonNull_ZlNk2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[] { 1, 2, 3 };
    byte[] expectedOutput = new byte[] { 1, 2, 3 };
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNonAscii_pAGY3() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[] { -1, -2, -3 };
    byte[] expectedOutput = new byte[] { -1, -2, -3 };
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeAlwaysEncodeChars_KgBV4() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 1, 2, 3 }, true);
    byte[] input = new byte[] { 1, 2, 3 };
    byte[] expectedOutput = new byte[] { 1, 2, 3 };
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodePlusForSpace_MxZZ5() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 1, 2, 3 }, true);
    byte[] input = new byte[] { 1, 2, 3, 32 };
    byte[] expectedOutput = new byte[] { 1, 2, 3, 32 };
    byte[] actualOutput = percentCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_null_WqSC0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = null;
    byte[] expected = null;
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_empty_LlyE1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_ascii_Htiy2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 0x61, 0x62, 0x63 };
    byte[] expected = new byte[] { 0x61, 0x62, 0x63 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_space_Nyzz4() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 0x20 };
    byte[] expected = new byte[] { 0x25, 0x20 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_alwaysEncodeChars_oAuO5() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 0x61, 0x62, 0x63 }, true);
    byte[] bytes = new byte[] { 0x61, 0x62, 0x63 };
    byte[] expected = new byte[] { 0x25, 0x61, 0x25, 0x62, 0x25, 0x63 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_noEncoding_LvyK2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_withEncoding_Wzev3() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_withPlusForSpace_TsHU4() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { ' ' }, true);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_withAlwaysEncodeChars_KdJu5() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 'a', 'b', 'c' }, false);
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = percentCodec.encode(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_qqWJ0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = null;
    byte[] expected = null;
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_hISC1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNoEncodingNeeded_lJPJ2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEncodingNeeded_PuAw3() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 1, 2, 3, 4, 5 }, true);
    byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSpaceInInput_SAAK4() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 1, 2, 3, 4, 5 }, true);
    byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSpaceInInputPlusForSpaceFalse_hRjT5() throws Exception {
    PercentCodec percentCodec = new PercentCodec(new byte[] { 1, 2, 3, 4, 5 }, false);
    byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
    byte[] actual = percentCodec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_jdLF0() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = null;
    byte[] expectedOutput = null;
    assertEquals(expectedOutput, percentCodec.decode(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeEmpty_LoHE1() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[0];
    byte[] expectedOutput = new byte[0];
    assertEquals(expectedOutput, percentCodec.decode(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeValid_izTF2() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    byte[] expectedOutput = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    assertEquals(expectedOutput, percentCodec.decode(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInvalid_JaRp3() throws Exception {
    PercentCodec percentCodec = new PercentCodec();
    byte[] input = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 };
    byte[] expectedOutput = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    assertEquals(expectedOutput, percentCodec.decode(input));
}
}