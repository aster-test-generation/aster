/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CharSequenceUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_True_YBgQ0() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = "abc";
    int start = 0;
    int length = 3;
    assertTrue(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_False_ICRG1() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = "def";
    int start = 3;
    int length = 3;
    assertFalse(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_IgnoreCase_True_rasm2() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = true;
    int thisStart = 0;
    CharSequence substring = "ABC";
    int start = 0;
    int length = 3;
    assertTrue(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_IgnoreCase_False_KMJP3() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = true;
    int thisStart = 0;
    CharSequence substring = "DEF";
    int start = 3;
    int length = 3;
    assertFalse(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_DifferentLengths_True_jdut4() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = "abcd";
    int start = 0;
    int length = 4;
    assertTrue(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_DifferentLengths_False_YSJF5() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = "abcd";
    int start = 0;
    int length = 5;
    assertFalse(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_NullCharSequence_False_HjsY6() throws Exception {
    CharSequence cs = null;
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = "abc";
    int start = 0;
    int length = 3;
    assertFalse(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegionMatches_NullSubstring_False_PwPx7() throws Exception {
    CharSequence cs = "abcdef";
    boolean ignoreCase = false;
    int thisStart = 0;
    CharSequence substring = null;
    int start = 0;
    int length = 3;
    assertFalse(CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length));
}
}