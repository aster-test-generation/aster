/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_RcnZ0_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharset_JHdX1_fid1() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharsetName_tmdq2_fid1() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_pqmu4_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    String input = null;
    String expected = null;
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_gNdT0_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_ssRH1_fid1() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_pnbU2_fid1() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_Charset_fPAr0_fid1() throws DecoderException {
    QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_CharsetName_XPOk1_fid1() throws DecoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_DefaultCharset_FYVt2_fid1() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullString_YySP4_fid1() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = null;
    try {
        qCodec.decode(str);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("String is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_EmptyString_vXrn5_fid1() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "";
    String expected = "";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidString_bfRC6_fid1() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid string", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidCharset_CvlB7_fid1() throws DecoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid charset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullCharsetName_BnUy9_fid1() throws DecoderException {
    QCodec qCodec = new QCodec((String) null);
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Charset name is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_nullInput_nqhY0_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    assertNull(qCodec.doDecoding(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_emptyInput_gfxN1_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    assertArrayEquals(new byte[0], qCodec.doDecoding(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_noUnderscores_uSBv2_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    assertArrayEquals(expectedOutput, qCodec.doDecoding(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_iPPC0_fid1() throws EncoderException {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_nLJc1_fid1() throws EncoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_DefaultCharset_vapV2_fid1() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullSource_rSrX3_fid1() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = null;
    String expected = null;
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptySource_vWOf4_fid1() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "";
    String expected = "";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_InvalidCharset_WftT5_fid1() throws EncoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_null_PoHX0_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = null;
    byte[] expected = null;
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_empty_lzCx1_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_printableChars_nuPm2_fid1() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] expected = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_RcnZ0_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharset_JHdX1_fid2() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharsetName_tmdq2_fid2() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_pqmu4_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    String input = null;
    String expected = null;
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_gNdT0_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_ssRH1_fid2() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_pnbU2_fid2() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_Charset_fPAr0_fid2() throws DecoderException {
    QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_CharsetName_XPOk1_fid2() throws DecoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_DefaultCharset_FYVt2_fid2() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullString_YySP4_fid2() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = null;
    try {
        qCodec.decode(str);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("String is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_EmptyString_vXrn5_fid2() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "";
    String expected = "";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidString_bfRC6_fid2() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid string", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidCharset_CvlB7_fid2() throws DecoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid charset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullCharsetName_BnUy9_fid2() throws DecoderException {
    QCodec qCodec = new QCodec((String) null);
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Charset name is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_nullInput_nqhY0_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    assertNull(qCodec.doDecoding(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_emptyInput_gfxN1_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    assertArrayEquals(new byte[0], qCodec.doDecoding(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_noUnderscores_uSBv2_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    assertArrayEquals(expectedOutput, qCodec.doDecoding(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_iPPC0_fid2() throws EncoderException {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_nLJc1_fid2() throws EncoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_DefaultCharset_vapV2_fid2() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullSource_rSrX3_fid2() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = null;
    String expected = null;
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptySource_vWOf4_fid2() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "";
    String expected = "";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_InvalidCharset_WftT5_fid2() throws EncoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_null_PoHX0_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = null;
    byte[] expected = null;
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_empty_lzCx1_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_printableChars_nuPm2_fid2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] expected = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_RcnZ0() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharset_JHdX1() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeStringWithCharsetName_tmdq2() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeNull_pqmu4() throws Exception {
    QCodec qCodec = new QCodec();
    String input = null;
    String expected = null;
    String actual = qCodec.decode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_gNdT0() throws Exception {
    QCodec qCodec = new QCodec();
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_ssRH1() throws Exception {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_pnbU2() throws Exception {
    QCodec qCodec = new QCodec("UTF-8");
    String input = "Hello, World!";
    String expectedOutput = "Hello, World!";
    String actualOutput = qCodec.encode(input);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_Charset_fPAr0() throws DecoderException {
    QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_CharsetName_XPOk1() throws DecoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_DefaultCharset_FYVt2() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullString_YySP4() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = null;
    try {
        qCodec.decode(str);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("String is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_EmptyString_vXrn5() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "";
    String expected = "";
    String actual = qCodec.decode(str);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidString_bfRC6() throws DecoderException {
    QCodec qCodec = new QCodec();
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid string", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidCharset_CvlB7() throws DecoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid charset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_NullCharsetName_BnUy9() throws DecoderException {
    QCodec qCodec = new QCodec((String) null);
    String str = "Hello, World!";
    try {
        qCodec.decode(str);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Charset name is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_nullInput_nqhY0() throws Exception {
    QCodec qCodec = new QCodec();
    assertNull(qCodec.doDecoding(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_emptyInput_gfxN1() throws Exception {
    QCodec qCodec = new QCodec();
    assertArrayEquals(new byte[0], qCodec.doDecoding(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDecoding_noUnderscores_uSBv2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expectedOutput = new byte[] { 1, 2, 3, 4, 5 };
    assertArrayEquals(expectedOutput, qCodec.doDecoding(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Charset_iPPC0() throws EncoderException {
    QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_CharsetName_nLJc1() throws EncoderException {
    QCodec qCodec = new QCodec("UTF-8");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_DefaultCharset_vapV2() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullSource_rSrX3() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = null;
    String expected = null;
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptySource_vWOf4() throws EncoderException {
    QCodec qCodec = new QCodec();
    String sourceStr = "";
    String expected = "";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_InvalidCharset_WftT5() throws EncoderException {
    QCodec qCodec = new QCodec("invalid_charset");
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = qCodec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_null_PoHX0() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = null;
    byte[] expected = null;
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_empty_lzCx1() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoEncoding_printableChars_nuPm2() throws Exception {
    QCodec qCodec = new QCodec();
    byte[] bytes = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] expected = new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '=' };
    byte[] actual = qCodec.doEncoding(bytes);
    assertArrayEquals(expected, actual);
}
}