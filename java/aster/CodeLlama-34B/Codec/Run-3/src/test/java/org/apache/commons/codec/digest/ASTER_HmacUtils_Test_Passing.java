/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.StringUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HmacUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_HKxh0() throws Exception {
    String key = "my_secret_key";
    String valueToDigest = "my_value_to_digest";
    byte[] expectedResult = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 };
    byte[] actualResult = HmacUtils.hmacSha1(key, valueToDigest);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmac_ueHC0_1() throws Exception {
    Mac mac = Mac.getInstance("HmacSHA256");
    mac.init(new SecretKeySpec(new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}, "HmacSHA256"));
    String valueToDigest = "Hello, World!";
    Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
    assertEquals(mac, updatedMac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateHmac_ueHC0_2() throws Exception {
    Mac mac = Mac.getInstance("HmacSHA256");
    mac.init(new SecretKeySpec(new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}, "HmacSHA256"));
    String valueToDigest = "Hello, World!";
    Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
    assertEquals(valueToDigest, StringUtils.newStringUtf8(updatedMac.doFinal()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_MD5_oGBM0() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-MD5"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_1_GuzQ1() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-SHA-1"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_224_zmMl2() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-SHA-224"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_256_AiIH3() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-SHA-256"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_384_AaPC4() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-SHA-384"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_HMAC_SHA_512_hzBQ5() throws Exception {
    assertTrue(HmacUtils.isAvailable("HMAC-SHA-512"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_InvalidAlgorithm_eGJS6() throws Exception {
    assertFalse(HmacUtils.isAvailable("InvalidAlgorithm"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_EmptyAlgorithm_HgLF8() throws Exception {
    assertFalse(HmacUtils.isAvailable(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ZYoC0_1() throws Exception {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        byte[] valueToDigest = new byte[] { 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
        byte[] expectedResult = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f };
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ZYoC0_2() throws Exception {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        byte[] valueToDigest = new byte[] { 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
        byte[] expectedResult = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f };
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha384_kYtm0_1() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertEquals(HmacAlgorithms.HMAC_SHA_384, mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha384_kYtm0_2() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha384(key);
    assertEquals(32, mac.getMacLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha384WithInvalidKey_AjBb1() throws Exception {
    byte[] key = new byte[16];
    try {
        HmacUtils.getHmacSha384(key);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Key length must be at least 32 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_YfRG0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_YfRG0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals("HmacSHA256", mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_YfRG0_3() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals(256, mac.getMacLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384_ECib0() throws Exception {
    byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    byte[] valueToDigest = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    byte[] expectedResult = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_fcza0() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = new byte[32];
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    assertTrue(hmacUtils.isAvailable(algorithm));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableDifferentAlgorithm_vonO1() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_512;
    byte[] key = new byte[64];
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    assertTrue(hmacUtils.isAvailable(algorithm));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailableNonExistentAlgorithm_aVRO2() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = new byte[32];
    HmacUtils hmacUtils = new HmacUtils(algorithm, key);
    assertFalse(hmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_qTzw0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        String algorithm = "HmacSHA256";
        byte[] key = "secret".getBytes();
        Mac mac = Mac.getInstance(algorithm);
        mac.init(new SecretKeySpec(key, algorithm));
        byte[] valueToDigest = "message".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotNull(updatedMac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_qTzw0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        String algorithm = "HmacSHA256";
        byte[] key = "secret".getBytes();
        Mac mac = Mac.getInstance(algorithm);
        mac.init(new SecretKeySpec(key, algorithm));
        byte[] valueToDigest = "message".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertEquals(mac, updatedMac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_qTzw0_3() throws NoSuchAlgorithmException, InvalidKeyException {
        String algorithm = "HmacSHA256";
        byte[] key = "secret".getBytes();
        Mac mac = Mac.getInstance(algorithm);
        mac.init(new SecretKeySpec(key, algorithm));
        byte[] valueToDigest = "message".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertEquals(algorithm, updatedMac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_TGlY0() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithNullKey_skSF1() throws Exception {
        String key = null;
        String valueToDigest = "my_value";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithNullValueToDigest_Yyso2() throws Exception {
        String key = "my_key";
        String valueToDigest = null;
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithNullKeyAndValueToDigest_TdYI3() throws Exception {
        String key = null;
        String valueToDigest = null;
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithEmptyKey_wLZC4() throws Exception {
        String key = "";
        String valueToDigest = "my_value";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithEmptyValueToDigest_jzZz5() throws Exception {
        String key = "my_key";
        String valueToDigest = "";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithEmptyKeyAndValueToDigest_uXjD6() throws Exception {
        String key = "";
        String valueToDigest = "";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_hzUM0() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "testKey");
        File file = new File("testFile.txt");
        String expectedHex = "e5a01fee14e537426196c4685990c74a86a7e527d89d28388a2615dec93543bf6";
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithm_RNYw1() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "testKey");
        File file = new File("testFile.txt");
        String expectedHex = "2309979a944f53449964e5490908707948e505b4666329564996d163f84d14773036a851ddd234822e9be55c556538951";
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKey_rqlZ2() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "differentKey");
        File file = new File("testFile.txt");
        String expectedHex = "8707948e505b4666329564996d163f84d14773036a851ddd234822e9be55c556538951";
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentFile_gmCI3() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "testKey");
        File file = new File("differentFile.txt");
        String expectedHex = "e5a01fee14e537426196c4685990c74a86a7e527d89d28388a2615dec93543bf6";
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullFile_hnSW4() throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "testKey");
        File file = null;
        String expectedHex = null;
        String actualHex = hmacUtils.hmacHex(file);
        assertEquals(expectedHex, actualHex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_NzIW0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_jpNW1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String expected = "37aa6396479528abb15d281b746c356c12b34d5e";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_tsWC2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String expected = "81608b703055f87186123b9645268274136158011";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_FRzd3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String expected = "1870199c53679a92544d22117aa6a4115d2d878a1";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_HoFg4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String expected = "994e688694ed85217849e619522515d3f8e62864";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha512_UXSM5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String expected = "b49f4621a396438a055e5d90d21535f4d836b7a9";
        String actual = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha512_avAy0_1() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha512(key);
    assertNotNull(mac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha512_avAy0_2() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha512(key);
    assertEquals(HmacAlgorithms.HMAC_SHA_512, mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHmacSha512_avAy0_3() throws Exception {
    byte[] key = new byte[32];
    Mac mac = HmacUtils.getHmacSha512(key);
    assertEquals(key.length, mac.getMacLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithMD5_tETd0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA1_uBWi1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA224_yosr2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA256_mUen3() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA384_LkKH4() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA512_tUFv5() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] expected = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, hmacUtils.hmac(new File("test.txt")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithInvalidAlgorithm_YJLz6() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        try {
            hmacUtils.hmac(new File("test.txt"));
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid algorithm", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha1_mvwR0() throws Exception {
    byte[] key = new byte[16];
    byte[] valueToDigest = new byte[16];
    byte[] expectedResult = new byte[20];
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
    byte[] actualResult = hmacUtils.hmac(valueToDigest);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_fDPc0() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_differentKey_Iwjx1() throws Exception {
    String key = "my_key2";
    String valueToDigest = "my_value";
    String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_differentValue_bcBi2() throws Exception {
    String key = "my_key";
    String valueToDigest = "my_value2";
    String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_nullKey_UhhA3() throws Exception {
    String key = null;
    String valueToDigest = "my_value";
    String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSha384Hex_aSrZ0() throws Exception {
    byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    byte[] valueToDigest = new byte[] { 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
    String expectedResult = "309ecc489c12d6eba5069b5a4c9827fc29bc2352511f5e086a8a54c0196e21773";
    String actualResult = HmacUtils.hmacSha384Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMD5_aAdA0() throws Exception {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    byte[] actual = hmacUtils.hmac("valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSHA1_Fkmn1() throws Exception {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    byte[] actual = hmacUtils.hmac("valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSHA224_VzPk2() throws Exception {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    byte[] actual = hmacUtils.hmac("valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSHA256_gmlQ3() throws Exception {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    byte[] actual = hmacUtils.hmac("valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacSHA384_tIsY4() throws Exception {
    HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
    byte[] expected = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    byte[] actual = hmacUtils.hmac("valueToDigest");
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5Hex_rFyK0_1() throws Exception {
    byte[] key = "secret".getBytes();
    byte[] valueToDigest = "message".getBytes();
    String expectedResult = "9806657898539952885";
    String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = null;
    valueToDigest = "message".getBytes();
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = "secret".getBytes();
    valueToDigest = null;
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = new byte[0];
    valueToDigest = "message".getBytes();
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = "secret".getBytes();
    valueToDigest = new byte[0];
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = "invalid".getBytes();
    valueToDigest = "message".getBytes();
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    key = "secret".getBytes();
    valueToDigest = "invalid".getBytes();
    expectedResult = null;
    actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    assertEquals(expectedResult, actualResult);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_dKOU0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_dKOU0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals("HmacMD5", mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_dKOU0_3() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals(16, mac.getMacLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_XOaz0_1() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = "secret".getBytes();
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1_XOaz0_2() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = "secret".getBytes();
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals("HmacSHA1", mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_VHis0() throws Exception {
        byte[] key = "secret".getBytes();
        byte[] valueToDigest = "message".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_pRKd0() throws Exception {
    byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    byte[] valueToDigest = new byte[] { 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
    byte[] expectedResult = new byte[] { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f };
    byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacMd5_AYtt0_1() throws Exception {
    byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
    Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
    assertNotNull(mac);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacMd5_AYtt0_2() throws Exception {
    byte[] key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
    Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
    assertEquals("HmacMD5", mac.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacMd5_uzlv0() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacSha1_Lakx1() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_1;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacSha224_xier2() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_224;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacSha256_eacW3() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacSha384_rZDj4() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_384;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithHmacSha512_GsSe5() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_512;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertEquals(algorithm.getName(), mac.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithInvalidAlgorithm_PAER6() throws Exception {
    HmacAlgorithms algorithm = null;
    byte[] key = "test".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithNullKey_SfNY7() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = null;
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithEmptyKey_VYpr8() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInitializedMacWithInvalidKey_Vwdl9() throws Exception {
    HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
    byte[] key = "invalid".getBytes();
    Mac mac = HmacUtils.getInitializedMac(algorithm, key);
    assertNull(mac);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_aKMG0() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced7636f27";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithDifferentKey_Tvtm1() throws Exception {
        String key = "my_key_2";
        String valueToDigest = "my_value";
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced7636f27";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithDifferentValueToDigest_jEWz2() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value_2";
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced7636f27";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithDifferentKeyAndValueToDigest_bjWb3() throws Exception {
        String key = "my_key_2";
        String valueToDigest = "my_value_2";
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced7636f27";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_mCRy0() throws NoSuchAlgorithmException, InvalidKeyException {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        String expectedHex = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHex = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedHex, actualHex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5_XVND0() throws Exception {
    String key = "my_key";
    String valueToDigest = "my_value";
    byte[] expectedResult = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 };
    byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
    assertArrayEquals(expectedResult, actualResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5WithInvalidKey_NoLH1() throws Exception {
    String key = null;
    String valueToDigest = "my_value";
    try {
        HmacUtils.hmacMd5(key, valueToDigest);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Key cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5WithInvalidValueToDigest_AUqY2() throws Exception {
    String key = "my_key";
    String valueToDigest = null;
    try {
        HmacUtils.hmacMd5(key, valueToDigest);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Value to digest cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5WithInvalidAlgorithm_ilug3() throws Exception {
    String key = "my_key";
    String valueToDigest = "my_value";
    try {
        HmacUtils.hmacMd5(key, valueToDigest);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid algorithm", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHmacMd5WithInvalidKeyAndValueToDigest_bVQC4() throws Exception {
    String key = null;
    String valueToDigest = null;
    try {
        HmacUtils.hmacMd5(key, valueToDigest);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Key and value to digest cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_Lgfu0() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithNullKey_qhKG1() throws Exception {
        String key = null;
        String valueToDigest = "my_value";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithNullValueToDigest_MTef2() throws Exception {
        String key = "my_key";
        String valueToDigest = null;
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithEmptyKey_lzNG3() throws Exception {
        String key = "";
        String valueToDigest = "my_value";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithEmptyValueToDigest_jxbJ4() throws Exception {
        String key = "my_key";
        String valueToDigest = "";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithInvalidKey_CsfT5() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertNotEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256HexWithInvalidValueToDigest_OkTP6() throws Exception {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "679a74656e74726f7065726c65645f736861323536";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
}
}