/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BeiderMorseEncoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_nullSource_YiDG0() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    assertNull(encoder.encode(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRuleTypeWithNullRuleType_OnEV2() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    RuleType ruleType = encoder.getRuleType();
    assertNull(ruleType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_NameType_kpUe0() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    NameType nameType = encoder.getNameType();
    assertEquals(NameType.class, nameType.getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_String_Bjmm1() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    NameType nameType = encoder.getNameType();
    assertEquals("NameType", nameType.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Integer_mmir2() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    NameType nameType = encoder.getNameType();
    assertEquals(0, nameType.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Object_UruY3() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    NameType nameType = encoder.getNameType();
    assertEquals(nameType, nameType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Null_ZSuB4() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    NameType nameType = encoder.getNameType();
    assertNull(nameType);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_XSqP0() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    String input = "hello";
    String expected = "h-e-l-l-o";
    String actual = encoder.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsConcat_True_cKSC0() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    assertTrue(encoder.isConcat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsConcat_False_rCva1() throws Exception {
    BeiderMorseEncoder encoder = new BeiderMorseEncoder();
    encoder.setConcat(false);
    assertFalse(encoder.isConcat());
}
}