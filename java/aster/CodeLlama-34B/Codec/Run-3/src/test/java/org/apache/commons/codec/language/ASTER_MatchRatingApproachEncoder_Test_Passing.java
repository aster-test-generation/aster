/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MatchRatingApproachEncoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccents_NullInput_aRKn0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeAccents(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccents_EmptyInput_YCeu1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeAccents("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccents_AccentedInput_pKuk2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeAccents("");
    assertEquals("e", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveAccents_NonAccentedInput_DONv3() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.removeAccents("hello");
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants1_WRwE0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name = "John";
    String expected = "Jhn";
    String actual = encoder.removeDoubleConsonants(name);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveDoubleConsonants2_HwtM1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name = "Johanna";
    String expected = "Jhnna";
    String actual = encoder.removeDoubleConsonants(name);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_E_lcIH0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isVowel("E"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_A_lPrk1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isVowel("A"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_O_RBoN2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isVowel("O"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_I_QWOt3() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isVowel("I"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_U_neNQ4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertTrue(encoder.isVowel("U"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsVowel_Other_YJsM5() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    assertFalse(encoder.isVowel("B"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMinRating_sumLengthGreaterThan12_gzfI4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    int minRating = encoder.getMinRating(13);
    assertEquals(1, minRating);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFirst3Last3_shortName_Zuqb0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name = "John";
    String expected = "John";
    String actual = encoder.getFirst3Last3(name);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing_EqualNames_Xgrb0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name1 = "John";
    String name2 = "John";
    int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing_DifferentNames_eCYl1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name1 = "John";
    String name2 = "Jane";
    int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing_DifferentNames_DifferentLengths_XOMS2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name1 = "John";
    String name2 = "Jane Doe";
    int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing_DifferentNames_DifferentLengths_Reversed_buKz4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name1 = "Jane Doe";
    String name2 = "John";
    int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLeftToRightThenRightToLeftProcessing_DifferentNames_SameLengths_Reversed_UCtF5() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String name1 = "Jane";
    String name2 = "John";
    int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_EmptyString_bRGQ0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "";
    String expected = "";
    String actual = encoder.removeVowels(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_OnlyVowels_zPVN2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "aeiou";
    String expected = "";
    String actual = encoder.removeVowels(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_OnlyConsonants_SZfb3() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "bcdfghjklmnpqrstvwxyz";
    String expected = "bcdfghjklmnpqrstvwxyz";
    String actual = encoder.removeVowels(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveVowels_MixedVowelsAndConsonants_BvBL4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "Hello World";
    String expected = "Hll Wrld";
    String actual = encoder.removeVowels(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_emptyString_gVkP0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String actual = encoder.cleanName("");
    assertEquals("", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_nullString_HJgp1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String actual = encoder.cleanName(null);
    assertEquals(null, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_mixedCaseString_MptL3() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String actual = encoder.cleanName("John Doe");
    assertEquals("JOHN DOE", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCleanName_specialCharactersString_iHdR4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String actual = encoder.cleanName("John-Doe");
    assertEquals("JOHN-DOE", actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_tXUR0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode(null);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeEmpty_AeyX1() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSingleChar_NONP2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("a");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeVowels_Pkvz3() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("aeiou");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeConsonants_oaFX4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("bcdfghjklmnpqrstvwxyz");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeVowelsConsonants_rpKK5() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("aeioubcdfghjklmnpqrstvwxyz");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeDoubleConsonants_Xolb6() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("bbcdfghjklmnpqrstvwxyz");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeVowelsConsonantsDoubleConsonants_olNv7() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("aeioubcdfghjklmnpqrstvwxyzbbcdfghjklmnpqrstvwxyz");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSpecialChars_xllZ8() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String result = encoder.encode("!@#$%^&*()_+-=[]{}|;':\"<>,./?");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_NullName1_MJnG0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals(null, "name2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_EmptyName1_DLXo1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("", "name2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_NullName2_YolE3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("name1", null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_EmptyName2_likE4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("name1", ""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_SingleCharacterName1_UZyv6() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("a", "name2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_SingleCharacterName2_zHkT7() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("name1", "a"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_EqualNames_tLZG8() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("name1", "name1"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_DifferentNames_jISc9() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("name1", "name2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_ACUO0() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "Hello, World!";
    Object output = encoder.encode(input);
    assertEquals(output, "Hello, World!");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullCharacter_rlxP2() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "Hello, World!\0";
    Object output = encoder.encode(input);
    assertEquals(output, "Hello, World!\0");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullCharacterAndNonNullCharacter_VFnV4() throws Exception {
    MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    String input = "Hello, World!\0Hello, World!";
    Object output = encoder.encode(input);
    assertEquals(output, "Hello, World!\0Hello, World!");
}
}