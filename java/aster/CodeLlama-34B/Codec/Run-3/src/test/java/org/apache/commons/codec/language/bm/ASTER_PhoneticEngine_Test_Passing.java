/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import java.util.Arrays;
import java.util.HashSet;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PhoneticEngine_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRuleType1_SxRi0() throws Exception {
    PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    assertEquals(RuleType.APPROX, phoneticEngine.getRuleType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRuleType2_USwX1() throws Exception {
    PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, false, 20);
    assertEquals(RuleType.EXACT, phoneticEngine.getRuleType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRuleType3_WIGO2() throws Exception {
    PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true);
    assertEquals(RuleType.RULES, phoneticEngine.getRuleType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsConcat_True_TrmN0() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    assertTrue(engine.isConcat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsConcat_False_jWXe1() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 10);
    assertFalse(engine.isConcat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Ashkenazi_vmzV0() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    assertEquals(NameType.ASHKENAZI, engine.getNameType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Generic_gEEZ1() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 10);
    assertEquals(NameType.GENERIC, engine.getNameType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameType_Sephardic_IwGl2() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
    assertEquals(NameType.SEPHARDIC, engine.getNameType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxPhonemes_Sephardic_Rules_NoConcatenate_WPBN2() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, false);
    int maxPhonemes = engine.getMaxPhonemes();
    assertEquals(5, maxPhonemes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeAshkenaziApprox_JhaY0() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "Ashkenazi";
    String expected = "Ashkenazi";
    String actual = engine.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeSephardicExact_TemF1() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, true, 10);
    String input = "Sephardic";
    String expected = "Sephardic";
    String actual = engine.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeGenericRules_ZcFd2() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 10);
    String input = "Generic";
    String expected = "Generic";
    String actual = engine.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyString_DsMq0() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
    String expected = "";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SingleWord_pfRk1() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "hello";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
    String expected = "h-l-o";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleWords_BDee2() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "hello world";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
    String expected = "h-l-o-w-r-l-d";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SpecialCharacters_nNuI3() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "hello, world!";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
    String expected = "h-l-o-w-r-l-d";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Diacritics_gmmj4() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "hllo";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("fr")));
    String expected = "h-l-o";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NamePrefixes_cAvg5() throws Exception {
    PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
    String input = "d'Artagnan";
    LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("fr")));
    String expected = "d-a-r-t-a-g-n-a-n";
    String actual = engine.encode(input, languageSet);
    assertEquals(expected, actual);
}
}