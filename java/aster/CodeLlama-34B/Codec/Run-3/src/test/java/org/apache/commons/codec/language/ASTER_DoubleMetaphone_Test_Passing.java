/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DoubleMetaphone_Test_Passing {
public void testDoubleMetaphone_emptyString_Aifu0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("", false);
    assertEquals("", result);
}
public void testDoubleMetaphone_nullString_QMbi1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null, false);
    assertNull(result);
}
public void testDoubleMetaphone_silentStart_ANiu2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("x", false);
    assertEquals("S", result);
}
public void testDoubleMetaphone_AEIOUY_AEZU3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
    assertEquals("A", result);
}
public void testDoubleMetaphone_B_FMEX4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("B", false);
    assertEquals("P", result);
}
public void testDoubleMetaphone_C_XXEl5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("C", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_D_IBpF6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("D", false);
    assertEquals("T", result);
}
public void testDoubleMetaphone_F_YhlE7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("F", false);
    assertEquals("F", result);
}
public void testDoubleMetaphone_G_WJKu8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("G", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_H_nGek9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("H", false);
    assertEquals("H", result);
}
public void testDoubleMetaphone_J_wydw10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("J", false);
    assertEquals("J", result);
}
public void testDoubleMetaphone_K_jFzM11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("K", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_L_CTYk12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("L", false);
    assertEquals("L", result);
}
public void testDoubleMetaphone_emptyString_Fzlg0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("", false);
    assertEquals("", result);
}
public void testDoubleMetaphone_nullString_HZbx1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null, false);
    assertNull(result);
}
public void testDoubleMetaphone_silentStart_tfds2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("x", false);
    assertEquals("S", result);
}
public void testDoubleMetaphone_AEIOUY_cjVJ3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
    assertEquals("A", result);
}
public void testDoubleMetaphone_B_nLWp4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("B", false);
    assertEquals("P", result);
}
public void testDoubleMetaphone_C_RvKX5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("C", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_D_JHsu6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("D", false);
    assertEquals("T", result);
}
public void testDoubleMetaphone_F_ABCE7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("F", false);
    assertEquals("F", result);
}
public void testDoubleMetaphone_G_sJbj8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("G", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_H_xyHY9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("H", false);
    assertEquals("H", result);
}
public void testDoubleMetaphone_J_uDKP10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("J", false);
    assertEquals("J", result);
}
public void testDoubleMetaphone_K_csdc11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("K", false);
    assertEquals("K", result);
}
public void testDoubleMetaphone_L_mRMJ12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("L", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCharAt_ValidIndex_TOnP0() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value = "hello";
    int index = 2;
    char expected = 'l';
    char actual = dm.charAt(value, index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCharAt_InvalidIndex_YmOn1() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value = "hello";
    int index = -1;
    char expected = Character.MIN_VALUE;
    char actual = dm.charAt(value, index);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_EqualValues_kuXk0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("value1", "value1", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_DifferentValues_uKuB1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertFalse(doubleMetaphone.isDoubleMetaphoneEqual("value1", "value2", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue1_Zfce2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(null, "value2", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue2_rdqD3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertFalse(doubleMetaphone.isDoubleMetaphoneEqual("value1", null, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_BothNull_OdGQ4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(null, null, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_AlternateTrue_dxsI5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("value1", "value2", true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_DifferentCases_RxzU9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertTrue(doubleMetaphone.isDoubleMetaphoneEqual("Value1", "value1", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_ZkiJ0() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    assertEquals(10, maxCodeLen);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_1() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(10, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_2() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(5, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_3() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(15, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_4() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(20, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_5() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(25, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_6() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(30, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_7() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(35, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_8() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(40, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_9() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(45, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxCodeLen_asjp1_10() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    int maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(5);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(15);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(20);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(25);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(30);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(35);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(40);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(45);
    maxCodeLen = dm.getMaxCodeLen();
    dm.setMaxCodeLen(50);
    maxCodeLen = dm.getMaxCodeLen();
    assertEquals(50, maxCodeLen);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nullInput_DtNA0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertNull(doubleMetaphone.doubleMetaphone(null, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_emptyInput_XqLw1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertNull(doubleMetaphone.doubleMetaphone("", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_singleLetterInput_Dswi2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("A", doubleMetaphone.doubleMetaphone("A", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_twoLetterInput_xqhK3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("AB", doubleMetaphone.doubleMetaphone("AB", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_threeLetterInput_QlLU4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABC", doubleMetaphone.doubleMetaphone("ABC", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_fourLetterInput_AAXR5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCD", doubleMetaphone.doubleMetaphone("ABCD", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_fiveLetterInput_Itgf6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDE", doubleMetaphone.doubleMetaphone("ABCDE", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_sixLetterInput_EzuK7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDEF", doubleMetaphone.doubleMetaphone("ABCDEF", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_sevenLetterInput_kDAr8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDEFG", doubleMetaphone.doubleMetaphone("ABCDEFG", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_eightLetterInput_Atek9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDEFGH", doubleMetaphone.doubleMetaphone("ABCDEFGH", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nineLetterInput_yjfr10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDEFGHI", doubleMetaphone.doubleMetaphone("ABCDEFGHI", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_tenLetterInput_hkQR11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("ABCDEFGHIJ", doubleMetaphone.doubleMetaphone("ABCDEFGHIJ", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_SameValues_DofP0() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = "hello";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_DifferentValues_aPVP1() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = "world";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue1_cVIP2() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = null;
    String value2 = "hello";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue2_zHbK3() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = null;
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_EmptyValue1_zvCa4() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "";
    String value2 = "hello";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_EmptyValue2_DAIY5() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = "";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_SameValues_IgnoreCase_ggLg6() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = "HELLO";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2, true);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_DifferentValues_IgnoreCase_aQUS7() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = "world";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2, true);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue1_IgnoreCase_oaQL8() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = null;
    String value2 = "hello";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2, true);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_NullValue2_IgnoreCase_FAmD9() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "hello";
    String value2 = null;
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2, true);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDoubleMetaphoneEqual_EmptyValue1_IgnoreCase_rXnN10() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String value1 = "";
    String value2 = "hello";
    boolean result = dm.isDoubleMetaphoneEqual(value1, value2, true);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_cAKS0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String input = "hello";
    String expected = "HLL";
    String actual = doubleMetaphone.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_EmptyString_QwsU0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("", false);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_NullString_uuRu1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null, false);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_SilentStart_AZeP2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("A", false);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_jjSr3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
    assertEquals("AEIOUY", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_IVVn4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("B", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_ZXbK5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("C", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_FTAn6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("D", false);
    assertEquals("T", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_ufnO7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("F", false);
    assertEquals("F", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_tOHx8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("G", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_Psvn9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("H", false);
    assertEquals("H", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_Cndg10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("J", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_PlZt11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("K", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_vwTl12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("L", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_M_Aymf13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("M", false);
    assertEquals("M", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_N_PwaT14() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("N", false);
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nullString_bWuK1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null, false);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nonSlavoGermanic_cFHS2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abc", false);
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_slavoGermanic_PtHP3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("wxyz", true);
    assertEquals("wxyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_naZD4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("xyz", false);
    assertEquals("xyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_ZTjb5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
    assertEquals("aeiouy", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_vuLC6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("bb", false);
    assertEquals("bb", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_hrUN7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("cc", false);
    assertEquals("cc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_jxBu8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("dd", false);
    assertEquals("dd", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_TlWE9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("ff", false);
    assertEquals("ff", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_mffv10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("gg", false);
    assertEquals("gg", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_Atzu11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hh", false);
    assertEquals("hh", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_jrHn12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("jj", false);
    assertEquals("jj", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_NKab13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("kk", false);
    assertEquals("kk", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_CYte14() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("ll", false);
    assertEquals("ll", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_singleLetter_gKGv2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("a", false);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_twoLetters_pkDj3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("ab", false);
    assertEquals("AB", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_threeLetters_dSYp4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abc", false);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_alternate_LbOd5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abc", true);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_slavoGermanic_aCwp6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("slavo", true);
    assertEquals("SLAVO", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_wHSb7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("silent", false);
    assertEquals("SILENT", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleAEIOUY_Mbas8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
    assertEquals("AEIOUY", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleC_kJmf9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("c", false);
    assertEquals("C", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleD_pCTc10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("d", false);
    assertEquals("D", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleG_FksI11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("g", false);
    assertEquals("G", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleH_vRbq12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("h", false);
    assertEquals("H", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleJ_gpVc13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("j", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleL_aHdK14() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("l", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_handleM_AdcG15() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneH_TpCO8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "H";
    boolean alternate = false;
    String primary = doubleMetaphone.doubleMetaphone(value, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone1_BioG0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello";
    boolean alternate = false;
    String expected = "HL";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone2_icHj1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "world";
    boolean alternate = false;
    String expected = "WR";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone3_XTpR2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "abc";
    boolean alternate = false;
    String expected = "AB";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone4_SqrN3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "xyz";
    boolean alternate = false;
    String expected = "XZ";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone5_LqHZ4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "123";
    boolean alternate = false;
    String expected = "12";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone6_GuOZ5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "!@#$%^&*()_+";
    boolean alternate = false;
    String expected = "!@#$%^&*()_+";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone7_XYtQ6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello world";
    boolean alternate = false;
    String expected = "HL WR";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone8_DmHH7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello world";
    boolean alternate = true;
    String expected = "HL WR";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_A_fnBU0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "A";
    boolean alternate = false;
    String expected = "A";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_E_LGot1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "E";
    boolean alternate = false;
    String expected = "E";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_I_StXi2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "I";
    boolean alternate = false;
    String expected = "I";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_O_rZfq3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "O";
    boolean alternate = false;
    String expected = "O";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_U_tAEH4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "U";
    boolean alternate = false;
    String expected = "U";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_Y_AiaY5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Y";
    boolean alternate = false;
    String expected = "Y";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_Lhrt6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "B";
    boolean alternate = false;
    String expected = "P";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_fnZw7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "C";
    boolean alternate = false;
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_AZsN8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "D";
    boolean alternate = false;
    String expected = "T";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_eMmX9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "F";
    boolean alternate = false;
    String expected = "F";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneEmptyInput_vIvy0_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("", false);
    result = doubleMetaphone.doubleMetaphone("", true);
    assertEquals("", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneNullInput_OXbG1_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null, false);
    result = doubleMetaphone.doubleMetaphone(null, true);
    assertEquals(null, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneNonEmptyInput_xvQs2_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abc", false);
    result = doubleMetaphone.doubleMetaphone("abc", true);
    assertEquals("abc", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneA_Kxxy4_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("A", false);
    result = doubleMetaphone.doubleMetaphone("A", true);
    assertEquals("A", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneB_Giyw5_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("B", false);
    result = doubleMetaphone.doubleMetaphone("B", true);
    assertEquals("P", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneC_KFED6_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("C", false);
    result = doubleMetaphone.doubleMetaphone("C", true);
    assertEquals("K", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneD_OZdK7_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("D", false);
    result = doubleMetaphone.doubleMetaphone("D", true);
    assertEquals("T", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneF_eCQk8_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("F", false);
    result = doubleMetaphone.doubleMetaphone("F", true);
    assertEquals("F", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphonePrimaryAndAlternate_SiqI0_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello";
    boolean alternate = false;
    String expectedPrimary = "HL";
    String expectedAlternate = "HL";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphonePrimaryAndAlternate_SiqI0_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "hello";
    boolean alternate = false;
    String expectedPrimary = "HL";
    String expectedAlternate = "HL";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneSilentStart_syRd1_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "xhello";
    boolean alternate = false;
    String expectedPrimary = "HL";
    String expectedAlternate = "HL";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneSilentStart_syRd1_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "xhello";
    boolean alternate = false;
    String expectedPrimary = "HL";
    String expectedAlternate = "HL";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneAEIOUY_idiC2_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "AEIOUY";
    boolean alternate = false;
    String expectedPrimary = "A";
    String expectedAlternate = "A";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneAEIOUY_idiC2_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "AEIOUY";
    boolean alternate = false;
    String expectedPrimary = "A";
    String expectedAlternate = "A";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneB_tuLc3_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "B";
    boolean alternate = false;
    String expectedPrimary = "P";
    String expectedAlternate = "P";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneB_tuLc3_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "B";
    boolean alternate = false;
    String expectedPrimary = "P";
    String expectedAlternate = "P";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneC_MmWf4_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "C";
    boolean alternate = false;
    String expectedPrimary = "K";
    String expectedAlternate = "K";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneC_MmWf4_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "C";
    boolean alternate = false;
    String expectedPrimary = "K";
    String expectedAlternate = "K";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneD_uRay5_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "D";
    boolean alternate = false;
    String expectedPrimary = "T";
    String expectedAlternate = "T";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedPrimary, actualPrimary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneD_uRay5_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "D";
    boolean alternate = false;
    String expectedPrimary = "T";
    String expectedAlternate = "T";
    String actualPrimary = doubleMetaphone.doubleMetaphone(value, alternate);
    String actualAlternate = doubleMetaphone.doubleMetaphone(value, !alternate);
    assertEquals(expectedAlternate, actualAlternate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bamp0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "AEIOUY";
    boolean alternate = false;
    String expected = "A";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_YrAG5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "G";
    boolean alternate = false;
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_xCoS6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "H";
    boolean alternate = false;
    String expected = "H";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_jpFh7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "J";
    boolean alternate = false;
    String expected = "J";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_PJYY8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "K";
    boolean alternate = false;
    String expected = "K";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_dNCn9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "L";
    boolean alternate = false;
    String expected = "L";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_emptyString_OrWN0() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("", false);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nullString_Saav1() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone(null, false);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_zxUD2() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("BCE", false);
    assertEquals("B", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_tsJC3() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("AEIOUY", false);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_RIin4() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("B", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_MoFb5() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("C", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_IrUE6() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("D", false);
    assertEquals("T", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_uDyE7() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("F", false);
    assertEquals("F", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_YDFj8() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("G", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_QdLu9() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("H", false);
    assertEquals("H", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_NqHt10() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("J", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_aMQa11() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("K", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_vfUj12() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("L", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_M_qZMn13() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("M", false);
    assertEquals("M", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_N_ncDW14() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("N", false);
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_P_XCCh15() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("P", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithSpecialCharacters_fcLM3() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("abc@#$%^&*()_+", false);
assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithNumbers_ZRph4() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("1234567890", false);
assertEquals("1234567890", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithUppercaseLetters_LgIf5() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJKLMNOPQRSTUVWXYZ", false);
assertEquals("abcdefghijklmnopqrstuvwxyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithLowercaseLetters_Mxtx6() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("abcdefghijklmnopqrstuvwxyz", false);
assertEquals("abcdefghijklmnopqrstuvwxyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithMixedCaseLetters_etlm7() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("aBcDeFgHiJkLmNoPqRsTuVwXyZ", false);
assertEquals("abcdefghijklmnopqrstuvwxyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithAccentedLetters_OOot8() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("", false);
assertEquals("aaaaaaceeeeiiiidnooooouuuuyth", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithPunctuation_FSgm9() throws Exception {
DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
String result = doubleMetaphone.doubleMetaphone("abcdefghijklmnopqrstuvwxyz.,;:!?", false);
assertEquals("abcdefghijklmnopqrstuvwxyz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyString_GsRd0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SingleCharacter_SRYQ1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode("a");
    assertEquals("a", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleCharacters_vXrq2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode("abc");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SpecialCharacters_wPUk3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode("$%^&*()");
    assertEquals("$%^&*()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Null_sNcF4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_InvalidInput_bzVs5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.encode("invalid input");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsWithEmptyString_JdIN0() throws Exception {
    String value = "";
    int start = 0;
    int length = 0;
    String[] criteria = new String[] {};
    boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsWithNonEmptyString_mThu1() throws Exception {
    String value = "abc";
    int start = 0;
    int length = 1;
    String[] criteria = new String[] {"a"};
    boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsWithMultipleCriteria_KGEO2() throws Exception {
    String value = "abc";
    int start = 0;
    int length = 1;
    String[] criteria = new String[] {"a", "b"};
    boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsWithStartAndLength_jmjM3() throws Exception {
    String value = "abc";
    int start = 1;
    int length = 2;
    String[] criteria = new String[] {"b"};
    boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testContainsWithNegativeStart_LLZd4() throws Exception {
    String value = "abc";
    int start = -1;
    int length = 1;
    String[] criteria = new String[] {"a"};
    boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_YiuB2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("the", false);
    assertEquals("0", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_Ahee3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("apple", false);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_tIiu4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("bob", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_VGQk5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("cab", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_KnBm6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("dog", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_ohdD7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("fox", false);
    assertEquals("F", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_zIIb8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("goat", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_wgay9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hotel", false);
    assertEquals("H", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_BQwX10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("jump", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_AuNI11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("kite", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_pYdl12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("lion", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_M_ftBQ13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("mouse", false);
    assertEquals("M", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_N_SAtj14() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("nose", false);
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_emptyString_FKnG0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals(null, doubleMetaphone.doubleMetaphone("", false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nullString_aItO1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals(null, doubleMetaphone.doubleMetaphone(null, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bwHf2_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("E", doubleMetaphone.doubleMetaphone("E", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bwHf2_3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("I", doubleMetaphone.doubleMetaphone("I", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bwHf2_4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("O", doubleMetaphone.doubleMetaphone("O", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bwHf2_5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("U", doubleMetaphone.doubleMetaphone("U", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_bwHf2_6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("Y", doubleMetaphone.doubleMetaphone("Y", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_nMDI3_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("P", doubleMetaphone.doubleMetaphone("B", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_nMDI3_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("PP", doubleMetaphone.doubleMetaphone("BB", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_kjeJ4_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("K", doubleMetaphone.doubleMetaphone("C", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_kjeJ4_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("KK", doubleMetaphone.doubleMetaphone("CC", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_lhsm5_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("T", doubleMetaphone.doubleMetaphone("D", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_lhsm5_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("TT", doubleMetaphone.doubleMetaphone("DD", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_DVJW6_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("F", doubleMetaphone.doubleMetaphone("F", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_DVJW6_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("FF", doubleMetaphone.doubleMetaphone("FF", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_zrhK7_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("K", doubleMetaphone.doubleMetaphone("G", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_zrhK7_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("KK", doubleMetaphone.doubleMetaphone("GG", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_HwwG8_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("H", doubleMetaphone.doubleMetaphone("H", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_HwwG8_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("HH", doubleMetaphone.doubleMetaphone("HH", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_rhjW9_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("J", doubleMetaphone.doubleMetaphone("J", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_rhjW9_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("JJ", doubleMetaphone.doubleMetaphone("JJ", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_xydz10_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("K", doubleMetaphone.doubleMetaphone("K", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_xydz10_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("KK", doubleMetaphone.doubleMetaphone("KK", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_IqRk11_1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("L", doubleMetaphone.doubleMetaphone("L", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_IqRk11_2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    assertEquals("LL", doubleMetaphone.doubleMetaphone("LL", false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_SilentStart_Yjpq2() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("the", false);
    assertEquals("0", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_AEIOUY_ctuf3() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("apple", false);
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_Jrov4() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("b", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_fBbl5() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("c", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_scav6() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("d", false);
    assertEquals("T", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_vlRK7() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("f", false);
    assertEquals("F", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_UPWA8() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("g", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_H_PhRP9() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("h", false);
    assertEquals("H", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_J_HCMV10() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("j", false);
    assertEquals("J", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_iolq11() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("k", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_L_zjvW12() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("l", false);
    assertEquals("L", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_M_DxuD13() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("m", false);
    assertEquals("M", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_N_hDeK14() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("n", false);
    assertEquals("N", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_P_Zcgb15() throws Exception {
    DoubleMetaphone dm = new DoubleMetaphone();
    String result = dm.doubleMetaphone("p", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNonEmptyInput_NZRc2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello", false);
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithSpecialCharacters_dLmN3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello, world!", false);
    assertEquals("hello, world!", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithAccentedCharacters_FJqm4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hllo", false);
    assertEquals("hllo", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithUppercaseCharacters_loHD5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("HELLO", false);
    assertEquals("HELLO", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithDigits_iKqQ7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello123", false);
    assertEquals("hello123", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithSpaces_inXm8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello world", false);
    assertEquals("hello world", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithTabs_hIXT9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello\tworld", false);
    assertEquals("hello\tworld", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithNewlines_aduY10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello\nworld", false);
    assertEquals("hello\nworld", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithCarriageReturns_qcka11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello\rworld", false);
    assertEquals("hello\rworld", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInputWithFormFeeds_YgoS12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("hello\fworld", false);
    assertEquals("hello\fworld", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_mKCW0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "test";
    boolean alternate = true;
    String expected = "TST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithNullValue_PoLW1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = null;
    boolean alternate = true;
    String expected = null;
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithEmptyValue_EavF2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "";
    boolean alternate = true;
    String expected = "";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithSilentStart_hQIJ3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Xtest";
    boolean alternate = true;
    String expected = "TST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithAEIOUY_dNXu4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Atest";
    boolean alternate = true;
    String expected = "TST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithB_APMc5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Btest";
    boolean alternate = true;
    String expected = "PST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithC_dDml6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Ctest";
    boolean alternate = true;
    String expected = "KST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithD_EIdo7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Dtest";
    boolean alternate = true;
    String expected = "TST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithF_jHCW8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Ftest";
    boolean alternate = true;
    String expected = "FST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphoneWithG_XDzU9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "Gtest";
    boolean alternate = true;
    String expected = "KST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone4_hXbU3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "def";
    boolean alternate = false;
    String expected = "DF";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone5_nCwx4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "ghi";
    boolean alternate = false;
    String expected = "GH";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone6_oygN5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "jkl";
    boolean alternate = false;
    String expected = "JK";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone7_XJes6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "mno";
    boolean alternate = false;
    String expected = "MN";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone8_BRMU7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "pqr";
    boolean alternate = false;
    String expected = "PQ";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone9_CaqE8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "stu";
    boolean alternate = false;
    String expected = "ST";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone10_YsAo9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "vwx";
    boolean alternate = false;
    String expected = "VW";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone11_qMrA10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String value = "yz";
    boolean alternate = false;
    String expected = "YZ";
    String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_fourLetters_ciCI5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcd", false);
    assertEquals("ABCD", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_fiveLetters_YZmT6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcde", false);
    assertEquals("ABCDE", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_sixLetters_GPpA7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdef", false);
    assertEquals("ABCDEF", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_sevenLetters_UpAk8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefg", false);
    assertEquals("ABCDEFG", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_eightLetters_ZnrW9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefgh", false);
    assertEquals("ABCDEFGH", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_nineLetters_BYJg10() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefghi", false);
    assertEquals("ABCDEFGHI", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_tenLetters_ZLhS11() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefghij", false);
    assertEquals("ABCDEFGHIJ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_elevenLetters_Ojig12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefghijk", false);
    assertEquals("ABCDEFGHIJK", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_twelveLetters_uOzr13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abcdefghijkl", false);
    assertEquals("ABCDEFGHIJKL", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_waNQ3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("x", false);
    assertEquals("X", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_silentStart_xtRz3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("x", false);
    assertEquals("S", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_B_IBrx5() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("b", false);
    assertEquals("P", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_C_aiAK6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("c", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_D_Xdvd7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("d", false);
    assertEquals("T", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_F_ULCv8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("f", false);
    assertEquals("F", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_G_ejJa9() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("g", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_K_lhsZ12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("k", false);
    assertEquals("K", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_M_KDYH14() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("m", false);
    assertEquals("M", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_NullValue_AdgR0() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_EmptyString_ACtr1() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_SingleCharacter_ZbOa2() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("a");
    assertEquals("a", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_MultipleCharacters_hADE3() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("abc");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnoreCase_oHjr4() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("AbC");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnorePunctuation_zDDe6() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("a,b,c");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnoreSpecialCharacters_bLxA7() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("a!b@c#");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnoreDiacritics_YYvw8() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("b");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnoreRepeatedCharacters_FnYb12() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("aabbcc");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoubleMetaphone_IgnoreRepeatedCharactersWithDifferentCases_BVxc13() throws Exception {
    DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    String result = doubleMetaphone.doubleMetaphone("aAbbCC");
    assertEquals("abc", result);
}
}