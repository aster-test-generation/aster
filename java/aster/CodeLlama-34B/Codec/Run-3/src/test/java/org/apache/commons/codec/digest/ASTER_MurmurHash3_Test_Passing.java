/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash3_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_1_ZTlH0() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = 10;
    int seed = 123456789;
    long expected = 1234567890;
    long actual = MurmurHash3.hash64(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_2_Gxju1() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 5;
    int length = 5;
    int seed = 123456789;
    long expected = 1234567890;
    long actual = MurmurHash3.hash64(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_gmVw0_1() throws Exception {
    int data = 123456789;
    long expectedHash = 0xff51afd7ed558ccdL;
    long actualHash = MurmurHash3.hash64(data);
    data = -123456789;
    expectedHash = 0xc4ceb9fe1a85ec53L;
    actualHash = MurmurHash3.hash64(data);
    data = 0;
    expectedHash = 0;
    actualHash = MurmurHash3.hash64(data);
    data = Integer.MAX_VALUE;
    expectedHash = 0xff51afd7ed558ccdL;
    actualHash = MurmurHash3.hash64(data);
    data = Integer.MIN_VALUE;
    expectedHash = 0xc4ceb9fe1a85ec53L;
    actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_Fawj0() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = 10;
    int seed = 123456789;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_hncm1() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 5;
    int length = 5;
    int seed = 123456789;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_Vdbl0() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = data.length;
    int seed = 123456789;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_2_SXKu1() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 5;
    int length = data.length - offset;
    int seed = 123456789;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32x86_1_yTEj0() throws Exception {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 0;
    int length = 10;
    int seed = 12345;
    int expectedHash = 123456789;
    int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_GvOK0() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = 10;
    int seed = 12345;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data, offset, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_emptyData_BUNC0() throws Exception {
    byte[] data = new byte[0];
    int result = MurmurHash3.hash32(data);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_nullData_voeN1() throws Exception {
    byte[] data = null;
    int result = MurmurHash3.hash32(data);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_singleByte_nefJ2() throws Exception {
    byte[] data = new byte[1];
    data[0] = (byte) 0x01;
    int result = MurmurHash3.hash32(data);
    assertEquals(0x01, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_multipleBytes_vOyH3() throws Exception {
    byte[] data = new byte[2];
    data[0] = (byte) 0x01;
    data[1] = (byte) 0x02;
    int result = MurmurHash3.hash32(data);
    assertEquals(0x03, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_largeData_CIHS4() throws Exception {
    byte[] data = new byte[1000];
    for (int i = 0; i < data.length; i++) {
        data[i] = (byte) i;
    }
    int result = MurmurHash3.hash32(data);
    assertEquals(0x01, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_differentSeeds_SJYz5() throws Exception {
    byte[] data = new byte[10];
    for (int i = 0; i < data.length; i++) {
        data[i] = (byte) i;
    }
    int result1 = MurmurHash3.hash32(data, 0, data.length, 0);
    int result2 = MurmurHash3.hash32(data, 0, data.length, 1);
    assertNotEquals(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_differentLengths_YIwg6() throws Exception {
    byte[] data = new byte[10];
    for (int i = 0; i < data.length; i++) {
        data[i] = (byte) i;
    }
    int result1 = MurmurHash3.hash32(data, 0, 5, 0);
    int result2 = MurmurHash3.hash32(data, 0, 10, 0);
    assertNotEquals(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_differentOffsets_pYJl7() throws Exception {
    byte[] data = new byte[10];
    for (int i = 0; i < data.length; i++) {
        data[i] = (byte) i;
    }
    int result1 = MurmurHash3.hash32(data, 0, 5, 0);
    int result2 = MurmurHash3.hash32(data, 5, 5, 0);
    assertNotEquals(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_nVzd0() throws Exception {
    long data = 1234567890L;
    long expectedHash = 1234567890L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNegativeData_Lehk1() throws Exception {
    long data = -1234567890L;
    long expectedHash = -1234567890L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithMaxLong_Hajh2() throws Exception {
    long data = Long.MAX_VALUE;
    long expectedHash = Long.MAX_VALUE;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithMinLong_pLgj3() throws Exception {
    long data = Long.MIN_VALUE;
    long expectedHash = Long.MIN_VALUE;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithZero_MQAZ4() throws Exception {
    long data = 0L;
    long expectedHash = 0L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLargeData_kGKm5() throws Exception {
    long data = 1234567890123456789L;
    long expectedHash = 1234567890123456789L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithSmallData_RQna6() throws Exception {
    long data = 123456789L;
    long expectedHash = 123456789L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNegativeLargeData_mJbY7() throws Exception {
    long data = -1234567890123456789L;
    long expectedHash = -1234567890123456789L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNegativeSmallData_sVPY8() throws Exception {
    long data = -123456789L;
    long expectedHash = -123456789L;
    long actualHash = MurmurHash3.hash64(data);
    assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_whJQ0() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroLength_wfmH1() throws Exception {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 12345;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeLength_gOoy2() throws Exception {
        byte[] data = new byte[10];
        int length = -1;
        int seed = 12345;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_WzWs3() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_NiyQ4() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed = -1;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_BihX5() throws Exception {
        byte[] data = null;
        int length = 10;
        int seed = 12345;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeData_JioE7() throws Exception {
        byte[] data = new byte[10000];
        int length = 10000;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_AbDX8_1() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed1 = 12345;
        int seed2 = 67890;
        int expected1 = 123456789;
        int expected2 = 678901234;
        int actual1 = MurmurHash3.hash32(data, length, seed1);
        int actual2 = MurmurHash3.hash32(data, length, seed2);
        assertEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_AbDX8_2() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed1 = 12345;
        int seed2 = 67890;
        int expected1 = 123456789;
        int expected2 = 678901234;
        int actual1 = MurmurHash3.hash32(data, length, seed1);
        int actual2 = MurmurHash3.hash32(data, length, seed2);
        assertEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_AIuT0() throws Exception {
        byte[] data = new byte[10];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNonZeroSeed_uPVg1() throws Exception {
        byte[] data = new byte[10];
        int seed = 12345;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithZeroLengthData_CsLE2() throws Exception {
        byte[] data = new byte[0];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeLength_BNAc3() throws Exception {
        byte[] data = new byte[10];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, -1, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeSeed_HOIZ4() throws Exception {
        byte[] data = new byte[10];
        int seed = -12345;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNullData_ZUgq5() throws Exception {
        byte[] data = null;
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithLargeData_eUnK7() throws Exception {
        byte[] data = new byte[10000];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithMaximumLength_kbYG8() throws Exception {
        byte[] data = new byte[Integer.MAX_VALUE];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithMinimumLength_MnZs9() throws Exception {
        byte[] data = new byte[Integer.MIN_VALUE];
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_emptyString_bWol0_1() throws Exception {
    long[] result = MurmurHash3.hash128("");
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_emptyString_bWol0_2() throws Exception {
    long[] result = MurmurHash3.hash128("");
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_singleCharacter_RJIh1_1() throws Exception {
    long[] result = MurmurHash3.hash128("a");
    assertEquals(97, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_singleCharacter_RJIh1_2() throws Exception {
    long[] result = MurmurHash3.hash128("a");
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleCharacters_nmRD2_1() throws Exception {
    long[] result = MurmurHash3.hash128("abc");
    assertEquals(97, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleCharacters_nmRD2_2() throws Exception {
    long[] result = MurmurHash3.hash128("abc");
    assertEquals(98, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleCharacters_nmRD2_3() throws Exception {
    long[] result = MurmurHash3.hash128("abc");
    assertEquals(99, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_emptyBytes_WGHx4_1() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[0]);
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_emptyBytes_WGHx4_2() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[0]);
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_singleByte_lYPV5_1() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 });
    assertEquals(97, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_singleByte_lYPV5_2() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 });
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleBytes_rOQD6_1() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97, 98, 99 });
    assertEquals(97, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleBytes_rOQD6_2() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97, 98, 99 });
    assertEquals(98, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_multipleBytes_rOQD6_3() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97, 98, 99 });
    assertEquals(99, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_invalidOffset_ZgAw10() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 }, 0, 1, -1);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_invalidLengthAndOffset_Tsnz12() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 }, -1, 1, -1);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_invalidSeedAndOffset_YiOf13() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 }, 0, -1, -1);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash128_invalidLengthSeedAndOffset_NXDC14() throws Exception {
    long[] result = MurmurHash3.hash128(new byte[] { 97 }, -1, -1, -1);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Eedh0() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentSeed_OQPr1() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 10;
        int seed = 987654321;
        long[] expected = new long[] { 987654321, 123456789 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentData_tUzl2() throws Exception {
        byte[] data = new byte[] { 11, 22, 33, 44, 55, 66, 77, 88, 99, 100 };
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentOffset_YEXk3() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 5;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentLength_YUSY4() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 5;
        int seed = 123456789;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_hFfa0() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 10;
        int seed = 1234;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithDifferentSeed_zpjJ4() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 10;
        int seed = 4567;
        long[] expected = new long[] { 456789123, 234567891 };
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_dFEp0() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_emvt1() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 2;
        int length = 8;
        int seed = 12345;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLength_YDyZ2() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int offset = 0;
        int length = 5;
        int seed = 12345;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_Iphi4() throws Exception {
        byte[] data = null;
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_mZDu5() throws Exception {
        byte[] data = new byte[] {};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[] { 123456789, 987654321 };
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_DPKJ0() throws Exception {
        long data = 1234567890L;
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_GYgb1() throws Exception {
        long data = 1234567890L;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_hdQJ2() throws Exception {
        long data = -1234567890L;
        int seed = 123456789;
        int expected = -123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_aCve3() throws Exception {
        long data = 1234567890L;
        int seed = -123456789;
        int expected = -123456789;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_efuJ4() throws Exception {
        long data = 0L;
        int seed = 123456789;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_wQhU5() throws Exception {
        long data = 1234567890L;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_CaAo6() throws Exception {
        long data = Long.MAX_VALUE;
        int seed = 123456789;
        int expected = Integer.MAX_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeed_vCvn7() throws Exception {
        long data = 1234567890L;
        int seed = Integer.MAX_VALUE;
        int expected = Integer.MAX_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinData_uSTJ8() throws Exception {
        long data = Long.MIN_VALUE;
        int seed = 123456789;
        int expected = Integer.MIN_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinSeed_CDfm9() throws Exception {
        long data = 1234567890L;
        int seed = Integer.MIN_VALUE;
        int expected = Integer.MIN_VALUE;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_USqj0() throws Exception {
        long data = 1234567890L;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_IYoa1() throws Exception {
        long data = 1234567890L;
        int seed = 0;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_avof2() throws Exception {
        long data = 1234567890L;
        int seed = -12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLargeData_BqCa3() throws Exception {
        long data = Long.MAX_VALUE;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSmallData_gJqs4() throws Exception {
        long data = 1;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeData_ULQp5() throws Exception {
        long data = -1;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_BFfU6() throws Exception {
        long data = 0;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinData_sfYa8() throws Exception {
        long data = Long.MIN_VALUE;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeMaxData_QJsr9() throws Exception {
        long data = -Long.MAX_VALUE;
        int seed = 12345;
        int expectedHash = 1234567890;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_invalidSeed_jZeY4() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    int result = MurmurHash3.hash32(data, data.length, -1);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_validDataAndSeed_HKIX5() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    int result = MurmurHash3.hash32(data, data.length, 12345);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_validDataAndInvalidSeed_dTzp6() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    int result = MurmurHash3.hash32(data, data.length, -12345);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_invalidDataAndValidSeed_tXpS7() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    int result = MurmurHash3.hash32(null, data.length, 12345);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_invalidDataAndInvalidSeed_CfRt8() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    int result = MurmurHash3.hash32(null, data.length, -12345);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_YKQh0_1() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_YKQh0_2() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_YKQh0_3() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_qGFe2_1() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, data.length - 5, 0);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_qGFe2_2() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, data.length - 5, 0);
        assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_qGFe2_3() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, data.length - 5, 0);
        assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_RohX3_1() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 5, 0);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_RohX3_2() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 5, 0);
        assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_RohX3_3() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, 5, 0);
        assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffsetAndLength_fNPO6_1() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, 5, 0);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffsetAndLength_fNPO6_2() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, 5, 0);
        assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffsetAndLength_fNPO6_3() throws Exception {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 5, 5, 0);
        assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithNullData_XnAJ8() throws Exception {
        byte[] data = null;
        long[] result = MurmurHash3.hash128x64(data, 0, 0, 0);
        assertEquals(2, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullData_DewH6() throws Exception {
        String data = null;
        byte[] bytes = null;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(bytes, 0, bytes.length, expectedHash);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_data1_data2_seed_pgMc0() throws Exception {
    int hash = MurmurHash3.hash32(123456789L, 987654321L, 123456789);
    assertEquals(123456789, hash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_data1_data2_seed_zero_sQEd1() throws Exception {
    int hash = MurmurHash3.hash32(0L, 0L, 0);
    assertEquals(0, hash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_data1_data2_seed_max_rvmV2() throws Exception {
    int hash = MurmurHash3.hash32(Long.MAX_VALUE, Long.MAX_VALUE, Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, hash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_data1_data2_seed_min_ZNFO3() throws Exception {
    int hash = MurmurHash3.hash32(Long.MIN_VALUE, Long.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, hash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_data1_data2_seed_negative_OqAp4() throws Exception {
    int hash = MurmurHash3.hash32(-123456789L, -987654321L, -123456789);
    assertEquals(-123456789, hash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_SwpD0() throws Exception {
    long data1 = 1234567890L;
    long data2 = 9876543210L;
    int seed = 123456789;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data1, data2, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithDefaultSeed_JJrU1() throws Exception {
    long data1 = 1234567890L;
    long data2 = 9876543210L;
    int expected = 123456789;
    int actual = MurmurHash3.hash32(data1, data2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithDifferentSeeds_uTcZ2_1() throws Exception {
    long data1 = 1234567890L;
    long data2 = 9876543210L;
    int seed1 = 123456789;
    int seed2 = 987654321;
    int expected1 = 123456789;
    int expected2 = 987654321;
    int actual1 = MurmurHash3.hash32(data1, data2, seed1);
    int actual2 = MurmurHash3.hash32(data1, data2, seed2);
    assertEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithDifferentSeeds_uTcZ2_2() throws Exception {
    long data1 = 1234567890L;
    long data2 = 9876543210L;
    int seed1 = 123456789;
    int seed2 = 987654321;
    int expected1 = 123456789;
    int expected2 = 987654321;
    int actual1 = MurmurHash3.hash32(data1, data2, seed1);
    int actual2 = MurmurHash3.hash32(data1, data2, seed2);
    assertEquals(expected2, actual2);}
}