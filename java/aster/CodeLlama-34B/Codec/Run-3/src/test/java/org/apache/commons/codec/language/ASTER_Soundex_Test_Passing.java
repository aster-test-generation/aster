/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Soundex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxLength4_cQjE3() throws Exception {
    Soundex soundex = new Soundex(new char[] {'m', 'a', 'p', 'p', 'i', 'n', 'g'});
    int maxLength = soundex.getMaxLength();
    assertEquals(4, maxLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMaxLengthWithInvalidValue_PobD3() throws Exception {
    Soundex soundex = new Soundex();
    try {
        soundex.setMaxLength(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Max length must be a positive integer", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_EmptyStrings_mXra0() throws EncoderException {
    Soundex soundex = new Soundex();
    assertEquals(0, soundex.difference("", ""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_NullStrings_hdwo1() throws EncoderException {
    Soundex soundex = new Soundex();
    assertEquals(0, soundex.difference(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_DifferentStrings_kwSz2() throws EncoderException {
    Soundex soundex = new Soundex();
    assertEquals(1, soundex.difference("hello", "world"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDifference_SameStrings_JKsq3() throws EncoderException {
    Soundex soundex = new Soundex();
    assertEquals(0, soundex.difference("hello", "hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_String_swYw0() throws Exception {
    Soundex soundex = new Soundex();
    String input = "Hello";
    String expected = "H400";
    String actual = soundex.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_emptyString_pCZf0() throws Exception {
    Soundex soundex = new Soundex();
    String result = soundex.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_singleCharacter_WEmH1() throws Exception {
    Soundex soundex = new Soundex();
    String result = soundex.encode("a");
    assertEquals("a", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_multipleCharacters_QQyu2() throws Exception {
    Soundex soundex = new Soundex();
    String result = soundex.encode("abc");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_null_uySX0() throws Exception {
        Soundex soundex = new Soundex();
        assertNull(soundex.soundex(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_emptyString_xERt1() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("", soundex.soundex(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacter_ExNZ2() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("a"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_rMLo3() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_specialCaseHW_hbWH4() throws Exception {
        Soundex soundex = new Soundex(new char[] {'H', 'W'});
        assertEquals("0000", soundex.soundex("HW"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_silentMarker_XSOD5() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("SILENT"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentCases_WicB6() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("aBc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentCases_specialCaseHW_MCuh7() throws Exception {
        Soundex soundex = new Soundex(new char[] {'H', 'W'});
        assertEquals("0000", soundex.soundex("aBcHW"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentCases_silentMarker_gyOA8() throws Exception {
        Soundex soundex = new Soundex();
        assertEquals("0000", soundex.soundex("aBcSILENT"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentCases_specialCaseHW_silentMarker_PIzG9() throws Exception {
        Soundex soundex = new Soundex(new char[] {'H', 'W'});
        assertEquals("0000", soundex.soundex("aBcHWSILENT"));
}
}