/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Crypt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptyKey_SIjJ1() throws Exception {
    String result = Crypt.crypt("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithValidKey_Blip2() throws Exception {
    String result = Crypt.crypt("key");
    assertEquals("key", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidKey_iVes3() throws Exception {
    String result = Crypt.crypt("invalid_key");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSalt_KSmk4() throws Exception {
    String result = Crypt.crypt("key", null);
    assertEquals("key", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptySalt_GiaO5() throws Exception {
    String result = Crypt.crypt("key", "");
    assertEquals("key", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithValidSalt_eMir6() throws Exception {
    String result = Crypt.crypt("key", "salt");
    assertEquals("key", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidSalt_vJCN7() throws Exception {
    String result = Crypt.crypt("key", "invalid_salt");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptyKeyAndSalt_MOIJ9() throws Exception {
    String result = Crypt.crypt("", "");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSalt_RPtm0() throws Exception {
    byte[] keyBytes = new byte[0];
    String salt = null;
    String expected = Sha2Crypt.sha512Crypt(keyBytes);
    String actual = Crypt.crypt(keyBytes, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithSha512Prefix_FpLv1() throws Exception {
    byte[] keyBytes = new byte[0];
    String salt = Sha2Crypt.SHA512_PREFIX + "salt";
    String expected = Sha2Crypt.sha512Crypt(keyBytes, salt);
    String actual = Crypt.crypt(keyBytes, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithSha256Prefix_fWzU2() throws Exception {
    byte[] keyBytes = new byte[0];
    String salt = Sha2Crypt.SHA256_PREFIX + "salt";
    String expected = Sha2Crypt.sha256Crypt(keyBytes, salt);
    String actual = Crypt.crypt(keyBytes, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithMd5Prefix_Zung3() throws Exception {
    byte[] keyBytes = new byte[0];
    String salt = Md5Crypt.MD5_PREFIX + "salt";
    String expected = Md5Crypt.md5Crypt(keyBytes, salt);
    String actual = Crypt.crypt(keyBytes, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithUnixCrypt_hErR4() throws Exception {
    byte[] keyBytes = new byte[0];
    String salt = "salt";
    String expected = UnixCrypt.crypt(keyBytes, salt);
    String actual = Crypt.crypt(keyBytes, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullSalt_FUIy1() throws Exception {
        String key = "key";
        String expected = null;
        String actual = Crypt.crypt(key, null);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_emptyKey_wAwJ2() throws Exception {
        String salt = "salt";
        String expected = "";
        String actual = Crypt.crypt("", salt);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_emptySalt_xMyN3() throws Exception {
        String key = "key";
        String expected = "";
        String actual = Crypt.crypt(key, "");
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validKeyAndSalt_OOkH4() throws Exception {
        String key = "key";
        String salt = "salt";
        String expected = "key_salt";
        String actual = Crypt.crypt(key, salt);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_cdXL0_1() throws Exception {
        byte[] keyBytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
        String result = Crypt.crypt(keyBytes);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_cdXL0_2() throws Exception {
        byte[] keyBytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
        String result = Crypt.crypt(keyBytes);
        assertEquals("0102030405060708090A0B0C0D0E0F10", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKey_NgPD1_1() throws Exception {
        byte[] keyBytes = null;
        String result = Crypt.crypt(keyBytes);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKey_NgPD1_2() throws Exception {
        byte[] keyBytes = null;
        String result = Crypt.crypt(keyBytes);
        assertEquals("", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_JZjx2_1() throws Exception {
        byte[] keyBytes = new byte[0];
        String result = Crypt.crypt(keyBytes);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyKey_JZjx2_2() throws Exception {
        byte[] keyBytes = new byte[0];
        String result = Crypt.crypt(keyBytes);
        assertEquals("", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidKeyAndNullSalt_LcVF5_1() throws Exception {
        byte[] keyBytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
        String result = Crypt.crypt(keyBytes, null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidKeyAndNullSalt_LcVF5_2() throws Exception {
        byte[] keyBytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 };
        String result = Crypt.crypt(keyBytes, null);
        assertEquals("0102030405060708090A0B0C0D0E0F10", result);}
}