/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MurmurHash2_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_1_zRGk0() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    int length = 8;
    int seed = 123456789;
    long expected = 1234567890123456789L;
    long actual = MurmurHash2.hash64(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_OzVA0() throws Exception {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0x9747b28c;
        int expected = 0x747b28c;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_fbsB0() throws Exception {
    String text = "Hello, World!";
    int from = 0;
    int length = text.length();
    int expected = 123456789;
    int actual = MurmurHash2.hash32(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithDifferentInputStrings_ZnhE1_1() throws Exception {
    String text1 = "Hello, World!";
    String text2 = "Goodbye, World!";
    int from = 0;
    int length = text1.length();
    int expected1 = 123456789;
    int expected2 = 987654321;
    int actual1 = MurmurHash2.hash32(text1, from, length);
    int actual2 = MurmurHash2.hash32(text2, from, length);
    assertEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32WithDifferentInputStrings_ZnhE1_2() throws Exception {
    String text1 = "Hello, World!";
    String text2 = "Goodbye, World!";
    int from = 0;
    int length = text1.length();
    int expected1 = 123456789;
    int expected2 = 987654321;
    int actual1 = MurmurHash2.hash32(text1, from, length);
    int actual2 = MurmurHash2.hash32(text2, from, length);
    assertEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_1_ixOS0() throws Exception {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int length = data.length;
    int seed = 12345;
    int expected = 123456789;
    int actual = MurmurHash2.hash32(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_3_SYdb2() throws Exception {
    byte[] data = new byte[] {};
    int length = data.length;
    int seed = 12345;
    int expected = 0;
    int actual = MurmurHash2.hash32(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_4_JXRW3() throws Exception {
    byte[] data = null;
    int length = 0;
    int seed = 12345;
    int expected = 0;
    int actual = MurmurHash2.hash32(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash32_5_rLdp4() throws Exception {
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int length = data.length;
    int seed = 0;
    int expected = 0;
    int actual = MurmurHash2.hash32(data, length, seed);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_WXRI0() throws Exception {
    String text = "Hello World!";
    int from = 0;
    int length = text.length();
    long expected = 123456789;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithEmptyString_pDuj1() throws Exception {
    String text = "";
    int from = 0;
    int length = text.length();
    long expected = 0;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNullString_qGHE2() throws Exception {
    String text = null;
    int from = 0;
    int length = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNegativeFrom_dOiO3() throws Exception {
    String text = "Hello World!";
    int from = -1;
    int length = text.length();
    long expected = 123456789;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithNegativeLength_XURn4() throws Exception {
    String text = "Hello World!";
    int from = 0;
    int length = -1;
    long expected = 123456789;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithFromGreaterThanLength_jzLn5() throws Exception {
    String text = "Hello World!";
    int from = text.length() + 1;
    int length = 0;
    long expected = 0;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithLengthGreaterThanTextLength_mJWN6() throws Exception {
    String text = "Hello World!";
    int from = 0;
    int length = text.length() + 1;
    long expected = 123456789;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithFromAndLengthEqualToTextLength_loPZ7() throws Exception {
    String text = "Hello World!";
    int from = text.length();
    int length = text.length();
    long expected = 123456789;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64WithFromAndLengthGreaterThanTextLength_xkZu8() throws Exception {
    String text = "Hello World!";
    int from = text.length() + 1;
    int length = text.length() + 1;
    long expected = 0;
    long actual = MurmurHash2.hash64(text, from, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_emptyString_achx0() throws Exception {
    String text = "";
    long expected = 0;
    long actual = MurmurHash2.hash64(text);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_singleCharacter_uGNE1() throws Exception {
    String text = "a";
    long expected = 97;
    long actual = MurmurHash2.hash64(text);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_multipleCharacters_PzDf2() throws Exception {
    String text = "abc";
    long expected = 294;
    long actual = MurmurHash2.hash64(text);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_null_bXgt3() throws Exception {
    String text = null;
    long expected = 0;
    long actual = MurmurHash2.hash64(text);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_emptyBytes_iVso4() throws Exception {
    byte[] bytes = new byte[0];
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, bytes.length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_singleByte_nRFK5() throws Exception {
    byte[] bytes = new byte[] { 97 };
    long expected = 97;
    long actual = MurmurHash2.hash64(bytes, bytes.length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_multipleBytes_DQjY6() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 294;
    long actual = MurmurHash2.hash64(bytes, bytes.length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_nullBytes_uvAS7() throws Exception {
    byte[] bytes = null;
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_invalidLength_nhtQ8() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, -1);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_invalidLength2_UfrN9() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, 4);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_invalidLength3_udrD10() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, -10);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_invalidLength4_ittg11() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, 10);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHash64_invalidLength5_VHEE12() throws Exception {
    byte[] bytes = new byte[] { 97, 98, 99 };
    long expected = 0;
    long actual = MurmurHash2.hash64(bytes, -100);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyString_rYYJ0() throws Exception {
        String text = "";
        int expected = 0;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleCharacter_dLuc1() throws Exception {
        String text = "a";
        int expected = 97;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleCharacters_Bgmz2() throws Exception {
        String text = "abc";
        int expected = 294;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_unicodeCharacters_zWfx3() throws Exception {
        String text = "";
        int expected = 128515;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_null_esvu4() throws Exception {
        String text = null;
        int expected = 0;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyBytes_NHAP5() throws Exception {
        byte[] bytes = new byte[0];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleByte_kBsr6() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF };
        int expected = 255;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleBytes_fYzm7() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF, (byte) 0xFF };
        int expected = 65535;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_unicodeBytes_JCHU8() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xF0, (byte) 0x9F, (byte) 0x98, (byte) 0x8A };
        int expected = 128515;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullBytes_UxPs9() throws Exception {
        byte[] bytes = null;
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 0);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength_LJhn10() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF };
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, -1);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength2_nqMN11() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF };
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 2);
        assertEquals(expected, actual);
    }
}