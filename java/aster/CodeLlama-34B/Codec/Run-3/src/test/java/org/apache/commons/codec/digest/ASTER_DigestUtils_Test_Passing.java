/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.codec.binary.Hex;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DigestUtils_Test_Passing {
    private MessageDigest messageDigest;
    private String valueToDigest;
    private static final String SHA3_512_ALGORITHM = "SHA3-512";
    private static final String SHA1_ALGORITHM = "SHA-1";
    private static final String SHA384_ALGORITHM = "SHA-384";    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Hex_Oqpb0() throws Exception {
    byte[] data = "Hello, World!".getBytes();
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = DigestUtils.sha256Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestWithNullMessageDigest_vlFU0() throws IOException {
    File data = new File("data.txt");
    try {
        DigestUtils.digest(null, data);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("messageDigest", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_String_RQtV1() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    String data = "Hello, World!";
    String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_Null_TLwB2() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    String data = null;
    String expected = null;
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2Digest_wThH0_1() throws Exception {
    MessageDigest digest = DigestUtils.getMd2Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2Digest_wThH0_2() throws Exception {
    MessageDigest digest = DigestUtils.getMd2Digest();
    assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2DigestWithConstructor_HMaZ1_1() throws Exception {
    MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.MD2).getMd2Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2DigestWithConstructor_HMaZ1_2() throws Exception {
    MessageDigest digest = new DigestUtils(MessageDigestAlgorithms.MD2).getMd2Digest();
    assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2DigestWithString_dwVN2_1() throws Exception {
    MessageDigest digest = new DigestUtils("MD2").getMd2Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMd2DigestWithString_dwVN2_2() throws Exception {
    MessageDigest digest = new DigestUtils("MD2").getMd2Digest();
    assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha384Digest_mdbK0_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest digest = digestUtils.getSha384Digest();
    assertEquals(MessageDigestAlgorithms.SHA_384, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha384Digest_mdbK0_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest digest = digestUtils.getSha384Digest();
    assertEquals(64, digest.getDigestLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha384_LIcI0() throws Exception {
    byte[] data = "Hello, World!".getBytes();
    byte[] expected = new byte[] {
    };
    byte[] actual = DigestUtils.sha384(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha1Digest_DefaultConstructor_hwjb0() throws Exception {
    DigestUtils utils = new DigestUtils();
    MessageDigest digest = utils.getSha1Digest();
    assertEquals(MessageDigestAlgorithms.SHA_1, digest.getAlgorithm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha1Digest_MessageDigestConstructor_vKQy1() throws Exception {
    MessageDigest digest = MessageDigest.getInstance(MessageDigestAlgorithms.SHA_1);
    DigestUtils utils = new DigestUtils(digest);
    assertSame(digest, utils.getSha1Digest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_EjwM0() throws NoSuchAlgorithmException {
        messageDigest = MessageDigest.getInstance("SHA-256");
        valueToDigest = "Hello, World!";
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_edUJ1_1() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_edUJ1_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullMessageDigest_fHeb2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(null, valueToDigest);
        assertNull(updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyValueToDigest_GfHz4() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "");
        assertNull(updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInvalidAlgorithm_ZmmR5() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "INVALID_ALGORITHM");
        assertNull(updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentAlgorithm_CAwo6_1() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "SHA-512");
        assertNotNull(updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentAlgorithm_CAwo6_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "SHA-512");
        assertNotEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithSameAlgorithm_CNwD7_1() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "SHA-256");
        assertNotNull(updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithSameAlgorithm_CNwD7_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "SHA-256");
        assertEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentValueToDigest_sXWV8_1() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "Hello, World!");
        assertNotNull(updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentValueToDigest_sXWV8_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "Hello, World!");
        assertNotEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithSameValueToDigest_TaMO9_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, "Hello, World!");
        assertEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentMessageDigest_XSPF10_1() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(MessageDigest.getInstance("SHA-512"), valueToDigest);
        assertNotNull(updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentMessageDigest_XSPF10_2() throws Exception {
        MessageDigest updatedDigest = DigestUtils.updateDigest(MessageDigest.getInstance("SHA-512"), valueToDigest);
        assertNotEquals(messageDigest, updatedDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_jyVL0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_MPKb1() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = null;
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        try {
            DigestUtils.digest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("messageDigest", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullRandomAccessFile_ggft2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = null;
        try {
            DigestUtils.digest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("data", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyRandomAccessFile_hpVz3() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("empty.txt", "r");
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithLargeRandomAccessFile_ZZyC4() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("large.txt", "r");
        byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestFile_zqgE0() throws IOException {
    DigestUtils digestUtils = new DigestUtils();
    File data = new File("data.txt");
    byte[] expected = new byte[]{1, 2, 3, 4, 5};
    byte[] actual = digestUtils.digest(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestString_zToq1() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    String data = "Hello, World!";
    byte[] expected = new byte[]{1, 2, 3, 4, 5};
    byte[] actual = digestUtils.digest(data.getBytes());
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_narw0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullData_fKQG1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyData_QmwV2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithLargeData_FWgQ3() throws NoSuchAlgorithmException {
        byte[] data = new byte[1024];
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithInvalidAlgorithm_BJJh4() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyDataAndAlgorithm_Fztc8() throws NoSuchAlgorithmException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullData_Exia1() throws NoSuchAlgorithmException {
        String data = null;
        byte[] expected = new byte[] { 0x00 };
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithEmptyData_eoFU2() throws NoSuchAlgorithmException {
        String data = "";
        byte[] expected = new byte[] { 0x00 };
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetShaDigest_YODi0_1() throws Exception {
    MessageDigest digest = DigestUtils.getShaDigest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetShaDigest_YODi0_2() throws Exception {
    MessageDigest digest = DigestUtils.getShaDigest();
    assertEquals("SHA-1", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest_DefaultConstructor_nHXW0_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest messageDigest = digestUtils.getMessageDigest();
    assertNotNull(messageDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest_DefaultConstructor_nHXW0_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest messageDigest = digestUtils.getMessageDigest();
    assertEquals("SHA-256", messageDigest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest_MessageDigestConstructor_dEIQ1() throws Exception {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    DigestUtils digestUtils = new DigestUtils(messageDigest);
    assertSame(messageDigest, digestUtils.getMessageDigest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest_StringConstructor_RGyD2_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    MessageDigest messageDigest = digestUtils.getMessageDigest();
    assertNotNull(messageDigest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageDigest_StringConstructor_RGyD2_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    MessageDigest messageDigest = digestUtils.getMessageDigest();
    assertEquals("SHA-256", messageDigest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha1Hex_xXaw0() throws Exception {
    String data = "Hello, World!";
    String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
    String actual = DigestUtils.sha1Hex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexNull_ZMFP2() throws Exception {
        String data = null;
        assertThrows(NullPointerException.class, () -> DigestUtils.sha1Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexEmpty_WpDe3() throws Exception {
        String data = "";
        assertThrows(IllegalArgumentException.class, () -> DigestUtils.sha1Hex(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_Rjky0() throws IOException {
        MessageDigest digest = null;
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        try {
            DigestUtils.updateDigest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_oUaO0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "8743b52063cd84097a65d1633f5c74f5";
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithNullData_pwrJ1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithEmptyData_zLjp2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "";
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithLongData_unsu3() throws NoSuchAlgorithmException {
        String data = "Hello, World! Hello, World! Hello, World!";
        String expectedHash = "8743b52063cd84097a65d1633f5c74f5";
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_VUhe0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithNullData_PtYF1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithEmptyData_hDWh2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithLargeData_AZXi3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/224");
        byte[] data = new byte[1024];
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Zwcr0_1() throws Exception {
    DigestUtils utils = new DigestUtils();
    MessageDigest digest = utils.getSha3_224Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Zwcr0_2() throws Exception {
    DigestUtils utils = new DigestUtils();
    MessageDigest digest = utils.getSha3_224Digest();
    assertEquals(MessageDigestAlgorithms.SHA3_224, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_224Digest_Zwcr0_3() throws Exception {
    DigestUtils utils = new DigestUtils();
    MessageDigest digest = utils.getSha3_224Digest();
    assertEquals(224, digest.getDigestLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha_IvTp0() throws Exception {
    byte[] data = new byte[10];
    byte[] expected = new byte[10];
    for (int i = 0; i < 10; i++) {
        data[i] = (byte) i;
        expected[i] = (byte) (i + 1);
    }
    byte[] actual = DigestUtils.sha(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_ByteBuffer_YDSo0() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    ByteBuffer data = ByteBuffer.allocate(10);
    byte[] expected = new byte[10];
    byte[] actual = digestUtils.digest(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_ByteBuffer_Null_fXkr1() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    ByteBuffer data = null;
    byte[] expected = null;
    byte[] actual = digestUtils.digest(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_ByteBuffer_Empty_zmyW2() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    ByteBuffer data = ByteBuffer.allocate(0);
    byte[] expected = new byte[0];
    byte[] actual = digestUtils.digest(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest_ByteBuffer_NonEmpty_rMrl3() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    ByteBuffer data = ByteBuffer.allocate(10);
    data.put((byte) 1);
    data.put((byte) 2);
    data.put((byte) 3);
    data.put((byte) 4);
    data.put((byte) 5);
    data.put((byte) 6);
    data.put((byte) 7);
    data.put((byte) 8);
    data.put((byte) 9);
    data.put((byte) 10);
    byte[] expected = new byte[10];
    byte[] actual = digestUtils.digest(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_XkdX0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("SHA-256");
        assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_XkdX0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("SHA-256");
        assertEquals("SHA-256", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidAlgorithm_mBko1() throws Exception {
        try {
            DigestUtils.getDigest("invalid-algorithm");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No such algorithm"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullAlgorithm_jOTx2() throws Exception {
        try {
            DigestUtils.getDigest(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No such algorithm"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithEmptyAlgorithm_KXkD3() throws Exception {
        try {
            DigestUtils.getDigest("");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No such algorithm"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullMessageDigest_qsXh5() throws Exception {
        try {
            DigestUtils.getDigest("SHA-256", null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No such algorithm"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullNameAndNullMessageDigest_Gelx10() throws Exception {
        try {
            DigestUtils.getDigest(null, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No such algorithm"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_LwSt0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("MD2");
        byte[] data = "Hello, World!".getBytes();
        String expected = "68e109f0f40ca7314058bb36d3e0c5fe";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_384Digest_crSP0_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest digest = digestUtils.getSha3_384Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha3_384Digest_crSP0_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest digest = digestUtils.getSha3_384Digest();
    assertEquals(MessageDigestAlgorithms.SHA3_384, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_EmptyData_xNXn1() throws Exception {
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_256("");
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_NonEmptyData_tuOj2() throws Exception {
        byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };
        byte[] actual = DigestUtils.sha3_256("Hello World!");
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_QWrG0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithNullData_mAVJ1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithEmptyData_pluD2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithNullDigest_TIYe6() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_XarO0() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
        byte[] actual = DigestUtils.digest(null, data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_ObXL2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] expected = new byte[] {};
        byte[] actual = DigestUtils.digest(messageDigest, new byte[] {});
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_RGEo3() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidData_uQhx4() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigestAndEmptyData_zjcK6() throws Exception {
        byte[] expected = new byte[] {};
        byte[] actual = DigestUtils.digest(null, new byte[] {});
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigestAndInvalidData_ackO8() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
        byte[] actual = DigestUtils.digest(null, data);
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidMessageDigestAndNullData_rHIZ9() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_wILq0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = digest.digest(data.array());
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_CauQ1() throws Exception {
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        try {
            DigestUtils.digest(null, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("messageDigest", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_hEjU3() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[0]);
        byte[] expected = digest.digest(data.array());
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithLargeData_reiV4() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.wrap(new byte[10000]);
        byte[] expected = digest.digest(data.array());
        byte[] actual = DigestUtils.digest(digest, data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentAlgorithms_lPLy5_1() throws NoSuchAlgorithmException {
        MessageDigest digest1 = MessageDigest.getInstance("SHA-256");
        MessageDigest digest2 = MessageDigest.getInstance("SHA-512");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected1 = digest1.digest(data.array());
        byte[] expected2 = digest2.digest(data.array());
        byte[] actual1 = DigestUtils.digest(digest1, data);
        byte[] actual2 = DigestUtils.digest(digest2, data);
        assertArrayEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentAlgorithms_lPLy5_2() throws NoSuchAlgorithmException {
        MessageDigest digest1 = MessageDigest.getInstance("SHA-256");
        MessageDigest digest2 = MessageDigest.getInstance("SHA-512");
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected1 = digest1.digest(data.array());
        byte[] expected2 = digest2.digest(data.array());
        byte[] actual1 = DigestUtils.digest(digest1, data);
        byte[] actual2 = DigestUtils.digest(digest2, data);
        assertArrayEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentData_rMVP6_1() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data1 = ByteBuffer.wrap("Hello, World!".getBytes());
        ByteBuffer data2 = ByteBuffer.wrap("Goodbye, World!".getBytes());
        byte[] expected1 = digest.digest(data1.array());
        byte[] expected2 = digest.digest(data2.array());
        byte[] actual1 = DigestUtils.digest(digest, data1);
        byte[] actual2 = DigestUtils.digest(digest, data2);
        assertArrayEquals(expected1, actual1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentData_rMVP6_2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data1 = ByteBuffer.wrap("Hello, World!".getBytes());
        ByteBuffer data2 = ByteBuffer.wrap("Goodbye, World!".getBytes());
        byte[] expected1 = digest.digest(data1.array());
        byte[] expected2 = digest.digest(data2.array());
        byte[] actual1 = DigestUtils.digest(digest, data1);
        byte[] actual2 = DigestUtils.digest(digest, data2);
        assertArrayEquals(expected2, actual2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_SSgR0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullData_DDLE1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithEmptyData_KNls2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "";
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithInvalidData_ZNOx3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha256Hex(data);
        assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullDigest_FrFy5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha256Hex(data);
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha512_224_DWwX0() throws Exception {
    byte[] data = new byte[10];
    for (int i = 0; i < data.length; i++) {
        data[i] = (byte) i;
    }
    byte[] expected = new byte[32];
    for (int i = 0; i < expected.length; i++) {
        expected[i] = (byte) (i % 256);
    }
    byte[] actual = DigestUtils.sha512_224(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAvailable_NullAlgorithm_ASmB0() throws Exception {
    assertFalse(DigestUtils.isAvailable(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_rjRt0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actualHash = DigestUtils.shaHex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithNullData_barK1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.shaHex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithEmptyData_OSnf2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actualHash = DigestUtils.shaHex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_fTtQ0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha512_256Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyString_OUJI1() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actualHash = DigestUtils.sha512_256Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNull_IEth2() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha512_256Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_BvLz0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e";
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullData_OgQE1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEmptyData_ZPcX2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "";
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithInvalidData_TfaM3_1() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e4323c9739e";
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = Hex.encodeHexString(hash);
        assertNotNull(actualHash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_aDyY0_1() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_aDyY0_2() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    assertEquals(MessageDigestAlgorithms.SHA_512, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512Digest_aDyY0_3() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    assertEquals(64, digest.getDigestLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestNull_zaER1() throws Exception {
    MessageDigest digest = null;
    try {
        digest = DigestUtils.getSha512Digest();
    } catch (NullPointerException e) {
    }
    assertNull(digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestInvalidAlgorithm_gMCK2() throws Exception {
    MessageDigest digest = null;
    try {
        digest = DigestUtils.getSha512Digest();
    } catch (IllegalArgumentException e) {
    }
    assertNull(digest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestValid_MTsp5_1() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    byte[] inputData = "Hello, World!".getBytes();
    byte[] outputData = digest.digest(inputData);
    assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestValid_MTsp5_2() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    byte[] inputData = "Hello, World!".getBytes();
    byte[] outputData = digest.digest(inputData);
    assertEquals(MessageDigestAlgorithms.SHA_512, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestValid_MTsp5_3() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    byte[] inputData = "Hello, World!".getBytes();
    byte[] outputData = digest.digest(inputData);
    assertEquals(64, digest.getDigestLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestValid_MTsp5_4() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    byte[] inputData = "Hello, World!".getBytes();
    byte[] outputData = digest.digest(inputData);
    assertNotNull(outputData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512DigestValid_MTsp5_5() throws Exception {
    MessageDigest digest = DigestUtils.getSha512Digest();
    byte[] inputData = "Hello, World!".getBytes();
    byte[] outputData = digest.digest(inputData);
    assertEquals(64, outputData.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_dpko0_1() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[] {
        };
        MessageDigest digest = MessageDigest.getInstance("SHA3-256");
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_dpko0_2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[] {
        };
        MessageDigest digest = MessageDigest.getInstance("SHA3-256");
        byte[] actual = DigestUtils.sha3_256(data);
        assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_CriE0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullData_kmuE1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithEmptyData_XpgE2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithLargeData_OBRz4() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithInvalidAlgorithm_nawj5() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = "Hello, World!".getBytes();
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullDigest_MAQM6() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_DQVx0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_eaXo1() throws Exception {
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(null, valueToDigest);
        assertNull(updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyValueToDigest_LUyC3() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap(new byte[0]);
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInvalidDigest_CPSg4() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(digest, updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInvalidValueToDigest_ptWb5() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(valueToDigest, updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentDigest_qwAw6() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(MessageDigest.getInstance("SHA-512"), updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentValueToDigest_YNrU7() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(ByteBuffer.wrap("Hello, World!".getBytes()), updatedDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_sgdE0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[] {
        };
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithEmptyData_YRbe1() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullData_guXM2() throws NoSuchAlgorithmException {
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithInvalidAlgorithm_Ibuq3() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_224Digest_byaX0() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512-224");
    MessageDigest actualDigest = digestUtils.getSha512_224Digest();
    assertEquals(expectedDigest, actualDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_rDfb0() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_kcaO0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithNullData_wyCD1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithEmptyData_gQTw2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithInvalidData_pZke3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithNullDigest_gLRQ5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_nQik0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expectedHash = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actualHash = DigestUtils.sha1Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullData_ZIiX1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha1Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyData_uaxi2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expectedHash = "";
        String actualHash = DigestUtils.sha1Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithInvalidData_nmXk3() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expectedHash = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actualHash = DigestUtils.sha1Hex(data);
        assertNotEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_EOts0() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithMessageDigest_JPAS1() throws Exception {
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    DigestUtils digestUtils = new DigestUtils(digest);
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithString_tsBR2() throws Exception {
    String name = "SHA-256";
    DigestUtils digestUtils = new DigestUtils(name);
    ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestString_Yjlk1() throws IOException {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    String data = "Hello, World!";
    byte[] expected = digestUtils.digest(data.getBytes());
    byte[] actual = digestUtils.digest(data.getBytes());
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_UUae0_1() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1b9246fb30382f2776e8788ef522fcc81a6a486f7a542b245737a9853113c02e6a186cc3176fe0e8e";
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = DigestUtils.sha512Hex(data);
        assertEquals(expectedHash, actualHash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_UUae0_2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1b9246fb30382f2776e8788ef522fcc81a6a486f7a542b245737a9853113c02e6a186cc3176fe0e8e";
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        digest.update(data.getBytes());
        byte[] hash = digest.digest();
        String actualHash = DigestUtils.sha512Hex(data);
        assertNotNull(actualHash);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_XFdO0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "8b1a9953c4611296a827abf8c47804d7";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNullData_esHv1() throws NoSuchAlgorithmException {
        String data = null;
        String expected = null;
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyData_EDmS2() throws NoSuchAlgorithmException {
        String data = "";
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithInvalidData_gUHl3() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "8b1a9953c4611296a827abf8c47804d7";
        String actual = DigestUtils.md5Hex(data);
        assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithValidAlgorithm_kbyM0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("SHA-256", null);
        assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithValidAlgorithm_kbyM0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("SHA-256", null);
        assertEquals("SHA-256", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidAlgorithm_loUq1() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("INVALID_ALGORITHM", null);
        assertNull(digest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullAlgorithm_fHaT2() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest(null, null);
        assertNull(digest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithDefaultMessageDigest_yggL3() throws NoSuchAlgorithmException {
        MessageDigest defaultDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest("SHA-256", defaultDigest);
        assertEquals(defaultDigest, digest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidDefaultMessageDigest_fQJE5() throws NoSuchAlgorithmException {
        MessageDigest defaultDigest = MessageDigest.getInstance("INVALID_ALGORITHM");
        MessageDigest digest = DigestUtils.getDigest("SHA-256", defaultDigest);
        assertNull(digest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigestAndEmptyAlgorithm_hYtM8() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("", null);
        assertNull(digest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_XpXa0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNullData_cPrI1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyData_bDxG2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyMessageDigest_ICcI9() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_BFCY0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullData_eteh1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyData_IJsD2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_LBLf0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertNotNull(digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_LBLf0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha256Digest();
        assertEquals("SHA-256", digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest1_UFTh0_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    byte[] result = digestUtils.digest("data");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest1_UFTh0_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    byte[] result = digestUtils.digest("data");
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest2_VcTp1_1() throws Exception {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    DigestUtils digestUtils = new DigestUtils(messageDigest);
    byte[] result = digestUtils.digest("data");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest2_VcTp1_2() throws Exception {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    DigestUtils digestUtils = new DigestUtils(messageDigest);
    byte[] result = digestUtils.digest("data");
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest3_zotV2_1() throws Exception {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    byte[] result = digestUtils.digest("data");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigest3_zotV2_2() throws Exception {
    DigestUtils digestUtils = new DigestUtils("SHA-256");
    byte[] result = digestUtils.digest("data");
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_zUwE0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testShaHex_nullInputStream_MbfM0() throws IOException {
    InputStream data = null;
    String expected = "";
    String actual = DigestUtils.shaHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_bXvp0() throws Exception {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_SNeG0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_sQiy1() throws NoSuchAlgorithmException {
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest = DigestUtils.updateDigest(null, valueToDigest);
        assertNull(updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithEmptyValueToDigest_KYns3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = new byte[0];
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentAlgorithms_cfpD4() throws NoSuchAlgorithmException {
        MessageDigest digest1 = MessageDigest.getInstance("SHA-256");
        MessageDigest digest2 = MessageDigest.getInstance("SHA-512");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest1 = DigestUtils.updateDigest(digest1, valueToDigest);
        MessageDigest updatedDigest2 = DigestUtils.updateDigest(digest2, valueToDigest);
        assertNotEquals(updatedDigest1, updatedDigest2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentValuesToDigest_mpfP5() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest1 = "Hello, World!".getBytes();
        byte[] valueToDigest2 = "Goodbye, World!".getBytes();
        MessageDigest updatedDigest1 = DigestUtils.updateDigest(digest, valueToDigest1);
        MessageDigest updatedDigest2 = DigestUtils.updateDigest(digest, valueToDigest2);
        assertNotEquals(updatedDigest1, updatedDigest2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithSameValueToDigest_zFPd6() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest1 = DigestUtils.updateDigest(digest, valueToDigest);
        MessageDigest updatedDigest2 = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(updatedDigest1, updatedDigest2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithDifferentDigests_lVpH7() throws NoSuchAlgorithmException {
        MessageDigest digest1 = MessageDigest.getInstance("SHA-256");
        MessageDigest digest2 = MessageDigest.getInstance("SHA-512");
        byte[] valueToDigest = "Hello, World!".getBytes();
        MessageDigest updatedDigest1 = DigestUtils.updateDigest(digest1, valueToDigest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHex_fcso0() throws Exception {
    DigestUtils digestUtils = new DigestUtils();
    byte[] data = "Hello, World!".getBytes();
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDigestAsHexWithMessageDigest_ITGz1() throws Exception {
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    DigestUtils digestUtils = new DigestUtils(digest);
    byte[] data = "Hello, World!".getBytes();
    String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
    String actual = digestUtils.digestAsHex(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_SCxU0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("MD2").digest(data.getBytes());
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithEmptyString_TrmW1() throws NoSuchAlgorithmException {
        String data = "";
        byte[] expected = MessageDigest.getInstance("MD2").digest(data.getBytes());
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullString_ZSqc2() throws NoSuchAlgorithmException {
        String data = null;
        byte[] expected = MessageDigest.getInstance("MD2").digest(data.getBytes());
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNullData_CVLy0() throws Exception {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithEmptyData_mfgx1() throws Exception {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNonEmptyData_wqQK2() throws Exception {
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithLargeData_WViH3() throws Exception {
        byte[] data = new byte[1000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[1000];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) i;
        }
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_RRqb0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expectedHash = "11112222333344445555666677778888999900001111222233334444555566667777888899990000";
        String actualHash = DigestUtils.sha384Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullData_WHWD1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha384Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEmptyData_CtLD2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expectedHash = "";
        String actualHash = DigestUtils.sha384Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithLargeData_sdfN3() throws NoSuchAlgorithmException {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expectedHash = "11112222333344445555666677778888999900001111222233334444555566667777888899990000";
        String actualHash = DigestUtils.sha384Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ScGZ0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils utils = new DigestUtils(digest);
        File data = new File("data.txt");
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = utils.digestAsHex(data);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_jBeX0() throws NoSuchAlgorithmException {
        byte[] data = new byte[] { 1, 2, 3, 4, 5 };
        byte[] expected = new byte[] { 10, 20, 30, 40, 50 };
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNullData_snfP1() throws NoSuchAlgorithmException {
        byte[] data = null;
        byte[] expected = new byte[] { 0 };
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithEmptyData_wMGN2() throws NoSuchAlgorithmException {
        byte[] data = new byte[] {};
        byte[] expected = new byte[] { 0 };
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithLargeData_yUhf3() throws NoSuchAlgorithmException {
        byte[] data = new byte[1000];
        byte[] expected = new byte[1000];
        for (int i = 0; i < 1000; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_256Digest_rmDs0_1() throws Exception {
    MessageDigest digest = DigestUtils.getSha512_256Digest();
    assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSha512_256Digest_rmDs0_2() throws Exception {
    MessageDigest digest = DigestUtils.getSha512_256Digest();
    assertEquals(512, digest.getDigestLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_wodT1() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] result = digestUtils.digest(new byte[0]);
        assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNonEmptyData_whvh2() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_SVMu4() throws Exception {
        DigestUtils digestUtils = new DigestUtils((MessageDigest) null);
        byte[] data = "Hello, World!".getBytes();
        try {
            digestUtils.digest(data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullName_sbZA5() throws Exception {
        DigestUtils digestUtils = new DigestUtils((String) null);
        byte[] data = "Hello, World!".getBytes();
        try {
            digestUtils.digest(data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidName_nHXx7() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] result = digestUtils.digest(data);
        assertEquals(32, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidNameAndEmptyData_hpxL10() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] result = digestUtils.digest(new byte[0]);
        assertEquals(0, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_Dreb0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "a7ffc34a32a9782994adb2479c439972";
        String actualHash = DigestUtils.sha3_224Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithNullData_aWTH1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_224Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithEmptyData_boGB2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_224Hex(data);
        assertEquals(expectedHash, actualHash);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_WDzp0_1() throws NoSuchAlgorithmException {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_WDzp0_2() throws NoSuchAlgorithmException {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertEquals("MD5", md5Digest.getAlgorithm());}
}