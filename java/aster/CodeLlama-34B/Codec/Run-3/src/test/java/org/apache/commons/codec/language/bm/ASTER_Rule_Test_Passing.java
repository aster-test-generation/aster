/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Rule_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPatternWithNullPhonemeList_UZDe6() throws Exception {
    Rule rule = new Rule("pattern", "lContext", "rContext", null);
    assertEquals("pattern", rule.getPattern());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_1() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertNotNull(rules);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_2() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertEquals(1, rules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_3() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertTrue(rules.containsKey("Ashkenazi"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_4() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertNotNull(ruleList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_5() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertEquals(1, ruleList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Ashkenazi_Approx_English_Ummk0_6() throws Exception {
    NameType nameType = NameType.ASHKENAZI;
    RuleType rt = RuleType.APPROX;
    String lang = "en";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Ashkenazi");
    Rule rule = ruleList.get(0);
    assertNotNull(rule);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_1() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertNotNull(rules);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_2() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertEquals(1, rules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_3() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertTrue(rules.containsKey("Generic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_4() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertNotNull(ruleList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_5() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertEquals(1, ruleList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceMap_Generic_Exact_Spanish_rxgQ1_6() throws Exception {
    NameType nameType = NameType.GENERIC;
    RuleType rt = RuleType.EXACT;
    String lang = "es";
    Map<String, List<Rule>> rules = Rule.getInstanceMap(nameType, rt, lang);
    List<Rule> ruleList = rules.get("Generic");
    Rule rule = ruleList.get(0);
    assertNotNull(rule);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLContext_nullPhonemeList_rJZI6() throws Exception {
    Rule rule = new Rule("pattern", "lContext", "rContext", null);
    assertNull(rule.getLContext());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Singleton_voPF0_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertEquals(1, instanceMap.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Singleton_voPF0_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertTrue(instanceMap.containsKey("en"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Singleton_voPF0_3() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertEquals(1, rules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Gawi1_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        Rule enRule = enRules.get(0);
        List<Rule> esRules = instanceMap.get("es");
        Rule esRule = esRules.get(0);
        assertEquals(2, instanceMap.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Gawi1_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        Rule enRule = enRules.get(0);
        List<Rule> esRules = instanceMap.get("es");
        Rule esRule = esRules.get(0);
        assertTrue(instanceMap.containsKey("en"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Gawi1_3() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        Rule enRule = enRules.get(0);
        List<Rule> esRules = instanceMap.get("es");
        Rule esRule = esRules.get(0);
        assertTrue(instanceMap.containsKey("es"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Gawi1_4() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        Rule enRule = enRules.get(0);
        List<Rule> esRules = instanceMap.get("es");
        Rule esRule = esRules.get(0);
        assertEquals(1, enRules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Gawi1_8() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        Rule enRule = enRules.get(0);
        List<Rule> esRules = instanceMap.get("es");
        Rule esRule = esRules.get(0);
        assertEquals(1, esRules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Singleton_FTap2_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertEquals(1, instanceMap.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Singleton_FTap2_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertTrue(instanceMap.containsKey("en"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Singleton_FTap2_3() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> rules = instanceMap.get("en");
        Rule rule = rules.get(0);
        assertEquals(1, rules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_EhUb3_1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        assertEquals(2, instanceMap.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_EhUb3_2() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        assertTrue(instanceMap.containsKey("en"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_EhUb3_3() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        assertTrue(instanceMap.containsKey("es"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_EhUb3_4() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        LanguageSet langs = LanguageSet.from(new HashSet<>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> instanceMap = Rule.getInstanceMap(nameType, rt, langs);
        List<Rule> enRules = instanceMap.get("en");
        assertEquals(1, enRules.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPatternAndContextMatches_NullPhonemeList_OdBP8() throws Exception {
    Rule rule = new Rule("pattern", "lContext", "rContext", null);
    assertFalse(rule.patternAndContextMatches("pattern", 0));
}
}