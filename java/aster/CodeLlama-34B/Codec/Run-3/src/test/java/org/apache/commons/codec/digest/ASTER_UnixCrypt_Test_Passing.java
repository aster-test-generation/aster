/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnixCrypt_Test_Passing {
    private static final String SALT_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static final String CRYPT_SALT_PATTERN = "^[a-zA-Z0-9]{2}$";
    private static final int[] CON_SALT = new int[256];
    private static final int[] COV2CHAR = new int[256];    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_nullSalt_bNax1() throws Exception {
        String original = "original";
        assertNull(UnixCrypt.crypt(original, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_emptyOriginal_ySoR2() throws Exception {
        String salt = "salt";
        assertEquals("", UnixCrypt.crypt("", salt));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_emptySalt_YKYj3() throws Exception {
        String original = "original";
        assertEquals("", UnixCrypt.crypt(original, ""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validOriginalAndSalt_bHci4() throws Exception {
        String original = "original";
        String salt = "salt";
        assertEquals("original", UnixCrypt.crypt(original, salt));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validOriginalAndSalt_differentCase_IpFX5() throws Exception {
        String original = "ORIGINAL";
        String salt = "SALT";
        assertEquals("original", UnixCrypt.crypt(original, salt));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidOriginal_cUkF8() throws Exception {
        String salt = "salt";
        assertNull(UnixCrypt.crypt("", salt));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidSalt_nHAY9() throws Exception {
        String original = "original";
        assertNull(UnixCrypt.crypt(original, ""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyArray_wThT1() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptyArray_tPrK2() throws Exception {
        byte[] original = new byte[] { 1, 2, 3 };
        String result = UnixCrypt.crypt(original);
        assertEquals("123", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_lEIA3() throws Exception {
        byte[] original = new byte[] { 1, 2, 3 };
        String result = UnixCrypt.crypt(original, null);
        assertEquals("123", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySalt_FSmn4() throws Exception {
        byte[] original = new byte[] { 1, 2, 3 };
        String result = UnixCrypt.crypt(original, "");
        assertEquals("123", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptySalt_WEZo5() throws Exception {
        byte[] original = new byte[] { 1, 2, 3 };
        String result = UnixCrypt.crypt(original, "salt");
        assertEquals("123salt", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltAndEmptyArray_ygMC6() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, null);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptySaltAndEmptyArray_nOuR8() throws Exception {
        byte[] original = new byte[0];
        String result = UnixCrypt.crypt(original, "");
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSalt_nhri0() throws Exception {
    byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = null;
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptySalt_aGKo1() throws Exception {
    byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "";
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithValidSalt_GAwi2() throws Exception {
    byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "ab";
    String expected = "ab             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidSalt_hhDP3() throws Exception {
    byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "abc";
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidOriginal_Xepf5() throws Exception {
    byte[] original = new byte[8];
    Arrays.fill(original, (byte) 0);
    String salt = "ab";
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSalt_QHEH0() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = null;
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidSalt_zdNW1() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "invalid_salt";
    String expected = "Invalid salt value: invalid_salt";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithValidSalt_XThM2() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "ab";
    String expected = "ab";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptyOriginal_bYkw3() throws Exception {
    byte[] original = new byte[] {};
    String salt = "ab";
    String expected = "ab";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullOriginal_FXRx4() throws Exception {
    byte[] original = null;
    String salt = "ab";
    String expected = "ab";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithEmptySalt_cEGq5() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "";
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSaltAndEmptyOriginal_Ktav6() throws Exception {
    byte[] original = new byte[] {};
    String salt = null;
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithNullSaltAndNullOriginal_LioC7() throws Exception {
    byte[] original = null;
    String salt = null;
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_oTHX3() throws Exception {
        byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        String salt = "a";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullOriginal_xkOO4() throws Exception {
        byte[] original = null;
        String salt = "ab";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_aEzy5() throws Exception {
        byte[] original = new byte[] {};
        String salt = "ab";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithInvalidSalt_sUEe2() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "abc";
    String expected = "             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCryptWithValidSaltAndOriginalLengthGreaterThanKeyLength_ZrFG5() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
    String salt = "ab";
    String expected = "ab             ";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_FvHH0_1() throws Exception {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_FvHH0_2() throws Exception {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.matches(CRYPT_SALT_PATTERN));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_JBnj1_1() throws Exception {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_JBnj1_2() throws Exception {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("ab", result.substring(0, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_TROi2() throws Exception {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "abc";
        try {
            UnixCrypt.crypt(original, salt);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: abc", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_Yoqk3_1() throws Exception {
        byte[] original = new byte[0];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_Yoqk3_2() throws Exception {
        byte[] original = new byte[0];
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals("ab", result.substring(0, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt1_pzsF0() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "ab";
    String expected = "ab0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt2_tTNT1() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "cd";
    String expected = "cd0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt3_QZeC2() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "ef";
    String expected = "ef0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt4_VKzK3() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "gh";
    String expected = "gh0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt5_Rewd4() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "ij";
    String expected = "ij0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt6_NnKS5() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "kl";
    String expected = "kl0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt7_kIHz6() throws Exception {
    byte[] original = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    String salt = "mn";
    String expected = "mn0102030405060708";
    String actual = UnixCrypt.crypt(original, salt);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_EmptyString_KKXK0() throws Exception {
    String original = "";
    String expected = "";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_NullString_szUB1() throws Exception {
    String original = null;
    String expected = null;
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_SingleCharacter_NfkT2() throws Exception {
    String original = "a";
    String expected = "a";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_MultipleCharacters_MiNB3() throws Exception {
    String original = "abc";
    String expected = "abc";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_SpecialCharacters_ULJQ4() throws Exception {
    String original = "!@#$%^&*()_+";
    String expected = "!@#$%^&*()_+";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters_LknM6() throws Exception {
    String original = "abc\u0000def";
    String expected = "abc\u0000def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters2_Kemo7() throws Exception {
    String original = "abc\u0001def";
    String expected = "abc\u0001def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters3_NPNf8() throws Exception {
    String original = "abc\u0002def";
    String expected = "abc\u0002def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters4_UTXm9() throws Exception {
    String original = "abc\u0003def";
    String expected = "abc\u0003def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters5_mjIm10() throws Exception {
    String original = "abc\u0004def";
    String expected = "abc\u0004def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters6_BLyr11() throws Exception {
    String original = "abc\u0005def";
    String expected = "abc\u0005def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters7_gPJt12() throws Exception {
    String original = "abc\u0006def";
    String expected = "abc\u0006def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCrypt_InvalidCharacters8_lyto13() throws Exception {
    String original = "abc\u0007def";
    String expected = "abc\u0007def";
    String actual = UnixCrypt.crypt(original);
    assertEquals(expected, actual);
}
}