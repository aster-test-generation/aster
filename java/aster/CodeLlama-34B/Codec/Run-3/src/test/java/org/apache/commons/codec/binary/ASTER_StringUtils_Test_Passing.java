/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_StringUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf8_dmVE0() throws Exception {
    byte[] bytes = new byte[] { 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 };
    String expected = "hello world";
    String actual = StringUtils.newStringUtf8(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16_gBvA0_1() throws Exception {
    String nullString = null;
    byte[] expectedBytes = null;
    byte[] actualBytes = StringUtils.getBytesUtf16(nullString);
    String emptyString = "";
    expectedBytes = new byte[0];
    actualBytes = StringUtils.getBytesUtf16(emptyString);
    String nonEmptyString = "Hello World!";
    expectedBytes = nonEmptyString.getBytes(StandardCharsets.UTF_16);
    actualBytes = StringUtils.getBytesUtf16(nonEmptyString);
    String nonUtf16String = "Hello World!";
    expectedBytes = nonUtf16String.getBytes(StandardCharsets.UTF_8);
    actualBytes = StringUtils.getBytesUtf16(nonUtf16String);
    assertArrayEquals(expectedBytes, actualBytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUnchecked_NullString_IDKA0() throws Exception {
    String string = null;
    String charsetName = "UTF-8";
    byte[] expected = null;
    byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUnchecked_NonNullString_aYwq1() throws Exception {
    String string = "hello";
    String charsetName = "UTF-8";
    byte[] expected = new byte[] {104, 101, 108, 108, 111};
    byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewString_nullBytes_fGtE0() throws Exception {
    byte[] bytes = null;
    String charsetName = "UTF-8";
    String result = StringUtils.newString(bytes, charsetName);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewString_validBytes_HRbK1() throws Exception {
    byte[] bytes = "hello".getBytes();
    String charsetName = "UTF-8";
    String result = StringUtils.newString(bytes, charsetName);
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewString_invalidCharsetName_daqN2() throws Exception {
    byte[] bytes = "hello".getBytes();
    String charsetName = "invalid_charset";
    try {
        StringUtils.newString(bytes, charsetName);
        fail("Expected IllegalStateException");
    } catch (IllegalStateException e) {
        assertEquals("invalid_charset: UnsupportedEncodingException", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_hcFj0_1() throws Exception {
    assertFalse(StringUtils.equals(null, "abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_hcFj0_2() throws Exception {
    assertFalse(StringUtils.equals("abc", null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_hcFj0_3() throws Exception {
    assertTrue(StringUtils.equals(null, null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Empty_ZwdS1_1() throws Exception {
    assertTrue(StringUtils.equals("", ""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLength_wYkY2_1() throws Exception {
    assertTrue(StringUtils.equals("abc", "abc"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLength_dEKc3_1() throws Exception {
    assertFalse(StringUtils.equals("abc", "abcd"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentContent_qjUr4_1() throws Exception {
    assertFalse(StringUtils.equals("abc", "def"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullAndEmpty_ynrd6_1() throws Exception {
    assertFalse(StringUtils.equals(null, ""));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullAndEmpty_ynrd6_2() throws Exception {
    assertFalse(StringUtils.equals("", null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1_uYGD0() throws Exception {
    String input = "hello";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111 };
    byte[] actual = StringUtils.getBytesIso8859_1(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1WithNull_QWJr1() throws Exception {
    String input = null;
    byte[] expected = new byte[] {};
    byte[] actual = StringUtils.getBytesIso8859_1(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1WithEmptyString_qsoK2() throws Exception {
    String input = "";
    byte[] expected = new byte[] {};
    byte[] actual = StringUtils.getBytesIso8859_1(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1WithNonAsciiCharacters_bPlT3() throws Exception {
    String input = "";
    byte[] expected = new byte[] { -29, -127, -109, -29, -127, -109, -29, -127, -109 };
    byte[] actual = StringUtils.getBytesIso8859_1(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesIso8859_1WithSurrogatePairs_CoRj4() throws Exception {
    String input = "";
    byte[] expected = new byte[] { -29, -127, -109, -29, -127, -109 };
    byte[] actual = StringUtils.getBytesIso8859_1(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16Be_wtVK0() throws Exception {
    byte[] bytes = new byte[] { (byte) 0xFE, (byte) 0xFF, (byte) 0x00, (byte) 0x01 };
    String expected = "Hello, World!";
    String actual = StringUtils.newStringUtf16Be(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAscii_null_eEoO0() throws Exception {
    byte[] bytes = null;
    String expected = null;
    String actual = StringUtils.newStringUsAscii(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAscii_empty_qzCP1() throws Exception {
    byte[] bytes = new byte[0];
    String expected = "";
    String actual = StringUtils.newStringUsAscii(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAscii_valid_qSud2() throws Exception {
    byte[] bytes = new byte[] { 65, 66, 67 };
    String expected = "ABC";
    String actual = StringUtils.newStringUsAscii(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUsAscii_invalid_tOwe3() throws Exception {
    byte[] bytes = new byte[] { -1, -2, -3 };
    String expected = "?";
    String actual = StringUtils.newStringUsAscii(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_EmptyString_ONzc0() throws Exception {
    String input = "";
    byte[] expected = new byte[0];
    byte[] actual = StringUtils.getBytesUtf16Le(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_NonEmptyString_Hmzp1() throws Exception {
    String input = "Hello World!";
    byte[] expected = new byte[] { 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 };
    byte[] actual = StringUtils.getBytesUtf16Le(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Le_NullString_TDQk2() throws Exception {
    String input = null;
    byte[] expected = new byte[0];
    byte[] actual = StringUtils.getBytesUtf16Le(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_Rvcn0() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00 };
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithEmptyBytes_bHmR1() throws Exception {
        byte[] bytes = new byte[0];
        String expected = "";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithNullBytes_FPPS2() throws Exception {
        byte[] bytes = null;
        String expected = null;
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithInvalidBytes_yJpT3() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithValidBytes_vRmb4() throws Exception {
        byte[] bytes = new byte[] { (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16_EmptyBytes_sDla0() throws Exception {
    byte[] bytes = new byte[0];
    String result = StringUtils.newStringUtf16(bytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16_NullBytes_eJOn1() throws Exception {
    byte[] bytes = null;
    String result = StringUtils.newStringUtf16(bytes);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringUtf16_ValidBytes_Xfnl2() throws Exception {
    byte[] bytes = new byte[] { 0x61, 0x62, 0x63 };
    String result = StringUtils.newStringUtf16(bytes);
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf16Be_ValidString_MultipleSpecialCharacters_TtdY9() throws Exception {
    byte[] expected = new byte[] { 0, 65, 0, 66, 0, 67, 0, 68, 0, 69 };
    byte[] actual = StringUtils.getBytesUtf16Be("ABC");
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_Empty_JTMO0() throws Exception {
    byte[] bytes = new byte[0];
    String result = StringUtils.newStringIso8859_1(bytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_NonEmpty_rkdH1() throws Exception {
    byte[] bytes = new byte[] { 65, 66, 67 };
    String result = StringUtils.newStringIso8859_1(bytes);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewStringIso8859_1_Null_rAuk2() throws Exception {
    byte[] bytes = null;
    String result = StringUtils.newStringIso8859_1(bytes);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUsAscii_emptyString_qYLj0() throws Exception {
    String input = "";
    byte[] expected = new byte[0];
    byte[] actual = StringUtils.getBytesUsAscii(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUsAscii_nonEmptyString_GHSI1() throws Exception {
    String input = "hello";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111 };
    byte[] actual = StringUtils.getBytesUsAscii(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUsAscii_nullString_YPsA2() throws Exception {
    String input = null;
    byte[] expected = null;
    byte[] actual = StringUtils.getBytesUsAscii(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf8_EmptyString_grqC0() throws Exception {
    String input = "";
    byte[] expected = new byte[0];
    byte[] actual = StringUtils.getBytesUtf8(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf8_NonEmptyString_NRmw1() throws Exception {
    String input = "hello";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111 };
    byte[] actual = StringUtils.getBytesUtf8(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesUtf8_NullString_BQhc2() throws Exception {
    String input = null;
    byte[] expected = new byte[0];
    byte[] actual = StringUtils.getBytesUtf8(input);
    assertArrayEquals(expected, actual);
}
}