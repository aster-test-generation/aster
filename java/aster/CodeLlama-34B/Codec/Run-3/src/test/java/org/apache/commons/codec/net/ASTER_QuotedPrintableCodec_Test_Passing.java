/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.BitSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuotedPrintableCodec_Test_Passing {
public void testGetDefaultCharset_DefaultConstructor_vRtH0() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec();
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_CharsetConstructor_wfnq1() throws Exception {
Charset charset = Charset.forName("UTF-16");
QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-16", defaultCharset);
}
public void testGetDefaultCharset_CharsetNameConstructor_YkGe2() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-32");
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-32", defaultCharset);
}
public void testGetDefaultCharset_StrictConstructor_mdYk3() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_CharsetAndStrictConstructor_WSrn4() throws Exception {
Charset charset = Charset.forName("UTF-16");
QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-16", defaultCharset);
}
public void testGetDefaultCharset_NullCharset_yxTo5() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec((Charset) null);
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_NullCharsetName_FrLP6() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec((String) null);
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_InvalidCharsetName_rxjF7() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec("invalid");
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_UnmappableCharsetName_OsdR8() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec("unmappable");
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
public void testGetDefaultCharset_UnsupportedCharsetName_VUxh9() throws Exception {
QuotedPrintableCodec codec = new QuotedPrintableCodec("unsupported");
String defaultCharset = codec.getDefaultCharset();
assertEquals("UTF-8", defaultCharset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_nullSource_uGDH0() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String result = codec.encode(null, Charset.defaultCharset());
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeByteArray_fNnh0() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] input = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 };
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 };
    byte[] actual = codec.encode(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeString_BKmI1() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String input = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeNull_gWAo2() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    Object input = null;
    Object expected = null;
    Object actual = codec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeInvalidType_jyFE3() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    Object input = new Object();
    Object expected = null;
    Object actual = codec.encode(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_strict_LYxE0() throws UnsupportedEncodingException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    String sourceStr = "Hello, World!";
    String sourceCharset = "UTF-8";
    String expected = "=?UTF-8?Q?Hello,_World!?=";
    String actual = codec.encode(sourceStr, sourceCharset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithDefaultConstructor_rHTr0() throws Exception {
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec();
Charset charset = qpCodec.getCharset();
assertEquals(Charset.defaultCharset(), charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithCharsetConstructor_paez1() throws Exception {
Charset charset = Charset.forName("UTF-8");
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset);
assertEquals(charset, qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithCharsetNameConstructor_isiz2() throws Exception {
String charsetName = "UTF-8";
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charsetName);
assertEquals(Charset.forName(charsetName), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithStrictConstructor_JWMp3() throws Exception {
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(true);
Charset charset = qpCodec.getCharset();
assertEquals(Charset.defaultCharset(), charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithCharsetAndStrictConstructor_XWVa4() throws Exception {
Charset charset = Charset.forName("UTF-8");
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset, true);
assertEquals(charset, qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithNullCharset_leDs5() throws Exception {
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec((Charset) null);
assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithNullCharsetName_dcka6() throws Exception {
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec((String) null);
assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithInvalidCharsetName_PAYK7() throws Exception {
String charsetName = "invalid_charset_name";
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charsetName);
assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithInvalidCharset_ORjC8() throws Exception {
Charset charset = Charset.forName("invalid_charset_name");
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset);
assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetWithNullCharsetAndStrict_nWNx9() throws Exception {
QuotedPrintableCodec qpCodec = new QuotedPrintableCodec((Charset) null, true);
assertEquals(Charset.defaultCharset(), qpCodec.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_VmAT0() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = "=3DHello, World!";
    Charset sourceCharset = StandardCharsets.US_ASCII;
    String expected = "Hello, World!";
    String actual = codec.decode(sourceStr, sourceCharset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithNullInput_NBBF2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = null;
    Charset sourceCharset = StandardCharsets.US_ASCII;
    String expected = null;
    String actual = codec.decode(sourceStr, sourceCharset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithEmptyInput_BbYC3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = "";
    Charset sourceCharset = StandardCharsets.US_ASCII;
    String expected = "";
    String actual = codec.decode(sourceStr, sourceCharset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeWithDifferentCharset_nZpq4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    String sourceStr = "=3DHello, World!";
    Charset sourceCharset = StandardCharsets.UTF_8;
    String expected = "Hello, World!";
    String actual = codec.decode(sourceStr, sourceCharset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_GCbR0() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, World!".getBytes();
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, World!", new String(encoded));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithUTF8_KTrW1() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
    byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, World!", new String(encoded, StandardCharsets.UTF_8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithISO88591_XbWQ2() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
    byte[] bytes = "Hello, World!".getBytes(StandardCharsets.ISO_8859_1);
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, World!", new String(encoded, StandardCharsets.ISO_8859_1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEmptyString_xabo3() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "".getBytes();
    byte[] encoded = codec.encode(bytes);
    assertEquals("", new String(encoded));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonAsciiCharacters_fBwN4() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = "Hello, !".getBytes();
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, !", new String(encoded));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithStrictness_GnWQ5() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = "Hello, World!".getBytes();
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, World!", new String(encoded));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithoutStrictness_PsOo6() throws Exception {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
    byte[] bytes = "Hello, World!".getBytes();
    byte[] encoded = codec.encode(bytes);
    assertEquals("Hello, World!", new String(encoded));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_strict_true_yMCe0() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    String sourceStr = "=3D";
    String expected = "=";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_strict_false_OZmg1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
    String sourceStr = "=3D";
    String expected = "=";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_UTF8_WGzG2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
    String sourceStr = "=E2=82=AC";
    String expected = "";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_ISO88591_UzVJ3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
    String sourceStr = "=E2=82=AC";
    String expected = "";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_USASCII_XlvN4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.US_ASCII);
    String sourceStr = "=E2=82=AC";
    String expected = "?";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_UTF16_Hbgf5() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16);
    String sourceStr = "=E2=82=AC";
    String expected = "";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_UTF16BE_FlBx6() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16BE);
    String sourceStr = "=E2=82=AC";
    String expected = "";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_UTF16LE_ZcTx7() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16LE);
    String sourceStr = "=E2=82=AC";
    String expected = "";
    String actual = codec.decode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_charset_UTF32LE_TrBo10() throws DecoderException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_yLrn0() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] input = new byte[] { 1, 2, 3, 4, 5 };
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = codec.decode(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_printable_IiTj0_1() throws Exception {
    BitSet printable = new BitSet();
    printable.set(0, 127);
    byte[] bytes = new byte[10];
    for (int i = 0; i < 10; i++) {
        bytes[i] = (byte) i;
    }
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_nonPrintable_xadv1_1() throws Exception {
    BitSet nonPrintable = new BitSet();
    nonPrintable.set(128, 255);
    byte[] bytes = new byte[10];
    for (int i = 0; i < 10; i++) {
        bytes[i] = (byte) (i + 128);
    }
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(nonPrintable, bytes);
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_mixed_AfWj2_1() throws Exception {
    BitSet mixed = new BitSet();
    mixed.set(0, 127);
    mixed.set(128, 255);
    byte[] bytes = new byte[20];
    for (int i = 0; i < 10; i++) {
        bytes[i] = (byte) i;
    }
    for (int i = 10; i < 20; i++) {
        bytes[i] = (byte) (i + 128);
    }
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(mixed, bytes);
    for (int i = 0; i < 10; i++) {
    }
    for (int i = 10; i < 20; i++) {
    }
    assertEquals(20, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_empty_ypww3() throws Exception {
    BitSet empty = new BitSet();
    byte[] bytes = new byte[0];
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(empty, bytes);
    assertEquals(0, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_null_OLPj4() throws Exception {
    BitSet nullBitSet = null;
    byte[] bytes = new byte[10];
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(nullBitSet, bytes);
    assertEquals(0, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_nullBytes_OOdt5() throws Exception {
    BitSet printable = new BitSet();
    printable.set(0, 127);
    byte[] bytes = null;
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes);
    assertEquals(0, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_invalidBitSet_SQwd6() throws Exception {
    BitSet invalidBitSet = new BitSet();
    invalidBitSet.set(128, 255);
    byte[] bytes = new byte[10];
    for (int i = 0; i < 10; i++) {
        bytes[i] = (byte) i;
    }
    byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(invalidBitSet, bytes);
    assertEquals(0, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_nullBytes_KmES0() throws Exception {
    byte[] bytes = null;
    byte[] expected = null;
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_emptyBytes_emLH1() throws Exception {
    byte[] bytes = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_singleByte_Idsy2() throws Exception {
    byte[] bytes = new byte[] { 65 };
    byte[] expected = new byte[] { 65 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_multipleBytes_axpa3() throws Exception {
    byte[] bytes = new byte[] { 65, 66, 67 };
    byte[] expected = new byte[] { 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_whitespace_fDhL4() throws Exception {
    byte[] bytes = new byte[] { 32, 65, 66, 67 };
    byte[] expected = new byte[] { 32, 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_nonPrintable_HHzz5() throws Exception {
    byte[] bytes = new byte[] { 0, 65, 66, 67 };
    byte[] expected = new byte[] { 0, 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_strict_oKru6() throws Exception {
    byte[] bytes = new byte[] { 65, 66, 67 };
    byte[] expected = new byte[] { 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_strict_whitespace_pJoM7() throws Exception {
    byte[] bytes = new byte[] { 32, 65, 66, 67 };
    byte[] expected = new byte[] { 32, 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_strict_nonPrintable_FpWr8() throws Exception {
    byte[] bytes = new byte[] { 0, 65, 66, 67 };
    byte[] expected = new byte[] { 0, 65, 66, 67 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintable_strict_multipleBytes_mwZz9() throws Exception {
    byte[] bytes = new byte[] { 65, 66, 67, 68, 69, 70 };
    byte[] expected = new byte[] { 65, 66, 67, 68, 69, 70 };
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableWithNullBytes_eCBV0() throws Exception {
    byte[] bytes = null;
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] expected = null;
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableWithEmptyBytes_FPDT1() throws Exception {
    byte[] bytes = new byte[0];
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] expected = new byte[0];
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeQuotedPrintableWithNonPrintableBytes_UpPU2() throws Exception {
    byte[] bytes = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 };
    BitSet printable = new BitSet();
    boolean strict = true;
    byte[] expected = new byte[0];
    byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableNull_fyci0() throws Exception {
    byte[] input = null;
    byte[] expectedOutput = null;
    byte[] actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableEmpty_LLTL1() throws Exception {
    byte[] input = new byte[0];
    byte[] expectedOutput = new byte[0];
    byte[] actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeQuotedPrintableCRandLF_TVgb2() throws Exception {
    byte[] input = new byte[] {(byte) 13, (byte) 10};
    byte[] expectedOutput = new byte[0];
    byte[] actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_empty_paCE0() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[0];
    byte[] decoded = codec.decode(bytes);
    assertEquals(0, decoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_singleByte_RiVf1_1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a' };
    byte[] decoded = codec.decode(bytes);
    assertEquals(1, decoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_singleByte_RiVf1_2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'a', decoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_multipleBytes_ZRCy2_1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c' };
    byte[] decoded = codec.decode(bytes);
    assertEquals(3, decoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_multipleBytes_ZRCy2_2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'a', decoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_multipleBytes_ZRCy2_3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'b', decoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_multipleBytes_ZRCy2_4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'c', decoded[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_fjzm3_1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals(4, decoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_fjzm3_2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'a', decoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_fjzm3_3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'b', decoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_fjzm3_4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'c', decoded[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_fjzm3_5() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec();
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) '=', decoded[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_numV5_1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals(4, decoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_numV5_2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'a', decoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_numV5_3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'b', decoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_numV5_4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'c', decoded[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_numV5_5() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) '=', decoded[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_charset_vjSq6_1() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals(4, decoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_charset_vjSq6_2() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'a', decoded[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_charset_vjSq6_3() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'b', decoded[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_charset_vjSq6_4() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) 'c', decoded[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_quotedPrintable_invalid_strict_charset_vjSq6_5() throws DecoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
    byte[] bytes = new byte[] { (byte) 'a', (byte) 'b', (byte) 'c', (byte) '=' };
    byte[] decoded = codec.decode(bytes);
    assertEquals((byte) '=', decoded[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_strict_true_kMqg0() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_strict_false_yzdB1() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_UTF8_xUNt2() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_ISO88591_qdnY3() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_USASCII_OCSq4() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.US_ASCII);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_UTF16_nWgz5() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_UTF16BE_HBxO6() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16BE);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_charset_UTF16LE_leCl7() throws EncoderException {
    QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16LE);
    String sourceStr = "Hello, World!";
    String expected = "Hello, World!";
    String actual = codec.encode(sourceStr);
    assertEquals(expected, actual);
}
}