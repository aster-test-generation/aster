/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;
import org.apache.commons.codec.EncoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Caverphone_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NonString_HHWP1() throws Exception {
    Caverphone caverphone = new Caverphone();
    Integer input = 123;
    try {
        caverphone.encode(input);
        fail("Expected EncoderException");
    } catch (EncoderException e) {
        assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_EmptyString_sgTW0() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_NullString_PZeQ1() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode(null);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SingleCharacter_eOZe2() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("a");
    assertEquals("A", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleCharacters_xBcE3() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("abc");
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SpecialCharacters_uhed4() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_Uppercase_zNTK5() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("ABC");
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MixedCase_MJbP7() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("aBc");
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleWords_kAqG8() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("hello world");
    assertEquals("HELLO WORLD", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_MultipleWordsWithSpecialCharacters_Btim9() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.encode("hello!@#$%^&*()_+world");
    assertEquals("HELLO!@#$%^&*()_+WORLD", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameString_eRDu0() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "hello";
    assertTrue(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_DifferentString_JxSa1() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "world";
    assertFalse(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_NullString_yZMV2() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = null;
    String str2 = "hello";
    assertFalse(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_EmptyString_MuSZ3() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "";
    String str2 = "hello";
    assertFalse(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameStringWithDifferentCase_yCFd4() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "Hello";
    assertTrue(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameStringWithDifferentPunctuation_bfhI6() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "hello.";
    assertTrue(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameStringWithDifferentAccents_UkUh7() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "hell";
    assertTrue(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameStringWithDifferentSpecialCharacters_Tejd8() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "hell$";
    assertTrue(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCaverphoneEqual_SameStringWithDifferentLength_mtGO9() throws Exception {
    Caverphone caverphone = new Caverphone();
    String str1 = "hello";
    String str2 = "hello world";
    assertFalse(caverphone.isCaverphoneEqual(str1, str2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_emptyString_aKuP0() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_nullString_vXcX1() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone(null);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_singleCharacterString_wtAX2() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("a");
    assertEquals("a", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_multipleCharacterString_ytFn3() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("abc");
    assertEquals("abc", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithSpecialCharacters_QFGH4() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("a$%^&*()_");
    assertEquals("a$%^&*()_", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithNumbers_CwDW5() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("1234567890");
    assertEquals("1234567890", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithNewline_jxLU7() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\n");
    assertEquals("\n", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithTab_lUxS8() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\t");
    assertEquals("\t", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithCarriageReturn_BCkq9() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\r");
    assertEquals("\r", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithFormFeed_sGaE10() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\f");
    assertEquals("\f", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithBackslash_YQHo11() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\\");
    assertEquals("\\", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithSingleQuote_tfVk12() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("'");
    assertEquals("'", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithDoubleQuote_ycgC13() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("\"");
    assertEquals("\"", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCaverphone_stringWithDollarSign_jaHd15() throws Exception {
    Caverphone caverphone = new Caverphone();
    String result = caverphone.caverphone("$");
    assertEquals("$", result);
}
}