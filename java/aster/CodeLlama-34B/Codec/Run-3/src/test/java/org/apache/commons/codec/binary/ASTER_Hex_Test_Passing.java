/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.DecoderException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Hex_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithEmptyByteArray_jedz0() throws Exception {
    byte[] data = new byte[0];
    char[] expected = new char[0];
    char[] actual = Hex.encodeHex(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithNonEmptyByteArray_sOpV1() throws Exception {
    byte[] data = new byte[] { 1, 2, 3, 4, 5 };
    char[] expected = new char[] { '0', '1', '0', '2', '0', '3', '0', '4', '0', '5' };
    char[] actual = Hex.encodeHex(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithNullByteArray_mTDZ2() throws Exception {
    byte[] data = null;
    char[] expected = null;
    char[] actual = Hex.encodeHex(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName_DefaultConstructor_zsNt0() throws Exception {
    Hex hex = new Hex();
    String charsetName = hex.getCharsetName();
    assertEquals("UTF-8", charsetName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName_CharsetConstructor_TqMH1() throws Exception {
    Charset charset = Charset.forName("UTF-16");
    Hex hex = new Hex(charset);
    String charsetName = hex.getCharsetName();
    assertEquals("UTF-16", charsetName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharsetName_CharsetNameConstructor_RiJS2() throws Exception {
    Hex hex = new Hex("UTF-32");
    String charsetName = hex.getCharsetName();
    assertEquals("UTF-32", charsetName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_Zaok0() throws Exception {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A' };
    char[] actual = Hex.encodeHex(data, 0, data.length, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithByteBufferAndToLowerCase_kRnq0() throws Exception {
    ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
    char[] expected = "48656c6c6f20576f726c64".toCharArray();
    char[] actual = Hex.encodeHex(data, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithByteBufferAndToUpperCase_lkrk1() throws Exception {
    ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
    char[] expected = "48656C6C6F20576F726C64".toCharArray();
    char[] actual = Hex.encodeHex(data, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexWithNullByteBuffer_lfGz2() throws Exception {
    ByteBuffer data = null;
    char[] expected = null;
    char[] actual = Hex.encodeHex(data, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_ValidInput_Ktwi0() throws Exception {
    Hex hex = new Hex();
    ByteBuffer buffer = ByteBuffer.wrap("68656c6c6f20776f726c64".getBytes());
    byte[] expected = "hello world".getBytes();
    byte[] actual = hex.decode(buffer);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_InvalidInput_rMoH1() throws Exception {
    Hex hex = new Hex();
    ByteBuffer buffer = ByteBuffer.wrap("invalid input".getBytes());
    try {
        hex.decode(buffer);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid hexadecimal string", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_EmptyInput_weUG2() throws Exception {
    Hex hex = new Hex();
    ByteBuffer buffer = ByteBuffer.wrap("".getBytes());
    byte[] expected = new byte[0];
    byte[] actual = hex.decode(buffer);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_null_xcjO0() throws Exception {
    byte[] data = null;
    String expected = "";
    String actual = Hex.encodeHexString(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_empty_mDlf1() throws Exception {
    byte[] data = new byte[0];
    String expected = "";
    String actual = Hex.encodeHexString(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_nonEmpty_sFov2() throws Exception {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    String expected = "0102030405060708090A";
    String actual = Hex.encodeHexString(data);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithCharset_RzLr0() throws Exception {
    Hex hex = new Hex(Charset.forName("UTF-8"));
    String expected = "Hex[charsetName=UTF-8]";
    String actual = hex.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithCharsetName_jZQD1() throws Exception {
    Hex hex = new Hex("UTF-8");
    String expected = "Hex[charsetName=UTF-8]";
    String actual = hex.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeString_nICt0() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    String input = "Hello World!";
    Object output = hex.decode(input);
    assertEquals(input, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteArray_CYRN1() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    byte[] input = "Hello World!".getBytes(StandardCharsets.UTF_8);
    Object output = hex.decode(input);
    assertEquals(input, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeByteBuffer_yQbx2() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    ByteBuffer input = ByteBuffer.wrap("Hello World!".getBytes(StandardCharsets.UTF_8));
    Object output = hex.decode(input);
    assertEquals(input, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeCharArray_lcgg3() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    char[] input = "Hello World!".toCharArray();
    Object output = hex.decode(input);
    assertEquals(input, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeInvalidInput_bxkz4() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    Object input = new Object();
    try {
        hex.decode(input);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid input type: " + input.getClass().getName(), e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigit_ValidCharacter_EcPb0() throws DecoderException {
    int digit = Hex.toDigit('a', 0);
    assertEquals(10, digit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigit_InvalidCharacter_wEqD1() throws Exception {
    try {
        Hex.toDigit('g', 0);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Illegal hexadecimal character g at index 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDigit_AllInputs_SqRz2() throws DecoderException {
    for (char ch = '0'; ch <= '9'; ch++) {
        int digit = Hex.toDigit(ch, 0);
        assertEquals(Character.digit(ch, 16), digit);
    }
    for (char ch = 'a'; ch <= 'f'; ch++) {
        int digit = Hex.toDigit(ch, 0);
        assertEquals(Character.digit(ch, 16), digit);
    }
    for (char ch = 'A'; ch <= 'F'; ch++) {
        int digit = Hex.toDigit(ch, 0);
        assertEquals(Character.digit(ch, 16), digit);
    }
    for (char ch = 'g'; ch <= 'z'; ch++) {
        try {
            Hex.toDigit(ch, 0);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Illegal hexadecimal character " + ch + " at index 0", e.getMessage());
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_ValidHexString_NniG0() throws DecoderException {
    String data = "68656c6c6f20776f726c64";
    byte[] expected = new byte[] {104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100};
    byte[] actual = Hex.decodeHex(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_InvalidHexString_yWvQ1() throws Exception {
    String data = "invalid hex string";
    try {
        Hex.decodeHex(data);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertTrue(e.getMessage().contains("Invalid hex string"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_EmptyHexString_uSaH2() throws DecoderException {
    String data = "";
    byte[] expected = new byte[0];
    byte[] actual = Hex.decodeHex(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_evenNumberOfCharacters_zjAW0_1() throws Exception {
    char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    byte[] out = new byte[data.length / 2];
    int outOffset = 0;
    int result = Hex.decodeHex(data, out, outOffset);
    assertEquals(data.length / 2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_evenNumberOfCharacters_zjAW0_2() throws Exception {
    char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    byte[] out = new byte[data.length / 2];
    int outOffset = 0;
    int result = Hex.decodeHex(data, out, outOffset);
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}, out);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_oddNumberOfCharacters_FIGO1() throws Exception {
    char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G'};
    byte[] out = new byte[data.length / 2];
    int outOffset = 0;
    try {
        Hex.decodeHex(data, out, outOffset);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Odd number of characters.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_outputArrayIsNotLargeEnough_sgMK2() throws Exception {
    char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    byte[] out = new byte[data.length / 2 - 1];
    int outOffset = 0;
    try {
        Hex.decodeHex(data, out, outOffset);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_invalidCharacter_VZQD3() throws Exception {
    char[] data = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G'};
    byte[] out = new byte[data.length / 2];
    int outOffset = 0;
    try {
        Hex.decodeHex(data, out, outOffset);
        fail("Expected DecoderException");
    } catch (DecoderException e) {
        assertEquals("Invalid character: G", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset_DefaultConstructor_xEny0() throws Exception {
    Hex hex = new Hex();
    Charset charset = hex.getCharset();
    assertEquals(Charset.defaultCharset(), charset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCharset_CharsetConstructor_WzFG1() throws Exception {
    Charset charset = Charset.forName("UTF-8");
    Hex hex = new Hex(charset);
    assertEquals(charset, hex.getCharset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_byteArray_gzFs0() throws Exception {
    Hex hex = new Hex();
    byte[] input = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    byte[] expected = new byte[] { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A };
    byte[] actual = hex.encode(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_byteArray_withCharset_BErR1() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    byte[] input = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    byte[] expected = new byte[] { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A };
    byte[] actual = hex.encode(input);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_ByteBuffer_True_jsuP0() throws Exception {
    ByteBuffer data = ByteBuffer.wrap("Hello World!".getBytes());
    char[] expected = "48656c6c6f20576f726c6421".toCharArray();
    char[] actual = Hex.encodeHex(data, true);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_ByteBuffer_False_oLES1() throws Exception {
    ByteBuffer data = ByteBuffer.wrap("Hello World!".getBytes());
    char[] expected = "48656c6c6f20576f726c6421".toCharArray();
    char[] actual = Hex.encodeHex(data, false);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_gHns0() throws Exception {
    Hex hex = new Hex();
    ByteBuffer array = ByteBuffer.allocate(10);
    array.put((byte) 0x01);
    array.put((byte) 0x02);
    array.put((byte) 0x03);
    array.put((byte) 0x04);
    array.put((byte) 0x05);
    array.put((byte) 0x06);
    array.put((byte) 0x07);
    array.put((byte) 0x08);
    array.put((byte) 0x09);
    array.put((byte) 0x0A);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    byte[] actual = hex.encode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_MUVh1() throws Exception {
    Hex hex = new Hex(StandardCharsets.UTF_8);
    ByteBuffer array = ByteBuffer.allocate(10);
    array.put((byte) 0x01);
    array.put((byte) 0x02);
    array.put((byte) 0x03);
    array.put((byte) 0x04);
    array.put((byte) 0x05);
    array.put((byte) 0x06);
    array.put((byte) 0x07);
    array.put((byte) 0x08);
    array.put((byte) 0x09);
    array.put((byte) 0x0A);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    byte[] actual = hex.encode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_mAek2() throws Exception {
    Hex hex = new Hex("UTF-8");
    ByteBuffer array = ByteBuffer.allocate(10);
    array.put((byte) 0x01);
    array.put((byte) 0x02);
    array.put((byte) 0x03);
    array.put((byte) 0x04);
    array.put((byte) 0x05);
    array.put((byte) 0x06);
    array.put((byte) 0x07);
    array.put((byte) 0x08);
    array.put((byte) 0x09);
    array.put((byte) 0x0A);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    byte[] actual = hex.encode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_WQOM0() throws Exception {
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffset_KmVk1() throws Exception {
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        char[] expected = new char[] { '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
        char[] actual = Hex.encodeHex(data, 2, data.length - 2, true);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_MVSy2() throws Exception {
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyData_PuKX4() throws Exception {
        byte[] data = new byte[0];
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, 0, data.length, true);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullData_mysX5() throws Exception {
        byte[] data = null;
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, 0, 0, true);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_EmptyData_oMcW0() throws Exception {
    char[] result = Hex.encodeHex(new byte[0], new char[0]);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_NullDigits_juFh2() throws Exception {
    char[] result = Hex.encodeHex(new byte[0], null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_SingleByte_vSsA4_1() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01 }, new char[] { '0', '1' });
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_SingleByte_vSsA4_2() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01 }, new char[] { '0', '1' });
    assertEquals('0', result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_SingleByte_vSsA4_3() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01 }, new char[] { '0', '1' });
    assertEquals('1', result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_1() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals(6, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_2() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('0', result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_3() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('1', result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_4() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('2', result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_5() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('0', result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_6() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('1', result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_MultipleBytes_wufG5_7() throws Exception {
    char[] result = Hex.encodeHex(new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 }, new char[] { '0', '1', '2' });
    assertEquals('2', result[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_VqSE0() throws Exception {
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8' };
        char[] actual = Hex.encodeHex(data, false);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_ZnmD1() throws Exception {
        byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8' };
        char[] actual = Hex.encodeHex(data, true);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullData_JxtW4() throws Exception {
        byte[] data = null;
        char[] expected = new char[] {};
        char[] actual = Hex.encodeHex(data, false);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyData_Vgye5() throws Exception {
        byte[] data = new byte[] {};
        char[] expected = new char[] {};
        char[] actual = Hex.encodeHex(data, false);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_EmptyData_MAyg1() throws Exception {
    assertEquals("", Hex.encodeHexString(ByteBuffer.allocate(0), false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_NonEmptyData_Dfdw2() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(10);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    data.put((byte) 0x05);
    data.put((byte) 0x06);
    data.put((byte) 0x07);
    data.put((byte) 0x08);
    data.put((byte) 0x09);
    data.put((byte) 0x0A);
    data.flip();
    String expected = "0102030405060708090A";
    assertEquals(expected, Hex.encodeHexString(data, false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_LowerCase_AvgE3() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(10);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    data.put((byte) 0x05);
    data.put((byte) 0x06);
    data.put((byte) 0x07);
    data.put((byte) 0x08);
    data.put((byte) 0x09);
    data.put((byte) 0x0A);
    data.flip();
    String expected = "0102030405060708090a";
    assertEquals(expected, Hex.encodeHexString(data, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_empty_jfUj0() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[0]);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_singleChar_oXLg1_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0'});
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_singleChar_oXLg1_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_twoChars_OXnF2_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1'});
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_twoChars_OXnF2_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_twoChars_OXnF2_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_threeChars_Bhzy3_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2'});
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_threeChars_Bhzy3_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_threeChars_Bhzy3_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_threeChars_Bhzy3_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fourChars_LKso4_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3'});
    assertEquals(4, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fourChars_LKso4_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fourChars_LKso4_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fourChars_LKso4_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fourChars_LKso4_5() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3'});
    assertEquals(3, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(5, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_5() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(3, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_fiveChars_zZeI5_6() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4'});
    assertEquals(4, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(6, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_5() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(3, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_6() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(4, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sixChars_uYiz6_7() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5'});
    assertEquals(5, result[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(7, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_5() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(3, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_6() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(4, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_7() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(5, result[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_sevenChars_MNjE7_8() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6'});
    assertEquals(6, result[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_1() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(8, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_2() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_3() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_4() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_5() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(3, result[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_6() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(4, result[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_7() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(5, result[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_8() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(6, result[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_eightChars_AnrV8_9() throws DecoderException {
    byte[] result = Hex.decodeHex(new char[] {'0', '1', '2', '3', '4', '5', '6', '7'});
    assertEquals(7, result[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecodeHex_nineChars_YvQA9() throws DecoderException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_EmptyData_SfQd1() throws Exception {
    assertEquals("", Hex.encodeHexString(ByteBuffer.allocate(0)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_SingleByte_tsLZ2() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(1);
    data.put((byte) 0x01);
    assertEquals("01", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_iYbG3() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(2);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    assertEquals("0102", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_DifferentLengths_Ukol4() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(3);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    assertEquals("010203", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_DifferentLengths_2_jSjo5() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(4);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    assertEquals("01020304", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_DifferentLengths_3_ewlL6() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(5);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    data.put((byte) 0x05);
    assertEquals("0102030405", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_DifferentLengths_4_sUZW7() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(6);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    data.put((byte) 0x05);
    data.put((byte) 0x06);
    assertEquals("010203040506", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_MultipleBytes_DifferentLengths_5_sZsl8() throws Exception {
    ByteBuffer data = ByteBuffer.allocate(7);
    data.put((byte) 0x01);
    data.put((byte) 0x02);
    data.put((byte) 0x03);
    data.put((byte) 0x04);
    data.put((byte) 0x05);
    data.put((byte) 0x06);
    data.put((byte) 0x07);
    assertEquals("01020304050607", Hex.encodeHexString(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexString_kYNK0() throws Exception {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    String expected = "0102030405060708090A";
    String actual = Hex.encodeHexString(data, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexStringLowerCase_Ksov1() throws Exception {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    String expected = "0102030405060708090a";
    String actual = Hex.encodeHexString(data, true);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexStringEmpty_wNXu2() throws Exception {
    byte[] data = new byte[] {};
    String expected = "";
    String actual = Hex.encodeHexString(data, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHexStringNull_cHzd3() throws Exception {
    byte[] data = null;
    String expected = null;
    String actual = Hex.encodeHexString(data, false);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeHex_aBcp0() throws Exception {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
    char[] out = new char[data.length * 2];
    int dataOffset = 0;
    int dataLen = data.length;
    boolean toLowerCase = true;
    int outOffset = 0;
    Hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
    assertEquals("0102030405060708090a0b0c0d0e0f", new String(out));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_emptyArray_pkxK0() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[0];
    byte[] expected = new byte[0];
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_singleElementArray_rLzN1() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01 };
    byte[] expected = new byte[] { (byte) 0x01 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_multipleElementArray_acOh2() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 };
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_invalidHexString_PtXv3() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04 };
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_invalidHexString_2_Vsba4() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05 };
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_invalidHexString_3_ZguP5() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06 };
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDecode_invalidHexString_4_iqfY6() throws Exception {
    Hex hex = new Hex();
    byte[] array = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07 };
    byte[] expected = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07 };
    byte[] actual = hex.decode(array);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_GBhC0() throws Exception {
        byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
        char[] toDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] actual = Hex.encodeHex(ByteBuffer.wrap(bytes), toDigits);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyByteArray_Rqgd1() throws Exception {
        byte[] bytes = new byte[] {};
        char[] toDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] expected = new char[] {};
        char[] actual = Hex.encodeHex(ByteBuffer.wrap(bytes), toDigits);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullByteArray_eokr2() throws Exception {
        byte[] bytes = null;
        char[] toDigits = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] expected = null;
        char[] actual = Hex.encodeHex(ByteBuffer.wrap(bytes), toDigits);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullToDigits_lXXN3() throws Exception {
        byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
        char[] toDigits = null;
        char[] expected = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        char[] actual = Hex.encodeHex(ByteBuffer.wrap(bytes), toDigits);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyToDigits_Aqes4() throws Exception {
        byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
        char[] toDigits = new char[] {};
        char[] expected = new char[] {};
        char[] actual = Hex.encodeHex(ByteBuffer.wrap(bytes), toDigits);
        assertArrayEquals(expected, actual);
    }
}