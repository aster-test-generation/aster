/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Failing {
    private static final String HMAC_SHA_256 = "HmacSHA256";
    private static final String KEY = "secret";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_GSap0_2() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha384(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_384, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512_cKNo0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha512(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_512, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_IQLO4() {
        HmacAlgorithms algorithm = null;
        assertFalse(HmacUtils.isAvailable(algorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_OjZh0() {
        byte[] key = new byte[0];
        byte[] valueToDigest = new byte[0];
        String expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacWithDifferentKey_SLDe1_2() throws NoSuchAlgorithmException, InvalidKeyException {
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec("my-secret-key".getBytes(), "HmacSHA256");
        mac.init(secretKeySpec);
        byte[] valueToDigest = "hello world".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotEquals(mac, updatedMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_aAdX0_txWJ0_fid2() throws IOException {
        byte[] key = "test_key".getBytes();
        byte[] valueToDigest = "test_value".getBytes();
        String expectedResult = "expected_result";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384_GSap0() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
        assertEquals(HmacAlgorithms.HMAC_SHA_384, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacWithDifferentKey_SLDe1() throws NoSuchAlgorithmException, InvalidKeyException {
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec("my-secret-key".getBytes(), "HmacSHA256");
        mac.init(secretKeySpec);
        byte[] valueToDigest = "hello world".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotNull(updatedMac);
        assertNotEquals(mac, updatedMac);
    }
}