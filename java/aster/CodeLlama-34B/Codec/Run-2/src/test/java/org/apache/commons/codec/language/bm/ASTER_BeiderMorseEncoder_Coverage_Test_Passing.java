/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringParameter_EChV0() throws org.apache.commons.codec.EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            encoder.encode(123);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringParameter_MzUu1_fid2() throws org.apache.commons.codec.EncoderException {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "Hello World";
        String expectedOutput = "YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt";
        assertEquals(expectedOutput, encoder.encode(input));
    }
}