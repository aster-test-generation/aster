/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_fbvh0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test";
        String expected = "test";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_Gzwz1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "test";
        Object result = qCodec.decode(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_eHCp4() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "";
        Object result = qCodec.decode(str);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_noBlanks_gxRY1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_withBlanks_noSpace_Epaz3() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_withUnderscores_fYkF2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_withBlanks_oMIe2_WQXI0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, (byte) 0x20, 6, 7, 8, 9};
        byte[] actual = qCodec.doEncoding(bytes);
        byte[] expected = new byte[]{1, 2, 3, 4, 5, (byte) 0x5F, 6, 7, 8, 9};
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidString_tvzG3_fid1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "invalid";
        try {
            qCodec.decode(str);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid Q codec string: invalid", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_DwaA1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String input = "test";
        Object result = qCodec.encode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStringWithCharset_MNdm4() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String input = "test";
        Object result = qCodec.encode(input);
        assertEquals(input, result);
    }
}