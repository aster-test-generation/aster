/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_positiveByte_XVZq1() {
        byte[] bytes = new byte[]{1, 2, 3};
        BitSet urlsafe = new BitSet();
        urlsafe.set(1);
        urlsafe.set(2);
        urlsafe.set(3);
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_jdPB1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        assertEquals(bytes, urlCodec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_BaIR4() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello%20World";
        try {
            String result = urlCodec.decode(str, "invalid-charset");
            fail("Expectedinvalid-charset");
        } catch (UnsupportedEncodingException e) {
            assertEquals("UnsupportedEncodingException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_bhSj1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        assertEquals("[37, 48, 49, 37, 48, 50, 37, 48, 51]", urlCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_AMle5() throws EncoderException {
        URLCodec urlCodec = new URLCodec("invalid-charset");
        String str = "hello world";
        assertEquals("hello%20world", urlCodec.encode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullCharset_uJBw6() throws EncoderException {
        URLCodec urlCodec = new URLCodec(null);
        String str = "hello world";
        assertEquals("hello%20world", urlCodec.encode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_BaIR4_fid2() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello%20World";
        try {
            String result = urlCodec.decode(str, "invalid-charset");
            fail("Expected UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
            assertEquals("UnsupportedEncodingException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_bhSj1_fid2() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        assertEquals("010203", urlCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_aEBC2_fid2() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello world";
        assertEquals("hello%20world", urlCodec.encode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_vJog4_fid2() throws EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String str = "hello world";
        assertEquals("hello%20world", urlCodec.encode(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_negativeByte_iYOT0_UWQU0_fid2() {
        byte[] bytes = new byte[]{-1, -2, -3};
        BitSet urlsafe = new BitSet();
        urlsafe.set(256);
        byte[] result = URLCodec.encodeUrl(urlsafe, bytes);
        assertEquals(new byte[]{(byte) (256 + -1), (byte) (256 + -2), (byte) (256 + -3)}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedEncodingException_gzoy0_RizK0_fid2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        try {
            urlCodec.encode("test", "invalid_charset");
            fail("UnsupportedEncodingException should have been thrown");
        } catch (UnsupportedEncodingException e) {
            assertTrue(e.getCause() instanceof UnsupportedEncodingException);
        }
    }
}