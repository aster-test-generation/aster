/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_CtuZ0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_encoding");
            fail("UnsupportedEncodingException should be thrown");
        } catch (DecoderException e) {
            assertEquals("Unsupported encoding", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_sEUr1_1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        Object result = bCodec.decode(value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_sEUr1_2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        Object result = bCodec.decode(value);
        assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidValue_tdKm3() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "invalid";
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid value for decoding: invalid", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_cMjH1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String input = "test";
        Object result = bCodec.encode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_YWix3() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String input = "test";
        Object result = bCodec.encode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeIllegalArgumentException_ZDCM1_IosO0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_argument");
            fail("IllegalArgumentException should be thrown");
        } catch (DecoderException e) {
            assertEquals("Invalid argument", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_sEUr1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        Object result = bCodec.decode(value);
        assertNotNull(result);
        assertEquals(value, result);
    }
}