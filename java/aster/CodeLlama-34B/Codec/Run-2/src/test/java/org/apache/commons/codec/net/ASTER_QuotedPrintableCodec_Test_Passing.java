/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset1_kxJO0() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec();
        String defaultCharset = qpCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_HYpl1() {
        Charset charset = Charset.forName("ISO-8859-1");
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec(charset);
        String defaultCharset = qpCodec.getDefaultCharset();
        assertEquals("ISO-8859-1", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset3_uBcJ2() {
        QuotedPrintableCodec qpCodec = new QuotedPrintableCodec("UTF-16");
        String defaultCharset = qpCodec.getDefaultCharset();
        assertEquals("UTF-16", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_icNa0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = codec.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_aWpP1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_phRm2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = null;
        Object expected = null;
        Object actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyByteArray_TgSu4() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyString_LKUj5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "";
        String expected = "";
        String actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiString_EwFY6() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, !";
        String expected = "Hello, !";
        String actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_Shyv0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonStrict_HjVc1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nullSourceStr_MfiG2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = null;
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = null;
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_invalidCharset_xvGL3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("US-ASCII");
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_rZSN0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Charset charset = codec.getCharset();
        assertEquals(Charset.defaultCharset(), charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_CharsetConstructor_MbTb1() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
        assertEquals(charset, codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_CharsetNameConstructor_HUER2() {
        String charsetName = "UTF-8";
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charsetName);
        assertEquals(Charset.forName(charsetName), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_StrictConstructor_jTGD3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_CharsetAndStrictConstructor_QRMW4() {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
        assertEquals(charset, codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullCharsetName_qbGT6() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset());
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_InvalidCharsetName_Qdzv7() {
        String charsetName = "invalid_charset";
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_UnsupportedCharset_NAEs8() {
        String charsetName = "UTF-8";
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charsetName);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullStrict_tKVx9() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.defaultCharset(), false);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_2() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_3() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_4() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_5() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_6() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_7() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(6, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_8() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(7, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_9() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(8, result[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_10() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(9, result[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0_11() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_2() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_3() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_4() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_5() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_6() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_7() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(6, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_8() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(7, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_9() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(8, result[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_10() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(9, result[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1_11() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNullBytes_BOGo0() {
        byte[] bytes = null;
        BitSet printable = new BitSet();
        boolean strict = true;
        byte[] expected = null;
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonPrintableBytes_ERLn2() {
        byte[] bytes = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03};
        BitSet printable = new BitSet();
        boolean strict = true;
        byte[] expected = new byte[]{(byte) 0x3D, (byte) 0x30, (byte) 0x31, (byte) 0x3D, (byte) 0x30, (byte) 0x32, (byte) 0x3D, (byte) 0x30, (byte) 0x33};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPrintableBytes_cSku3() {
        byte[] bytes = new byte[]{(byte) 0x30, (byte) 0x31, (byte) 0x32};
        BitSet printable = new BitSet();
        printable.set(0x30);
        printable.set(0x31);
        printable.set(0x32);
        boolean strict = true;
        byte[] expected = new byte[]{(byte) 0x30, (byte) 0x31, (byte) 0x32};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_CDIR0_1() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        for (int i = 0; i < bytes.length; i++) {
        }
        assertEquals(bytes.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_iOLY1_1() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        for (int i = 0; i < bytes.length; i++) {
        }
        assertEquals(bytes.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bkyN1_11() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_bytes_null_Tric2() {
        byte[] bytes = null;
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CNOC0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes = "Hello, World!".getBytes();
        byte[] encodedBytes = codec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUTF8_OsFK1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        byte[] encodedBytes = codec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictness_wdrR3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] encodedBytes = codec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutStrictness_raxR4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        byte[] bytes = "Hello, World!".getBytes();
        byte[] encodedBytes = codec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDifferentInputs_nudi5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] bytes1 = "Hello, World!".getBytes();
        byte[] bytes2 = "Hello, World!".getBytes();
        byte[] encodedBytes1 = codec.encode(bytes1);
        byte[] encodedBytes2 = codec.encode(bytes2);
        assertArrayEquals(encodedBytes1, encodedBytes2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDifferentOutputs_MhzD6() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_false_GxYp1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_RmAp0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonStrict_WinU1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nullInput_zEpW2() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = null;
        String sourceCharset = "UTF-8";
        String expected = null;
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonNullInputAndNonUTF8Charset_CJkA5() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String sourceCharset = "ISO-8859-1";
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_nullInput_IrWh0_TxmA1() {
        byte[] input = null;
        byte[] expectedOutput = null;
        try {
            byte[] actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
            assertArrayEquals(expectedOutput, actualOutput);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_singleCharacter_KDyn2_pfdF0() {
        byte[] input = new byte[]{65};
        byte[] expectedOutput = new byte[]{65};
        try {
            byte[] actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
            assertArrayEquals(expectedOutput, actualOutput);
        } catch (DecoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_escapedCharacter_gxCg4_HFYs0() {
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expectedOutput = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] actualOutput = null;
        try {
            actualOutput = QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_TjhF0_Igan0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "=3D".getBytes();
        byte[] expected = "=".getBytes();
        try {
            byte[] actual = codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidInput_sArI1_sqFw0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "=3".getBytes();
        byte[] expected = "=".getBytes();
        try {
            byte[] actual = codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyInput_mmuo2_QAKd1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "".getBytes();
        byte[] expected = "".getBytes();
        try {
            byte[] actual = codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_RWif0() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
        assertEquals(1, result[0]);
        assertEquals(2, result[1]);
        assertEquals(3, result[2]);
        assertEquals(4, result[3]);
        assertEquals(5, result[4]);
        assertEquals(6, result[5]);
        assertEquals(7, result[6]);
        assertEquals(8, result[7]);
        assertEquals(9, result[8]);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_bKlw1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = new BitSet();
        printable.set(1);
        printable.set(2);
        printable.set(3);
        printable.set(4);
        printable.set(5);
        printable.set(6);
        printable.set(7);
        printable.set(8);
        printable.set(9);
        printable.set(10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
        assertEquals(1, result[0]);
        assertEquals(2, result[1]);
        assertEquals(3, result[2]);
        assertEquals(4, result[3]);
        assertEquals(5, result[4]);
        assertEquals(6, result[5]);
        assertEquals(7, result[6]);
        assertEquals(8, result[7]);
        assertEquals(9, result[8]);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_true_CDIR0() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(bytes.length, result.length);
        for (int i = 0; i < bytes.length; i++) {
            assertEquals(bytes[i], result[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_strict_false_iOLY1() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        BitSet printable = new BitSet();
        printable.set(0x01);
        printable.set(0x02);
        printable.set(0x03);
        printable.set(0x04);
        printable.set(0x05);
        printable.set(0x06);
        printable.set(0x07);
        printable.set(0x08);
        printable.set(0x09);
        printable.set(0x0A);
        printable.set(0x0B);
        printable.set(0x0C);
        printable.set(0x0D);
        printable.set(0x0E);
        printable.set(0x0F);
        printable.set(0x10);
        boolean strict = false;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(bytes.length, result.length);
        for (int i = 0; i < bytes.length; i++) {
            assertEquals(bytes[i], result[i]);
        }
    }
}