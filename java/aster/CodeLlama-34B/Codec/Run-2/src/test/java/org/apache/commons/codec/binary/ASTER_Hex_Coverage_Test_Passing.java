/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_jeUp3() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex();
        Object input = new Object();
        try {
            hex.encode(input);
            assertTrue(false);
        } catch (EncoderException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidInput_wHEh4() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        Object input = new Object();
        try {
            hex.decode(input);
            Assertions.fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidCharArray_UbyF5() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        char[] input = new char[]{'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', 'x'};
        try {
            hex.decode(input);
            Assertions.fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_UIRR1_LavE0() throws EncoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        String expectedOutput = "0102030405";
        byte[] actualOutput = hex.encode(input);
        assertEquals(expectedOutput, new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_FdNX2_ieVY0() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05});
        String expectedOutput = "0102030405";
        byte[] actualOutput = hex.encode(input.array());
        assertEquals(expectedOutput, new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_nvXg0_lIsP0() throws EncoderException {
        Hex hex = new Hex();
        String input = "Hello World";
        String expectedOutput = "48656c6c6f20576f726c64";
        byte[] actualOutput = hex.encode(input.getBytes());
        assertEquals(expectedOutput, new String(actualOutput));
    }
}