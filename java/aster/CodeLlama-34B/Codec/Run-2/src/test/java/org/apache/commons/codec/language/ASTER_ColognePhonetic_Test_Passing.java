/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ColognePhonetic_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_nullInput_DsiN0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertNull(colognePhonetic.colognePhonetic(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_emptyInput_GTWH1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("", colognePhonetic.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_singleCharacterInput_cfJH2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("1", colognePhonetic.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_multipleCharacterInput_Qfaj3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterAndUmlautCharacterInput2_snvX7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("", colognePhonetic.colognePhonetic("$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_singleCharacterInput_uXzN2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_multipleCharacterInput_iIiE3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("018234456147823488", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterInput_amKa4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("018234456147823488", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_lowerCaseInput_kFpe6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("018234456147823488", colognePhonetic.colognePhonetic("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_mixedCaseInput_rqNn7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("018234456147823488", colognePhonetic.colognePhonetic("aBcDeFgHiJkLmNoPqRsTuVwXyZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EqualTexts_mfjt0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hello";
        assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentTexts_vVpD1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "World";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_NullText2_NrVD3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = null;
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EmptyText1_nsqy4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "";
        String text2 = "Hello";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_EmptyText2_hYpI5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentLengths_KBVM6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hello World";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentCodes_uvlL7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hallo";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_SameCodes_JAQX8() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hallo";
        assertTrue(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_gwCJ0() {
        ColognePhonetic cp = new ColognePhonetic();
        String input = "Hello World";
        String expectedOutput = "H410 W0r1d";
        String actualOutput = cp.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_emptyString_RXQP0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_singleCharacter_avVi1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_multipleCharacters_fcWu2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_specialCharacters_AYHB3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("$%^&*()");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_dAnv4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode(null);
        assertNull(result);
    }
}