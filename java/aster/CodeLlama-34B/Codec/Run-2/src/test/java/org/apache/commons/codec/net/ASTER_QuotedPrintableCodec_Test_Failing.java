/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_strict_true_mSLL0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "=3D= Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_strict_false_oTMU1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "=3D= Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF8_gaEV2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "=3D= Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_ISO88591_iiTm3() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"));
        String sourceStr = "=3D= Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_USASCII_bBgA4() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("US-ASCII"));
        String sourceStr = "=3D= Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16_mWoR5() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16"));
        String sourceStr = "=3D㴠䡥汬漬⁗潲汤�";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16BE_NKpI6() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16BE"));
        String sourceStr = "=3D㴠䡥汬漬⁗潲汤�";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16LE_gVsM7() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16LE"));
        String sourceStr = "=3D‽效汬Ɐ圠牯摬�";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF32_pjGR8() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-32"));
        String sourceStr = "=3D����";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_unyH0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidType_Vioj3() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        String expected = null;
        String actual = codec.encode(input.toString());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullCharset_xoUL5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec((Charset) null);
        assertNull(Charset.defaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 28};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_3() {
        byte[] bytes = new byte[]{1, 48, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_4() {
        byte[] bytes = new byte[]{1, 2, 49, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_5() {
        byte[] bytes = new byte[]{1, 2, 3, 61, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_6() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 48, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_7() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 50, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(6, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_8() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 61, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(7, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_9() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 48, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(8, result[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_10() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 51, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(9, result[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_11() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 61};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNonStrictMode_aWdo5() {
        byte[] bytes = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03};
        BitSet printable = new BitSet();
        boolean strict = false;
        byte[] expected = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_strict_true_mSLL0_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_strict_false_oTMU1_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF8_gaEV2_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_ISO88591_iiTm3_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_USASCII_bBgA4_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("US-ASCII"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16_mWoR5_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16BE_NKpI6_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16BE"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF16LE_gVsM7_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-16LE"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_charset_UTF32_pjGR8_fid1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-32"));
        String sourceStr = "=3D Hello, World!";
        String expected = "Hello, World!";
        String actual = codec.decode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidType_Vioj3_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        Object expected = null;
        Object actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiString_EwFY6_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, !";
        String expected = "Hello, =E4=B8=96=E7=95=8C!";
        String actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_Shyv0_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "=?UTF-8?Q?Hello,_World!?=";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_invalidCharset_xvGL3_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("INVALID_CHARSET");
        String expected = null;
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullCharset_xoUL5_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec((Charset) null);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullCharsetName_qbGT6_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec((String) null);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_InvalidCharsetName_Qdzv7_fid1() {
        String charsetName = "invalid_charset";
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charsetName);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_UnsupportedCharset_NAEs8_fid1() {
        String charsetName = "UTF-16";
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charsetName);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_NullStrict_tKVx9_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec((Boolean) null);
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_1_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_2() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_3_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_4_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_5_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_6_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_7_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(6, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_8_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(7, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_9_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(8, result[7]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_10_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(9, result[8]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2_11_fid1() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result[9]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithEmptyBytes_Qfqg1() {
        byte[] bytes = new byte[0];
        BitSet printable = new BitSet();
        boolean strict = true;
        byte[] expected = new byte[0];
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_FQkl3() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUTF16_UnUM2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16);
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16);
        byte[] encodedBytes = codec.encode(bytes);
        assertArrayEquals(new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_true_ceOA0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_UTF8_tGFM2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_ISO88591_qlFE3() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.ISO_8859_1);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_USASCII_uKve4() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.US_ASCII);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_UTF16_mYOp5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_UTF16BE_VEEx6() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16BE);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_charset_UTF16LE_emuB7() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_16LE);
        String sourceStr = "Hello, World!";
        String expected = "Hello,=20World!";
        String actual = codec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nullCharset_cGxn3() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String sourceCharset = null;
        String expected = "Hello, World!";
        String actual = codec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiByteArray_pzXh7_cDqJ0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, (byte) 0xE4, (byte) 0xB8, (byte) 0x96, (byte) 0xE7, (byte) 0x95, (byte) 0x8C};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, (byte) 0xE4, (byte) 0xB8, (byte) 0x96, (byte) 0xE7, (byte) 0x95, (byte) 0x8C};
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_printable_null_IgWk2() {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BitSet printable = null;
        boolean strict = true;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(10, result.length);
        assertEquals(1, result[0]);
        assertEquals(2, result[1]);
        assertEquals(3, result[2]);
        assertEquals(4, result[3]);
        assertEquals(5, result[4]);
        assertEquals(6, result[5]);
        assertEquals(7, result[6]);
        assertEquals(8, result[7]);
        assertEquals(9, result[8]);
        assertEquals(10, result[9]);
    }
}