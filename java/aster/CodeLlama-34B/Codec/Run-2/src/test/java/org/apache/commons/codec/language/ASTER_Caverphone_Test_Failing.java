/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Failing {
    private Caverphone caverphone;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_NullStrings_PPwT2() {
        Caverphone caverphone = new Caverphone();
        String str1 = null;
        String str2 = null;
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharacters_sYOW6() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello!";
        String str2 = "hello";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentNumbers_JRmW7() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello1";
        String str2 = "hello2";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharactersAndNumbers_ybrX8() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello!1";
        String str2 = "hello2";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharactersAndNumbersAndCases_qUjd9() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Hello!1";
        String str2 = "hello2";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_emptyString_MGXs0() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_nullString_GAtG1() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_singleCharacter_zxBR2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("a");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_multipleCharacters_Pzuq3() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("abc");
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_specialCharacters_tfRk4() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("$%^&*()");
        assertEquals("$%^&*()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_numericCharacters_cDus5() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("1234567890");
        assertEquals("1234567890", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_alphanumericCharacters_Lepf6() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("abc123");
        assertEquals("abc123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_tabCharacter_YJXJ8() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\t");
        assertEquals("\t", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_newlineCharacter_moUc9() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\n");
        assertEquals("\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_carriageReturnCharacter_wpvF10() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\r");
        assertEquals("\r", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_formFeedCharacter_gKCx11() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\f");
        assertEquals("\f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_bellCharacter_Ulgw12() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\b");
        assertEquals("\b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_escapeCharacter_dGDu14() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\u001B");
        assertEquals("\u001B", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_deleteCharacter_piTD15() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\u007F");
        assertEquals("\u007F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_qino0() {
        Caverphone caverphone = new Caverphone();
        String input = "hello";
        Object output = caverphone.encode(input);
        assertEquals("H110", output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vchi1() {
        String str = "hello";
        String expected = "h110";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_hRDZ2() {
        String str = null;
        String expected = null;
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_bSsA3() {
        String str = "";
        String expected = "";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSingleCharacter_WucI4() {
        String str = "a";
        String expected = "1";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMultipleCharacters_ArJf5() {
        String str = "hello world";
        String expected = "h110 w0r1d";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_txFb6() {
        String str = "hello!world";
        String expected = "h110!w0r1d";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAccentedCharacters_mquV7() {
        String str = "hllo";
        String expected = "h110";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUppercaseCharacters_CJzH8() {
        String str = "HELLO";
        String expected = "h110";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMixedCaseCharacters_Scgm10() {
        String str = "HeLlO";
        String expected = "h110";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNewline_zgak12() {
        String str = "hello\nworld";
        String expected = "h110\nw0r1d";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithTab_XYoP13() {
        String str = "hello\tworld";
        String expected = "h110\tw0r1d";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCarriageReturn_WXHy14() {
        String str = "hello\rworld";
        String expected = "h110\r0r1d";
        String actual = caverphone.encode(str);
        assertEquals(expected, actual);
    }
}