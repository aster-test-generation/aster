/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Failing {
    @Test
    @Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_DifferentLength_2_FHIL2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "Joh";
        int result = encoder.leftToRightThenRightToLeftProcessing(name2, name1);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_Null_SKCT7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_null_RtoB8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_SameLength_gqBm0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "John";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_DifferentLength_tARQ1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "Joh";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_GsmU0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Doe";
        String expected = "Jhn D";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithOnlyVowels_mNmm2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "AEIOU";
        String expected = "";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithOnlyConsonants_DzeR3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "JKLMNOP";
        String expected = "JKLMNOP";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_DifferentLengthInputs_DXpb4_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("abc", "abcd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_DifferentVowelsInputs_fzmX5_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("abc", "abd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_SingleLetter_aASz1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("a");
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_DoubleConsonant_FajD2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("bb");
        assertEquals("b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_MultipleDoubleConsonants_KKRw3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("bbcc");
        assertEquals("bc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_MixedCase_dUhW4_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("BbCc");
        assertEquals("Bc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_accentedWord_ASvc2_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("aeiou", encoder.removeAccents(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_null_RtoB8_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isVowel(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3_LongName_CWxl1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Smith Johnson";
        String expected = "JohSmithJohnson";
        String actual = encoder.getFirst3Last3(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_GOQy0_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello, World!";
        Object output = encoder.encode(input);
        assertEquals(output, "Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleLines_lktM3_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\nWorld!";
        Object output = encoder.encode(input);
        assertEquals(output, "Hello,\nWorld!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullCharacter_JxMo4_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\0World!";
        Object output = encoder.encode(input);
        assertEquals(output, "Hello,\0World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonPrintableCharacter_kNTu5_fid1() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\u0000World!";
        Object output = encoder.encode(input);
        assertEquals(output, "Hello,\u0000World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithVowels_EdzH3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("John Doe");
        assertEquals("Jhn D", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithDoubleConsonants_yrbs4_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh Doe");
        assertEquals("Jhn D", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithSpecialCharacters_QGnF6_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh$ Doe");
        assertEquals("Jhn D", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithNumbers_mIBj7_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh1 Doe");
        assertEquals("Jhn D", encoded);
    }
}