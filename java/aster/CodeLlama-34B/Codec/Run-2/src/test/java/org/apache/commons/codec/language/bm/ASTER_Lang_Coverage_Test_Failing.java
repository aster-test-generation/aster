/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Lang_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResourceMalformedLine_oLlT0() {
        String languageRulesResourceName = "malformed_line.txt";
        Languages languages = Languages.getInstance("en");
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Malformed line 'malformed line' in language resource 'malformed_line.txt'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResourceInvalidLanguages_RhBk1() {
        String languageRulesResourceName = "invalid_languages.txt";
        Languages languages = Languages.getInstance("en");
        try {
            Lang.loadFromResource(languageRulesResourceName, languages);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid languages 'invalid_languages' in language resource 'invalid_languages.txt'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguage_MultipleLanguages_Xgki1_RMqU0() {
        Lang lang = Lang.loadFromResource("languageRulesResourceName", Languages.getInstance("nameType"));
        String text = "Hello, how are you?";
        String expected = "en";
        String actual = lang.guessLanguage(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguage_MultipleLanguages_Xgki1_RMqU0_fid3() {
        Lang lang = Lang.loadFromResource("languageRulesResourceName", Languages.getInstance("nameType"));
        String text = "Hello, how are you?";
        String expected = Languages.ANY;
        String actual = lang.guessLanguage(text);
        assertEquals(expected, actual);
    }
}