/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_null_cRLz0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertNull(refinedSoundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_emptyString_PNGD1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("", refinedSoundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_nonAlphanumeric_lRET8() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("", refinedSoundex.soundex("!@#$%^&*()"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_EmptyStrings_nsVT0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals(0, refinedSoundex.difference("", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_NonEmptyStrings_RucZ1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals(1, refinedSoundex.difference("hello", "world"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_fVxG2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "";
        String expectedOutput = "";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullString_IFpa3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = null;
        String expectedOutput = null;
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_UpperCaseLetter_dBxs0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("AEIOUYWH");
        char c = 'A';
        char expected = 'A';
        char actual = refinedSoundex.getMappingCode(c);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_LowerCaseLetter_nZDR1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("aeiouywh");
        char c = 'a';
        char expected = 'a';
        char actual = refinedSoundex.getMappingCode(c);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacter_fVcQ2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_nKPL0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Hello";
        String expectedOutput = "H400";
        String actualOutput = refinedSoundex.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_InvalidInput_JNdN4_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Invalid input";
        String expectedOutput = null;
        String actualOutput = refinedSoundex.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringMapping_bAWc0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String result = refinedSoundex.encode("hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharArrayMapping_qzgN1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String result = refinedSoundex.encode("hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMapping_pELg2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("hello");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_Digit_nULx2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("0123456789");
        char c = '0';
        char expected = '0';
        char actual = refinedSoundex.getMappingCode(c);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_SpecialCharacter_gydE3_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("!@#$%^&*()_+-=");
        char c = '!';
        char expected = '!';
        char actual = refinedSoundex.getMappingCode(c);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_AllInputs_SUQz4_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("AEIOUYWH0123456789!@#$%^&*()_+-=");
        char[] inputs = new char[]{'A', 'a', '0', '!', 'Z', 'z', '9', '&', ' ', '*', '(', ')', '+', '-', '='};
        char[] expected = new char[]{'A', 'a', '0', '!', 'Z', 'z', '9', '&', ' ', '*', '(', ')', '+', '-', '='};
        for (int i = 0; i < inputs.length; i++) {
            char actual = refinedSoundex.getMappingCode(inputs[i]);
        }
    }
}