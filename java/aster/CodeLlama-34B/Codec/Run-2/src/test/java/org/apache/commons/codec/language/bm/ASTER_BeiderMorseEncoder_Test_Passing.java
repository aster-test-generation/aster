/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType1_njJA0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.APPROX);
        assertEquals(RuleType.APPROX, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType2_utSF1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.EXACT);
        assertEquals(RuleType.EXACT, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_true_QTxn0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_false_Ktwm1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setConcat(false);
        assertFalse(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_Qomx1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        Object input = new Object();
        try {
            encoder.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeAshkenazi_WNch0_PsJC0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.ASHKENAZI);
        assertEquals(NameType.ASHKENAZI, encoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeGeneric_cumh1_RWfN0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.GENERIC);
        assertEquals(NameType.GENERIC, encoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameTypeSephardic_honz2_huNL0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.SEPHARDIC);
        assertEquals(NameType.SEPHARDIC, encoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_Default_iNvQ0_HQXP0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType nameType = encoder.getNameType();
        assertEquals(NameType.GENERIC, nameType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConcat_True_yXEb0_CxnW0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setConcat(true);
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_CWkt0_sZBz0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertNull(encoder.encode(null));
        } catch (EncoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonNullInput_pMBa2_tjLl0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertNotNull(encoder.encode("hello"));
        } catch (EncoderException e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }
}