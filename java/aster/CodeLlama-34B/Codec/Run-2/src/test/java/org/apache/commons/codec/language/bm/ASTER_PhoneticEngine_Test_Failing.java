/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType3_oCLH2() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true);
        assertEquals(RuleType.RULES, phoneticEngine.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes_Sephardic_Rules_Concatenate_MaxPhonemes_Ncio2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 30);
        assertEquals(30, engine.getMaxPhonemes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat3_KpeZ2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, true, 30);
        assertTrue(engine.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType3_jMbR2() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 30);
        assertEquals(NameType.SEPHARDIC, phoneticEngine.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_Mxki0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "Ashkenazi";
        String expected = "ASHKENAZI";
        String actual = engine.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_DxwQ1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false, 10);
        String input = "Generic";
        String expected = "GENERIC";
        String actual = engine.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_gRMy2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true, 10);
        String input = "Sephardic";
        String expected = "SEPHARDIC";
        String actual = engine.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_aWzB0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleWord_cfmb1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "h-l-o";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleWords_VSsj2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello world";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "h-l-o-w-r-l-d";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Dashes_ZoOM3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello-world";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "h-l-o-w-r-l-d";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Underscores_rLEJ4() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello_world";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "h-l-o-w-r-l-d";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpecialCharacters_DGYE5() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello!world";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en")));
        String expected = "h-l-o-w-r-l-d";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleLanguages_MJxE6() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "hello world";
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "fr")));
        String expected = "h-l-o-w-r-l-d";
        String actual = engine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_gRMy2_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true, 10);
        String input = "Sephardic";
        String expected = "SEPHARDIC";
        String actual = engine.encode(input);
        assertEquals(expected, actual);
    }
}