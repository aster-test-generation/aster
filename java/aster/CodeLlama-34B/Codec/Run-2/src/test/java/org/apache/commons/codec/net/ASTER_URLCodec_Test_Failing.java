/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidInputString_Pnkc2() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello world";
        String charsetName = "UTF-8";
        try {
            urlCodec.decode(str, charsetName);
            fail("DecoderException should have been thrown");
        } catch (DecoderException e) {
            assertEquals("Invalid URL-encoded string", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharacters_kUhs3() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello%20world%20%20";
        String charsetName = "UTF-8";
        try {
            urlCodec.decode(str, charsetName);
            fail("DecoderException should have been thrown");
        } catch (DecoderException e) {
            assertEquals("Invalid URL-encoded string: hello%20world%20%20", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_BFzk0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{65, 66, 67};
        Object output = urlCodec.decode(input);
        assertEquals(output, "[65, 66, 67]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_urlSafeBytes_ApRj2() {
        byte[] bytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~".getBytes();
        byte[] expected = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_nonUrlSafeBytes_SLqs3() {
        byte[] bytes = " !\"#$%&'()*+,/:;<=>?@[\\]^{|}".getBytes();
        byte[] expected = "%20%21%22%23%24%25%26%27%28%29%2A%2B%2C%2F%3A%3B%3C%3D%3E%3F%40%5B%5C%5D%5E%60%7B%7C%7D".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_nonAscii_ttmo5() {
        byte[] bytes = "".getBytes();
        byte[] expected = "%E2%82%AC".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_fulL1_fid1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello%20world";
        String charsetName = "invalid_charset";
        try {
            urlCodec.decode(str, charsetName);
            fail("UnsupportedEncodingException should have been thrown");
        } catch (UnsupportedEncodingException e) {
            assertEquals("UnsupportedEncodingException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharacters_kUhs3_fid1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello%20world%20%20";
        String charsetName = "UTF-8";
        try {
            urlCodec.decode(str, charsetName);
            fail("DecoderException should have been thrown");
        } catch (DecoderException e) {
            assertEquals("Invalid URL-encoded string", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_BFzk0_fid1() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{65, 66, 67};
        Object output = urlCodec.decode(input);
        assertEquals(output, "ABC");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_jXgU0_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = urlCodec.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_wTRM1_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "hello world";
        String expectedOutput = "hello%20world";
        String actualOutput = urlCodec.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_nonAsciiAndUrlSafe_jXDG6_fid1() {
        byte[] bytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~".getBytes();
        byte[] expected = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~%E2%82%AC".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Zdxv0_fid1() {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] encodedBytes = urlCodec.encode(bytes);
        assertEquals(new byte[]{1, 2, 3, 4, 5}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonNullString_lnkT1_fid1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        String encodedStr = urlCodec.encode(str);
        assertEquals("Hello%2C%20World%21", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_specialCharacters_rSNc3_fid1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World! ";
        String result = urlCodec.encode(str, "UTF-8");
        assertEquals("Hello%2C%20World%21%20%F0%9F%98%8A", result);
    }
}