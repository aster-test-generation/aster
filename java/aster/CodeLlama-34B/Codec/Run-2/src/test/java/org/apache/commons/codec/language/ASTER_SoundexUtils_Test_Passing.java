/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_NullInput_Caog0() {
        int result = SoundexUtils.differenceEncoded(null, null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_EmptyInput_TYYi1() {
        int result = SoundexUtils.differenceEncoded("", "");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_SameInput_tish2() {
        int result = SoundexUtils.differenceEncoded("abc", "abc");
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncoded_DifferentInput_NRwd3() {
        int result = SoundexUtils.differenceEncoded("abc", "def");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_emptyString_rKqM0() {
        String input = "";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_nullString_qwrs1() {
        String input = null;
        String expected = null;
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithNoLetters_xlJB2() {
        String input = "1234567890";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithLetters_vamY3() {
        String input = "abcdefghijklmnopqrstuvwxyz";
        String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithSpecialCharacters_qLjf5() {
        String input = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithNewline_MtJg7() {
        String input = "\n";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithTab_lytm8() {
        String input = "\t";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithCarriageReturn_dEsn9() {
        String input = "\r";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithFormFeed_FvKH10() {
        String input = "\f";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithBackslash_Iixs11() {
        String input = "\\";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithSingleQuote_KXOO12() {
        String input = "'";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithDoubleQuote_UoHx13() {
        String input = "\"";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithTilde_NFRZ15() {
        String input = "~";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_null_aanL0() {
        assertTrue(SoundexUtils.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_empty_eQlQ1() {
        assertTrue(SoundexUtils.isEmpty(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_nonNullNonEmpty_qzOE3() {
        assertFalse(SoundexUtils.isEmpty("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClean_stringWithMixedLettersAndNumbers_rhEM4_fid1() {
        String input = "abc123def456ghi789";
        String expected = "ABCDEFGHI";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }
}