/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_jTVR0() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = null;
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_oyqX2() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String expected = "ab             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidOriginal_gbIe4() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidSalt_WQcU2() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "invalid";
        String expected = "inWSYLbKCoLko";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_eGGU4() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "abcd";
        String expected = "abcd             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_YpfF6() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "dcba";
        String expected = "dcba             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_differentCase_kafz7() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "DcBa";
        String expected = "DcBa             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_differentCase_differentEncoding_QnVk8() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "DcBa";
        String expected = "Dc2oE0PMXGvIs";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_riKD1() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "abc";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_ARaN3() {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonEmptyOriginal_UqjT4() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "ab";
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndNonEmptySalt_RvVP8() {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginalAndNullSalt_vtYl10() {
        byte[] original = new byte[0];
        String salt = null;
        String expected = "             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidSalt_tnWf2() {
        byte[] original = new byte[8];
        String salt = "abc";
        String expected = "Invalid salt value: abc";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_rBez3() {
        byte[] original = new byte[8];
        String salt = "ab";
        String expected = "ab";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validOriginalAndSalt_tWWU7() {
        byte[] original = new byte[8];
        String salt = "abmF1QH4PEr.E";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidOriginalAndSalt_kode8() {
        byte[] original = new byte[8];
        String salt = "abc";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalidOriginalAndValidSalt_LUZb10() {
        byte[] original = new byte[8];
        String salt = "ab";
        String expected = "Invalid salt value: ab";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_nsEC3() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "abcd";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_Abtf5() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "cdab";
        String expected = "cdab             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_differentCase_QQwF6() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "CDAB";
        String expected = "CDPMi77aUz5CA";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_validSalt_differentLength_differentChars_differentOrder_differentCase_differentCharacters_differentLength_fJuP8() {
        byte[] original = new byte[8];
        Arrays.fill(original, (byte) 0);
        String salt = "CDAB";
        String expected = "CDAB             ";
        String actual = UnixCrypt.crypt(original, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_invalid_gytj3() {
        assertNotEquals("password", UnixCrypt.crypt("passw0rd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_differentCharset_EgEk4() {
        assertNotEquals("password", UnixCrypt.crypt("password".getBytes(StandardCharsets.UTF_16)));
    }
}