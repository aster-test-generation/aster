/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidKey_aLaK3() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = "6480000000000000000000000000000000000000000000000000000000000000";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidKeyAndSalt_vBqN6() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithCustomSalt_xfjp1() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$rounds=10000$jU8C2m.0";
        String expectedResult = "$6$rounds=10000$jU8C2m.0$ZiSRUXxrQlKXoHMkBnF/ZHXQoQYsWgO1hwHoRt.KQNXMJhIxXwYTt0u.hRJDs1.yxYWB1JEvR/s28M4p9bDxM/";
        String actualResult = Sha2Crypt.sha512Crypt(keyBytes, salt);
    }
}