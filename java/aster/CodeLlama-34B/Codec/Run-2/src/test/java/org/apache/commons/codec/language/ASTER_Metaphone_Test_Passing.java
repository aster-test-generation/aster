/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Metaphone_Test_Passing {
    private Metaphone metaphone;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_LLHb0() {
        Metaphone metaphone = new Metaphone();
        String txt = "Knight";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_fdRo1() {
        Metaphone metaphone = new Metaphone();
        String txt = "Ghost";
        String expected = "G";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_CwLS4() {
        Metaphone metaphone = new Metaphone();
        String txt = "Cat";
        String expected = "C";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone7_tiXu6() {
        Metaphone metaphone = new Metaphone();
        String txt = "Fox";
        String expected = "F";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_ofKRPSt7() {
        Metaphone metaphone = new Metaphone();
        String txt = "KRPSrapes";
        String expected = "KRPS";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_gNvj0() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.metaphone("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_vEZm1() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.metaphone("KN");
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_jcSa2() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.metaphone("KNK");
        assertEquals("NK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_uNEx3() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.metaphone("KNKN");
        assertEquals("NKN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_RRgh4() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.metaphone("KNKNK");
        assertEquals("NKNK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_jGnI1() {
        Metaphone metaphone = new Metaphone();
        String txt = "Girl";
        String expected = "G";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_jwUW2() {
        Metaphone metaphone = new Metaphone();
        String txt = "Pear";
        String expected = "P";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_RKzz3() {
        Metaphone metaphone = new Metaphone();
        String txt = "B";
        String expected = "B";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_SlaC4() {
        Metaphone metaphone = new Metaphone();
        String txt = "C";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone7_TnzF6() {
        Metaphone metaphone = new Metaphone();
        String txt = "F";
        String expected = "F";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_lAdj7() {
        Metaphone metaphone = new Metaphone();
        String txt = "G";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone9_rcla8() {
        Metaphone metaphone = new Metaphone();
        String txt = "H";
        String expected = "H";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone10_zmZg9() {
        Metaphone metaphone = new Metaphone();
        String txt = "J";
        String expected = "J";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_WCxJ10() {
        Metaphone metaphone = new Metaphone();
        String txt = "K";
        String expected = "K";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone12_BFFc11() {
        Metaphone metaphone = new Metaphone();
        String txt = "L";
        String expected = "L";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone13_jdqh12() {
        Metaphone metaphone = new Metaphone();
        String txt = "M";
        String expected = "M";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone14_jWUT13() {
        Metaphone metaphone = new Metaphone();
        String txt = "N";
        String expected = "N";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone15_LRxs14() {
        Metaphone metaphone = new Metaphone();
        String txt = "P";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone1_ifEI0() {
        Metaphone metaphone = new Metaphone();
        String txt = "abc";
        String expected = "ABK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_rjvZ1() {
        Metaphone metaphone = new Metaphone();
        String txt = "def";
        String expected = "TF";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_geQI2() {
        Metaphone metaphone = new Metaphone();
        String txt = "ghi";
        String expected = "JK";
        String actual = metaphone.metaphone(txt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_McDu3() {
        Metaphone metaphone = new Metaphone();
        String txt = "jkl";
        String expected = "JKL";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_CIsr4() {
        Metaphone metaphone = new Metaphone();
        String txt = "mno";
        String expected = "MN";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone6_GNrq5() {
        Metaphone metaphone = new Metaphone();
        String txt = "pqr";
        String expected = "PKR";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone7_ZrBx6() {
        Metaphone metaphone = new Metaphone();
        String txt = "stu";
        String expected = "ST";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone8_Uawf7() {
        Metaphone metaphone = new Metaphone();
        String txt = "vwx";
        String expected = "FKS";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone9_eVmR8() {
        Metaphone metaphone = new Metaphone();
        String txt = "yz";
        String expected = "S";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone10_RDwr9() {
        Metaphone metaphone = new Metaphone();
        String txt = "abcdef";
        String expected = "ABKT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone11_RcRs10() {
        Metaphone metaphone = new Metaphone();
        String txt = "ghijkl";
        String expected = "KJKL";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone12_hcKl11() {
        Metaphone metaphone = new Metaphone();
        String txt = "mnopqr";
        String expected = "MNPK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone13_lxOX12() {
        Metaphone metaphone = new Metaphone();
        String txt = "stuvwx";
        String expected = "STFK";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_valid_Lgvl0() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(10);
        assertEquals(10, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_invalid_SZvk1() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(-1);
        assertEquals(-1, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_zero_DZEt8() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(0);
        assertEquals(0, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_large_EWUz9() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(1000);
        assertEquals(1000, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_small_zLWk10() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(1);
        assertEquals(1, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_ZeOC0() {
        Metaphone metaphone = new Metaphone();
        String str1 = "hello";
        String str2 = "world";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithNull_DETw1() {
        Metaphone metaphone = new Metaphone();
        String str1 = null;
        String str2 = "world";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithEmptyString_vzEQ2() {
        Metaphone metaphone = new Metaphone();
        String str1 = "";
        String str2 = "world";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithSameCharacters_MSNm5() {
        Metaphone metaphone = new Metaphone();
        String str1 = "hello";
        String str2 = "hello";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithDifferentCasing_azBK6() {
        Metaphone metaphone = new Metaphone();
        String str1 = "hello";
        String str2 = "Hello";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqualWithDifferentAccents_Yppi7() {
        Metaphone metaphone = new Metaphone();
        String str1 = "hello";
        String str2 = "hllo";
        assertFalse(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_hnrv0() {
        Metaphone metaphone = new Metaphone();
        String input = "hello";
        String expectedOutput = "HL";
        String actualOutput = metaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_JpoE1() {
        Metaphone metaphone = new Metaphone();
        Object input = new Object();
        try {
            metaphone.encode(input);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Metaphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_iKes2() {
        Metaphone metaphone = new Metaphone();
        String input = "";
        String expectedOutput = "";
        String actualOutput = metaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_egkj0() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SingleCharacter_PDCm1() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.encode("a");
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleCharacters_EjLr2() {
        Metaphone metaphone = new Metaphone();
        String result = metaphone.encode("abc");
        assertEquals("ABK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_nonNumeric_iiKf5_lIcm0() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(3);
        assertEquals(3, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_dPOz0() {
        metaphone = new Metaphone();
    }
}