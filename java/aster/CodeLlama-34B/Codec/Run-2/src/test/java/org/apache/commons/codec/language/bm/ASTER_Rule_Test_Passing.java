/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Qedo1_1() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
        assertNotNull(map);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_WHiv3_1() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
        assertNotNull(map);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Approx_Multiple_vMNo5_1() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.GENERIC, RuleType.APPROX, langs);
        assertNotNull(map);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance1_kxEQ0_aldN0_1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>());
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance2_lMKc1_LNMk0_1() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>());
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance3_AJfi2_BgsP0_1() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>());
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance7_gSoq6_QUfa0_1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "fr")));
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance8_xxLT7_MkjZ0_1() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "fr")));
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance9_AxDX8_epJv0_1() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "fr")));
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Qedo1_17() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
        assertEquals(17, map.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Qedo1_3_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
        assertFalse(map.containsKey("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Approx_Multiple_Qedo1_5_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.APPROX, langs);
        assertFalse(map.containsKey("es"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_WHiv3_9() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
        assertEquals(9, map.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_WHiv3_3_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
        assertFalse(map.containsKey("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Ashkenazi_Exact_Multiple_WHiv3_5_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.EXACT, langs);
        assertFalse(map.containsKey("es"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Approx_Multiple_vMNo5_22() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.GENERIC, RuleType.APPROX, langs);
        assertEquals(22, map.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Approx_Multiple_vMNo5_3_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.GENERIC, RuleType.APPROX, langs);
        assertFalse(map.containsKey("en"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMap_Generic_Approx_Multiple_vMNo5_5_fid2() {
        LanguageSet langs = LanguageSet.from(new HashSet<String>(Arrays.asList("en", "es")));
        Map<String, List<Rule>> map = Rule.getInstanceMap(NameType.GENERIC, RuleType.APPROX, langs);
        assertFalse(map.containsKey("es"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance1_kxEQ106_aldN106_2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>());
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
        assertEquals(106, rules.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance2_lMKc1_LNMk0_2_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(new HashSet<String>());
        List<Rule> rules = Rule.getInstance(nameType, ruleType, languageSet);
    }
}