/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_XQHW5() {
        byte[] keyBytes = new byte[8];
        String salt = "invalid_salt";
        String expected = "$apr1$invalid$8.6Ij9rROZKFxcnQGl.xI/";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EDkL0() {
        String key = "password";
        String salt = "salt";
        String expected = "$apr1$salt$Xxd1irWT9ycqoYxGFn4cb.";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKey_srwE1() {
        String key = "";
        String salt = "salt";
        String expected = "$apr1$salt$AnXM5PAEa9T4ruYbwPoUh/";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_EFfj6() {
        String key = "password";
        String salt = "salt";
        String expected = "apr1$salt$password";
        String actual = Md5Crypt.apr1Crypt(key, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullKeyBytes_eLaK0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidKeyBytes_obYa2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidRandom_qfDn6() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        Random random = new Random();
        random.setSeed(123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullSalt_bcAJ3() {
        String key = "key";
        String salt = null;
        String expected = null;
        String actual = Md5Crypt.apr1Crypt(key, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_fWZJ4() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt(key, salt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSaltWithDifferentLengths_Knml5() {
        String key = "key";
        String salt = "salt";
        String expected = "$apr1$salt$SIEjnTNXwIVcTbLzs4p120";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }
}