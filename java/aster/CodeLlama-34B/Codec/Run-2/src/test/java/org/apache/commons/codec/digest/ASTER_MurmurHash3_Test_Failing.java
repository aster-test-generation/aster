/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_zmwO0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_jEDp1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 1;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_3_mgcG2() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 2;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_4_mSEL3() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 3;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_5_Ykak4() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 4;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_6_FgdI5() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 5;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_7_RUht6() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 6;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_8_iban7() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 7;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_9_axyu8() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 8;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_10_QvHd9() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 9;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_sCiF0() {
        byte[] data = new byte[10];
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNonZeroSeed_RWNc1() {
        byte[] data = new byte[10];
        int seed = 1234;
        int expected = 1234;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentLength_cRHG2() {
        byte[] data = new byte[10];
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 0, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentOffset_KVXb3() {
        byte[] data = new byte[10];
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32x86(data, 1, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentSeedAndLength_nycy4() {
        byte[] data = new byte[10];
        int seed = 1234;
        int expected = 1234;
        int actual = MurmurHash3.hash32x86(data, 0, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentSeedAndOffset_gTtC5() {
        byte[] data = new byte[10];
        int seed = 1234;
        int expected = 1234;
        int actual = MurmurHash3.hash32x86(data, 1, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentSeedAndLengthAndOffset_ueHg6() {
        byte[] data = new byte[10];
        int seed = 1234;
        int expected = 1234;
        int actual = MurmurHash3.hash32x86(data, 1, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_vNHi0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_uyir1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 987654321;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_fGWQ2() {
        byte[] data = new byte[]{11, 22, 33, 44, 55, 66, 77, 88, 99, 100};
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_tvCM3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, 0, data.length - 1, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentOffset_fuID4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, 1, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_OcED5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = -123456789;
        int expectedHash = -123456789;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_UNEL6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 0;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ZGPC0() {
        long data = 1234567890L;
        long expected = 0xff51afd7ed558ccdL;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentData_XwUl2() {
        long data = 9876543210L;
        long expected = 0xff51afd7ed558ccdL;
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_guMU0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_jLUD0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        int offset = 0;
        int length = data.length;
        int seed = 0x12345678;
        long[] expected = new long[]{0x12345678, 0x12345678};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_gtXc0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_EmptyData_mowh1() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_NullData_zePV2() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_NegativeSeed_lYJg3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = -123456789;
        long[] expected = new long[]{-123456789, -987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_NegativeOffset_fZhT4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = -1;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_Ohoa0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNegativeSeed_djnQ1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = -123456789;
        long[] expected = new long[]{-123456789, -987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithZeroSeed_YkSQ2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithMaxSeed_NUIV3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = Integer.MAX_VALUE;
        long[] expected = new long[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithMinSeed_cFJs4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = Integer.MIN_VALUE;
        long[] expected = new long[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_BsGY5() {
        byte[] data = new byte[]{};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{123456789, 987654321};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_oZiH0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroSeed_wGok1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_cmJa2() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLength_Hffp3() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 5;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeedAndOffset_uMUQ4() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeedAndLength_dZtZ5() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 5;
        int seed = 12345;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_TcHW0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ZgdW1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 123456789;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_wacV0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        long expected = 123456789;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ELtf1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 987654321;
        long expected = 987654321;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_defaultSeed_OKuv0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        long expected = 1234567890;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyData_iwiD2() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullData_IwZm3() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_negativeOffset_JEEO4() {
        byte[] data = new byte[10];
        int offset = -1;
        int length = 10;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_negativeLength_eySZ5() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = -1;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_offsetGreaterThanDataLength_htuX6() {
        byte[] data = new byte[10];
        int offset = 11;
        int length = 10;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_lengthGreaterThanDataLength_SMVM7() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 11;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_offsetAndLengthGreaterThanDataLength_rkoH8() {
        byte[] data = new byte[10];
        int offset = 11;
        int length = 11;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_offsetAndLengthEqualToDataLength_pWqO9() {
        byte[] data = new byte[10];
        int offset = 10;
        int length = 10;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_rHuf0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_BLhb1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 987654321;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_oqwG0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ZVVv1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_JUEG0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_vsdX1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentSeed_pzhl3() {
        byte[] data = new byte[3];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        long[] expected = new long[2];
        expected[0] = 6;
        expected[1] = 0;
        long[] actual = MurmurHash3.hash128(data, 0, data.length, 123456789);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_defaultSeed_Tjip0() {
        long data = 1234567890L;
        int expected = 1234567890;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_customSeed_hluU1() {
        long data = 1234567890L;
        int seed = 42;
        int expected = 1234567890;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeData_SzMU2() {
        long data = -1234567890L;
        int expected = -1234567890;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zeroData_MRXM3() {
        long data = 0L;
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_maxData_zbyJ4() {
        long data = Long.MAX_VALUE;
        int expected = Integer.MAX_VALUE;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_minData_rQeH5() {
        long data = Long.MIN_VALUE;
        int expected = Integer.MIN_VALUE;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_mueA2() {
        int seed = 123456789;
        long data = Long.MAX_VALUE;
        int expectedHash = 2147483647;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinData_nXem3() {
        int seed = 123456789;
        long data = Long.MIN_VALUE;
        int expectedHash = -2147483648;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_SdzN4() {
        int seed = 123456789;
        long data = 0L;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeed_Psrb8() {
        int seed = Integer.MAX_VALUE;
        long data = 1234567890L;
        int expectedHash = 2147483647;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinSeed_TMzy9() {
        int seed = Integer.MIN_VALUE;
        long data = 1234567890L;
        int expectedHash = -2147483648;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_QAMr0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_tXOE1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 98765;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_ySCa0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_fwlo0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 123456789;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_nwlB1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 1;
        int length = 9;
        int seed = 987654321;
        int expectedHash = 987654321;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_GEcT0() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithSeed_NEak1() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, data.length, 1234);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffset_aHyF2() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 5, data.length, 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_FeaV3() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, 5, 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithSeedAndOffset_LjPt4() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 5, data.length, 1234);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithSeedAndLength_PMgC5() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, 5, 1234);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithOffsetAndLength_bdmw6() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 5, 5, 0);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNullString_PKpg2() {
        String data = null;
        byte[] bytes = null;
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(bytes, 0, bytes.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Qjpd0() {
        int seed = 123456789;
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LFxc0() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed = 123456789;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_pfjp1() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data1, data2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_DOGl2_1() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_DOGl2_2() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeed_yOrJ2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length;
        int seed = 12345;
        int expected = 54321;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithInvalidSeed_wCnu3_wQBx0_2() {
        String data = "Hello, World!";
        byte[] bytes = data.getBytes();
        long[] hash = MurmurHash3.hash128(bytes, 0, bytes.length, -1);
        assertEquals(0x6c6c656e6c696e65L, hash[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithInvalidSeed_wCnu3_wQBx0_3() {
        String data = "Hello, World!";
        byte[] bytes = data.getBytes();
        long[] hash = MurmurHash3.hash128(bytes, 0, bytes.length, -1);
        assertEquals(0x6c6c656e6c696e65L, hash[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyString_GTxs1_Jlrt0() {
        String data = "";
        byte[] bytes = data.getBytes();
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(bytes, 0, bytes.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithInvalidSeed_evqj3_Rood0() {
        String data = "Hello, World!";
        byte[] bytes = data.getBytes();
        int seed = -1;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(bytes, 0, bytes.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithInvalidOffset_vdKO5_hxff0() {
        String data = "Hello, World!";
        byte[] bytes = data.getBytes();
        int seed = 123456789;
        int expectedHash = 0;
        int actualHash = MurmurHash3.hash32(bytes, -1, bytes.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentDataAndSeedAndLength_OEsx5_UTDo0_1() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int length1 = 10;
        int length2 = 20;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, length1, seed1);
        int actual2 = MurmurHash3.hash32(data2, length2, seed2);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentDataAndSeedAndLength_OEsx5_UTDo0_2() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int length1 = 10;
        int length2 = 20;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, length1, seed1);
        int actual2 = MurmurHash3.hash32(data2, length2, seed2);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeLength_mxcb4_jrli0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = -1;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lengthGreaterThanDataLength_ftxW6_yRTt0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length + 1;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lengthLessThanDataLength_prSN7_uSHE0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length - 1;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_sCiF0_fid1() {
        byte[] data = new byte[10];
        int seed = 539065883;
        int expected = 539065883;
        int actual = MurmurHash3.hash32x86(data, 539065883, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNonZeroSeed_RWNc1_fid1() {
        byte[] data = new byte[10];
        int seed = -1914425780;
        int expected = -1914425780;
        int actual = MurmurHash3.hash32x86(data, 0, data.length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentLength_cRHG2_fid1() {
        byte[] data = new byte[10];
        int seed = -111685489;
        int expected = -111685489;
        int actual = MurmurHash3.hash32x86(data, -111685489, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentSeedAndLength_nycy4_fid1() {
        byte[] data = new byte[10];
        int seed = -1778566701;
        int expected = -1778566701;
        int actual = MurmurHash3.hash32x86(data, 0, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithDifferentSeedAndLengthAndOffset_ueHg6_fid1() {
        byte[] data = new byte[10];
        int seed = -1778566701;
        int expected = -1778566701;
        int actual = MurmurHash3.hash32x86(data, 1, data.length - 1, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_vNHi0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 120583055;
        int expectedHash = 120583055;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeed_uyir1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = -296684047;
        int expectedHash = -296684047;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentData_fGWQ2_fid1() {
        byte[] data = new byte[]{11, 22, 33, 44, 55, 66, 77, 88, 99, 100};
        int seed = 250731936;
        int expectedHash = 250731936;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentLength_tvCM3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = -1165194731;
        int expectedHash = -1165194731;
        int actualHash = MurmurHash3.hash32(data, 0, data.length - 1, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNegativeSeed_OcED5_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = -969483896;
        int expectedHash = -969483896;
        int actualHash = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroSeed_UNEL6_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int seed = 1305033930;
        int expectedHash = 1305033930;
        int actualHash = MurmurHash3.hash32(data, 1305033930, data.length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_negativeOffset_JEEO4_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_rHuf0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 120583055;
        int expectedHash = 120583055;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_BLhb1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = -2002180350;
        int expectedHash = -2002180350;
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_defaultSeed_Tjip0_fid1() {
        long data = 885956927L;
        int expected = 885956927;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_customSeed_hluU1_fid1() {
        long data = -1477327144L;
        int seed = 42;
        int expected = -1477327144;
        int actual = MurmurHash3.hash32(data, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_negativeData_SzMU2_fid1() {
        long data = 84320125L;
        int expected = 84320125;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zeroData_MRXM3_fid1() {
        long data = 1754797035L;
        int expected = 1754797035;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_SdzN4_fid1() {
        int seed = 123456789;
        long data = -1402413366L;
        int expectedHash = -1402413366;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_fwlo0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 120583055;
        int expectedHash = 120583055;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_nwlB1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 1;
        int length = 9;
        int seed = 1933159310;
        int expectedHash = 1933159310;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithSeed_NEak1_fid1() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 6139977971704598659L;
        expected[1] = 1311768467294899695L;
        long[] actual = MurmurHash3.hash128x64(data, 0, data.length, 1234);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Qjpd0_fid1() {
        int seed = -555686387;
        long data1 = -5556863870L;
        long data2 = 9876543210L;
        int expectedHash = -555686387;
        int actualHash = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LFxc0_fid1() {
        long data1 = -5556863870L;
        long data2 = 9876543210L;
        int seed = -555686387;
        int expected = -555686387;
        int actual = MurmurHash3.hash32(data1, data2, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDefaultSeed_pfjp1_fid1() {
        long data1 = -11012336590L;
        long data2 = 9876543210L;
        int expected = -1101233659;
        int actual = MurmurHash3.hash32(data1, data2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_DOGl2_1_fid1() {
        long data1 = -5556863870L;
        long data2 = 9876543210L;
        int seed1 = -555686387;
        int seed2 = 987654321;
        int expected1 = -555686387;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_DOGl2_2_fid1() {
        long data1 = 1234567890L;
        long data2 = -12960268110L;
        int seed1 = 123456789;
        int seed2 = -1296026811;
        int expected1 = 123456789;
        int expected2 = -1296026811;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentSeeds_DOGl2() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
        assertEquals(expected1, actual1);
        assertEquals(expected2, actual2);
    }
}