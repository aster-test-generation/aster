/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Passing {
    private Caverphone caverphone;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_SameStrings_DMOc0() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello";
        String str2 = "hello";
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentStrings_wAFN1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello";
        String str2 = "world";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_EmptyStrings_WyEs3() {
        Caverphone caverphone = new Caverphone();
        String str1 = "";
        String str2 = "";
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentLengthStrings_dFko4() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello";
        String str2 = "hello world";
        assertFalse(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentCases_pasa5() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Hello";
        String str2 = "hello";
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_xEkO1() {
        Caverphone caverphone = new Caverphone();
        Object input = new Object();
        try {
            caverphone.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Integer_jVFi2() {
        Caverphone caverphone = new Caverphone();
        Integer input = 123;
        try {
            caverphone.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_cepW0() {
        caverphone = new Caverphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_NullStrings_PPwT2_fid2() {
        Caverphone caverphone = new Caverphone();
        String str1 = null;
        String str2 = null;
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharacters_sYOW6_fid2() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello!";
        String str2 = "hello";
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentNumbers_JRmW7_fid2() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello1";
        String str2 = "hello2";
        assertTrue(caverphone.isCaverphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharactersAndNumbers_ybrX8_fid2() {
        Caverphone caverphone = new Caverphone();
        String str1 = "hello!1";
        String str2 = "hello2";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_DifferentSpecialCharactersAndNumbersAndCases_qUjd9_fid2() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Hello!1";
        String str2 = "hello2";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_nullString_GAtG1_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone(null);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_multipleCharacters_Pzuq3_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("APK1111111");
        assertEquals("APK1111111", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_specialCharacters_tfRk4_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("1111111111");
        assertEquals("1111111111", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_tabCharacter_YJXJ8_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\t");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_bellCharacter_Ulgw12_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_escapeCharacter_dGDu14_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\u001B");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_deleteCharacter_piTD15_fid2() {
        Caverphone caverphone = new Caverphone();
        String result = caverphone.caverphone("\u007F");
        assertEquals("1111111111", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_qino0_fid2() {
        Caverphone caverphone = new Caverphone();
        String input = "hello";
        Object output = caverphone.encode(input);
        assertEquals("ALA1111111", output);
    }
}