/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_jVwe0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Object obj = null;
        Object result = qCodec.decode(obj);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_iekb2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        Integer obj = 1;
        try {
            qCodec.decode(obj);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidString_tvzG3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "invalid";
        try {
            qCodec.decode(str);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_MLnx0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_YUit2() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        Integer input = 123;
        try {
            qCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullWithCharset_eUUQ3() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        Object result = qCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_null_RYMy0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] actual = qCodec.doEncoding(bytes);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_nullInput_eJtp0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = null;
        byte[] expectedOutput = null;
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_noUnderscores_DflQ1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_underscoreAtBeginning_kZHz3_QesW0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] input = new byte[]{'_', 1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{' ', 1, 2, 3, 4, 5};
        byte[] actualOutput = qCodec.doDecoding(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }
}