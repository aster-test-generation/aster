/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Coverage_Test_Failing {
    private static final String SHA1_ALGORITHM = "SHA-1";
    private static final int BUFFER_SIZE = 1024;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullData_FgIA1() throws IOException, NoSuchAlgorithmException {
        InputStream data = null;
        byte[] actual = DigestUtils.sha(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_TYsi0_2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithBufferedInputStream_EOFF0() throws IOException, NoSuchAlgorithmException {
        File data = new File("data.txt");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        try (BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(data))) {
            DigestUtils.updateDigest(digest, inputStream);
        }
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithByteBuffer_sfoX2() throws IOException, NoSuchAlgorithmException {
        File data = new File("data.txt");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);
        try (FileChannel channel = new FileInputStream(data).getChannel()) {
            while (channel.read(buffer) > 0) {
                buffer.flip();
                digest.update(buffer);
                buffer.clear();
            }
        }
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_btDA0_yxKN0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_TYsi0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = DigestUtils.sha(data);
        assertNotNull(actual);
        assertArrayEquals(expected, actual);
    }
}