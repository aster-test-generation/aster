/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_qmyf0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("John");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleBranches_KFGE1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("John Doe");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSpecialRule_KiDC2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Mary-Ann");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NClg0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "John Doe";
        String expected = "163000|463000";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSpecialCharacters_KHBB2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "John Doe!";
        String expected = "163000|463000";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_amDB5() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "John Doe";
        String expected = "163000|463000";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_DEoL0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "DaitchMokotoff";
        String expected = "346537";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Boolean_fcuv1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "DaitchMokotoff";
        String expected = "D300";
        String actual = soundex.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_oYSU0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.encode("John");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBranching_ZEYE1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.encode("John");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_bDCC1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = null;
        String expected = null;
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleReplacements_RhHZ3_ncSF0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "John Doe";
        String expected = "J530|J531";
        String actual = soundex.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFoldingAndBranching_AGZo6_gntd0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "John Doe";
        String expected = "163000";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }
}