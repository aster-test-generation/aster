/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone1_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_VmVU0() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cough");
        assertEquals("cou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_rLVG1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("rough");
        assertEquals("rou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_LWTE2() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("tough");
        assertEquals("tou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode7_IaBK6() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("enough");
        assertEquals("enou2f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode8_PAyO7() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("gn");
        assertEquals("2n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode9_nZsr8() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("mb");
        assertEquals("m2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode10_bwSw9() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cq");
        assertEquals("2q", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode11_eTxL10() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("ci");
        assertEquals("si", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode12_vZUs11() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("ce");
        assertEquals("se", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode13_sVwc12() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("cy");
        assertEquals("sy", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode14_wzgc13() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("tch");
        assertEquals("2ch", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode15_jaBw14() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("c");
        assertEquals("k", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode16_YqXM15() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("q");
        assertEquals("k", result);
    }
}