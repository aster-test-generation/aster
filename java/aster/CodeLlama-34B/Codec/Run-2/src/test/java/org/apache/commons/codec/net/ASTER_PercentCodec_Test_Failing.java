/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_YHKj0() throws EncoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 48, 49, 50, 51};
        PercentCodec codec = new PercentCodec();
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_lUMa0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{1, 2, 3}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = percentCodec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_kBMn3_WvFL1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67, 68};
        byte[] expected = new byte[]{65, 66, 67, 37, 50, 51, 52, 53, 54, 55, 56, 57};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_ndRr4_swyl0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{65, 66, 67, 32};
        byte[] expected = new byte[]{65, 66, 67, 43, 43, 43};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutPlusForSpace_drOj5_rDJT0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, false);
        byte[] bytes = new byte[]{65, 66, 67, 32};
        byte[] expected = new byte[]{65, 66, 67, 32, 32, 32};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encoding_tXOk3_QmTw0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithSpace_JtkI4_jRwb0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x20, 0x25, 0x32};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithSpace_JtkI4_AqQS1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x20, 0x25, 0x32};
        byte[] actual = percentCodec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithPlusForSpace_RxIQ5_UUwE0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x2B, 0x00, 0x00};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withPlusForSpace_bBXJ4_PEWQ0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{' '}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, ' '};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, '+'};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_nJVK0_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67};
        Object output = codec.decode(input);
        assertEquals(new byte[]{65, 66, 67}, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_sgvS1_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "ABC";
        Object output = codec.decode(input);
        assertEquals("ABC", output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_singleCharacter_LfAi3_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65};
        Object output = codec.decode(input);
        assertEquals(new byte[]{65}, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_singleCharacter_gLZz5_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "A";
        Object output = codec.decode(input);
        assertEquals("A", output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_singleInvalidCharacter_tBnQ7_fid1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "A%";
        try {
            codec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Invalid URL character: %", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_YHKj0_fid1() throws EncoderException {
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{37, 48, 49, 50, 51};
        PercentCodec codec = new PercentCodec();
        byte[] actual = codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_DAPx2_PwMl0() throws EncoderException {
        int input = 12345;
        String expected = "12345";
        PercentCodec codec = new PercentCodec();
        Object actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_sJlU2_leMI0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        byte[] expectedOutput = new byte[]{1, 2, 3};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncodingNeeded_lbFR3_QCLk0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput;
        try {
            actualOutput = percentCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
            actualOutput = new byte[0];
        }
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_CIrp4_pfXS0_fid1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_ndRr4_swyl0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{65, 66, 67, 32};
        byte[] expected = new byte[]{65, 66, 67, 43};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutPlusForSpace_drOj5_rDJT0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, false);
        byte[] bytes = new byte[]{65, 66, 67, 32};
        byte[] expected = new byte[]{65, 66, 67, 32};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encoding_tXOk3_QmTw0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x01, 0x02, 0x03};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithSpace_JtkI4_jRwb0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x20};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithSpace_JtkI4_AqQS1_fid1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] actual = percentCodec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_encodingWithPlusForSpace_RxIQ5_UUwE0_fid1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{0x01}, true);
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x20};
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x2B};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }
}