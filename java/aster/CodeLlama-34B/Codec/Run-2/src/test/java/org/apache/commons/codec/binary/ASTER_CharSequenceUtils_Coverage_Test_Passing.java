/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseSensitive_WgrT0() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "hello";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseInsensitive_DvYk1() {
        CharSequence cs = "hello";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "HeLlO";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_differentChars_REwR3() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "goodbye";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_ignoreCase_differentChars_fxbJ4() {
        CharSequence cs = "hello";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "GoodBye";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_substringStartIndexOutOfBounds_Bqua5() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "hello";
        int start = 6;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_substringEndIndexOutOfBounds_Faad6() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "hello";
        int start = 0;
        int length = 6;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_csStartIndexOutOfBounds_sgAU7() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 6;
        CharSequence substring = "hello";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_differentLengths_nqyn2_fid1() {
        CharSequence cs = "hello";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "hello world";
        int start = 0;
        int length = 5;
        boolean result = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertTrue(result);
    }
}