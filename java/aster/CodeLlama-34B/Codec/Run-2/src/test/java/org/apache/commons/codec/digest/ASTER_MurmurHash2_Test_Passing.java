/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleCharacter_MYty1() {
        String text = "a";
        int from = 0;
        int length = 1;
        int expected = -1563381124;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MultipleCharacters_RDfx2() {
        String text = "abc";
        int from = 0;
        int length = 3;
        int expected = 479470107;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_wbup0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 12345;
        int expected = 1902479837;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleCharacter_epmW1() {
        String text = "a";
        int from = 0;
        int length = 1;
        long expected = 97;
        long actual = MurmurHash2.hash64(text, from, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleByte_vJTe1() {
        byte[] data = new byte[]{(byte) 0x01};
        int length = 1;
        int seed = 0x9747b28c;
        int expected = 2107329057;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleCharacter_EkQz1() {
        long result = MurmurHash2.hash64("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullString_LVyY3() {
        long result = MurmurHash2.hash64(new byte[0], 0, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyString_rceV0() {
        String text = "";
        int expected = 275646681;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleCharacter_JjFq1() {
        String text = "a";
        int expected = -1563381124;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleCharacters_fOLt2() {
        String text = "abc";
        int expected = 294;
        int actual = MurmurHash2.hash32(text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyBytes_jEmu4() {
        byte[] bytes = new byte[0];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleByte_TAUu5() {
        byte[] bytes = new byte[]{(byte) 97};
        int expected = 97;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleBytes_LWzg6() {
        byte[] bytes = new byte[]{(byte) 97, (byte) 98, (byte) 99};
        int expected = 479470107;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_IrBl0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = data.length;
        int seed = 123456789;
        long expected = 7741781375570417231L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }
}