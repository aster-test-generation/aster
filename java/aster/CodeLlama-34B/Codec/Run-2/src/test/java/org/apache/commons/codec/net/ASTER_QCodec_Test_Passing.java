/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithDefaultConstructor_cXPt0() {
        QCodec qCodec = new QCodec();
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithCharsetConstructor_eDtA1() {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodingWithStringConstructor_AZby2() {
        QCodec qCodec = new QCodec("UTF-8");
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_nullInput_XEBc0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_emptyInput_hvtE1() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(new byte[0]);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_validInput_ceFP2_1() {
        QCodec qCodec = new QCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] result = qCodec.doEncoding(input);
        for (int i = 0; i < input.length; i++) {
        }
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_yBoX3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = null;
        String expected = null;
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_zWAt0() {
        QCodec qCodec = new QCodec();
        assertFalse(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_Jafz4() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        String expectedEncodedStr = null;
        String actualEncodedStr = qCodec.encode(sourceStr);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_encodeBlanks_BXcO3_wzMP0_1() {
        QCodec qCodec = new QCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] result = qCodec.doEncoding(input);
        for (int i = 0; i < input.length; i++) {
            if (input[i] == ' ') {
            } else {
            }
        }
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_nMIo0_tUQH0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksFalse_YGUI1_pDNR0() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        assertFalse(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_null_YIuY0_Gqrv0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] expected = null;
        try {
            byte[] actual = qCodec.doDecoding(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_empty_udDS1_SDHF0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        try {
            byte[] actual = qCodec.doDecoding(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("DecoderException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_noUnderscores_btvi2_bFcR0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = null;
        try {
            actual = qCodec.doDecoding(bytes);
        } catch (DecoderException e) {
            fail("DecoderException thrown: " + e.getMessage());
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_validInput_ceFP2() {
        QCodec qCodec = new QCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] result = qCodec.doEncoding(input);
        assertEquals(input.length, result.length);
        for (int i = 0; i < input.length; i++) {
            assertEquals(input[i], result[i]);
        }
    }
}