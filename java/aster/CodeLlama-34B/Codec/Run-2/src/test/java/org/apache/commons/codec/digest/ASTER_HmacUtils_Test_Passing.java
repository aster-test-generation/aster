/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    private HmacUtils hmacUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_oVfR0_1() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_oVfR0_3() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithInvalidKey_mpBK1() {
        byte[] key = new byte[0];
        try {
            HmacUtils.getHmacSha256(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithInvalidAlgorithm_Gnex6() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_MD5_OZuv0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_1_jXXS1() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_224_ujtx2() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_BNbg3() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_384_KWDP4() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_512_VAjA5() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512.toString()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_rkUS6() {
        assertFalse(HmacUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_EmptyAlgorithm_axBB8() {
        assertFalse(HmacUtils.isAvailable(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA224_CCzi2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_qPGc0() {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secret".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_1_eMTW0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expected = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_2_ygYn1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_512;
        HmacUtils hmacUtils = new HmacUtils(algorithm, key);
        byte[] expected = hmacUtils.hmac(valueToDigest);
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_jVCJ0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        File valueToDigest = new File("test.txt");
        String expectedHex = "7f424e2d0ff6bd5dec626e0102755bafec91c3510f19739a4eaec8f3bc3a01a4";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithInvalidKey_PDDz4() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "invalid_key");
        File valueToDigest = new File("test.txt");
        String expectedHex = "dcacf25f580581f36797581c8d72e35db7d7e8edf89aaf94e9cbd2c66bea21de";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_mMpG0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "01433efd5f16327ea4b31144572c67f6";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_acRt1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "57443a4c052350a44638835d64fd66822f813319";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_XOqv2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "672c5a2f5af2f4f7711551d3005ccd28e6349f12bb393a0433bceb9c";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_sbBe3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9";
        String actual = hmacUtils.hmacHex(valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_ebIc4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "a9c51fb10b12d8ff6e2447d3ce133883e727d5ad09b4eff2303462ebabeef51c1fd00e8eb190246302933ed062af0014";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_sqVP0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String expected = "05e7be9b69af4228bf184965ba4d9cca";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_lHLK1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String expected = "db0cf14221234108d75aa9a10ff7f459d934fb75";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_vpcW2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String expected = "613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_CjgG3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String expected = "19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_dmXa4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String expected = "06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha512_zELl5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String expected = "1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = -49, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMD5_jGjX0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA256_ClnL3() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA512_ZAkv5() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
    }

    @Test
    @Timeout(value = -11, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_MD5_uhPE0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_SHA_1_WsSH1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_SHA_256_fkwi3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullKey_fsRA3() {
        String key = null;
        String valueToDigest = "testValue";
        try {
            HmacUtils.hmacSha384(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = -90, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyValueToDigest_zxpk6() {
        String key = "testKey";
        String valueToDigest = "";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + -90);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_IgOV0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "f55c81fdd2c39f054f7a57bba026dce3";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentInput_Wmal1() {
        String key = "my_key";
        String valueToDigest = "my_different_value";
        String expectedResult = "3accda61790b9a84af16f4f99eda0940";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentKey_fFEX2() {
        String key = "my_different_key";
        String valueToDigest = "my_value";
        String expectedResult = "6eeb737f4d5a4f4ce834f0cf68dd5542";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentInputAndKey_HdNb3() {
        String key = "my_different_key";
        String valueToDigest = "my_different_value";
        String expectedResult = "54731776f4254565343243243243243243";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_Jsig0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        String expectedResult = "6a242311f8ad264ee65b591ee566ac7ec5e76c48b814afc92b7fb2f0c2c0b1718bb1aa118ac22adc8a0eb2cdf2ebbf55";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithInvalidKey_jgdr1() {
        byte[] key = new byte[0];
        try {
            HmacUtils.getHmacSha512(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_BsXq0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "0f87de311eecfc56ac4351a0ac3ae5e10420ee47";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithInvalidKey_cMvA1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced763689add9e0943";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_eTxt0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "51e4c2e5ecc1dcc6b34b900d13e8b538";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_tMpr0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        String expectedHmac = "193ded80371929b67fbe44cf7dcb0effcc2fec1d";
        String actualHmac = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHmac, actualHmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_Mkwp0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};
        String expectedResult = "e76b9e0fe4021d62ea97745ef43c654dc14698aa799acb9ccc3e7f2a2b41a19e";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_hkQa0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "927234083b9c4d1a105e5aedacfca65bc35c50334e516aa09771ad06fe05bcdd775cbcf41864d6be081200869b1656860e71ae92124e101d5f8aff8e361f3c3e";
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullKey_uwOt1() {
        String key = null;
        String valueToDigest = "my_value";
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyKey_HHrA3() {
        String key = "";
        String valueToDigest = "my_value";
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_zkpW0_1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expectedResult = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = -11, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_sDTX0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithInvalidKey_EAbi3() {
        byte[] key = new byte[16];
        key[0] = (byte) 0xFF;
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0_2() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0_3() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_2() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_Jcbg0_EfKd0() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expected = "51e4c2e5ecc1dcc6b34b900d13e8b538";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_vklV0_Xnjh0() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expectedResult = "68934a53904332807e552b850681458e2f46ddb797ec225b07a149934a53904332807e552b850681458e2f46ddb797ec225b07a149934a53904332807e552b850681458e2f46ddb797ec225b07a1499";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithm_ooFC2_vFSb0() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "secret".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("hello world".getBytes());
        String expected = "6d32239b01dd1750557211629313d95e4f4fcb8ee517e443990ac1afc7562bfd74ffa6118387efd9e168ff86d1da5cef4a55edc63cc4ba289c4c3a8b4f7bdfc2";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKey_WrVa3_Bgpk0() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "different secret".getBytes());
        byte[] valueToDigest = "hello world".getBytes();
        String expected = "97c5ed46e0fab1ef662953765d1414f69ec3acacaf3f52c7b551e2b4a99af55a";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_Luvy0_NQHq0() throws NoSuchAlgorithmException, InvalidKeyException, IOException {
        byte[] key = "mysecretkey".getBytes();
        byte[] valueToDigest = "myvalue".getBytes();
        byte[] expectedHmac = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmac(valueToDigest);
        byte[] actualHmac = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedHmac, actualHmac);
    }
}