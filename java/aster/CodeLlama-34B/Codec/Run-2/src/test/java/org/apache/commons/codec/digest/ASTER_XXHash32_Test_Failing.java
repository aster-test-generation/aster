/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XXHash32_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_InvalidOffset_dEYZ4() {
        XXHash32 hash = new XXHash32();
        byte[] buffer = new byte[10];
        try {
            hash.update(buffer, -1, 10);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_InvalidLength_AExE5() {
        XXHash32 hash = new XXHash32();
        byte[] buffer = new byte[10];
        try {
            hash.update(buffer, 0, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_InvalidArguments_dSBq5() {
        XXHash32 hash = new XXHash32();
        byte[] buffer = new byte[1000];
        try {
            hash.update(buffer, -1, 1000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
        try {
            hash.update(buffer, 0, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithStateUpdated_aFGI0_PskX0() {
        XXHash32 xxHash32 = new XXHash32(1234);
        long hash = xxHash32.getValue();
        assertEquals(1234L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithStateNotUpdated_xJwJ1_kiPF0() {
        XXHash32 xxHash32 = new XXHash32();
        long hash = xxHash32.getValue();
        assertEquals(0L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_InvalidOffset_dEYZ4_fid2() {
        XXHash32 hash = new XXHash32();
        byte[] buffer = new byte[10];
        try {
            hash.update(buffer, 0, 10);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_InvalidArguments_dSBq5_fid2() {
        XXHash32 hash = new XXHash32();
        byte[] buffer = new byte[1000];
        try {
            hash.update(buffer, 0, 1000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
        try {
            hash.update(buffer, 0, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
}