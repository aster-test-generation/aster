/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_lyZp0() throws org.apache.commons.codec.EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        try {
            doubleMetaphone.encode(new Object());
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_YGVj1() throws org.apache.commons.codec.EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "hello";
        String expectedOutput = "HL";
        String actualOutput = (String) doubleMetaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH0_SySE0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CHORE";
        boolean alternate = false;
        String expected = "XR";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_WsKJ1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CH";
        boolean alternate = false;
        String expected = "K";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH2_buBr2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CHAE";
        boolean alternate = false;
        String expected = "X";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH3_rhNn3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CHOR";
        boolean alternate = false;
        String expected = "KR";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH4_VtBe4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CHYM";
        boolean alternate = false;
        String expected = "KM";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_irfi3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "M";
        boolean alternate = true;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithWITZ_DdFw1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("WITZ", true);
        assertEquals("FTS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_1_noCm0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "VAN ";
        boolean alternate = false;
        String expected = "FN";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_2_dvfo1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "SCH";
        boolean alternate = false;
        String expected = "X";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_3_BlVG2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "ORCHES";
        boolean alternate = false;
        String expected = "ARKS";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_4_LXhk3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "T";
        boolean alternate = false;
        String expected = "T";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_5_lGCY4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expected = "A";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_6_MJUk5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "O";
        boolean alternate = false;
        String expected = "A";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_7_bflt6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "U";
        boolean alternate = false;
        String expected = "A";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCH1_8_xXsG7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "E";
        boolean alternate = false;
        String expected = "A";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_GYHLT2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", true);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_aGVB3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testT1_DFli0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "TION";
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("XN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testT2_HmmS1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "TIA";
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testT3_XRHh2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "TCH";
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVAN_lciG3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "VAN";
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("FN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVON_xozl4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "VON";
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("FN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_seDl2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "PH";
        boolean alternate = false;
        String expectedResult = "F";
        String actualResult = dm.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_Alternate_cYnR3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "PH";
        boolean alternate = true;
        String expectedResult = "F";
        String actualResult = dm.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_Multiple_CWuR4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "PH P";
        boolean alternate = false;
        String expectedResult = "FP";
        String actualResult = dm.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_Multiple_Alternate_dkTf5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "PH P";
        boolean alternate = true;
        String expectedResult = "FP";
        String actualResult = dm.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_appendK_bxiE1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_appendS_fdWt3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CZ";
        boolean alternate = false;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_appendS_xuGQ4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CIA";
        boolean alternate = false;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_handleCC_FkKY5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CC";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_appendK_UFHc7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CK";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Michael_jZfI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Michael";
        boolean alternate = false;
        String expected = "MKL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_EEQh1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "K";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_S_SNez2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "S";
        boolean alternate = false;
        String expected = "S";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Mc_IJFj3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Mc";
        boolean alternate = false;
        String expected = "MK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CH_ypKx4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CH";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CHAE_GKdA5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "CHAE";
        boolean alternate = false;
        String expected = "X";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_SCPf0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Michael";
        String expected = "MKL";
        String actual = dm.doubleMetaphone(input, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_wUlU1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "McMichael";
        String expected = "MKMK";
        String actual = dm.doubleMetaphone(input, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone3_BzTB2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "McMichael";
        String expected = "MKMX";
        String actual = dm.doubleMetaphone(input, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone4_EmWh3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Chae";
        String expected = "X";
        String actual = dm.doubleMetaphone(input, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone5_YVLN4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Chae";
        String expected = "X";
        String actual = dm.doubleMetaphone(input, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone6_uMCl5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Ch";
        String expected = "K";
        String actual = dm.doubleMetaphone(input, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone7_dByw6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Ch";
        String expected = "K";
        String actual = dm.doubleMetaphone(input, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_RBMz6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "DGE";
        boolean alternate = true;
        String expected = "J";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone2_ndiI7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "DT";
        boolean alternate = true;
        String expected = "T";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone3_avIq8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "DD";
        boolean alternate = true;
        String expected = "T";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone4_IVTv9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "D";
        boolean alternate = true;
        String expected = "T";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG10_qegH9() {
        DoubleMetaphone dm = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_nTXO0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithLL_jqAD1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "LL";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL0_QBta2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L0";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL1_NMkY3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L1";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL2_lmvF4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L2";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL3_OQGz5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L3";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL4_ejre6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L4";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL5_bOwv7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L5";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL6_BqJF8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L6";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL7_cnmq9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L7";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL8_VLZa10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "L8";
        boolean alternate = false;
        String expected = "L";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC1_jGxk0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schlesinger";
        boolean alternate = false;
        String expected = "XLSN";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC2_NbXE1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schneider";
        boolean alternate = false;
        String expected = "XNTR";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC3_mPCD2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "School";
        boolean alternate = false;
        String expected = "SKL";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC4_YFwY3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schooner";
        boolean alternate = false;
        String expected = "SKNR";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC5_JdkO4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schermerhorn";
        boolean alternate = false;
        String expected = "XRMR";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC6_JwqF5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schwarz";
        boolean alternate = false;
        String expected = "XRS";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC7_xLFz6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sch";
        boolean alternate = false;
        String expected = "X";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC8_WBVo7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Scz";
        boolean alternate = false;
        String expected = "SK";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC9_OdpH8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sc";
        boolean alternate = false;
        String expected = "SK";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC10_nbQv9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "S";
        boolean alternate = false;
        String expected = "S";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC11_cHdB10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sch";
        boolean alternate = true;
        String expected = "S";
        String actual = dm.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC12_cscU11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Scz";
        boolean alternate = true;
        String expected = "SK";
        String actual = dm.doubleMetaphone(value, alternate);
    }
}