/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_null_CXCX0() {
        Soundex soundex = new Soundex();
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_emptyString_hWJs1() {
        Soundex soundex = new Soundex();
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDifferentDifferentDifferentDifferentCases_YcuV18() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_default_WPcn0() {
        Soundex soundex = new Soundex();
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_mapping_Jzje2() {
        Soundex soundex = new Soundex(new char[]{'H', 'W'});
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_EmptyStrings_EGEx0() throws EncoderException {
        Soundex soundex = new Soundex();
        assertEquals(0, soundex.difference("", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_rZgk0() throws EncoderException {
        Soundex soundex = new Soundex();
        String input = "Hello";
        String expectedOutput = "H400";
        String actualOutput = soundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_default_hmWa0() {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(10);
        assertEquals(10, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_mapping_wDSW2() {
        Soundex soundex = new Soundex(new char[]{'H', 'W'});
        soundex.setMaxLength(10);
        assertEquals(10, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bdDi0() {
        Soundex soundex = new Soundex();
        String result = soundex.encode("Hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bICt1_15() {
        Soundex soundex = new Soundex();
        String result = soundex.encode("Hello");
        result = soundex.encode("World");
        result = soundex.encode("Test");
        result = soundex.encode("!");
        result = soundex.encode("?");
        result = soundex.encode("abc");
        result = soundex.encode("def");
        result = soundex.encode("ghi");
        result = soundex.encode("jkl");
        result = soundex.encode("mno");
        result = soundex.encode("pqr");
        result = soundex.encode("stu");
        result = soundex.encode("vwx");
        result = soundex.encode("yz");
        result = soundex.encode("");
        result = soundex.encode(" ");
        result = soundex.encode("  ");
        result = soundex.encode("   ");
        result = soundex.encode("    ");
        result = soundex.encode("     ");
        result = soundex.encode("      ");
        result = soundex.encode("       ");
        result = soundex.encode("        ");
        result = soundex.encode("         ");
        result = soundex.encode("          ");
        result = soundex.encode("           ");
        result = soundex.encode("            ");
        result = soundex.encode("             ");
        result = soundex.encode("              ");
        result = soundex.encode("               ");
        result = soundex.encode("                ");
        result = soundex.encode("                 ");
        result = soundex.encode("                  ");
        result = soundex.encode("                   ");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_specialCaseHW_befW1_ULVd0() {
        Soundex soundex = new Soundex("HW", true);
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLength_specialCaseHW_uGxS1_BiKT0() {
        Soundex soundex = new Soundex("HW", true);
        soundex.setMaxLength(10);
        assertEquals(10, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacter_FDqK2_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("A000", soundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_NzwX3_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("A123", soundex.soundex("ABCD"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_silentMarker_ZdqN5_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("S453", soundex.soundex("SILENT"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentCases_kEhu6_fid1() {
        Soundex soundex = new Soundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_differentDifferentDifferentCases_jKjC12_fid1() {
        Soundex soundex = new Soundex();
        assertEquals("A123", soundex.soundex("AbCd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_SameStrings_RHPe1_fid1() throws EncoderException {
        Soundex soundex = new Soundex();
        assertEquals(4, soundex.difference("abc", "abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bICt1_2_fid1() {
        Soundex soundex = new Soundex();
        String result = soundex.encode("Hello");
        result = soundex.encode("World");
        result = soundex.encode("Test");
        result = soundex.encode("!");
        result = soundex.encode("?");
        result = soundex.encode("abc");
        result = soundex.encode("def");
        result = soundex.encode("ghi");
        result = soundex.encode("jkl");
        result = soundex.encode("mno");
        result = soundex.encode("pqr");
        result = soundex.encode("stu");
        result = soundex.encode("vwx");
        result = soundex.encode("yz");
        result = soundex.encode("");
        result = soundex.encode(" ");
        result = soundex.encode("  ");
        result = soundex.encode("   ");
        result = soundex.encode("    ");
        result = soundex.encode("     ");
        result = soundex.encode("      ");
        result = soundex.encode("       ");
        result = soundex.encode("        ");
        result = soundex.encode("         ");
        result = soundex.encode("          ");
        result = soundex.encode("           ");
        result = soundex.encode("            ");
        result = soundex.encode("             ");
        result = soundex.encode("              ");
        result = soundex.encode("               ");
        result = soundex.encode("                ");
        result = soundex.encode("                 ");
        result = soundex.encode("                  ");
        result = soundex.encode("                   ");
    }
}