/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_IJoS8() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNullData_NCNa9() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        int seed = 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lengthGreaterThanDataLength_differentSeed_aRZo9() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = data.length + 1;
        int seed = 12345;
        int expected = 54321;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithInvalidSeed_wCnu3_wQBx0_1() {
        String data = "Hello, World!";
        byte[] bytes = data.getBytes();
        long[] hash = MurmurHash3.hash128(bytes, 0, bytes.length, -1);
        assertEquals(2, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyData_ctRG0_TmPS0() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullData_cZVy3_HvYR0() {
        byte[] data = null;
        int length = 0;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_zeroLength_OUBo5_WOKc0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 0;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_zmwO0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_jEDp1_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 1;
        int expected = 987654321;
        int actual = MurmurHash3.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_3_mgcG2_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 2;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_4_mSEL3_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 3;
        int expected = 1293660217;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_5_Ykak4_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 4;
        int expected = -484867159;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_6_FgdI5_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 5;
        int expected = 468535686;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_7_RUht6_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 6;
        int expected = 138778016;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_8_iban7_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 7;
        int expected = 480554445;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_9_axyu8_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 8;
        int expected = -1821793107;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_10_QvHd9_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 9;
        int expected = -214463057;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_NegativeSeed_lYJg3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = -123456789;
        long[] expected = new long[]{-123456789, -987654321};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_oZiH0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonZeroSeed_wGok1_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithOffset_cmJa2_fid1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithLength_Hffp3_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 5;
        int seed = 0;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithSeedAndOffset_uMUQ4_fid1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        long[] expected = new long[]{0, 0};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_ELtf1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 987654321;
        long expected = 987654321;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyData_iwiD2_fid1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_oqwG0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_ZVVv1_fid1() {
        byte[] data = new byte[10];
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_JUEG0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        int expected = -1878065415;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_vsdX1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_differentSeed_pzhl3_fid1() {
        byte[] data = new byte[3];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        long[] expected = new long[2];
        expected[0] = 6;
        expected[1] = 0;
        long[] actual = MurmurHash3.hash128(data, 0, data.length, 123456789);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxData_mueA2_fid1() {
        int seed = 123456789;
        long data = Long.MAX_VALUE;
        int expectedHash = 2147483647;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinData_nXem3_fid1() {
        int seed = 123456789;
        long data = Long.MIN_VALUE;
        int expectedHash = -2147483648;
        int actualHash = MurmurHash3.hash32(data, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMaxSeed_Psrb8_fid1() {
        int seed = Integer.MAX_VALUE;
        long data = 1234567890L;
        int expectedHash = 596259923;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithMinSeed_TMzy9_fid1() {
        int seed = Integer.MIN_VALUE;
        long data = 1234567890L;
        int expectedHash = 630839419;
        int actualHash = MurmurHash3.hash32(data, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_QAMr0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = -1878065415;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_2_tXOE1_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 5;
        int length = 5;
        int seed = 98765;
        int expectedHash = 734140783;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_1_ySCa0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int offset = 0;
        int length = data.length;
        int seed = 12345;
        int expectedHash = 123456789;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_GEcT0_fid1() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, data.length, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64WithLength_FeaV3_fid1() {
        byte[] data = new byte[10];
        long[] expected = new long[2];
        expected[0] = 0x1234567890abcdefL;
        expected[1] = 0x1234567890abcdefL;
        long[] actual = MurmurHash3.hash128x64(data, 0, 5, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithDifferentDataAndSeed_vqvu4_2_fid1() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int seed1 = 123456789;
        int seed2 = 987654321;
        int expected1 = 123456789;
        int expected2 = 987654321;
        int actual1 = MurmurHash3.hash32(data1, data2, seed1);
        int actual2 = MurmurHash3.hash32(data1, data2, seed2);
    }
}