/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Coverage_Test_Failing {
    private DaitchMokotoffSoundex soundex;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullInput_nzff0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_mbkw1_fid1() throws org.apache.commons.codec.EncoderException {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "test";
        String expected = "T230";
        assertEquals(expected, soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNullSource_zjXz1() {
        assertNull(soundex.soundex(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptySource_tOtC2() {
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexEmptyInput_PnSd1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNonWhitespaceInput_DTLT3() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexForce_VePw4() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        assertEquals("", soundex.soundex("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_rFxO0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "DaitchMokotoff";
        String expected = "D2356";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithoutFolding_fGzN1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(false);
        String input = "DaitchMokotoff";
        String expected = "D2356";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFoldingAndBranching_CVgA2_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String input = "DaitchMokotoff";
        String expected = "D2356|D2356";
        String actual = soundex.soundex(input);
        assertEquals(expected, actual);
    }
}