/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_hCIv1() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_String_eqVW1() throws IOException {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_Null_XqAX2() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_znbE0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{
        };
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] actual = DigestUtils.sha384(data);
        assertNotNull(actual);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_UbOw1() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNull(updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_FHuS2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = null;
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NullInputStream_vHwr1() throws IOException {
        InputStream data = null;
        String expected = null;
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNullData_kPzD1() throws NoSuchAlgorithmException {
        String data = null;
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(new byte[0]);
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_EmptyInput_iquC1() {
        byte[] result = DigestUtils.md5("");
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_Nkax0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullData_frRN1() throws NoSuchAlgorithmException {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithEmptyData_jtON2() throws NoSuchAlgorithmException {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_LIgS0() throws IOException {
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        try {
            DigestUtils.digest(null, data);
        } catch (NullPointerException e) {
            assertTrue(e.getMessage().contains("messageDigest"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_cEFk0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithString_XpOH2() {
        String name = "SHA-256";
        DigestUtils digestUtils = new DigestUtils(name);
        String data = "Hello, World!";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullData_GIAE3() {
        DigestUtils digestUtils = new DigestUtils();
        String data = null;
        String expectedResult = null;
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithEmptyData_NcfP4() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "";
        String expectedResult = "";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithInvalidData_HSHu5() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = digestUtils.digestAsHex(data);
        assertNotEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullInput_ksGp0() {
        byte[] data = null;
        String expectedResult = "";
        String actualResult = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithEmptyInput_moow1() {
        byte[] data = new byte[0];
        String expectedResult = "";
        String actualResult = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithValidInput_bMtD2() {
        byte[] data = "Hello, World!".getBytes();
        String expectedResult = "2c74fd17edafd80e8447b0d46f95029f84eb9485ee2337a4866dcf1b5ad6d06d93e96f13efe8d419a14812d6d7588f4".toLowerCase();
        String actualResult = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithEmptyString_vREV1() {
        String data = "";
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNullString_sjCU2() {
        String data = null;
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_uEtG3() throws IOException {
        File file = new File("test.txt");
        MessageDigest digest = null;
        DigestUtils.updateDigest(digest, file);
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_xUWH0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNullInput_GKlS1() {
        byte[] data = null;
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithEmptyInput_LIrJ2() {
        byte[] data = new byte[]{};
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_VnNO0() {
        String data = "Hello, World!";
        String expected = "2ef7bde608ce5404e97d5f042f95f89f1c232871";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullString_DinN2() {
        String data = null;
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_Mqmc0() throws IOException {
        MessageDigest digest = null;
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        try {
            DigestUtils.updateDigest(digest, data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("digest", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Tfkj0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        assertNotNull(digest);
        assertEquals(digest.length, 32);
        byte[] expectedDigest = new byte[]{
        };
        assertArrayEquals(digest, expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_TPGV1() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        assertNotNull(digest);
        assertEquals(digest.length, 32);
        byte[] expectedDigest = new byte[]{
        };
        assertArrayEquals(digest, expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_EmptyString_fZCD0() {
        String data = "";
        String expected = "";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_NonEmptyString_JYvC1() {
        String data = "Hello, World!";
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_lnjP0() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithNullData_kfPb1() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithEmptyData_xWbU2() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithLargeData_mBrg3() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithInvalidData_zkvY4() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        data[0] = (byte) 0xFF;
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithInvalidData2_ZVYp5() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        data[0] = (byte) 0x00;
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_DefaultConstructor_seaD0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_wVBP0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyInput_qaUA2() {
        String data = "";
        byte[] expected = new byte[]{};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullInput_HNSK3() {
        String data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_bxlq0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_empty_oejz1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_nonEmpty_jxtn2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "0102030405";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_GBZz0() {
        byte[] data = new byte[0];
        assertNull(DigestUtils.digest(null, data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_egDy0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_2_jqdO1() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_TbuG0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA3_224, digest.getAlgorithm());
        assertEquals(224, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_XNDN0() {
        String data = "Hello, World!";
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullString_DPxR2() {
        String data = null;
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_ccoF0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b";
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] hash = digest.digest(data.getBytes());
        String actualHash = DigestUtils.sha3_384Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_enLI0() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_null_dDvd0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_empty_Offq1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_nonEmpty_EPhi2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "0102030405";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_DwLr0() {
        String data = "Hello, World!";
        String expected = "2650952230727990576";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_lloj1() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyData_ydTT2() {
        String data = "";
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithInvalidData_SrNk3() {
        String data = "Invalid data";
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_CTLv0() {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyString_VAjV1() {
        String data = "";
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNull_tIIG2() {
        String data = null;
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithLongString_jkjm3() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithSpecialCharacters_vhjk4() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_NullData_Oohk0() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_EmptyData_nJUZ1() {
        String data = "";
        String expected = "";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_ValidData_ecjX2() {
        String data = "Hello, World!";
        String expected = "09ca7e4eaa6e8ae9c7d2611671291848836883086dff0f9166013a60a8a12bdc";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_uRlB0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1e398f94ca8805466e278831c09384e1557ef590f9d5c6654c98099a1034e1a04251418ebd625e76b";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithEmptyData_CmFb1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullData_GvAv2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullMessageDigest_uKNJ0() {
        ByteBuffer valueToDigest = ByteBuffer.wrap("test".getBytes());
        MessageDigest messageDigest = null;
        try {
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("messageDigest", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_UwMu0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{
        };
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyInput_YBeW1() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithLargeInput_EVjq2() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[1000];
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNegativeInput_LHaz3() {
        byte[] data = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
        byte[] expected = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_rALK0() {
        byte[] data = new byte[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[48];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i % 256);
        }
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_kEyO0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullData_QHPL1() {
        byte[] data = null;
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyData_Jxme2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[32];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithLargeData_rkgz3() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[32];
        for (int i = 0; i < 1000; i++) {
            data[i] = (byte) i;
            expected[i % 32] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_IEqk0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{0x7f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x21};
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithString_RUzZ1() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{0x7f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x21};
        byte[] actual = DigestUtils.sha3_256(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithSha256_jtiy2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{0x7f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x21};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NullData_GUPs0() {
        byte[] data = null;
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_EmptyData_xZNR1() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_ValidData_kjpz2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_aFyM0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullData_OADt1() {
        byte[] data = null;
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithEmptyData_VlCF2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_sEZx0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2ef7bde608ce5404e97d5f042f38d88dec6a94aaf376eb7268e376e190582c569";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyData_wLzi1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithNullData_bfOu2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNull_HQGO2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_auZa0() {
        byte[] input = null;
        byte[] expectedOutput = null;
        assertArrayEquals(expectedOutput, DigestUtils.sha512_256(input));
        input = new byte[0];
        expectedOutput = new byte[0];
        assertArrayEquals(expectedOutput, DigestUtils.sha512_256(input));
        input = "Hello, World!".getBytes();
        expectedOutput = new byte[64];
        Arrays.fill(expectedOutput, (byte) 0xFF);
        assertArrayEquals(expectedOutput, DigestUtils.sha512_256(input));
        input = new byte[10000];
        expectedOutput = new byte[64];
        Arrays.fill(expectedOutput, (byte) 0xFF);
        assertArrayEquals(expectedOutput, DigestUtils.sha512_256(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_CkCr0() {
        byte[] data = new byte[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullData_iUNz2() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils utils = new DigestUtils(digest);
        Path data = null;
        OpenOption[] options = new OpenOption[0];
        String expected = null;
        String actual = utils.digestAsHex(data, options);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mbfl0() {
        String data = "Hello, World!";
        String expectedHash = "64ec88ca00b268e5ba1a35678a9c2564d2d129c32bccfc594769742d2b3d47c2796eb37168c75a57d3622cd515f036b10a";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ECtQ0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae".toLowerCase();
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithString_YGFZ2() {
        String name = "SHA-256";
        DigestUtils digestUtils = new DigestUtils(name);
        ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae".toLowerCase();
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_InputStream_Null_wOyY2() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        InputStream data = null;
        byte[] result = digestUtils.digest(data);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_SlsZ0() {
        String data = "Hello, World!";
        String expectedHash = "2c74fd17edafd80e8447b0d46741ee24362b6a79982b405d8f73bb24eb18d9ac1858a85b9aefa918485491135213728383346945673297561262351";
        String actualHash = DigestUtils.sha512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithNullData_cqqe1() {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithEmptyData_PNpb2() {
        String data = "";
        String expectedHash = "";
        String actualHash = DigestUtils.sha512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullMessageDigest_xcfk0() {
        byte[] valueToDigest = new byte[0];
        MessageDigest messageDigest = null;
        try {
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("messageDigest", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_NullData_zjPa0() {
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_EmptyData_inSr1() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_lfGr0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullData_ttqu1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithEmptyData_bybB2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullDigest_SFnF5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_emptyData_xOpN0() {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.digestAsHex(new byte[0]);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_nonEmptyData_XOTi1() {
        DigestUtils digestUtils = new DigestUtils();
        String result = digestUtils.digestAsHex("Hello, World!".getBytes());
        assertEquals("2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_NpHv0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNullData_TSaQ1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyData_Uyhl2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNullDigest_mZvU5() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_MNiZ0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[20];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_kHUr1() {
        byte[] data = null;
        try {
            DigestUtils.sha1(data);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
        data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
        data = new byte[5];
        for (int i = 0; i < 5; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[10];
        for (int i = 0; i < 10; i++) {
            expected[i] = (byte) (i * 2);
        }
        actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
        data = new byte[10];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[20];
        for (int i = 0; i < 20; i++) {
            expected[i] = (byte) (i * 2);
        }
        actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
        data = new byte[20];
        for (int i = 0; i < 20; i++) {
            data[i] = (byte) i;
        }
        expected = new byte[40];
        for (int i = 0; i < 40; i++) {
            expected[i] = (byte) (i * 2);
        }
        actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_vyCd0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualHash = DigestUtils.sha3_256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithNullData_RwmV1() throws NoSuchAlgorithmException {
        String data = null;
        String expectedHash = null;
        String actualHash = DigestUtils.sha3_256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexWithEmptyData_yAzK2() throws NoSuchAlgorithmException {
        String data = "";
        String expectedHash = "";
        String actualHash = DigestUtils.sha3_256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_hZhL0() {
        String data = "Hello, World!";
        String expected = "b5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df79";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_fypJ0() {
        byte[] data = new byte[10];
        String expected = "64ec88ca00b268e5ba1a35678a9c2557d30e3a9764cf9356773288ebbf5085023";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithNullData_vPjq1() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithEmptyData_qbJw2() {
        byte[] data = new byte[0];
        String expected = "";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithNonEmptyData_RenO3() {
        byte[] data = new byte[10];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        String expected = "64ec88ca00b268e5ba1a35678a9c2557d30e3a9764cf9356773288ebbf5085023";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithLargeData_ezPP4() {
        byte[] data = new byte[1000];
        for (int i = 0; i < 1000; i++) {
            data[i] = (byte) i;
        }
        String expected = "64ec88ca00b268e5ba1a35678a9c2557d30e3a9764cf9356773288ebbf5085023";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithInvalidData_emoc5() {
        byte[] data = new byte[10];
        data[0] = -1;
        data[1] = -2;
        data[2] = -3;
        data[3] = -4;
        data[4] = -5;
        data[5] = -6;
        data[6] = -7;
        data[7] = -8;
        data[8] = -9;
        data[9] = -10;
        String expected = "64ec88ca00b268e5ba1a35678a9c2557d30e3a9764cf9356773288ebbf5085023";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_mZuI0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("data.txt");
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullData_SDDQ1() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = null;
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithEmptyData_uuQC2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("");
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithInvalidData_OeEK3() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("invalid_data.txt");
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullDigest_gOIY4() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = null;
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("data.txt");
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithInvalidDigest_Unsd5() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = new File("data.txt");
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithNullDigestAndNullData_mmkN6() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = null;
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = null;
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithInvalidDigestAndNullData_DhFt7() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(digest);
        File data = null;
        String expected = "";
        String actual = digestUtils.digestAsHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_znbE0_2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{
        };
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Tfkj0_1() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Tfkj0_2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertEquals(digest.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Tfkj0_3() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertArrayEquals(digest, expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_TPGV1_3() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertArrayEquals(digest, expectedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_DefaultConstructor_seaD0_1() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_DefaultConstructor_seaD0_2() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertEquals("SHA-256", messageDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_TbuG0_3() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertEquals(224, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_auZa0_1() {
        byte[] input = null;
        byte[] expectedOutput = null;
        input = new byte[0];
        expectedOutput = new byte[0];
        input = "Hello, World!".getBytes();
        expectedOutput = new byte[64];
        Arrays.fill(expectedOutput, (byte) 0xFF);
        input = new byte[10000];
        expectedOutput = new byte[64];
        Arrays.fill(expectedOutput, (byte) 0xFF);
        assertArrayEquals(expectedOutput, DigestUtils.sha512_256(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_amAa0_vpXR0() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNonUtf8DataAndEmptyDigest_sBHR5_CAzh0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data.getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_NullInput_LHYG0_hNkV0() {
        byte[] result = DigestUtils.getSha512_256Digest().digest(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_Njjn2_APdV0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        byte[] expectedDigest = messageDigest.digest(data.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, data.length()).array());
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_fUwo3_arBL0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("empty.txt", "r");
        byte[] expectedDigest = messageDigest.digest(data.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, data.length()).array());
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithLargeData_NqOQ4_rwlO0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("large_data.txt", "r");
        byte[] expectedDigest = messageDigest.digest(data.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, data.length()).array());
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2DigestWithInvalidAlgorithm_vONP2_sBAO0() {
        MessageDigest digest = DigestUtils.getMd2Digest();
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_HZNT0_wKgX0() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512DigestWithInvalidAlgorithm_DGOX2_HxYN0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_eDTa0_qqhL0_1() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{(byte) 0xd1, (byte) 0x74, (byte) 0x8c, (byte) 0x84, (byte) 0x0a, (byte) 0x55, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        byte[] actual = DigestUtils.md2(data);
        data = null;
        expected = null;
        actual = DigestUtils.md2(data);
        data = new byte[0];
        expected = new byte[0];
        actual = DigestUtils.md2(data);
        data = new byte[1024];
        expected = new byte[1024];
        actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_eDTa0_qqhL0_2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{(byte) 0xd1, (byte) 0x74, (byte) 0x8c, (byte) 0x84, (byte) 0x0a, (byte) 0x55, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        byte[] actual = DigestUtils.md2(data);
        data = null;
        expected = null;
        actual = DigestUtils.md2(data);
        data = new byte[0];
        expected = new byte[0];
        actual = DigestUtils.md2(data);
        data = new byte[1024];
        expected = new byte[1024];
        actual = DigestUtils.md2(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_LSnV0_mZLd0() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = DigestUtils.getSha512_256Digest().digest(expected);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithInvalidData_JCoS7_cqJB0_1() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        digest.update(data);
        byte[] hash = digest.digest();
        assertEquals(64, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithInvalidData_JCoS7_cqJB0_2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        digest.update(data);
        byte[] hash = digest.digest();
        assertEquals("38b060a751ac96384cd9327eb1b1e36a21fdb71114be0743", new String(hash));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyDigest_qkOQ6_gtwE0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexEmptyString_xkuk1_sJnM0() throws IOException {
        byte[] data = "".getBytes();
        String expected = "";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWhitespaceString_Plgd2_ubuR0() throws IOException {
        byte[] data = "   ".getBytes();
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_ZYAF0_qvCY0_1() {
        byte[] data = StringUtils.getBytesUtf8("Hello, World!");
        byte[] expected = new byte[]{
        };
        data = new byte[10000];
        Arrays.fill(data, (byte) 0xFF);
        expected = new byte[]{
        };
        assertNull(DigestUtils.getSha512_256Digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_ZYAF0_qvCY0_2() {
        byte[] data = StringUtils.getBytesUtf8("Hello, World!");
        byte[] expected = new byte[]{
        };
        data = new byte[10000];
        Arrays.fill(data, (byte) 0xFF);
        expected = new byte[]{
        };
        assertArrayEquals(new byte[0], DigestUtils.getSha512_256Digest().digest(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_ZYAF0_qvCY0_3() {
        byte[] data = StringUtils.getBytesUtf8("Hello, World!");
        byte[] expected = new byte[]{
        };
        data = new byte[10000];
        Arrays.fill(data, (byte) 0xFF);
        expected = new byte[]{
        };
        assertArrayEquals(expected, DigestUtils.getSha512_256Digest().digest(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_PUKJ0_MHyQ0() throws IOException, NoSuchAlgorithmException {
        String expected = "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07438c925974f2cfe9c8";
        String actual = DigestUtils.sha384Hex("Hello, World!".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_FBte1() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        assertEquals(digest, DigestUtils.getSha512_256Digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_3() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_4() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_5() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_6() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_ValidData_uAlj2_biBY0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_naGv0_WWkc0() throws IOException {
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(expected);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNullData_pEaI1_KdhR0() throws NoSuchAlgorithmException {
        String data = null;
        byte[] expected = MessageDigest.getInstance("SHA-512").digest(new byte[0]);
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNonUtf8DataAndEmptyDigest_vjup5_LCuP0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("SHA-512").digest(data.getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data.getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullAlgorithm_iAEQ6_zULj0() throws IOException {
        MessageDigest messageDigest = null;
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        try {
            messageDigest = MessageDigest.getInstance(null);
            DigestUtils.digest(messageDigest, data);
        } catch (NoSuchAlgorithmException e) {
            assertTrue(e.getMessage().contains("null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_DHgy1_HdOD0() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        String data = "Hello, World!";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullFile_juPM4_DrTj0_1() throws IOException, NoSuchAlgorithmException {
        File file = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullFile_juPM4_DrTj0_2() throws IOException, NoSuchAlgorithmException {
        File file = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullInputStream_kjIi5_tbSJ0_1() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        BufferedInputStream inputStream = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, inputStream);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullInputStream_kjIi5_tbSJ0_2() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        BufferedInputStream inputStream = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, inputStream);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidData_Ihed3_MMIm0() throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        RandomAccessFile data = new RandomAccessFile("data.txt", "r");
        DigestUtils.updateDigest(digest, data);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_pgti1_CuYV0() {
        MessageDigest messageDigest = null;
        ByteBuffer valueToDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("valueToDigest", e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected NoSuchAlgorithmException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidInputs_hvna2_wObe0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            ByteBuffer valueToDigest = ByteBuffer.wrap("test".getBytes());
            MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
            assertNotNull(updatedDigest);
            assertEquals(messageDigest, updatedDigest);
            assertEquals(valueToDigest, updatedDigest.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_tlMX1_Xvvw0() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae".toLowerCase();
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_MessageDigest_Null_BjdS5_JzQH0() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils(MessageDigest.getInstance("SHA-256"));
        InputStream data = null;
        byte[] result = digestUtils.digest(data);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_SNtT1_gRGh0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Expected NullPointerException");
        }
        byte[] valueToDigest = null;
        try {
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("valueToDigest", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidInputs_fZoG2_NTHb0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] valueToDigest = "hello world".getBytes();
        MessageDigest updatedMessageDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(updatedMessageDigest);
        assertEquals(messageDigest, updatedMessageDigest);
        assertEquals(valueToDigest.length, updatedMessageDigest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_vfoV0_LpxH0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] expected = messageDigest.digest();
        byte[] actual = digestUtils.digest("Hello, World!");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithNullData_hCIv1_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_Null_XqAX2_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NullInputStream_vHwr1_fid2() throws IOException {
        InputStream data = null;
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithNullInput_ksGp0_fid2() {
        byte[] data = null;
        String expectedResult = null;
        String actualResult = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNullInput_GKlS1_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha256(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNonEmptyInput_ymzK1_fid2() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21
        };
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullInput_HNSK3_fid2() {
        String data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_bxlq0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_GBZz0_fid2() {
        byte[] data = new byte[0];
        assertNull(DigestUtils.getSha512_256Digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_1_egDy0_fid2() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{
        104, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33
        };
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithNullString_DPxR2_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_null_enLI0_fid2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_null_dDvd0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_NullData_Oohk0_fid2() {
        String data = null;
        String expected = null;
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithLargeInput_EVjq2_fid2() {
        byte[] data = new byte[1000];
        byte[] expected = new byte[64];
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNegativeInput_LHaz3_fid2() {
        byte[] data = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
        byte[] expected = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32};
        byte[] actual = DigestUtils.sha512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NullData_GUPs0_fid2() {
        byte[] data = null;
        String expected = null;
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_aFyM112() {
        byte[] data = new byte[1112];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNullData_OADt1_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithEmptyData_VlCF2_fid2() {
        byte[] data = new byte[-125];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithNull_HQGO2_fid2() {
        String data = null;
        String expected = "";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_InputStream_Null_wOyY2_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        InputStream data = null;
        byte[] result = digestUtils.digest(data);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_NullData_zjPa0_fid2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.md5(data);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_EmptyData_inSr1_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[16];
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_MNiZ0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[20];
        for (int i = 73; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i * 2);
        }
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_NullInput_LHYG0_hNkV0_fid2() {
        byte[] result = DigestUtils.getSha512_256Digest().digest(new byte[0]);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_LSnV0_mZLd0_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-3-256");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = DigestUtils.getSha3_256Digest().digest(expected);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullDigest_fqyr5_yKXf0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[28];
        for (int i = 0; i < 10; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i + 1);
        }
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 95, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyDigest_qkOQ6_gtwE0_fid2() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        for (int i = 0; i < 950; i++) {
            data[i] = (byte) i;
            expected[i] = (byte) (i + 95);
        }
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 116, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_2_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{116, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(1, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_3_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, -8, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(2, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_4_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 31, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(3, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_5_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, -31, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(4, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_6_fid2() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 103};
        byte[] result = digestUtils.digest(data);
        assertEquals(5, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullFile_juPM4_DrTj0_1_fid2() throws IOException, NoSuchAlgorithmException {
        File file = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullFile_juPM4_DrTj0_2_fid2() throws IOException, NoSuchAlgorithmException {
        File file = null;
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertEquals(0, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidInputs_hvna2_wObe0_fid2() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            ByteBuffer valueToDigest = ByteBuffer.wrap("test".getBytes());
            MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
            assertNotNull(updatedDigest);
            assertEquals(messageDigest, updatedDigest);
            assertArrayEquals(valueToDigest.array(), updatedDigest.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
}