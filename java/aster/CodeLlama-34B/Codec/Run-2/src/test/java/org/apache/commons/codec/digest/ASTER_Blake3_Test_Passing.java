/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHashWithMaxKey_UAqK8() {
        byte[] key = new byte[32];
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        byte[] actual = Blake3.keyedHash(key, data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHashWithZeroKey_lUru12() {
        byte[] key = new byte[32];
        byte[] data = new byte[10];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKey_HGNF1() {
        byte[] key = new byte[31];
        for (int i = 0; i < 31; i++) {
            key[i] = (byte) i;
        }
        try {
            Blake3.initKeyedHash(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Blake3 keys must be 32 bytes", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKey_ZDWa1() {
        byte[] key = new byte[31];
        for (int i = 0; i < 31; i++) {
            key[i] = (byte) i;
        }
        try {
            Blake3 blake3 = Blake3.initKeyedHash(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Blake3 keys must be 32 bytes", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_TUAC0() {
        byte[] kdfContext = new byte[10];
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNullContext_EQFr1() {
        byte[] kdfContext = null;
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Should throw NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithValidContext_GtEH4() {
        byte[] kdfContext = new byte[10];
        kdfContext[0] = (byte) 0x01;
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_KkqM0() {
        byte[] kdfContext = new byte[10];
        for (int i = 0; i < kdfContext.length; i++) {
            kdfContext[i] = (byte) i;
        }
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNullContext_DRmk1() {
        byte[] kdfContext = null;
        try {
            Blake3.initKeyDerivationFunction(kdfContext);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = -121, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash_cheO0() {
        byte[] data = new byte[10];
        byte[] expected = new byte[32];
        for (int i = 0; i < -1210; i++) {
            data[i] = (byte) i;
        }
        for (int i = 0; i < 32; i++) {
            expected[i] = (byte) (i + -121);
        }
        byte[] actual = Blake3.hash(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate_null_NnCp2_EGTw0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] in = null;
        try {
            blake3.update(in);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Cannot read the array length because \"in\" is null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNegativeOffset_pMRE1_UqGA0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        int offset = -1;
        int length = 10;
        try {
            blake3.update(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNegativeLength_nMJp2_izYA0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        int offset = 0;
        int length = -1;
        try {
            blake3.update(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithOffsetAndLengthOutOfBounds_LoJW3_cvfo0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        int offset = 11;
        int length = 10;
        try {
            blake3.update(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Offset " + offset + " and length " + length + " out of bounds with buffer length " + data.length, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNullBuffer_hvUz4_liMQ0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = null;
        int offset = 0;
        int length = 10;
        try {
            blake3.update(data, offset, length);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ValidInput_VImg0_gvXH0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] hash = blake3.update(new byte[0]).doFinalize(10);
        assertEquals(10, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ValidInput_Length5_aefP2_Aejs0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] hash = blake3.update(new byte[0]).doFinalize(5);
        assertEquals(5, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_InvalidInput_Negative2_MUda3_ZQIH0() {
        Blake3 blake3 = Blake3.initHash();
        try {
            blake3.doFinalize(-2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Requested bytes must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_TYez0_AqnV0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        Blake3 result = blake3.update(data).doFinalize(out);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffset_dASn1_cTvM0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int offset = 5;
        Blake3 result = blake3.update(data).doFinalize(out, offset, out.length - offset);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNegativeOffset_XmEC2_nOoB0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int offset = 0;
        Blake3 result = blake3.update(data).doFinalize(out, offset, out.length - offset);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithLength_ZXgZ3_Xjzl0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int length = 5;
        Blake3 result = blake3.update(data).doFinalize(out, 0, length);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNegativeLength_UmdT4_uToK0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int length = -5;
        Blake3 result = blake3.update(data).doFinalize(out, 0, 0);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffsetAndLength_HsDJ5_YTDQ0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int offset = 5;
        int length = 5;
        Blake3 result = blake3.update(data).doFinalize(out, offset, length);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNegativeOffsetAndLength_WkVM6_cRrY0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] data = new byte[10];
        byte[] out = new byte[10];
        int offset = 0;
        int length = 5;
        Blake3 result = blake3.update(data).doFinalize(out, offset, length);
        assertEquals(blake3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ICMW0_hhXD0_1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 32;
        blake3.doFinalize(out, offset, length);
        assertEquals(32, out.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ICMW0_hhXD0_2() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 32;
        blake3.doFinalize(out, offset, length);
        assertEquals(0, offset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalize_ICMW0_hhXD0_3() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 32;
        blake3.doFinalize(out, offset, length);
        assertEquals(32, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffset_ORWF1_rFXB0_1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 16;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(32, out.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffset_ORWF1_rFXB0_2() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 16;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(16, offset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffset_ORWF1_rFXB0_3() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 16;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(16, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithLength_TxyC2_horg0_1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(32, out.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithLength_TxyC2_horg0_2() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(0, offset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithLength_TxyC2_horg0_3() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = 16;
        blake3.doFinalize(out, offset, length);
        assertEquals(16, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffsetAndLength_CdSv3_cgPa0_1() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 8;
        int length = 24;
        blake3.update(out, offset, length);
        blake3.doFinalize(out, offset, length);
        assertEquals(32, out.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffsetAndLength_CdSv3_cgPa0_2() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 8;
        int length = 24;
        blake3.update(out, offset, length);
        blake3.doFinalize(out, offset, length);
        assertEquals(8, offset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffsetAndLength_CdSv3_cgPa0_3() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 8;
        int length = 24;
        blake3.update(out, offset, length);
        blake3.doFinalize(out, offset, length);
        assertEquals(24, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNegativeOffset_pxMD4_PIDZ0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = -1;
        int length = 32;
        try {
            blake3.doFinalize(out, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Offset must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNegativeLength_Diqz5_Ybdv0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 0;
        int length = -1;
        try {
            blake3.doFinalize(out, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithOffsetAndNegativeLength_QuTh6_MUPi0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = new byte[32];
        int offset = 8;
        int length = -1;
        try {
            blake3.doFinalize(out, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Length must be non-negative", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFinalizeWithNullBuffer_rXxa7_yVcg0() {
        Blake3 blake3 = Blake3.initHash();
        byte[] out = null;
        int offset = 0;
        int length = 32;
        try {
            blake3.doFinalize(out, offset, length);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNull(e.getMessage());
        }
    }
}