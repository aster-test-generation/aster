/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType3_ghdD2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.RULES);
        assertEquals(RuleType.RULES, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Null_yCpL2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            encoder.encode(null);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_FCUs0_eSGC0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "Hello World";
        String expected = "Hello World";
        String actual = null;
        try {
            actual = encoder.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonWhitespaceOnly_Famc4_shlz0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertEquals("hello", encoder.encode("hello"));
        } catch (EncoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMixedWhitespaceAndNonWhitespace_SIqY5_lIkW0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertEquals("hello world", encoder.encode("hello world"));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_FCUs0_eSGC0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt";
        String expected = "YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt";
        String actual = null;
        try {
            actual = encoder.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonWhitespaceOnly_Famc4_shlz0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertEquals("Ylo|ilo|xilo", encoder.encode("Ylo|ilo|xilo"));
        } catch (EncoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMixedWhitespaceAndNonWhitespace_SIqY5_lIkW0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            assertEquals("YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt", encoder.encode("YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt"));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }
}