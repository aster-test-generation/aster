/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithD_KSCI0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true, 10);
        String input = "d'Artagnan";
        String expected = "(Artagnan)-(dArtagnan)";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("fr"))));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPrefix_OHRa1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true, 10);
        String input = "de la Vega";
        String expected = "(de la Vega)-(dela Vega)";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("es"))));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSephardic_GVEF2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true, 10);
        String input = "David";
        String expected = "David";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("es"))));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAshkenazi_CmAq3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "David";
        String expected = "David";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("he"))));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithGeneric_hnSt4() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true, 10);
        String input = "David";
        String expected = "David";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("en"))));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMultipleWords_aiGn7() {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true, 10);
        String input = "David Smith";
        String expected = "David-Smith";
        String actual = engine.encode(input, LanguageSet.from(new HashSet<String>(Arrays.asList("en"))));
        assertEquals(expected, actual);
    }
}