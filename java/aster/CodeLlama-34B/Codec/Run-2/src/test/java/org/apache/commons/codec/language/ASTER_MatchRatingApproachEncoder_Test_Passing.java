/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_SameLength_gqBm0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "John";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_DifferentLength_tARQ1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name1 = "John";
        String name2 = "Joh";
        int result = encoder.leftToRightThenRightToLeftProcessing(name1, name2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_GsmU0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Doe";
        String expected = "Jhn D";
        String actual = encoder.removeVowels(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowelsWithOnlyConsonants_DzeR3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "JKLMNOP";
        String expected = "JKLMNOP";
        String actual = encoder.removeVowels(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_NullInputs_bhoL0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_EmptyInputs_ZpIF1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_SingleCharacterInputs_ruRS2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("a", "b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_EqualInputs_kGlC3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abc", "abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_DifferentLengthInputs_DXpb4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_EmptyString_hDmA0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_MultipleDoubleConsonants_KKRw3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("bBCc");
        assertEquals("BC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_MixedCase_dUhW4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeDoubleConsonants("BbCc");
        assertEquals("BC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_null_Rpqs0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertNull(encoder.removeAccents(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_empty_yRSj1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("", encoder.removeAccents(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_nonAccentedWord_UNhn3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals("hello", encoder.removeAccents("hello"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_1_ZrDC0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Doe";
        String expected = "JOHNDOE";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_3_OERQ2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Doe-Smith";
        String expected = "JOHNDOESMITH";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_4_SLtR3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Jane Doe-Smith";
        String expected = "JANEDOESMITH";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating_sumLengthLessThanOrEqualTo4_CNiB0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int minRating = encoder.getMinRating(3);
        assertEquals(5, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating_sumLengthLessThanOrEqualTo7_nyur1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int minRating = encoder.getMinRating(6);
        assertEquals(4, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating_sumLengthLessThanOrEqualTo11_jxON2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int minRating = encoder.getMinRating(9);
        assertEquals(3, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating_sumLengthEqualTo12_YhLh3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int minRating = encoder.getMinRating(12);
        assertEquals(2, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMinRating_sumLengthGreaterThan12_RMGn4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int minRating = encoder.getMinRating(13);
        assertEquals(1, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_e_gMkU0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_a_HQfQ1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_o_GCVu2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_i_Zyws3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_u_RiyB4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("u"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_other_kaox5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isVowel("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_uppercase_qiuN6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isVowel("E"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_emptyString_AbRN9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isVowel(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3_ShortName_vTgw0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John";
        String expected = "John";
        String actual = encoder.getFirst3Last3(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFirst3Last3_LongName_CWxl1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Smith Johnson";
        String expected = "JohSmithJohnson";
        String actual = encoder.getFirst3Last3(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_GOQy0() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "HLWLD!";
        Object output = encoder.encode(input);
        assertEquals(output, "HLWLD!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleLines_lktM3() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\nWorld!";
        Object output = encoder.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullCharacter_JxMo4() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\0World!";
        Object output = encoder.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonPrintableCharacter_kNTu5() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello,\u0000World!";
        String output = encoder.encode(input);
        assertEquals(output, "HL LD!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_yXMu0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode(null);
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_BCFZ1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("");
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleCharacter_feHg2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("a");
        assertEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithVowels_EdzH3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("John Doe");
        assertEquals("JHND", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithDoubleConsonants_yrbs4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh Doe");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithSpecialCharacters_QGnF6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh$ Doe");
        assertEquals("JH$D", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNameWithNumbers_mIBj7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String encoded = encoder.encode("Johh1 Doe");
        assertEquals("JH1D", encoded);
    }
}