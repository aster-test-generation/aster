/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Failing {
    private HmacUtils hmacUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_oVfR0_2() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals(HmacAlgorithms.HMAC_SHA_256, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMD5_qtET0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA256_mLhr3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA512_dobz5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_LTlZ0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actualResult = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithMD5_pJss0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x067, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA1_oYMa1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA256_zpfB3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithNullKey_CVFP1() {
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        byte[] expectedResult = new byte[]{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f};
        byte[] actualResult = HmacUtils.hmacSha512(new byte[0], valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullValueToDigest_AaeU5() throws IOException {
        InputStream valueToDigest = null;
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullValueToDigest_gWpj2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        File valueToDigest = null;
        String expectedHex = null;
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithInvalidValueToDigest_wvJZ5() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        File valueToDigest = new File("invalid_file.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullHmacUtils_mLjy6() throws IOException {
        HmacUtils hmacUtils = null;
        File valueToDigest = new File("test.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA1_fcSA1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA224_LQyV2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA384_uPKl4() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_YKli0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        byte[] expectedResult = new byte[]{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f};
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_SHA_224_Jbfs2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 86, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_uWTG0() {
        String key = "testKey";
        String valueToDigest = "testValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 86);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 92, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithDifferentKey_RtfG1() {
        String key = "differentKey";
        String valueToDigest = "testValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 92);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 39, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithDifferentValueToDigest_onIu2() {
        String key = "testKey";
        String valueToDigest = "differentValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 39);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullValueToDigest_FQaf4() {
        String key = "testKey";
        String valueToDigest = null;
        try {
            HmacUtils.hmacSha384(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("valueToDigest must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyKey_zvMp5() {
        String key = "";
        String valueToDigest = "testValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 1);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_nullMac_kFkX6() {
        Mac mac = null;
        byte[] valueToDigest = "test".getBytes();
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNull(updatedMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithNullKey_DCQa2() {
        byte[] key = null;
        try {
            HmacUtils.getHmacSha512(key);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Key must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullValueToDigest_gtug2() {
        String key = "my_key";
        String valueToDigest = null;
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("valueToDigest must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyValueToDigest_UFgr4() {
        String key = "my_key";
        String valueToDigest = "";
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("valueToDigest must not be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_zkpW0_2() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expectedResult = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_zuSX0() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        byte[] expectedResult = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithNullKey_pLar1() {
        byte[] key = null;
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithEmptyKey_AWGD2() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wgJE0_1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wgJE0_2() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wgJE0_5() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = null;
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = null;
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "";
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0_1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-MD5", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_3() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SddO0_WZjc0_2() throws IOException {
        byte[] key = new byte[32];
        byte[] valueToDigest = new byte[32];
        byte[] expectedOutput = new byte[48];
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = null;
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = null;
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[0];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[0];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[1024];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[16];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[16];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[16];
        valueToDigest = new byte[16];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SddO0_WZjc0_3() throws IOException {
        byte[] key = new byte[32];
        byte[] valueToDigest = new byte[32];
        byte[] expectedOutput = new byte[48];
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SddO0_WZjc0_4() throws IOException {
        byte[] key = new byte[32];
        byte[] valueToDigest = new byte[32];
        byte[] expectedOutput = new byte[48];
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        key = new byte[32];
        valueToDigest = new byte[32];
        expectedOutput = new byte[48];
        actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testHmacHex_CoVJ1_eLAW0() throws IOException {
        byte[] valueToDigest = "hello world".getBytes();
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentValueToDigest_sUEM4_YXJP0() throws IOException {
        byte[] valueToDigest = "goodbye world".getBytes();
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullValueToDigest_AaeU5_mrFY1() throws IOException {
        byte[] valueToDigest = null;
        String expected = "750c783e8b7d129a19e095e1b1058804";
        HmacUtils hmacUtils = new HmacUtils();
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithEmptyValueToDigest_kUcn6_fUsN0() throws IOException {
        byte[] valueToDigest = new byte[0];
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullKey_QGCU7_EQZw0() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, (byte[]) null);
        byte[] valueToDigest = "hello world".getBytes();
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullKey_dlhX1_VSVW0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "test".getBytes());
        File valueToDigest = new File("test.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithMD5_tEaq0_ttIC0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expected = new byte[]{0x01, 0x067, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA256_DYHg1_nuqt0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_Oxos0_zRjZ0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expectedResult = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0xab, (byte) 0xcd, (byte) 0xef};
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_nullValueToDigest_YSWO7_ulNO0() {
        Mac mac = null;
        try {
            mac = Mac.getInstance("HmacSHA256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] valueToDigest = null;
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNotNull(updatedMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_emptyValueToDigest_OCUT8_hoBo0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = new byte[0];
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertNotNull(updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithInvalidKey_mpBK1_fid1() {
        byte[] key = new byte[0];
        try {
            HmacUtils.getHmacSha256(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Key must not be null or empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA1_Lust1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA224_QckU2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA384_gjTR4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expectedResult = "expectedResult".getBytes();
        assertArrayEquals(expectedResult, hmacUtils.hmac(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithMD5_pJss0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithSHA224_CCzi2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512WithNullKey_CVFP1_fid1() {
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        byte[] expectedResult = new byte[]{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f};
        byte[] actualResult = HmacUtils.hmacSha512(null, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_jVCJ0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        File valueToDigest = new File("test.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithInvalidKey_PDDz4_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "invalid_key");
        File valueToDigest = new File("test.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_mMpG0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_acRt1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_XOqv2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "730e109bd7a8a32b1cb9d9a09aa2325d244212a27a8702fc";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_sbBe3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_ebIc4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e9f1aab7eb1b84207999b9ef1750e3c91";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_md5_sqVP0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha1_lHLK1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha224_vpcW2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String expected = "730e109bd7a8a32b1cb9d9a09aa2325d244212a4b8d12b99d0998a1d";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha256_CjgG3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String expected = "5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha384_dmXa4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String expected = "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736821b2c0273e13e72111589b091f";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_sha512_zELl5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String expected = "e718483d0ce769644e8c2046c338ec5f279907f727b9652049d624c6ff53f8941af36c2bfe8819039e53d49304c1297";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA1_fcSA1_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSHA256_ClnL3_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac(new File("test.txt"));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_SHA_1_WsSH1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithHMAC_SHA_256_fkwi3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "my_key");
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        byte[] actual = hmacUtils.hmac("my_value");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_uWTG0_fid1() {
        String key = "testKey";
        String valueToDigest = "testValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 1);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithDifferentKey_RtfG1_fid1() {
        String key = "differentKey";
        String valueToDigest = "testValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 1);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithDifferentValueToDigest_onIu2_fid1() {
        String key = "testKey";
        String valueToDigest = "differentValue";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 1);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithNullKey_fsRA3_fid1() {
        String key = null;
        String valueToDigest = "testValue";
        try {
            HmacUtils.hmacSha384(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("key must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384WithEmptyValueToDigest_zxpk6_fid1() {
        String key = "testKey";
        String valueToDigest = "";
        byte[] expectedResult = new byte[48];
        for (int i = 0; i < 48; i++) {
            expectedResult[i] = (byte) (i + 1);
        }
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_IgOV0_fid1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentInput_Wmal1_fid1() {
        String key = "my_key";
        String valueToDigest = "my_different_value";
        String expectedResult = "37b51d194a7513e45b56f6524f2d51f2";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentKey_fFEX2_fid1() {
        String key = "my_different_key";
        String valueToDigest = "my_value";
        String expectedResult = "4c291776f4254565343243243243243243";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_differentInputAndKey_HdNb3_fid1() {
        String key = "my_different_key";
        String valueToDigest = "my_different_value";
        String expectedResult = "54731776f4254565343243243243243243";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_Jsig0_fid1() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        String expectedResult = "1234567890abcdef";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String actualResult = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithInvalidKey_jgdr1_fid1() {
        byte[] key = new byte[0];
        try {
            HmacUtils.getHmacSha512(key);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Key length must be greater than 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_BsXq0_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced763689add9e0943";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_eTxt0_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "900150983cd24fb0d6963f7d28e17f72";
        String actualResult = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_tMpr0_fid1() {
        String key = "my_secret_key";
        String valueToDigest = "my_value_to_digest";
        String expectedHmac = "6f9b9af3cd6e8b8a73c2cdced7636f27";
        String actualHmac = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHmac, actualHmac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_Mkwp0_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};
        String expectedResult = "68934a53904332807e58efa08582dd38382e19d13fad07e3838d2c30545e90200";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_hkQa0_fid1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullKey_uwOt1_fid1() {
        String key = null;
        String valueToDigest = "my_value";
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("key must not be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyKey_HHrA3_fid1() {
        String key = "";
        String valueToDigest = "my_value";
        try {
            HmacUtils.hmacSha512Hex(key, valueToDigest);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("key must not be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithNullKey_pLar1_fid1() {
        byte[] key = null;
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithEmptyKey_AWGD2_fid1() {
        byte[] key = new byte[0];
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5WithInvalidKey_EAbi3_fid1() {
        byte[] key = new byte[16];
        key[0] = (byte) 0xFF;
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wgJE0_6_fid1() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = null;
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = null;
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "";
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertNotEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0_2_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-MD5", key);
        assertEquals("HMAC-MD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0_3_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-MD5", key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_1_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-SHA-256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_2_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-SHA-256", key);
        assertEquals("HMAC-SHA-256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1_3_fid1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-SHA-256", key);
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_nYeP0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expectedResult = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] actualResult = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_nMLq0() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expectedHex = "900150983cd24fb0d6963f7d28e17f72";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithHmacAlgorithms_aXMb1() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expectedHex = "5994471abb01112afcc18159f6cc74b4";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithHmacAlgorithmsAndStringKey_JRim2() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key");
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expectedHex = "7515795ae4bb6b9b6f40f463f8a56d9d";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithHmacAlgorithmsAndByteArrayKey_NTFQ3() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expectedHex = "5715795ae4bb6b9b6f40f463f8a56d9d";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithHmacAlgorithmsAndStringKeyAndByteBufferValue_AkhO4() throws NoSuchAlgorithmException, InvalidKeyException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key");
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expectedHex = "9594471abb01112afcc18159f6cc74b4";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_Jcbg0_EfKd0_fid1() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_vklV0_Xnjh0_fid1() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        String expectedResult = "68934a53904332807e552b850681458e2f46ddb797ec225b07a149934a53904332807e552b850681458e2f46ddb797ec225b07a149934a53904332807e552b850681458e2f46ddb797ec225b07a1499";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_lxOF0_CWrZ0_fid1() throws IOException {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        String expectedResult = "6f9b9af3cd6e8b8a73c2cdced763689add7afee8";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentAlgorithm_ooFC2_vFSb0_fid1() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "secret".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("hello world".getBytes());
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithDifferentKey_WrVa3_Bgpk0_fid1() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "different secret".getBytes());
        byte[] valueToDigest = "hello world".getBytes();
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullValueToDigest_AaeU5_mrFY1_fid1() throws IOException {
        byte[] valueToDigest = null;
        String expected = "750c783e8b7d129a19e095e1b1058804";
        HmacUtils hmacUtils = new HmacUtils();
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullKey_QGCU7_EQZw0_fid1() throws IOException {
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, (byte[]) null);
        byte[] valueToDigest = "hello world".getBytes();
        String expected = "750c783e8b7d129a19e095e1b1058804";
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap(valueToDigest));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithNullKey_dlhX1_VSVW0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "".getBytes());
        File valueToDigest = new File("test.txt");
        String expectedHex = "68656c6c6f20776f726c6421";
        String actualHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithMD5_tEaq0_ttIC0_fid1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        byte[] expected = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_md5_WKPz0_bKxI0() {
        try {
            Mac mac = Mac.getInstance("HmacMD5");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha1_UhHI1_aZoT0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA1");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha224_sTDe2_DpkU0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA224");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha256_TauE3_Bhch0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha384_cgjq4_cBaA0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA384");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_sha512_oydU5_XUea0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA512");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertEquals(mac, updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_nullValueToDigest_YSWO7_ulNO0_fid1() {
        Mac mac = null;
        try {
            mac = Mac.getInstance("HmacSHA256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] valueToDigest = null;
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertNull(updatedMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_emptyValueToDigest_OCUT8_hoBo0_fid1() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = new byte[0];
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertNull(updatedMac);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_invalidAlgorithm_oPTr9_vJcS0() {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            byte[] valueToDigest = "test".getBytes();
            Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
            assertNotNull(updatedMac);
        } catch (NoSuchAlgorithmException e) {
            fail("NoSuchAlgorithmException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256_oVfR0() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
        assertEquals(HmacAlgorithms.HMAC_SHA_256, mac.getAlgorithm());
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_zkpW0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] valueToDigest = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        byte[] expectedResult = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wgJE0() {
        String key = "my_key";
        String valueToDigest = "my_value";
        String expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
        key = null;
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
        key = "my_key";
        valueToDigest = null;
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
        key = "";
        valueToDigest = "my_value";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
        key = "my_key";
        valueToDigest = "";
        expectedResult = null;
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertNotEquals(expectedResult, actualResult);
        key = "my_key";
        valueToDigest = "my_value";
        expectedResult = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54a";
        actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertNotEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithMD5_mefv0() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-MD5", key);
        assertNotNull(mac);
        assertEquals("HMAC-MD5", mac.getAlgorithm());
        assertEquals(key.length, mac.getMacLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithSHA256_WmZy1() {
        byte[] key = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        Mac mac = HmacUtils.getInitializedMac("HMAC-SHA-256", key);
        assertNotNull(mac);
        assertEquals("HMAC-SHA-256", mac.getAlgorithm());
        assertEquals(key.length, mac.getMacLength());
    }
}