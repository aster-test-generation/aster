/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ColognePhonetic_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_NullText1_TINc2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = null;
        String text2 = "Hello";
        assertNull(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_multipleCharacterInput_Qfaj3_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("123", colognePhonetic.colognePhonetic("ABC"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterInput_kXZb4_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("123", colognePhonetic.colognePhonetic("A$C"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_umlautCharacterInput_ydbl5_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("123", colognePhonetic.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterAndUmlautCharacterInput_dEuP6_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("123", colognePhonetic.colognePhonetic("A$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterAndUmlautCharacterInput2_snvX7_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("123", colognePhonetic.colognePhonetic("$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_multipleCharacterInput_iIiE3_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0123456789", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterInput_amKa4_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0123456789", colognePhonetic.colognePhonetic("ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_lowerCaseInput_kFpe6_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0123456789", colognePhonetic.colognePhonetic("abcdefghijklmnopqrstuvwxyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_mixedCaseInput_rqNn7_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0123456789", colognePhonetic.colognePhonetic("aBcDeFgHiJkLmNoPqRsTuVwXyZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_specialCharacterAtStart_vaTc10_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0123456789", colognePhonetic.colognePhonetic("!@#$%^&*()_+ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_NullText1_TINc2_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = null;
        String text2 = "Hello";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqual_DifferentCodes_uvlL7_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text1 = "Hello";
        String text2 = "Hallo";
        assertFalse(colognePhonetic.isEncodeEqual(text1, text2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_gwCJ0_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String input = "Hello World";
        String expectedOutput = "H410 W0r1d";
        String actualOutput = cp.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_singleCharacter_avVi1_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("a");
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_multipleCharacters_fcWu2_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("abc");
        assertEquals("ABC", result);
    }
}