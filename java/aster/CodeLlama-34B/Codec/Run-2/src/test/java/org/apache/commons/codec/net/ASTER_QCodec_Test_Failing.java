/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Charset_UcsI0() throws DecoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String str = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_CharsetName_ISnX1() throws DecoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String str = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Default_zMhz2() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_String_tASG0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String actualOutput = qCodec.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Charset_mZRF1() throws DecoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String input = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String actualOutput = qCodec.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_TxTF0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Charset_VBet1() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CharsetName_IlJq2() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyStringInput_XKNX4() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "";
        String expected = "";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_DifferentCharset_SeDG5() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_16);
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Charset_NpGc0() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "SGVsbG8sIHdvcmxkIQ==";
        String actual = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_TlIG1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String expected = "SGVsbG8sIHdvcmxkIQ==";
        String actual = qCodec.encode(sourceStr);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharset_QiMU1() {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanksWithCharsetName_RnoA2() {
        QCodec qCodec = new QCodec("UTF-8");
        assertTrue(qCodec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CSik0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String expectedEncodedStr = "SGVsbG8sIFdvcmxkIQ==";
        String actualEncodedStr = qCodec.encode(sourceStr);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUTF8_AXff1() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String sourceStr = "Hello, World!";
        String expectedEncodedStr = "SGVsbG8sIFdvcmxkIQ==";
        String actualEncodedStr = qCodec.encode(sourceStr);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUTF16_UBpP2() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_16);
        String sourceStr = "Hello, World!";
        String expectedEncodedStr = "SGVsbG8sIFdvcmxkIQ==";
        String actualEncodedStr = qCodec.encode(sourceStr);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_ehCV3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "";
        String expectedEncodedStr = "";
        String actualEncodedStr = qCodec.encode(sourceStr);
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBase64_FOXo5() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String expectedEncodedStr = "SGVsbG8sIFdvcmxkIQ==";
        String actualEncodedStr = qCodec.encode(sourceStr, "base64");
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithHex_XXXI6() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String expectedEncodedStr = "48656c6c6f2c20576f726c6421";
        String actualEncodedStr = qCodec.encode(sourceStr, "hex");
        assertEquals(expectedEncodedStr, actualEncodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_keGG0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "Hello, World!";
        String actual = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_PuPJ1() throws EncoderException {
        QCodec qCodec = new QCodec("ISO-8859-1");
        String sourceStr = "Hello, World!";
        String sourceCharset = "ISO-8859-1";
        String expected = "Hello, World!";
        String actual = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_kPWX2() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "Hello, World!";
        String actual = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonStringInput_FZZW6_BSkM1() throws EncoderException {
        QCodec qCodec = new QCodec();
        Integer input = 123;
        String expected = "123";
        String actual = qCodec.encode(input.toString());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_underscores_XZYL3_wCjw0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = null;
        try {
            actual = qCodec.doDecoding(bytes);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_mixed_DPPf4_vEzf0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        try {
            byte[] actual = qCodec.doDecoding(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Unexpected exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_invalidCharset_cNvf4_pkaF0() {
        QCodec qCodec = new QCodec("invalid_charset");
        byte[] input = "Hello, World!".getBytes();
        try {
            qCodec.doEncoding(input);
            fail("Expected UnsupportedCharsetException");
        } catch (UnsupportedCharsetException e) {
            assertTrue(e.getMessage().contains("invalid_charset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_TxTF0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String input = "=?UTF-8?Q?Hello, World!?=";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Charset_VBet1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(StandardCharsets.UTF_8);
        String input = "=?UTF-8?Q?Hello, World!?=";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual = qCodec.encode(input);
        assertEquals(expected, actual);
    }
}