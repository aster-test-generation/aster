/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.*;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_kdwB0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertEquals(digest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithEmptyData_CsYo2() throws NoSuchAlgorithmException {
        String data = "";
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(new byte[0]);
        byte[] actual = DigestUtils.sha1(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_QyXP0() {
        MessageDigest digest = DigestUtils.getMd2Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInvalidInputStream_PKhZ9() throws IOException {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_BVnx0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA3_512, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithEmptyString_rxQK1() {
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithString_sOKv2() throws IOException, NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_xoLG0() {
        MessageDigest digest = DigestUtils.getSha1Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_1, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_xjCK2() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        assertThrows(NullPointerException.class, () -> digestUtils.digest(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_buYx0() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest digest = DigestUtils.getDigest(algorithm);
        assertNotNull(digest);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_DOIJ0() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithEmptyString_JtWU1() {
        String data = "";
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_empty_tPuS1() {
        String data = "";
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_ehMV0() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertNotNull(digest);
        assertEquals("SHA-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_NullAlgorithm_toPo0() {
        assertFalse(DigestUtils.isAvailable(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_EmptyAlgorithm_Vjcb1() {
        assertFalse(DigestUtils.isAvailable(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidAlgorithm_okno2() {
        assertTrue(DigestUtils.isAvailable("SHA-256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_ELlK3() {
        assertFalse(DigestUtils.isAvailable("invalid-algorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_KbcD0() {
        String data = "Hello World";
        String expected = "b10a8db164e0754105b7a99be72e3fe5";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithEmptyString_JhOr1() {
        String data = "";
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_SQJM0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_224, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_KdxI0() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance(algorithm);
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidAlgorithm_fYIK1() throws NoSuchAlgorithmException {
        String algorithm = "invalid";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullAlgorithm_qYxa2() throws NoSuchAlgorithmException {
        String algorithm = null;
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigest_KwJC3() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigestAndInvalidAlgorithm_QOWX4() throws NoSuchAlgorithmException {
        String algorithm = "invalid";
        MessageDigest defaultMessageDigest = null;
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigestAndNullAlgorithm_RgBK5() throws NoSuchAlgorithmException {
        String algorithm = null;
        MessageDigest defaultMessageDigest = null;
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithInvalidData_LMIB3() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.sha384Hex(data);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_znbE0_1() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{
        };
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] actual = DigestUtils.sha384(data);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_QyXP0_1() {
        MessageDigest digest = DigestUtils.getMd2Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_QyXP0_2() {
        MessageDigest digest = DigestUtils.getMd2Digest();
        assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_BVnx0_1() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_BVnx0_2() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_512, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_TPGV1_1() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_TPGV1_2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        File file = new File("test.txt");
        byte[] digest = digestUtils.digest(file);
        byte[] expectedDigest = new byte[]{
        };
        assertEquals(digest.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_xoLG0_1() {
        MessageDigest digest = DigestUtils.getSha1Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_xoLG0_2() {
        MessageDigest digest = DigestUtils.getSha1Digest();
        assertEquals(MessageDigestAlgorithms.SHA_1, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_buYx0_1() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest digest = DigestUtils.getDigest(algorithm);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_buYx0_2() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest digest = DigestUtils.getDigest(algorithm);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_DOIJ0_1() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_DOIJ0_2() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertEquals("SHA-1", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_TbuG0_1() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_TbuG0_2() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_224, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_ehMV0_1() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_ehMV0_2() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertEquals("SHA-512", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_SQJM0_1() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_SQJM0_2() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertEquals(MessageDigestAlgorithms.SHA_512_224, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_KdxI0_1() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance(algorithm);
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_KdxI0_2() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance(algorithm);
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidAlgorithm_fYIK1_1() throws NoSuchAlgorithmException {
        String algorithm = "invalid";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithInvalidAlgorithm_fYIK1_2() throws NoSuchAlgorithmException {
        String algorithm = "invalid";
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullAlgorithm_qYxa2_1() throws NoSuchAlgorithmException {
        String algorithm = null;
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullAlgorithm_qYxa2_2() throws NoSuchAlgorithmException {
        String algorithm = null;
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigest_KwJC3_1() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithNullDefaultMessageDigest_KwJC3_2() throws NoSuchAlgorithmException {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        MessageDigest digest = DigestUtils.getDigest(algorithm, defaultMessageDigest);
        assertEquals(algorithm, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_Ckiq0_1() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_Ckiq0_2() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2DigestWithValidAlgorithm_hOmj3_RKIA0_1() {
        MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.MD2);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2DigestWithValidAlgorithm_hOmj3_RKIA0_2() {
        MessageDigest digest = DigestUtils.getDigest(MessageDigestAlgorithms.MD2);
        assertEquals(MessageDigestAlgorithms.MD2, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_String_eGMY6_XxWf0_1() throws IOException {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        byte[] result = digestUtils.digest(data);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_UhaY0_drBj0_1() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_UhaY0_drBj0_2() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        digest = DigestUtils.getSha3_256Digest();
        assertEquals(MessageDigestAlgorithms.SHA3_256, digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_LineCoverage_UMwI1_YAjz0_2() throws IOException {
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(expected);
        assertEquals(48, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithInvalidAlgorithm_OeXO5_WKYY1() throws IOException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("INVALID_ALGORITHM");
            RandomAccessFile data = new RandomAccessFile("data.txt", "r");
            DigestUtils.digest(messageDigest, data);
        } catch (NoSuchAlgorithmException e) {
            assertTrue(e instanceof NoSuchAlgorithmException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithFile_oIzz0_alOT0_1() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithFile_oIzz0_alOT0_2() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, file);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInputStream_Wohp2_NyIt0_1() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(file));
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, inputStream);
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithInputStream_Wohp2_NyIt0_2() throws IOException, NoSuchAlgorithmException {
        File file = new File("test.txt");
        BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(file));
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        DigestUtils.updateDigest(digest, inputStream);
        assertEquals(32, digest.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_WZrb0_pCoo0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = messageDigest.digest(data.array());
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithEmptyData_byEl4_EGwe0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        ByteBuffer data = ByteBuffer.wrap(new byte[0]);
        byte[] expected = messageDigest.digest(data.array());
        byte[] actual = digestUtils.digest(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_MessageDigestConstructor_MnXQ1_EIVT0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            DigestUtils digestUtils = new DigestUtils(messageDigest);
            assertSame(messageDigest, digestUtils.getMessageDigest());
        } catch (NoSuchAlgorithmException e) {
            fail("Failed to get message digest");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_pplS2_nApA0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] data = "Hello, World!".getBytes();
        byte[] expectedDigest = messageDigest.digest(data);
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_hUWD0_ovwb0() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        ByteBuffer data = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = messageDigest.digest(data.array());
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithDifferentInputDataSizes_yyQF1_miei0() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            ByteBuffer smallData = ByteBuffer.wrap("Hello, World!".getBytes());
            ByteBuffer mediumData = ByteBuffer.wrap("Hello, World! This is a longer message.".getBytes());
            ByteBuffer largeData = ByteBuffer.wrap("Hello, World! This is a much longer message that will require multiple updates to the message digest.".getBytes());
            byte[] expectedSmall = messageDigest.digest(smallData.array());
            byte[] expectedMedium = messageDigest.digest(mediumData.array());
            byte[] expectedLarge = messageDigest.digest(largeData.array());
            byte[] actualSmall = DigestUtils.digest(messageDigest, smallData);
            byte[] actualMedium = DigestUtils.digest(messageDigest, mediumData);
            byte[] actualLarge = DigestUtils.digest(messageDigest, largeData);
            assertArrayEquals(expectedSmall, actualSmall);
            assertArrayEquals(expectedMedium, actualMedium);
            assertArrayEquals(expectedLarge, actualLarge);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_QIly0_puXB0() {
        DigestUtils utils = new DigestUtils();
        MessageDigest digest = utils.getSha512_256Digest();
        assertNotNull(digest);
        assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512/256");
            utils = new DigestUtils(md);
            digest = utils.getSha512_256Digest();
            assertNotNull(digest);
            assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
            utils = new DigestUtils("SHA-512/256");
            digest = utils.getSha512_256Digest();
            assertNotNull(digest);
            assertEquals(MessageDigestAlgorithms.SHA_512_256, digest.getAlgorithm());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_String_eqVW1_fid2() throws IOException {
        String data = "Hello, World!";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha3_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_EmptyInput_iquC1_fid2() {
        byte[] result = DigestUtils.md5("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_Nkax0_fid2() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithString_XpOH2_fid2() {
        String name = "SHA-256";
        DigestUtils digestUtils = new DigestUtils(name);
        String data = "Hello, World!";
        String expectedResult = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512HexWithValidInput_bMtD2_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expectedResult = "2c74fd17edafd80e8447b0d46f95029f84eb9485ee2337a4866dcf1b5ad6d06d93e96f13efe8d419a14812d6d7588f4".toLowerCase();
        String actualResult = DigestUtils.sha3_512Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_VnNO0_fid2() {
        String data = "Hello, World!";
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_NonEmptyString_JYvC1_fid2() {
        String data = "Hello, World!";
        String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_lnjP0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithLargeData_mBrg3_fid2() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expected = "bcd9589fef72853d65a32a34d2274591c416b8b91558fb1ba96100f3";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithInvalidData_zkvY4_fid2() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        data[0] = (byte) 0xFF;
        String expected = "6244427914f80ed3657c83fdf06ea543fa3ff2a5fe1d42eb0f4f19cf";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithInvalidData2_ZVYp5_fid2() {
        byte[] data = new byte[10000];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        data[0] = (byte) 0x00;
        String expected = "bcd9589fef72853d65a32a34d2274591c416b8b91558fb1ba96100f3";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_nonEmpty_jxtn2_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "11966ab9c099f8fabefac54c08d5be2bd8c903af";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_XNDN0_fid2() {
        String data = "Hello, World!";
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_ccoF0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "aa9ad8a49f31d2ddcabbb7010a1566417cff803fef50eba239558826f872e468c5743e7f026b0a8e5b2d7a1cc465cdbe";
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] hash = digest.digest(data.getBytes());
        String actualHash = DigestUtils.sha3_384Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_nonEmpty_EPhi2_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        String expected = "e1933cb49d9b81cd8148b89f98d70070";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_DwLr0_fid2() {
        String data = "Hello, World!";
        String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithInvalidData_SrNk3_fid2() {
        String data = "Invalid data";
        String expected = null;
        String actual = DigestUtils.md2Hex(data);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_CTLv0_fid2() {
        String data = "Hello, World!";
        String expected = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithEmptyString_VAjV1_fid2() {
        String data = "";
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithLongString_jkjm3_fid2() {
        String data = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String expected = "06ae84e5d26e5537ee9b7b732fb2c091f72884b920102e5ecf3f2b13a6dd1933";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithSpecialCharacters_vhjk4_fid2() {
        String data = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_ValidData_ecjX2_fid2() {
        String data = "Hello, World!";
        String expected = "09ca7e4eaa6e8ae9c7d2611671291848836883086dff0f9166013a60a8a12bdc";
        String actual = DigestUtils.sha384Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_uRlB0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512");
        byte[] data = "Hello, World!".getBytes();
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithEmptyInput_YBeW1_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha512(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_rALK0_fid2() {
        byte[] data = new byte[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        byte[] expected = new byte[48];
        for (int i = 0; i < expected.length; i++) {
            expected[i] = (byte) (i % 256);
        }
        byte[] actual = DigestUtils.sha3_384(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_ValidData_kjpz2_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_sEZx0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] data = "Hello, World!".getBytes();
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_CkCr0_fid2() {
        byte[] data = new byte[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) i;
        }
        String expected = "900150983cd24fb0d6963f7d28e17f72";
        String actual = DigestUtils.md5Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mbfl0_fid2() {
        String data = "Hello, World!";
        String expectedHash = "38e05c33d7b067127f217d8c856e554fcff09c9320b8a5979ce2ff5d95dd27ba35d1fba50c562dfd1d6cc48bc9c5baa4390894418cc942d968f97bcb659419ed";
        String actualHash = DigestUtils.sha3_512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithString_YGFZ2_fid2() {
        String name = "SHA-256";
        DigestUtils digestUtils = new DigestUtils(name);
        ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
        String expected = "a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e".toLowerCase();
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_SlsZ0_fid2() {
        String data = "Hello, World!";
        String expectedHash = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String actualHash = DigestUtils.sha512Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullMessageDigest_xcfk0_fid2() {
        byte[] valueToDigest = new byte[0];
        MessageDigest messageDigest = null;
        try {
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_lfGr0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384HexWithNullDigest_SFnF5_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_NpHv0_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-512/256");
        byte[] data = "Hello, World!".getBytes();
        String expected = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256HexWithNullDigest_mZvU5_fid2() throws NoSuchAlgorithmException {
        MessageDigest digest = null;
        byte[] data = "Hello, World!".getBytes();
        String expected = "0686f0a605973dc1bf035d1e2b9bad1985a0bff712ddd88abd8d2593e5f99030";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_vyCd0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expectedHash = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actualHash = DigestUtils.sha3_256Hex(data);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_hZhL0_fid2() {
        String data = "Hello, World!";
        String expected = "b5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df79";
        String actual = DigestUtils.sha3_224Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_fypJ0_fid2() {
        byte[] data = new byte[10];
        String expected = "90910c1ac3595dac54cc272b8cf07cc8e28396906aaac5df45e02e27";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithNonEmptyData_RenO3_fid2() {
        byte[] data = new byte[10];
        data[0] = 1;
        data[1] = 2;
        data[2] = 3;
        data[3] = 4;
        data[4] = 5;
        data[5] = 6;
        data[6] = 7;
        data[7] = 8;
        data[8] = 9;
        data[9] = 10;
        String expected = "2e466d3766fda765352dc644e5f6bfbe823a84fce2e9bb80c601333f";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithLargeData_ezPP4_fid2() {
        byte[] data = new byte[1000];
        for (int i = 0; i < 1000; i++) {
            data[i] = (byte) i;
        }
        String expected = "449b2acbbc0d2d133fd7a11157aafd2118a253f7a91091e5d3092efa";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWithInvalidData_emoc5_fid2() {
        byte[] data = new byte[10];
        data[0] = -1;
        data[1] = -2;
        data[2] = -3;
        data[3] = -4;
        data[4] = -5;
        data[5] = -6;
        data[6] = -7;
        data[7] = -8;
        data[8] = -9;
        data[9] = -10;
        String expected = "c3c16d743fbb3c4b6a1cf1d7020f8b630694e6337a3baddf07a14c52";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_amAa0_vpXR0_fid2() throws IOException {
        byte[] data = "Hello, World!".getBytes();
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.md2Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNonUtf8DataAndEmptyDigest_sBHR5_CAzh0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data.getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2DigestWithInvalidAlgorithm_vONP2_sBAO0_fid2() {
        MessageDigest digest = DigestUtils.getMd2Digest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_HZNT0_wKgX0_fid2() {
        String data = "Hello, World!";
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.sha(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithInvalidData_JCoS7_cqJB0_1_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        digest.update(data);
        byte[] hash = digest.digest();
        assertEquals(48, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithInvalidData_JCoS7_cqJB0_2_fid2() throws NoSuchAlgorithmException, IOException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        digest.update(data);
        byte[] hash = digest.digest();
        assertEquals("T�̛3e�0]�N�7क़�t�$+�r���l ��D����J��>D���", new String(hash));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224HexWhitespaceString_Plgd2_ubuR0_fid2() throws IOException {
        byte[] data = "   ".getBytes();
        String expected = "d838e74fd7808ccb161a8b67d43049b5b331601e858efe112618ed29";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_PUKJ0_MHyQ0_fid2() throws IOException, NoSuchAlgorithmException {
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex("Hello, World!".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_ValidData_uAlj2_biBY0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{(byte) 0x2f, (byte) 0xd4, (byte) 0xe1, (byte) 0x80};
        byte[] actual = DigestUtils.md5(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_naGv0_WWkc0_fid2() throws IOException {
        byte[] expected = new byte[48];
        byte[] actual = DigestUtils.sha3_384(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNonUtf8DataAndEmptyDigest_vjup5_LCuP0_fid2() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("SHA-512").digest(data.getBytes());
        byte[] actual = DigestUtils.getSha512_256Digest().digest(data.getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_DHgy1_HdOD0_fid2() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        String data = "Hello, World!";
        String expectedResult = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actualResult = digestUtils.digestAsHex(data);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_pgti1_CuYV0_fid2() {
        MessageDigest messageDigest = null;
        ByteBuffer valueToDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNull(e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            fail("Unexpected NoSuchAlgorithmException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithMessageDigest_tlMX1_Xvvw0_fid2() {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        DigestUtils digestUtils = new DigestUtils(digest);
        ByteBuffer data = ByteBuffer.wrap("Hello World".getBytes());
        String expected = "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae".toLowerCase();
        String actual = digestUtils.digestAsHex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullValueToDigest_SNtT1_gRGh0_fid2() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Expected NullPointerException");
        }
        byte[] valueToDigest = null;
        try {
            DigestUtils.updateDigest(messageDigest, valueToDigest);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidInputs_fZoG2_NTHb0_fid2() {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] valueToDigest = "hello world".getBytes();
        MessageDigest updatedMessageDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotNull(updatedMessageDigest);
        assertEquals(messageDigest, updatedMessageDigest);
        assertEquals(32, updatedMessageDigest.getDigestLength());
    }
}