/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Failing {
    byte[] DECODE_TABLE = new byte[256];

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_2_bQTU1() {
        String base64String = "SGVsbG8gV29ybGQhIQ==";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_DefaultConstructor_EBYl0() {
        Base64 base64 = new Base64();
        byte[] lineSeparator = base64.getLineSeparator();
        assertNotNull(lineSeparator);
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_RHwi0() {
        byte[] binaryData = new byte[10];
        byte[] expected = new byte[16];
        byte[] actual = Base64.encodeBase64(binaryData, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_sBWk0() {
        BigInteger bigInteger = new BigInteger("1234567890");
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Default_qXUi0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expectedResult = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_UwGQ1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] expectedResult = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isChunkedTrue_SfIw0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isChunkedFalse_TmCv1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = false;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafeTrue_Sflu2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafeFalse_mBVr3() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_2_gQaV1() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_3_PMTI2() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_4_irgB3() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_5_Gqki4() {
        byte[] base64Data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger1_QyBh0_fid2() {
        byte[] pArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        BigInteger expected = new BigInteger("12345678910");
        BigInteger actual = Base64.decodeInteger(pArray);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String3_HTiQ2_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expected = "AQIDBAUGFwgJCgsMDQ4PENvbnRlbnRQSwMECg==";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String4_fEVW3_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        String expected = "AQIDBAUGFwgJCgsMDQ4PENvbnRlbnRQSwMECg==";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String5_EArA4_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        String expected = "AQIDBAUGFwgJCgsMDQ4PENvbnRlbnRQSwMECg==";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_DefaultConstructor_EBYl0_fid2() {
        Base64 base64 = new Base64();
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntConstructor_gndK1_fid2() {
        Base64 base64 = new Base64(10);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteArrayConstructor_jwTK2_fid2() {
        byte[] lineSeparator = new byte[]{10, 20, 30};
        Base64 base64 = new Base64(10, lineSeparator);
        assertEquals(lineSeparator, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteArrayBooleanConstructor_Gteq3_fid2() {
        byte[] lineSeparator = new byte[]{10, 20, 30};
        Base64 base64 = new Base64(10, lineSeparator, true);
        assertEquals(lineSeparator, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_BooleanConstructor_fwye4_fid2() {
        Base64 base64 = new Base64(true);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntConstructor_Negative_YJjX5_fid2() {
        Base64 base64 = new Base64(-10);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteArrayConstructor_Null_Yvef6_fid2() {
        Base64 base64 = new Base64(10, null);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteArrayBooleanConstructor_Null_ZbNg7_fid2() {
        Base64 base64 = new Base64(10, null, true);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(0, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntConstructor_NonZero_uhSa9_fid2() {
        Base64 base64 = new Base64(10);
        byte[] lineSeparator = base64.getLineSeparator();
        assertEquals(10, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_RHwi0_fid2() {
        byte[] binaryData = new byte[10];
        byte[] expected = new byte[14];
        byte[] actual = Base64.encodeBase64(binaryData, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_vVfb1_fid2() {
        byte[] binaryData = new byte[10];
        byte[] expected = new byte[14];
        byte[] actual = Base64.encodeBase64(binaryData, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Default_qXUi0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expectedResult = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64UrlSafe_ZBTx2_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = false;
        boolean urlSafe = true;
        byte[] expectedResult = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isChunkedTrue_SfIw0_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_isChunkedFalse_TmCv1_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = false;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_urlSafeTrue_Sflu2_fid2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        boolean urlSafe = true;
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyString_IVjB0() {
        String base64 = "";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NullString_ICUI1() {
        String base64 = null;
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64String_evgY3() {
        String base64 = "dGhpcyBpcyBhIHN0cmluZyB0byBiZSBlbmNvZGVkIHRoaXMgaXMgYSB0aGUgbGluZSBhbmQgYW5kIGFuZCBhZGRyZXNzIG9mIHRoZSBkZXZpY2UgY29udGVudHM";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64StringWithLineSeparator_DSFd5() {
        String base64 = "dGhpcyBpcyBhIHN0cmluZyB0byBiZSBlbmNvZGVkIHRoaXMgaXMgYSB0aGUgbGluZSBhbmQgYW5kIGFuZCBhZGRyZXNzIG9mIHRoZSBkZXZpY2UgY29udGVudHM=\n";
        assertFalse(Base64.isBase64(base64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_NonEmptyInput_GRQO1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 10;
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_ChunkedInput_YVGR2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 10;
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_UrlSafeInput_ZVZO3() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 10;
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_2_RaVJ1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_3_YDxQ2() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_4_nHjw3() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_5_PgAN4() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Default_fOBB0() {
        byte octet = 0;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_DECODE_TABLE_zVLw2() {
        byte octet = 0;
        for (int i = 0; i < DECODE_TABLE.length; i++) {
            if (DECODE_TABLE[i] != -1) {
                octet = (byte) i;
                assertTrue(Base64.isBase64(octet));
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidOctet_OZEa4() {
        byte octet = 100;
        assertFalse(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_BigInteger_aVaf0_vmCg0() {
        BigInteger bigInt = new BigInteger("1234567890");
        byte[] expected = new byte[]{(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_luRA0_wsEO0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        String expectedResult = "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eH6";
        String actualResult = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_fAfh0_UaXH0() {
        Base64 base64 = new Base64(3, new byte[]{1, 2, 3}, true, CodecPolicy.STRICT);
        byte[] in = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int inPos = 0;
        int inAvail = in.length;
        Base64.Context context = new Base64.Context();
        base64.encode(in, inPos, inAvail, context);
        assertEquals(10, context.pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_lineLength_lxVI3_pkiR0() {
        byte[] arrayOctet = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(Base64.isBase64(arrayOctet));
    }
}