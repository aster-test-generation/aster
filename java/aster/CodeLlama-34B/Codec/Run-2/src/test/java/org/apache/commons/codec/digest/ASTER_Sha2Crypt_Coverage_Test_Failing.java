/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_FjdD0() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$5$iIaoL7/O$kIeme/woA0xcQgoggDviRwsSv7CA6oYmZo/.4JgHpt5";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithDefaultSalt_ADzW4() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String expected = "$5$OR8teW.F$CI8e81uF69zWR7V7prtTRi4PT9YurDIyN3wL2Oe8Xd3";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_FjdD0_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = null;
        String expected = "$5$rounds=535000$31vudMZRwG1MZwW6$RG9u70xAo4.eIx.ZQzCmF95z3nMx.i3X/PA4VPhQ.9he";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithCustomRounds_lHOX2_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=100000$31vudMZRwG1MZwW6";
        String expected = "$5$rounds=100000$31vudMZRwG1MZwW6$RG9u70xAo4.eIx.ZQzCmF95z3nMx.i3X/PA4VPhQ.9he";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithCustomSalt_ExOQ3_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=535000$customsalt";
        String expected = "$5$rounds=535000$customsalt$RG9u70xAo4.eIx.ZQzCmF95z3nMx.i3X/PA4VPhQ.9he";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithDefaultSalt_ADzW4_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = Sha2Crypt.SHA256_PREFIX + B64.getRandomSalt(8);
        String expected = "$5$rounds=535000$31vudMZRwG1MZwW6$RG9u70xAo4.eIx.ZQzCmF95z3nMx.i3X/PA4VPhQ.9he";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
}