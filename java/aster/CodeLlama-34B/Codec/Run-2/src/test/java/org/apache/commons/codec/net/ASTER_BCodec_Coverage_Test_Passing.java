/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_Xada0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object result = bCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_VLRx2() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Integer value = 1;
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be decoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_ETyK0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Object result = bCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_gwal2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Object input = new Object();
        try {
            bCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedEncodingException_CtuZ0_fid1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_encoding");
            fail("UnsupportedEncodingException should be thrown");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidValue_tdKm3_fid1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "invalid";
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeIllegalArgumentException_ZDCM1_IosO0_fid1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.decode("invalid_argument");
            fail("IllegalArgumentException should be thrown");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }
}