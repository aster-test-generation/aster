/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Languages_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceSephardic_yCcQ2() {
        Languages languages = Languages.getInstance(NameType.SEPHARDIC);
        assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("Spanish", "Portuguese", "Hebrew", "Italian", "French")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceInvalidResourceName_jxyd4() {
        Languages languages = Languages.getInstance("invalid_resource_name");
        assertNull(languages);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithInvalidResourceName_kMJF2() {
        String resourceName = "invalid_resource.txt";
        Languages languages = Languages.getInstance(resourceName);
        assertNull(languages);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNullResourceName_uiEv4() {
        String resourceName = null;
        Languages languages = Languages.getInstance(resourceName);
        assertNotNull(languages);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceAshkenazi_RqLv0_fid1() {
        Languages languages = Languages.getInstance(NameType.ASHKENAZI);
        assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("Hebrew", "Yiddish")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceGeneric_SzwM1_fid1() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("English", "French", "Spanish")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceSephardic_yCcQ2_fid1() {
        Languages languages = Languages.getInstance(NameType.SEPHARDIC);
        assertEquals(languages.getLanguages(), new HashSet<String>(Arrays.asList("Spanish", "Portuguese", "Hebrew")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceInvalidNameType_zVLw3_fid1() {
        Languages languages = Languages.getInstance(NameType.ASHKENAZI);
        assertNull(languages);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyResourceName_ZgHy3_fid1() {
        String resourceName = "";
        Languages languages = Languages.getInstance(resourceName);
        assertNull(languages);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNullResourceName_uiEv4_fid1() {
        String resourceName = null;
        Languages languages = Languages.getInstance(resourceName);
        assertNull(languages);
    }
}