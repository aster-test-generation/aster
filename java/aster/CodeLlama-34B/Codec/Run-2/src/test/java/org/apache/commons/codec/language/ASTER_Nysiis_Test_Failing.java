/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Nysiis_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_inputWithAccentedCharacters_Uzrf9() {
        Nysiis nysiis = new Nysiis();
        assertEquals("AB", nysiis.nysiis("a\u00e9 b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strict_OlxW0() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Smith");
        assertEquals("Smyth", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonStrict_raWQ1() {
        Nysiis nysiis = new Nysiis(false);
        String result = nysiis.encode("Smith");
        assertEquals("Smyth", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString_JTEE6() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Johnson");
        assertEquals("Jonson", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString2_qyck7() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Williams");
        assertEquals("Wilsyn", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString3_drvW8() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Jones");
        assertEquals("Jons", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString4_lfst9() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Brown");
        assertEquals("Brun", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString5_iGHK10() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Davis");
        assertEquals("Dafis", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString6_ssKf11() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Garcia");
        assertEquals("Garsia", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString7_jLtS12() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Rodriguez");
        assertEquals("Rodrigu", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString8_cdWI13() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Lopez");
        assertEquals("Lops", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_differentString9_FtDm14() {
        Nysiis nysiis = new Nysiis(true);
        String result = nysiis.encode("Gonzalez");
        assertEquals("Gonsal", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrict_strictAndNotStrict_cEqf2_1_fid2() {
        Nysiis nysiis = new Nysiis(true);
        nysiis = new Nysiis(false);
        assertTrue(nysiis.isStrict());
    }
}