/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Md5Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_CEya2() {
        byte[] keyBytes = new byte[8];
        String salt = null;
        String expected = "$apr1$G5iVYCgn$aZSyUvOm7i74BdhPgZnWW/";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptySalt_nqtF4() {
        byte[] keyBytes = new byte[8];
        String salt = "";
        String expected = "apr1$salt$hash";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptySalt_hynx2() {
        String key = "password";
        String salt = "";
        String expected = "apr1$$password";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullKey_PSYM3() {
        String key = null;
        String salt = "salt";
        String expected = "apr1$salt$";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_djFm4() {
        String key = "password";
        String salt = null;
        String expected = "$apr1$PSwmI2Ra$rz6KXWr/Lsh9ELnEt3oo.0";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_tYYN0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
        String salt = "salt";
        String expectedResult = "5eb63bbbe01eeed093cb22bb8f5acdc3";
        String actualResult = Md5Crypt.md5Crypt(keyBytes, salt, Md5Crypt.MD5_PREFIX);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_xpqE0() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, secureRandom);
        assertEquals("prefix$1$salt$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_aRgL1() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, null, prefix, secureRandom);
        assertEquals("prefixBo87qpX8$o9c0QYpz5ui0q9UxloA3F1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_BEBS2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, "", secureRandom);
        assertEquals("$1$salt$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_FAmh0() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < 16; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertEquals("$1$LHTCJ58H$1E6CFcaW7wEaysT7fPGkl1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSalt_DzQo1() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < 16; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "salt";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals("$1$8000000000000000000000000000000000000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidKey_ajuT2() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < 16; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "salt";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertNotEquals("$1$8000000000000000000000000000000000000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithInvalidSalt_znsn3() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < 16; i++) {
            keyBytes[i] = (byte) i;
        }
        String salt = "invalidSalt";
        String result = Md5Crypt.md5Crypt(keyBytes, salt);
        assertNotEquals("$1$8000000000000000000000000000000000000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyRandom_oNfZ5() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        assertEquals("$apr1$WG9sg/nW$y9FmflYxkz9gqC6YNiqr8/", Md5Crypt.apr1Crypt(keyBytes, new Random()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullKey_tHOq1() {
        String key = null;
        String salt = "salt";
        String expected = null;
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptySalt_nVdr2() {
        String key = "key";
        String salt = "";
        String expected = "$apr1$";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_CEya2_fid2() {
        byte[] keyBytes = new byte[8];
        String salt = null;
        String expected = "apr1$salt$hash";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidSalt_XQHW5_fid2() {
        byte[] keyBytes = new byte[8];
        String salt = "invalid_salt";
        String expected = "apr1$salt$hash";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EDkL0_fid2() {
        String key = "password";
        String salt = "salt";
        String expected = "apr1$salt$password";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKey_srwE1_fid2() {
        String key = "";
        String salt = "salt";
        String expected = "apr1$salt$";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_djFm4_fid2() {
        String key = "password";
        String salt = null;
        String expected = "apr1$$password";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_aRgL1_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String prefix = "prefix";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, null, prefix, secureRandom);
        assertEquals("prefix$1$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullPrefix_BEBS2_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};
        String salt = "salt";
        SecureRandom secureRandom = new SecureRandom();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, null, secureRandom);
        assertEquals("$1$salt$0102030405060708090a0b0c0d0e0f10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_FAmh0_fid2() {
        byte[] keyBytes = new byte[16];
        for (int i = 0; i < 16; i++) {
            keyBytes[i] = (byte) i;
        }
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertEquals("$1$8000000000000000000000000000000000000000000000000000000000000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullKeyBytes_eLaK0_fid2() {
        assertNull(Md5Crypt.apr1Crypt(null, new Random()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithEmptyKeyBytes_Kixc1_fid2() {
        assertEquals("$apr1$", Md5Crypt.apr1Crypt(new byte[0], new Random()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidKeyBytes_obYa2_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        assertEquals("$apr1$0102030405060708", Md5Crypt.apr1Crypt(keyBytes, new Random()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidKeyBytes_jnyK3() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
        assertNull(Md5Crypt.apr1Crypt(keyBytes, new Random()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidRandom_qfDn6_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        Random random = new Random();
        random.setSeed(123456789);
        assertEquals("$apr1$0102030405060708", Md5Crypt.apr1Crypt(keyBytes, random));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithInvalidRandom_bgQy7_fid2() {
        byte[] keyBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        Random random = new Random();
        random.setSeed(123456789);
        assertNull(Md5Crypt.apr1Crypt(keyBytes, random));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptyKey_jVrv0() {
        String key = "";
        String salt = "salt";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullKey_tHOq1_fid2() {
        String key = null;
        String salt = "salt";
        String expected = null;
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_EmptySalt_nVdr2_fid2() {
        String key = "key";
        String salt = "";
        String expected = "";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_NullSalt_bcAJ3_fid2() {
        String key = "key";
        String salt = null;
        String expected = null;
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_ValidKeyAndSalt_fWZJ4_fid2() {
        String key = "key";
        String salt = "salt";
        String expected = "5f4dcc3b5aa765d61d8327deb882cf99";
        String actual = Md5Crypt.apr1Crypt(key, salt);
        assertEquals(expected, actual);
    }
}