/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Passing {
    public void testDoubleMetaphone_emptyString_sNcE0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertEquals("", result);
    }

    public void testDoubleMetaphone_nullString_iJZH1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    public void testDoubleMetaphone_singleLetter_piQl2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a", false);
        assertEquals("A", result);
    }

    public void testDoubleMetaphone_AEIOUY_TIrZ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("AEIOUY", result);
    }

    public void testDoubleMetaphone_B_vzlv4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("b", false);
        assertEquals("P", result);
    }

    public void testDoubleMetaphone_C_ecQG5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("c", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_D_Oqrz6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("d", false);
        assertEquals("T", result);
    }

    public void testDoubleMetaphone_F_EZiv7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("f", false);
        assertEquals("F", result);
    }

    public void testDoubleMetaphone_G_PUdj8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("g", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_H_QGmV9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("h", false);
        assertEquals("H", result);
    }

    public void testDoubleMetaphone_J_TjTc10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("j", false);
        assertEquals("J", result);
    }

    public void testDoubleMetaphone_K_fTel11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("k", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_L_McRK12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("l", false);
        assertEquals("L", result);
    }

    public void testDoubleMetaphone_EmptyString_CZRd0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertEquals("", result);
    }

    public void testDoubleMetaphone_NullString_bNEe1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    public void testDoubleMetaphone_SilentStart_yqRz2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("x", false);
        assertEquals("S", result);
    }

    public void testDoubleMetaphone_AEIOUY_gwEt3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
        assertEquals("A", result);
    }

    public void testDoubleMetaphone_B_yyIK4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("B", false);
        assertEquals("P", result);
    }

    public void testDoubleMetaphone_C_PDTl5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_D_cUxd6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("D", false);
        assertEquals("T", result);
    }

    public void testDoubleMetaphone_F_FFwc7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("F", false);
        assertEquals("F", result);
    }

    public void testDoubleMetaphone_G_JFvl8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("G", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_H_BgBj9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("H", false);
        assertEquals("H", result);
    }

    public void testDoubleMetaphone_J_blCk10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("J", false);
        assertEquals("J", result);
    }

    public void testDoubleMetaphone_K_ItpJ11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("K", false);
        assertEquals("K", result);
    }

    public void testDoubleMetaphone_L_smCY12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("L", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_EqualValues_RPVN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "value1";
        String value2 = "value1";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValue1_SyyK2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = null;
        String value2 = "value2";
        boolean alternate = false;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_NullValue2_foqS3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "value1";
        String value2 = null;
        boolean alternate = false;
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_BothNull_hAGX4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = null;
        String value2 = null;
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_AlternateTrue_iTUW5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "value1";
        String value2 = "value2";
        boolean alternate = true;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_ValidIndex_nbYf0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = 2;
        char expected = 'l';
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_InvalidIndex_MoCy1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = -1;
        char expected = Character.MIN_VALUE;
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_IndexEqualToLength_kQyL3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = value.length();
        char expected = Character.MIN_VALUE;
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_IndexGreaterThanLength_hEkB4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello";
        int index = value.length() + 1;
        char expected = Character.MIN_VALUE;
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_MultipleCharacters_nZdw6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello world";
        int index = 5;
        char expected = ' ';
        char actual = dm.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt_SpecialCharacters_ToXm7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "hello!@#$%^&*()_+";
        int index = 5;
        char expected = '!';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_UjiY0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "hello";
        String expectedOutput = "HL";
        String actualOutput = doubleMetaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonString_RpDU1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object input = new Object();
        try {
            doubleMetaphone.encode(input);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("DoubleMetaphone encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NullInput_EwQi0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyInput_dAud1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NonEmptyInput_JdER2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Alternate_AGpO3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_WUnu6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("aeiouy", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_LNMA7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("b", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_lJvB8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("c", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_gxtp9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("d", false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_NMuj10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("f", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_Mpey11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("g", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_LPbR13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("j", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_SmWd14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("k", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nullString_BHGh1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_mAGH6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("cake", false);
        assertEquals("KK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_qBnh7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("dog", false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_cuFO8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("fox", false);
        assertEquals("FKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_bNZH9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("goat", false);
        assertEquals("KT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_Sfyq10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("house", false);
        assertEquals("HS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_gIjE11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("jump", false);
        assertEquals("JMP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_vpHz12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("kite", false);
        assertEquals("KT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_EVmF13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("lion", false);
        assertEquals("LN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_rXfE14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("mouse", false);
        assertEquals("MS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_rVcB3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_sErF9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("B", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_yher10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_fRLq11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("D", false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_zNTJ12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("G", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_eoUQ14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("J", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithK_YWBT15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("K", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_OckJ16() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_vhcI1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = true;
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_bZOr2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "silent";
        boolean alternate = false;
        String expected = "SLNT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_SUwo4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "cob";
        boolean alternate = false;
        String expected = "KP";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_ugZf5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "dog";
        boolean alternate = false;
        String expected = "TK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_aKpF6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "fox";
        boolean alternate = false;
        String expected = "FKS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_auMG7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "goat";
        boolean alternate = false;
        String expected = "KT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithH_VgcQ8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "house";
        boolean alternate = false;
        String expected = "HS";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_QeoE9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "jump";
        boolean alternate = false;
        String expected = "JMP";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithK_HrzW10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "kite";
        boolean alternate = false;
        String expected = "KT";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_pswo11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_DDAx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expected = "TST";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullValue_tOta1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = true;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_AEuP3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Mac";
        boolean alternate = true;
        String expected = "MK";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAEIOUY_UzNd4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AEIOUY";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_UmKl5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = true;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_ihpW6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_yJVz7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "D";
        boolean alternate = true;
        String expected = "T";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_dLEX8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "F";
        boolean alternate = true;
        String expected = "F";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_ChjT9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "G";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_wzjd11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "J";
        boolean alternate = true;
        String expected = "J";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVowel_nKAq4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "aeiouy";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_oXRj5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "b";
        boolean alternate = true;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_QDPq6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "c";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_HOEx7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "d";
        boolean alternate = true;
        String expected = "T";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_qdDT8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "f";
        boolean alternate = true;
        String expected = "F";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_hHrY9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "g";
        boolean alternate = true;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithJ_zVwb11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "j";
        boolean alternate = true;
        String expected = "J";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_eBWK3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AEIOUY", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_zOEA7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("F", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_vlZV12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("L", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_XuBj13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("M", false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_TrdV14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("N", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_hrXY4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone1_DVpk0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = false;
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone12_HMOr11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = true;
        String expected = "HL";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_YXxx9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("H", false);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullValue_KgjS0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = false;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyValue_wPPY1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = false;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_VsXH2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = false;
        String expected = "P";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_cyaO3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = false;
        String expected = "A";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_KUyG10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = false;
        String expected = "K";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Qkui0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("TST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_VeWY1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("TST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullValue_Hzli2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithP_xETl15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("P", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_aeiouy_sYlp3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Aeiouy", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_reki2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("the", false);
        assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_kIgy3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("a", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_IZec12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("l", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_ZjjJ13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("m", false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_KpQr14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("n", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_QmNF3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Alice", false);
        assertEquals("ALS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_ZrwU10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Jennifer", false);
        assertEquals("JNFR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_VMCl0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_QNxP2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("x", true);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAEIOUY_cfjz3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", true);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_LlTJ4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("B", true);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_lFdh5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("C", true);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_SGxo6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("D", true);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_cNcU7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("F", true);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_djne8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("G", true);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithK_LpxT11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("K", true);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithL_hsSB12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("L", true);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithM_Ozhd13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("M", true);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithN_XlLz14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("N", true);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithP_sQBK15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("P", true);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullValue_DpFh1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_DcOB3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "x";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_mvHz4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "A";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithE_ylSP5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithI_lQoN6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithO_GidK7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithU_WeYi8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "U";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_ZzWi9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Y";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_cKRc10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "B";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithC_YTwM11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "C";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_AdCo12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "D";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_FVzH2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("thomas", false);
        assertEquals("TMS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_NullString_foYg1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone(null, false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_ioVU2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("x", false);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_xitW3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("AEIOUY", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_rCpK4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("B", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_lbSI5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("C", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_xCna6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("D", false);
        assertEquals("T", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_nsqV7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("F", false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_wZBj8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("G", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_J_bSDU10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("J", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_ykIm11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("K", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_LjaC12() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("L", false);
        assertEquals("L", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_binT13() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("M", false);
        assertEquals("M", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_oGss14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("N", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_P_QGlg15() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("P", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Q_hOEA16() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Q", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_EmptyString_uYNo0() {
        String value = "";
        int start = 0;
        int length = 0;
        String[] criteria = new String[]{};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_WfhQ1() {
        String value = "abc";
        int start = 0;
        int length = 1;
        String[] criteria = new String[]{"a"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_MultipleCriteria_vVnX2() {
        String value = "abc";
        int start = 0;
        int length = 1;
        String[] criteria = new String[]{"a", "b"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartGreaterThanLength_Msoo3() {
        String value = "abc";
        int start = 2;
        int length = 1;
        String[] criteria = new String[]{"a"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartGreaterThanLength_MultipleCriteria_sthh6() {
        String value = "abc";
        int start = 2;
        int length = 1;
        String[] criteria = new String[]{"a", "b"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartEqualToLength_MultipleCriteria_YTNC8() {
        String value = "abc";
        int start = 1;
        int length = 1;
        String[] criteria = new String[]{"a", "b"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullString_Wioy4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Null_zfEM7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_Jkie0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(10);
        assertEquals(10, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithZeroValue_jhGm2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(0);
        assertEquals(0, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithLargeValue_sPUF3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(1000);
        assertEquals(1000, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentCases_ABVr6_WQdJ0() {
        String value1 = "hello";
        String value2 = "Hello";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentSpecialCharacters_Eioj8_oNdH1() {
        String value1 = "hello";
        String value2 = "hllo!";
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertFalse(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_SbJZ0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
        assertEquals(4, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_negative_ZrIp1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentValues_LLZs1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "value1";
        String value2 = "value2";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_AlternateFalse_qmqi6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "value1";
        String value2 = "value2";
        boolean alternate = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DifferentCases_bmOm8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "Value1";
        String value2 = "value2";
        boolean alternate = false;
        assertTrue(doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_iBVG12_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("h", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_emptyString_ZZxQ0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nonSlavoGermanic_cBQG2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_slavoGermanic_FxlU3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Witz", false);
        assertEquals("ATS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_alternate_uSYg4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("hello", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_silentStart_GiED5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("bob", false);
        assertEquals("PP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_ditA3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "bob";
        boolean alternate = false;
        String expected = "PP";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_aJXd0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        boolean alternate = true;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_kGUl3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "xhello";
        boolean alternate = true;
        String expected = "SL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithE_tBau5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "E";
        boolean alternate = true;
        String expected = "E";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_wfxr9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Y";
        boolean alternate = true;
        String expected = "Y";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithI_AwHq5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "I";
        boolean alternate = false;
        String expected = "I";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithO_TtDM6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "O";
        boolean alternate = false;
        String expected = "O";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithU_MmRY7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "U";
        boolean alternate = false;
        String expected = "U";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyValue_Ajqq3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_MOZX4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "KKtest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithA_cKFw5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Atest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithE_xdYV6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Etest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("ATST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithI_SpYq7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Itest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithO_jzbm8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Otest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithU_agUh9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Utest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("ATST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithY_yDYM10_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Ytest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("ATST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithB_SPgD11_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Btest";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStart_sMbO2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("BCE", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_silentStart_tfnj2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("SSyz", false);
        assertEquals("SS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_VzTN3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("apple", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_B_yfow4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Bob", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_wcUT5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Catherine", false);
        assertEquals("K0RN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_D_plgL6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("David", false);
        assertEquals("TFT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_F_CWVQ7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Fred", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_G_obDl8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Grace", false);
        assertEquals("KRS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_H_fLdX9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Henry", false);
        assertEquals("HNR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_K_XhDJ11_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Katherine", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_L_RZOL12_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Lucas", false);
        assertEquals("LKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_M_pSDx13_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Matthew", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_N_usAX14_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Nicholas", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_FPXh1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyValue_oJTa2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithD_eUUu7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "d";
        boolean alternate = true;
        String expected = "t";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithF_eQAd8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "f";
        boolean alternate = true;
        String expected = "f";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithG_eafL9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "g";
        boolean alternate = true;
        String expected = "k";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_EmptyString_CZGP0_fid1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("", false);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_twoLetterString_YdOO3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ab", false);
        assertEquals("AP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_threeLetterString_tUxl4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abc", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fourLetterString_uPSP5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcd", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fiveLetterString_rIcB6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcde", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_sixLetterString_tlXY7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdef", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_sevenLetterString_oGyI8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefg", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_eightLetterString_EeKP9_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefgh", false);
        assertEquals("APKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_nineLetterString_zIfh10_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefghi", false);
        assertEquals("APKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_tenLetterString_uAOz11_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefghij", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_elevenLetterString_LOlr12_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefghijk", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_twelveLetterString_kKUM13_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("abcdefghijkl", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_AEIOUY_eLHu3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Aeiouy", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartLessThanLength_eFdh4_fid1() {
        String value = "abc";
        int start = 1;
        int length = 2;
        String[] criteria = new String[]{"a"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartEqualToLength_IGcW5_fid1() {
        String value = "abc";
        int start = 1;
        int length = 1;
        String[] criteria = new String[]{"a"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains_NonEmptyString_StartLessThanLength_MultipleCriteria_hnaq7_fid1() {
        String value = "abc";
        int start = 1;
        int length = 2;
        String[] criteria = new String[]{"a", "b"};
        boolean result = DoubleMetaphone.contains(value, start, length, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_OXfL0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSeparator_XQpq1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "hll";
        String actual = doubleMetaphone.doubleMetaphone(value, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNonSeparator_QxrA2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "hll";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyString_XzQJ3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        String expected = "";
        String actual = doubleMetaphone.doubleMetaphone(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNonEnglishString_ofSF6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        String expected = "konnichiwa";
        String actual = doubleMetaphone.doubleMetaphone(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNonEnglishStringAndNonSeparator_sAAH8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "";
        String expected = "konnichiwa";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_bEJL0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.encode("");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MultipleCharacters_nXJy2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.encode("APK");
        assertEquals("APK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_InvalidInput_RUHt8_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.encode("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLenWithNegativeValue_ZNpY1_fid1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        dm.setMaxCodeLen(-1);
        assertEquals(-1, dm.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_quOj2_Uxhy0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
        String result = doubleMetaphone.encode("quOj2");
        assertEquals("KJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_SilentStart_pgif2_hMZY0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
        String result = doubleMetaphone.encode("TKPRNFKS");
        assertEquals("TKPRNFKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNonString_EyvM5_uLzw0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        Object value = new Object();
        String expected = null;
        String actual = doubleMetaphone.doubleMetaphone(value.toString());
        assertNull(expected);
    }
}