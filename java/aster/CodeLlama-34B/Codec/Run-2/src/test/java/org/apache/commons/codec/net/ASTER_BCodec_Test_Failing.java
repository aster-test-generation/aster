/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecoding_lenient_qhkA2() {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        assertArrayEquals(expected, bCodec.doDecoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_1() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 8};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(5, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_NullCharset_BTfO4_fid1() {
        BCodec bCodec = new BCodec((Charset) null);
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_NullCharsetName_wInP5_fid1() {
        BCodec bCodec = new BCodec((String) null);
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(5, output.length);
        assertEquals(1, output[0]);
        assertEquals(2, output[1]);
        assertEquals(3, output[2]);
        assertEquals(4, output[3]);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_TtSP0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_Msal1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String strSource = "Hello World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_NIDv2() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "Hello World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "SGVsbG8gV29ybGQh";
        String actual = bCodec.encode(strSource, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_STRICT_RWZF0() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_LENIENT_nLFL1() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_empty_BZFo3() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "";
        String expected = "";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_whitespace_IUgq4() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "   ";
        String expected = "ICAgICAgICAg";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_nonAscii_JRma5() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        String strSource = "Hello, !";
        String expected = "SGVsbG8sIMOpcm9wb3N0";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_strSource_nonAscii_LENIENT_eYYb6() throws EncoderException {
        BCodec bCodec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        String strSource = "Hello, !";
        String expected = "SGVsbG8sIMOpcm9wb3N0";
        String actual = bCodec.encode(strSource);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ReCU0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expectedResult = "SGVsbG8sIFdvcmxkIQ==";
        String actualResult = bCodec.encode(strSource, sourceCharset);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_fMiu1() throws EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = "Hello, World!";
        String sourceCharset = "invalid_charset";
        try {
            bCodec.encode(strSource, sourceCharset);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("UnsupportedCharsetException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_1_fid2() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(5, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_2_fid2() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(1, output[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_3() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(2, output[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_4() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(3, output[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_5() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(4, output[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_ValidInput_CTyM1_6() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] output = bCodec.doEncoding(input);
        assertEquals(5, output[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_DifferentCharset_ZBuF3_pwKf1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-16"), CodecPolicy.STRICT);
        String input = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = null;
        try {
            actual = bCodec.encode(input, "UTF-16");
        } catch (EncoderException e) {
            fail("EncoderException thrown: " + e.getMessage());
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_DifferentCodecPolicy_FqIr4_LNfu0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String input = "Hello, World!";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = null;
        try {
            actual = bCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
}