/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_singleCharacter_fVcQ2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A", refinedSoundex.soundex("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_slae3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("ABCD", refinedSoundex.soundex("ABCD"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_lowercase_QklI6() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("abcd", refinedSoundex.soundex("abcd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_mixedCase_Xexv7() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("aBcD", refinedSoundex.soundex("aBcD"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_String_nKPL0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Hello";
        String expectedOutput = "H400";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_InvalidInput_JNdN4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Invalid input";
        String expectedOutput = null;
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringMapping_bAWc0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String result = refinedSoundex.encode("hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharArrayMapping_qzgN1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String result = refinedSoundex.encode("hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoMapping_pELg2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String result = refinedSoundex.encode("hello");
        assertEquals("H400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_Digit_nULx2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("0123456789");
        char c = '0';
        char expected = '0';
        char actual = refinedSoundex.getMappingCode(c);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_SpecialCharacter_gydE3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("!@#$%^&*()_+-=");
        char c = '!';
        char expected = '!';
        char actual = refinedSoundex.getMappingCode(c);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_AllInputs_SUQz4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("AEIOUYWH0123456789!@#$%^&*()_+-=");
        char[] inputs = new char[]{'A', 'a', '0', '!', 'Z', 'z', '9', '&', ' ', '*', '(', ')', '+', '-', '='};
        char[] expected = new char[]{'A', 'a', '0', '!', 'Z', 'z', '9', '&', ' ', '*', '(', ')', '+', '-', '='};
        for (int i = 0; i < inputs.length; i++) {
            char actual = refinedSoundex.getMappingCode(inputs[i]);
            assertEquals(expected[i], actual);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_multipleCharacters_slae3_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        assertEquals("A0136", refinedSoundex.soundex("A0136"));
    }
}