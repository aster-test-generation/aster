/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_CrjY0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        Charset sourceCharset = Charset.defaultCharset();
        String actual = codec.decode(sourceStr, sourceCharset);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_ECED1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "";
        Charset sourceCharset = Charset.defaultCharset();
        String actual = codec.decode(sourceStr, sourceCharset);
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_fInD0() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull(codec.decode(null, StandardCharsets.US_ASCII.name()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmptyString_HgOu1() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("", codec.decode("", StandardCharsets.US_ASCII.name()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonNullString_KqdX2() throws Exception {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = StandardCharsets.US_ASCII.name();
        String expectedResult = "Hello, World!";
        assertEquals(expectedResult, codec.decode(sourceStr, sourceCharset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_IzdN1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello world";
        Object output = codec.encode(input);
        assertEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_dgxM1() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        Object result = codec.decode(input);
        assertArrayEquals(input, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_cZzV2() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello world";
        Object result = codec.decode(input);
        assertEquals(input, (String) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_dXSP3() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be quoted-printable decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArrayStrict_Rajd5() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        Object result = codec.decode(input);
        assertArrayEquals(input, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStringStrict_ecox6() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String input = "hello world";
        Object result = codec.decode(input);
        assertEquals(input, (String) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidTypeStrict_dyPi7() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be quoted-printable decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonStringNonByteArray_FuIY2_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Integer input = 123;
        String output = codec.encode(input.toString());
        assertEquals(input.toString(), output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_qFGl0_YHIg0() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object result = codec.decode((byte[]) null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_TpGd0_piTj0_1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8, true);
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        byte[] encodedBytes = codec.encode(bytes);
        codec = new QuotedPrintableCodec(StandardCharsets.UTF_8, false);
        bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        encodedBytes = codec.encode(bytes);
        assertEquals("Hello, World!", new String(encodedBytes, StandardCharsets.UTF_8));
    }
}