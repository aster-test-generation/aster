/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_dnLQ0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        assertNull(codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_sNuT1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        assertArrayEquals(bytes, codec.decode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_usty3() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        Integer integer = 1;
        assertThrows(DecoderException.class, () -> codec.decode(integer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithoutSpace_yXtv1() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{'a', 'b', 'c'};
        byte[] expected = new byte[]{'a', 'b', 'c'};
        byte[] actual = codec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncoding_GJsJ3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x61};
        byte[] expected = new byte[]{(byte) 0x61};
        assertArrayEquals(expected, percentCodec.encode(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_UkaA0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_fcwR1_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_fcwR1_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonByteArray_gqyC2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object input = new Object();
        try {
            percentCodec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + input.getClass().getName() + " cannot be Percent encoded"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_CAzP3_1() throws EncoderException {
        byte[] alwaysEncodeChars = new byte[]{1, 2, 3};
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, false);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_CAzP3_2() throws EncoderException {
        byte[] alwaysEncodeChars = new byte[]{1, 2, 3};
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, false);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_HjCx4_1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_HjCx4_2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncoding_CAuC3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02};
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02};
        byte[] actual = percentCodec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAsciiChars_Cjih0() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] actual = percentCodec.encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_SYhj3() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_fcwR1() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_CAzP3() throws EncoderException {
        byte[] alwaysEncodeChars = new byte[]{1, 2, 3};
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, false);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_HjCx4() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] input = new byte[]{1, 2, 3};
        Object result = percentCodec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }
}