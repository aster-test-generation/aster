/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_kizC0() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "$5$FGV5E0SU$Gw6oaxHi4NxdHN5XAly7Qb6P6EquhNw00aaM2iINkQ1";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNull_wgAn1() {
        byte[] keyBytes = null;
        String expected = null;
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithValidKey_okAy4() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = "$5$XhHa0goY$7.134sUmuV9IzsmTQ6Sxk8BwLPHhPCUTkRDbKdkIIy8";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithValidKeyAndSalt_IUfb5() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String salt = "salt";
        String expected = "6480000000000000000000000000000000000000000000000000000000000000";
        String actual = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_jJAD0() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "$6$UxlOdhfR$LIXTWGqlL8q4.dS8OcP8Tf6t//z.jCtqi2B2xkcRHh5ZtHfceDkdhhTish.IJmT6O32xcf2jGdU0N9N9TkAm.1";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_KRNQ1_qTyt0() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        byte[] salt = new byte[16];
        for (int i = 0; i < salt.length; i++) {
            salt[i] = (byte) i;
        }
        String expected = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, new String(salt, StandardCharsets.UTF_8));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullKeyBytes_OfGt2_awsT0() {
        byte[] keyBytes = null;
        String salt = "salt";
        String expected = null;
        String actual = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_rtij3_xPMX0() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "$6$Pw.4MbCv$IavHddOVFUq2HlLXCPRjJFKevxRhlRKfQVbnuOEcVFLSQgqhJr99RIF8Da/2Ie2xPdVk2bfooaBPkw7eG8U2.0";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithEmptyKeyBytes_emMD4_wtAl0() {
        byte[] keyBytes = new byte[0];
        String salt = "";
        String expected = "";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Crypt_kizC0_fid2() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "6480000000000000000000000000000000000000000000000000000000000000";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithEmptyArray_GmvX2() {
        byte[] keyBytes = new byte[0];
        String expected = "";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithValidKey_okAy4_fid2() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) (i + 1);
        }
        String expected = "6480000000000000000000000000000000000000000000000000000000000000";
        String actual = Sha2Crypt.sha256Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Crypt_jJAD0_fid2() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
        String actual = Sha2Crypt.sha512Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithCustomSalt_xfjp1_fid2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$rounds=10000$jU8C2m.0";
        String expectedResult = "$6$rounds=10000$jU8C2m.0$ZiSRUXxrQlKXoHMkBnF/ZHXQoQYsWgO1hwHoRt.KQNXMJhIxXwYTt0u.hRJDs1.yxYWB1JEvR/s28M4p9bDxM/";
        String actualResult = Sha2Crypt.sha512Crypt(keyBytes, salt);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithSalt_KRNQ1_qTyt0_fid3() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        byte[] salt = new byte[16];
        for (int i = 0; i < salt.length; i++) {
            salt[i] = (byte) i;
        }
        String expected = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, new String(salt));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_rtij3_xPMX0_fid3() {
        byte[] keyBytes = new byte[32];
        for (int i = 0; i < keyBytes.length; i++) {
            keyBytes[i] = (byte) i;
        }
        String expected = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8";
        String actual = Sha2Crypt.sha512Crypt(keyBytes, null);
        assertEquals(expected, actual);
    }
}