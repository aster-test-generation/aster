/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_QjpR0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello%20world";
        String charsetName = "UTF-8";
        String expected = "hello world";
        String actual = urlCodec.decode(str, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_fulL1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "hello%20world";
        String charsetName = "invalid_charset";
        try {
            urlCodec.decode(str, charsetName);
            fail("UnsupportedEncodingException should have been thrown");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_VYaE0() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "https%3A%2F%2Fwww.example.com%2Fpath%2Fto%2Fresource%3Fquery%3Dvalue";
        String expected = "https://www.example.com/path/to/resource?query=value";
        String actual = urlCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding1_CuPQ0() {
        URLCodec urlCodec = new URLCodec("UTF-8");
        String encoding = urlCodec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding2_xRra1() {
        URLCodec urlCodec = new URLCodec();
        String encoding = urlCodec.getEncoding();
        assertEquals("UTF-8", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_VKWv0() {
        URLCodec urlCodec = new URLCodec();
        String defaultCharset = urlCodec.getDefaultCharset();
        assertEquals("UTF-8", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithCharset_PtON1() {
        URLCodec urlCodec = new URLCodec("UTF-16");
        String defaultCharset = urlCodec.getDefaultCharset();
        assertEquals("UTF-16", defaultCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_cVid1() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "ABC";
        Object output = urlCodec.decode(input);
        assertEquals(output, "ABC");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_ayhS3() throws DecoderException {
        URLCodec urlCodec = new URLCodec();
        Object input = new Object();
        try {
            urlCodec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals(e.getMessage(), "Objects of type " + input.getClass().getName() + " cannot be URL decoded");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_jXgU0() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput = urlCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_wTRM1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "hello world";
        String expectedOutput = "hello%20world";
        String actualOutput = urlCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_SWhF2() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object input = null;
        Object expectedOutput = null;
        Object actualOutput = urlCodec.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_nullBytes_VHwU0() {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_emptyBytes_eHMX1() {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_space_qYrQ4() {
        byte[] bytes = " ".getBytes();
        byte[] expected = "+".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_nonAsciiAndUrlSafe_jXDG6() {
        byte[] bytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~".getBytes();
        byte[] expected = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~%E2%82%AC".getBytes();
        byte[] actual = URLCodec.encodeUrl(null, bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Zdxv0() {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] encodedBytes = urlCodec.encode(bytes);
        assertArrayEquals(new byte[]{37, 48, 49, 37, 48, 50, 37, 48, 51, 37, 48, 52, 37, 48, 53}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_empty_iKLy0() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_singleByte_sFJU1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = new byte[]{65};
        byte[] expected = new byte[]{65};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_multipleBytes_XpTq2() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_invalidBytes_ZcyO3() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = new byte[]{65, 66, 67, 68};
        byte[] expected = new byte[]{65, 66, 67, 68};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_invalidCharset_ICcX4() throws DecoderException {
        URLCodec codec = new URLCodec("invalid");
        byte[] bytes = new byte[]{65, 66, 67, 68};
        byte[] expected = new byte[]{65, 66, 67, 68};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_nullBytes_DXDT5() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_nullCharset_exCF7() throws DecoderException {
        URLCodec codec = new URLCodec(null);
        byte[] bytes = new byte[]{65, 66, 67, 68};
        byte[] expected = new byte[]{65, 66, 67, 68};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_emptyCharset_ePKR8() throws DecoderException {
        URLCodec codec = new URLCodec("");
        byte[] bytes = new byte[]{65, 66, 67, 68};
        byte[] expected = new byte[]{65, 66, 67, 68};
        byte[] actual = codec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nullString_JZDq0() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = null;
        String encodedStr = urlCodec.encode(str);
        assertNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nonNullString_lnkT1() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World!";
        String encodedStr = urlCodec.encode(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_emptyString_YzUg2() throws EncoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "";
        String encodedStr = urlCodec.encode(str);
        assertEquals("", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_nullString_RGaJ0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String result = urlCodec.encode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_specialCharacters_rSNc3() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello, World! ";
        String result = urlCodec.encode(str, "UTF-8");
        assertEquals("Hello%2C+World%21+", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_Fybe0_qnEN0() {
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        try {
            byte[] actual = URLCodec.decodeUrl(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("DecoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlus_fWXU1_jhSc0() {
        byte[] bytes = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 43, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90};
        byte[] actual = null;
        try {
            actual = URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }
}