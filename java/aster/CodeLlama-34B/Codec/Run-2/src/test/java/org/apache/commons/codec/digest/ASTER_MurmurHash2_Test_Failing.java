/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_validData_mvOU2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 10;
        long expected = 0xe17a1465;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidData_WIkX3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 10;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_negativeLength_GWJJ4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = -1;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_largeLength_brJg6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 100;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyString_FVOp0() {
        String text = "";
        int from = 275646681;
        int length = 275646681;
        int expected = 275646681;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NegativeFrom_IzEC3() {
        String text = "abc";
        int from = 0;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NegativeLength_Dtdr4() {
        String text = "abc";
        int from = 0;
        int length = -1;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_FromGreaterThanLength_XlVg5() {
        String text = "abc";
        int from = 4;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LengthGreaterThanTextLength_ZkBN6() {
        String text = "abc";
        int from = 0;
        int length = 4;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NullText_TRAi7() {
        String text = null;
        int from = 0;
        int length = 0;
        int expected = 0;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_InvalidLength_PEtd10() {
        String text = "abc";
        int from = 0;
        int length = -1;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_InvalidFromAndLength_AsAG11() {
        String text = "abc";
        int from = -1;
        int length = -1;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullText_haZC5() {
        String text = null;
        int from = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidFrom_teJD6() {
        String text = "abc";
        int from = 0;
        int length = 3;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength_NKCd7() {
        String text = "abc";
        int from = 0;
        int length = -1;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidFromAndLength_KeYF8() {
        String text = "abc";
        int from = -1;
        int length = -1;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyStringWithFromAndLength_eqPC9() {
        String text = "";
        int from = 1;
        int length = 2;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullTextWithFromAndLength_mOun10() {
        String text = null;
        int from = 1;
        int length = 2;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidFromAndLengthWithEmptyString_vGtp11() {
        String text = "";
        int from = -1;
        int length = -1;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleBytes_iVAb2() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        int length = 4;
        int seed = 0x9747b28c;
        int expected = 0x9747b28c;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_LvbI3_1() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        int length = 4;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_LvbI3_2() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        int length = 4;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentData_QTaA4_1() {
        byte[] data1 = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] data2 = new byte[]{(byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        int length = 4;
        int seed = 0x9747b28c;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data1, length, seed);
        int actual2 = MurmurHash2.hash32(data2, length, seed);
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentData_QTaA4_2() {
        byte[] data1 = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] data2 = new byte[]{(byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        int length = 4;
        int seed = 0x9747b28c;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data1, length, seed);
        int actual2 = MurmurHash2.hash32(data2, length, seed);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength_tjGT8() {
        try {
            MurmurHash2.hash64(new byte[]{1, 2, 3}, 3);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength3_uhQL10() {
        try {
            MurmurHash2.hash64(new byte[]{1, 2, 3}, 0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Expected IllegalArgumentException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_null_rLxe3() {
        String text = null;
        int expected = 0;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullBytes_CsYV7() {
        byte[] bytes = null;
        int expected = 275646681;
        int actual = MurmurHash2.hash32(bytes, 275646681);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength_FpDI8() {
        byte[] bytes = new byte[10];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength2_dITm9() {
        byte[] bytes = new byte[10];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 10);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyData_Rghj0() {
        byte[] data = new byte[0];
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullData_sfbu1() {
        byte[] data = null;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidData_WIkX3_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 11;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_zeroLength_etIc5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyString_FVOp0_fid1() {
        String text = "";
        int from = 0;
        int length = 0;
        int expected = 0;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SingleCharacter_MYty1_fid1() {
        String text = "a";
        int from = 0;
        int length = 1;
        int expected = 97;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NegativeFrom_IzEC3_fid1() {
        String text = "abc";
        int from = -1;
        int length = 3;
        int expected = 294;
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_1_wbup0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int length = data.length;
        int seed = 12345;
        int expected = 123456789;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyString_MtEp0() {
        String text = "";
        int from = 0;
        int length = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleCharacter_epmW1_fid1() {
        String text = "a";
        int from = 0;
        int length = 1;
        long expected = 97;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_multipleCharacters_zdMk2() {
        String text = "abc";
        int from = 0;
        int length = 3;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_differentFrom_YMch3() {
        String text = "abc";
        int from = 1;
        int length = 2;
        long expected = 294;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_differentLength_SWZF4() {
        String text = "abc";
        int from = 0;
        int length = 1;
        long expected = 97;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidFrom_teJD6_fid1() {
        String text = "abc";
        int from = -1;
        int length = 3;
        long expected = 0;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyData_Acfi0() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 0x9747b28c;
        int expected = 0;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleByte_vJTe1_fid1() {
        byte[] data = new byte[]{(byte) 0x01};
        int length = 1;
        int seed = 0x9747b28c;
        int expected = 0x9747b28c;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_emptyString_BzAR0() {
        long result = MurmurHash2.hash64("");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleCharacter_EkQz1_fid1() {
        long result = MurmurHash2.hash64("a");
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_multipleCharacters_oheh2() {
        long result = MurmurHash2.hash64("abc");
        assertEquals(294, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_nullString_LVyY3_fid1() {
        long result = MurmurHash2.hash64(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength_tjGT8_fid1() {
        try {
            MurmurHash2.hash64(new byte[]{1, 2, 3}, 4);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength2_TkKE9_fid1() {
        try {
            MurmurHash2.hash64(new byte[]{1, 2, 3}, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_invalidLength3_uhQL10_fid1() {
        try {
            MurmurHash2.hash64(new byte[]{1, 2, 3}, 0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyString_rceV0_fid1() {
        String text = "";
        int expected = 0;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleCharacter_JjFq1_fid1() {
        String text = "a";
        int expected = 97;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleCharacters_fOLt2_fid1() {
        String text = "abc";
        int expected = 294;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_emptyBytes_jEmu4_fid1() {
        byte[] bytes = new byte[0];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_singleByte_TAUu5_fid1() {
        byte[] bytes = new byte[]{(byte) 97};
        int expected = 97;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_multipleBytes_LWzg6_fid1() {
        byte[] bytes = new byte[]{(byte) 97, (byte) 98, (byte) 99};
        int expected = 294;
        int actual = MurmurHash2.hash32(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_nullBytes_CsYV7_fid1() {
        byte[] bytes = null;
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength_FpDI8_fid1() {
        byte[] bytes = new byte[10];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, -1);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_invalidLength2_dITm9_fid1() {
        byte[] bytes = new byte[10];
        int expected = 0;
        int actual = MurmurHash2.hash32(bytes, 11);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_IrBl0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = data.length;
        int seed = 123456789;
        long expected = 1234567890123456789L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_singleByte_VqsU5_bPYv0() {
        long result = MurmurHash2.hash64(new byte[]{1}, 1, 0);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_multipleBytes_MVze6_fwEW0() {
        long result = MurmurHash2.hash64(new byte[]{1, 2, 3}, 3, 0);
        assertEquals(294, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentSeeds_LvbI3() {
        byte[] data = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        int length = 4;
        int seed1 = 0x9747b28c;
        int seed2 = 0x12345678;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data, length, seed1);
        int actual2 = MurmurHash2.hash32(data, length, seed2);
        assertEquals(expected1, actual1);
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_differentData_QTaA4() {
        byte[] data1 = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04};
        byte[] data2 = new byte[]{(byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};
        int length = 4;
        int seed = 0x9747b28c;
        int expected1 = 0x9747b28c;
        int expected2 = 0x12345678;
        int actual1 = MurmurHash2.hash32(data1, length, seed);
        int actual2 = MurmurHash2.hash32(data2, length, seed);
        assertEquals(expected1, actual1);
        assertEquals(expected2, actual2);
    }
}