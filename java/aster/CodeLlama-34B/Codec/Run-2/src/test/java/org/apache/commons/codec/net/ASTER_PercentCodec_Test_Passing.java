/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_nJVK0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67};
        Object output = codec.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67}, (byte[]) output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_sgvS1() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "ABC";
        byte[] output = codec.decode(input.getBytes());
        assertEquals("ABC", new String(output));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_singleCharacter_LfAi3() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65};
        Object output = codec.decode(input);
        assertArrayEquals(new byte[]{65}, (byte[]) output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_byteArray_multipleCharacters_sIfW4() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{65, 66, 67};
        byte[] output = codec.decode(input);
        assertArrayEquals(new byte[]{65, 66, 67}, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_singleCharacter_gLZz5() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "A";
        byte[] output = codec.decode(input.getBytes());
        assertEquals("A", new String(output));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_multipleCharacters_pkxy6() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "ABC";
        byte[] output = codec.decode(input.getBytes());
        assertArrayEquals(input.getBytes(), output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_string_singleInvalidCharacter_tBnQ7() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        String input = "A%";
        try {
            codec.decode(input);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.String cannot be Percent decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_bzIM2() throws EncoderException {
        PercentCodec percentCodec = new PercentCodec(new byte[]{1, 2, 3}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        byte[] actual = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_jLTQ3_ntXu0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] actual = codec.encode(null);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_ysMD0_jaOo0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = null;
        byte[] expected = null;
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_empty_wNNB1_orzb0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_noEncoding_WyEw2_wOJQ1() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{1, 2, 3};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEncoding_LyqR3_XbYx0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withPlusForSpace_OBvY4_vOCR1() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_CZjx0_mCBM0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = null;
        byte[] expectedOutput = null;
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncodingNeeded_sJlU2_leMI0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        byte[] expectedOutput = new byte[]{1, 2, 3};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertArrayEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEncodingNeeded_lbFR3_QCLk0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5};
        byte[] actualOutput;
        try {
            actualOutput = percentCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
            actualOutput = new byte[0];
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_CIrp4_pfXS0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            byte[] actualOutput = percentCodec.encode(input);
            assertArrayEquals(expectedOutput, actualOutput);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_XqtG2_MQAe0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            fail("Unexpected EncoderException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_noEncoding_DZmr2_WVWg0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{0x01, 0x02, 0x03};
        byte[] expected = new byte[]{0x01, 0x02, 0x03};
        try {
            byte[] actual = percentCodec.encode(bytes);
            assertArrayEquals(expected, actual);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_uNfi0_acIE0() {
        PercentCodec codec = new PercentCodec();
        try {
            assertNull(codec.encode(null));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_empty_XnIA1_WmbB1() {
        PercentCodec codec = new PercentCodec();
        try {
            assertArrayEquals(new byte[0], codec.encode(new byte[0]));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_noEncode_KWVZ2_FEzl0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        try {
            assertArrayEquals(bytes, codec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_willEncode_pHji3_fmEC0() {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        try {
            assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, codec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_null_zEeD0_dfAt1() {
        PercentCodec percentCodec = new PercentCodec();
        try {
            assertNull(percentCodec.encode(null));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_empty_Vxpd1_rJDJ0() {
        PercentCodec percentCodec = new PercentCodec();
        try {
            assertEquals(0, percentCodec.encode(new byte[0]).length);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_noEncoding_nmvF2_xLkc0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        try {
            assertEquals(bytes.length, percentCodec.encode(bytes).length);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEncoding_DqFp3_eoyN0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5};
        byte[] expected = new byte[]{1, 2, 3, 4, 5};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_ncsU0_JSRJ0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_sFbj2_aDZw0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            fail("Exception thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_dTXV3_Mliy0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
        try {
            assertArrayEquals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_null_pZjW0_cSFY0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = null;
        byte[] expected = null;
        try {
            byte[] actual = percentCodec.decode(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_empty_vZqw1_SdHJ0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        try {
            byte[] actual = percentCodec.decode(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_singleByte_pWvJ2_aJHy0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65};
        byte[] expected = new byte[]{65};
        byte[] actual = null;
        try {
            actual = percentCodec.decode(bytes);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_multipleBytes_Tnxr3_cFtb0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = null;
        try {
            actual = percentCodec.decode(bytes);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_plusForSpace_FeWT5_DVon0() {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{65, 66, 67, '+', 68, 69, 70};
        byte[] expected = new byte[]{65, 66, 67, ' ', 68, 69, 70};
        try {
            byte[] actual = percentCodec.decode(bytes);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }
}