/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntConstructor_jBVc1() {
        Base32 base32 = new Base32(10);
        byte[] lineSeparator = base32.getLineSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_ByteConstructor_CgeQ2() {
        Base32 base32 = new Base32((byte) 10, new byte[]{10});
        byte[] lineSeparator = base32.getLineSeparator();
        assertEquals(1, lineSeparator.length);
        assertEquals(10, lineSeparator[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctet_ccYf0() {
        Base32 base32 = new Base32(true);
        byte octet = 0;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidOctet_tkgd1() {
        Base32 base32 = new Base32(true);
        byte octet = -1;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctetWithPadding_XlSI2() {
        Base32 base32 = new Base32(true, (byte) 0xFF);
        byte octet = 0;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteBooleanConstructor_WflI7_TlPd0_1() {
        Base32 base32 = new Base32(10, new byte[]{10}, true);
        byte[] lineSeparator = base32.getLineSeparator();
        assertEquals(1, lineSeparator.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_IntByteBooleanConstructor_WflI7_TlPd0_2() {
        Base32 base32 = new Base32(10, new byte[]{10}, true);
        byte[] lineSeparator = base32.getLineSeparator();
        assertEquals(10, lineSeparator[0]);
    }
}