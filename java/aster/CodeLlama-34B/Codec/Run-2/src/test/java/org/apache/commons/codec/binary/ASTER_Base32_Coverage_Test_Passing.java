/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_URdt0() {
        Base32 base32 = new Base32();
        byte octet = 0;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithNegativeOctet_ayrM1() {
        Base32 base32 = new Base32();
        byte octet = -1;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetGreaterThanDecodeTableLength_pMFQ2() {
        Base32 base32 = new Base32();
        byte octet = 100;
        assertTrue(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetEqualToDecodeTableLength_pgJR3() {
        Base32 base32 = new Base32();
        byte octet = 32;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetEqualToPadding_rPaW4() {
        Base32 base32 = new Base32();
        byte octet = 61;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetGreaterThanPadding_psyb5() {
        Base32 base32 = new Base32();
        byte octet = 62;
        assertFalse(base32.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetLessThanPadding_HAUZ6() {
        Base32 base32 = new Base32();
        byte octet = 60;
        assertFalse(base32.isInAlphabet(octet));
    }
}