/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_lenNotTooBig_nIzs1() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 15;
        byte[] result = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_FFGm0() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 4;
        byte[] lineSeparator = new byte[]{4, 13};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_GYjb1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 4;
        byte[] lineSeparator = new byte[]{4, 13};
        boolean urlSafe = true;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_YiMZ2() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 4;
        byte[] lineSeparator = new byte[]{4, 13};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_ovXq3() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 4;
        byte[] lineSeparator = new byte[]{4, 13};
        boolean urlSafe = true;
        CodecPolicy decodingPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_NfLU0_fid1() {
        byte[] arrayOctet = new byte[10];
        boolean result = Base64.isArrayByteBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_lenTooBig_WdNt0_fid1() {
        byte[] binaryData = new byte[10];
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 10;
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
            assertTrue(false);
        } catch (IllegalArgumentException e) {
            assertEquals("Input array too big, the output array would be bigger (14) than the specified maximum size of 10", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_validOctet_QCGh1_fid1() {
        byte octet = 0;
        assertTrue(Base64.isBase64(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_FFGm0_fid1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 10;
        byte[] lineSeparator = new byte[]{10, 13};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_GYjb1_fid1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 10;
        byte[] lineSeparator = new byte[]{10, 13};
        boolean urlSafe = true;
        CodecPolicy decodingPolicy = CodecPolicy.STRICT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_YiMZ2_fid1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 10;
        byte[] lineSeparator = new byte[]{10, 13};
        boolean urlSafe = false;
        CodecPolicy decodingPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_ovXq3_fid1() {
        BigInteger bigInt = new BigInteger("1234567890");
        int lineLength = 10;
        byte[] lineSeparator = new byte[]{10, 13};
        boolean urlSafe = true;
        CodecPolicy decodingPolicy = CodecPolicy.LENIENT;
        Base64 base64 = new Base64(lineLength, lineSeparator, urlSafe, decodingPolicy);
        byte[] result = base64.toIntegerBytes(bigInt);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_OuEY0_fid1() {
        Base64 base64 = new Base64();
        byte octet = 0;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetGreaterThanDecodeTableLength_kzni2_fid1() {
        Base64 base64 = new Base64();
        byte octet = 100;
        assertFalse(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetEqualToDecodeTableLength_wmfj3_fid1() {
        Base64 base64 = new Base64();
        byte octet = 64;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetEqualToDecodeTableLengthMinusOne_DITt4_fid1() {
        Base64 base64 = new Base64();
        byte octet = 63;
        assertTrue(base64.isInAlphabet(octet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithOctetEqualToDecodeTableLengthPlusOne_iPux5_fid1() {
        Base64 base64 = new Base64();
        byte octet = 65;
        assertFalse(base64.isInAlphabet(octet));
    }
}