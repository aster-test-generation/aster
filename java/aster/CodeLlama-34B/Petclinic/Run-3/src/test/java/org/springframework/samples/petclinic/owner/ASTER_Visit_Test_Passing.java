/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Visit_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_UrBK0() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(2022, 12, 25);
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateNull_dvzz1() {
		Visit visit = new Visit();
		visit.setDate(null);
		assertNull(visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescription_Wzew0() {
		Visit visit = new Visit();
		visit.setDescription("Test Description");
		assertEquals("Test Description", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithNull_IhJC1() {
		Visit visit = new Visit();
		visit.setDescription(null);
		assertNull(visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithEmptyString_JyVk2() {
		Visit visit = new Visit();
		visit.setDescription("");
		assertEquals("", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithInvalidInput_STnN4() {
		Visit visit = new Visit();
		visit.setDescription("Invalid Input");
		assertEquals("Invalid Input", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithValidInput_WkUC5() {
		Visit visit = new Visit();
		visit.setDescription("Valid Input");
		assertEquals("Valid Input", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithMaxLength_msOX6() {
		Visit visit = new Visit();
		visit.setDescription("This is a very long description that exceeds the maximum length of 255 characters.");
		assertEquals("This is a very long description that exceeds the maximum length of 255 characters.",
				visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithExactLength_jcXF8() {
		Visit visit = new Visit();
		visit.setDescription("This is a description with exactly 255 characters.");
		assertEquals("This is a description with exactly 255 characters.", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithInvalidLength_EPrN9() {
		Visit visit = new Visit();
		visit.setDescription("This is a description with more than 255 characters.");
		assertEquals("This is a description with more than 255 characters.", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithNonEmptyDescription_sAwd1_1() {
		Visit visit = new Visit();
		visit.setDescription("Test Description");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithNonEmptyDescription_sAwd1_2() {
		Visit visit = new Visit();
		visit.setDescription("Test Description");
		String description = visit.getDescription();
		assertEquals("Test Description", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithEmptyDescription_SPWo2_1() {
		Visit visit = new Visit();
		visit.setDescription("");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithEmptyDescription_SPWo2_2() {
		Visit visit = new Visit();
		visit.setDescription("");
		String description = visit.getDescription();
		assertEquals("", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithNullDescription_JrnN3() {
		Visit visit = new Visit();
		visit.setDescription(null);
		String description = visit.getDescription();
		assertNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithInvalidDescription_bNKr4_1() {
		Visit visit = new Visit();
		visit.setDescription("Invalid Description");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithInvalidDescription_bNKr4_2() {
		Visit visit = new Visit();
		visit.setDescription("Invalid Description");
		String description = visit.getDescription();
		assertEquals("Invalid Description", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithValidDescription_Msey5_1() {
		Visit visit = new Visit();
		visit.setDescription("Valid Description");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithValidDescription_Msey5_2() {
		Visit visit = new Visit();
		visit.setDescription("Valid Description");
		String description = visit.getDescription();
		assertEquals("Valid Description", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithInvalidString_yagI8_1() {
		Visit visit = new Visit();
		visit.setDescription("Invalid String");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithInvalidString_yagI8_2() {
		Visit visit = new Visit();
		visit.setDescription("Invalid String");
		String description = visit.getDescription();
		assertEquals("Invalid String", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithValidString_MWla9_1() {
		Visit visit = new Visit();
		visit.setDescription("Valid String");
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithValidString_MWla9_2() {
		Visit visit = new Visit();
		visit.setDescription("Valid String");
		String description = visit.getDescription();
		assertEquals("Valid String", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDate_nQEu0() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertNotNull(date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithValidDate_Ymrc1() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now(), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithWeekdayDate_Biwh9() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now().getDayOfWeek(), date.getDayOfWeek());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_fUPv0_2_fid1() {
		Visit visit = new Visit();
		String description = visit.getDescription();
	}

}