/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_Null_nStX0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(0, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_WTHC0() {
		Vet vet = new Vet();
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(0, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialtiesWithNullSpecialties_NLZC2() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal().add(null);
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesWithEmptyList_GmDj1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(0, specialties.size());
	}

	@Test
	@Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesWithOneElement_aFVW2_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(1, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialtyWithNullSpecialty_qDIm1_fid1() {
		Vet vet = new Vet();
		vet.addSpecialty(null);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialtiesWithEmptySpecialties_RZZf3_fypP0() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal().add(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_SzkK0_XLbu0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		specialties.add(new Specialty());
		specialties.add(new Specialty());
		vet.setSpecialtiesInternal(specialties);
		assertEquals(specialties, vet.getSpecialtiesInternal());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialtiesWithInvalidSpecialties_ivCH5_izXi0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.getSpecialtiesInternal().add(specialty);
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

}