/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetType_UZbm0() {
		Pet pet = new Pet();
		PetType type = new PetType();
		pet.setType(type);
		assertEquals(type, pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_QOFp0() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
		assertEquals(0, visits.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithNullBirthDate_HdiR1() {
		Pet pet = new Pet();
		pet.setBirthDate(null);
		LocalDate birthDate = pet.getBirthDate();
		assertNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_validDate_dYel0() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_nullDate_FXUj1() {
		Pet pet = new Pet();
		pet.setBirthDate(null);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_tiGb1_fid1() {
		Pet pet = new Pet();
		pet.addVisit(null);
		assertEquals(1, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_QOFp0_1() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_QOFp0_2() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertEquals(0, visits.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithInvalidBirthDate_DOiN2_fid1() {
		Pet pet = new Pet();
		pet.setBirthDate(LocalDate.of(2024, 2, 29));
		LocalDate birthDate = pet.getBirthDate();
		assertEquals(LocalDate.of(2024, 2, 29), birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_UUKz2_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 31);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_2_pUXF3_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 2, 28);
		pet.setBirthDate(birthDate);
		assertEquals(LocalDate.of(2022, 2, 28), pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_4_asGn5_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 30);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_5_ixcl6_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 29);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_6_DAvY7_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 28);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_7_QnKH8_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 27);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_8_noQs9_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 26);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_9_JAri10_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 25);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_10_sbGE11_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 24);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_11_fZrK12_fid1() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 23);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

}