/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_dkOW0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertEquals(0, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_hWcn0_2() {
		Owner owner = new Owner();
		String address = owner.getAddress();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithNull_cnlH1() {
		Owner owner = new Owner();
		owner.setAddress(null);
		String address = owner.getAddress();
		assertNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithEmptyString_ExVN2() {
		Owner owner = new Owner();
		owner.setAddress("");
		String address = owner.getAddress();
		assertEquals("", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithValidAddress_zExM3() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		String address = owner.getAddress();
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidId_JfKM1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_aknw0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephoneNull_DHNP1() {
		Owner owner = new Owner();
		String expectedTelephone = null;
		String actualTelephone = owner.getTelephone();
		assertEquals(expectedTelephone, actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidName_ReturnsNull_czTt1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Barky", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_IgnoreNew_ReturnsNull_Hunq3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Barky", true);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NewPet_GaSH0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertTrue(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_SinglePet_MPiE3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_MultiplePets_claT4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidName_ReturnsNull_IxZx1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Invalid", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyName_ReturnsNull_nxLx3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_tzoI0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithNull_psAm1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
		assertNull(owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithEmptyString_bIyg2() {
		Owner owner = new Owner();
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithInvalidString_GiSQ3() {
		Owner owner = new Owner();
		owner.setTelephone("abcdefghij");
		assertEquals("abcdefghij", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithLongString_TABX5() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890123456789012345678901234567890");
		assertEquals("1234567890123456789012345678901234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_gyNP0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals("123 Main St", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithNull_lEKk1() {
		Owner owner = new Owner();
		owner.setAddress(null);
		assertNull(owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithEmptyString_rAwZ2() {
		Owner owner = new Owner();
		owner.setAddress("");
		assertEquals("", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithInvalidString_xiWE3() {
		Owner owner = new Owner();
		owner.setAddress("Invalid Address");
		assertEquals("Invalid Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithDifferentCasing_HVmk5() {
		Owner owner = new Owner();
		owner.setAddress("123 main st");
		assertEquals("123 main st", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithSpecialCharacters_OWyl7() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St, Suite 100");
		assertEquals("123 Main St, Suite 100", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLines_oIYz8() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St\nSuite 100");
		assertEquals("123 Main St\nSuite 100", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLinesAndSpecialCharacters_RLFB9() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St\nSuite 100\nNew York, NY 10001");
		assertEquals("123 Main St\nSuite 100\nNew York, NY 10001", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLinesAndSpecialCharactersAndWhitespace_khCi10() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St\nSuite 100\nNew York, NY 10001\n");
		assertEquals("123 Main St\nSuite 100\nNew York, NY 10001\n", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLinesAndSpecialCharactersAndWhitespaceAndDifferentCasingAndInvalidString_Tfeo12() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St\nSuite 100\nNew York, NY 10001\nInvalid Address");
		assertEquals("123 Main St\nSuite 100\nNew York, NY 10001\nInvalid Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLinesAndSpecialCharactersAndWhitespaceAndDifferentCasingAndInvalidStringAndNull_YLYC13() {
		Owner owner = new Owner();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithNull_WiWu1() {
		Owner owner = new Owner();
		owner.setCity(null);
		String city = owner.getCity();
		assertNull(city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithEmptyString_KCHs2() {
		Owner owner = new Owner();
		owner.setCity("");
		String city = owner.getCity();
		assertEquals("", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithValidString_xjkG3() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String city = owner.getCity();
		assertEquals("New York", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithNullParameter_qhBn5_OmSt0() {
		Owner owner = new Owner();
		String city = owner.getCity();
		assertNull(city);
	}

}