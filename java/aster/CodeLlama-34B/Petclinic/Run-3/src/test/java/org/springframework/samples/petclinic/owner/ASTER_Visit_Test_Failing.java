/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Visit_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateInvalid_eeiZ2() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(2022, 12, 25);
		visit.setDate(date);
		assertNotEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_fUPv0_1() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_fUPv0_2() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertEquals("", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithInvalidDate_sDhC2() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertNotEquals(LocalDate.now(), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithNullDate_bHnp3() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertNull(date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithFutureDate_DjKa4() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertTrue(date.isAfter(LocalDate.now()));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithPastDate_fVcQ5() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertTrue(date.isBefore(LocalDate.now()));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithYesterdayDate_jjoQ7() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now().minusDays(1), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithTomorrowDate_cJgW8() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now().plusDays(1), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithNonHolidayDate_YjZd12() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertNotEquals(LocalDate.now().getDayOfWeek(), date.getDayOfWeek());
	}

}