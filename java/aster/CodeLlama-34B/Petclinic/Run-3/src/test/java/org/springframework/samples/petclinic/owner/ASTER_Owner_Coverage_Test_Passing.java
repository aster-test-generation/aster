/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyName_jpSw1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("", false);
		Assertions.assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NoMatchingPet_HvcV2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", false);
		Assertions.assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_InvalidPetId_PGKc2() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		try {
			owner.addVisit(0, visit);
			Assertions.fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			Assertions.assertEquals("Invalid Pet identifier!", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_noPets_ZjLO4() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		Assertions.assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_NullVisitDate_Mebp5_fid1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		visit.setDate(null);
		try {
			owner.addVisit(pet.getId(), visit);
			Assertions.fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			Assertions.assertEquals("Pet identifier must not be null!", e.getMessage());
		}
	}

}