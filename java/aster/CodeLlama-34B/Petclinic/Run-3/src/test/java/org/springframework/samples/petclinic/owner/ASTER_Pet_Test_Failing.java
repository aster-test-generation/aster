/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_tiGb1() {
		Pet pet = new Pet();
		pet.addVisit(null);
		assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_VPIn0() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNotNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithInvalidBirthDate_DOiN2() {
		Pet pet = new Pet();
		pet.setBirthDate(LocalDate.of(2023, 2, 29));
		LocalDate birthDate = pet.getBirthDate();
		assertNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_UUKz2() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 32);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_2_pUXF3() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 2, 29);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_3_uTcR4() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 31);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_4_asGn5() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 30);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_5_ixcl6() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 29);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_6_DAvY7() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 28);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_7_QnKH8() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 27);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_8_noQs9() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 26);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_9_JAri10() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 25);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_10_sbGE11() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 24);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_invalidDate_11_fZrK12() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 23);
		pet.setBirthDate(birthDate);
		assertNull(pet.getBirthDate());
	}

}