/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_kdQf0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithNull_KJzG1() {
		Owner owner = new Owner();
		owner.setCity(null);
		assertNull(owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithEmptyString_SSgc2() {
		Owner owner = new Owner();
		owner.setCity("");
		assertEquals("", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithInvalidString_UZBO3() {
		Owner owner = new Owner();
		owner.setCity("Invalid City");
		assertEquals("Invalid City", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithDifferentCase_KypC5() {
		Owner owner = new Owner();
		owner.setCity("new york");
		assertEquals("new york", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithSpecialCharacters_hfwq7() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithMultipleCities_Iakx8_1() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		owner.setCity("Los Angeles, CA");
		assertEquals("New York, NY", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithMultipleCities_Iakx8_2() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		owner.setCity("Los Angeles, CA");
		assertEquals("Los Angeles, CA", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithDifferentCities_fcod9_1() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		owner.setCity("Chicago, IL");
		assertEquals("New York, NY", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithDifferentCities_fcod9_2() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		owner.setCity("Chicago, IL");
		assertEquals("Chicago, IL", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithSameCity_ThGj10_1() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NewPet_ruFC0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertTrue(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_ExistingPet_IYhj1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertFalse(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_DcYj0() {
		Owner owner = new Owner();
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithId_THiP1() {
		Owner owner = new Owner();
		owner.setId(1);
		String expected = "Owner[id=1, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithLastName_eXFa3() {
		Owner owner = new Owner();
		owner.setLastName("Smith");
		String expected = "Owner[id=null, new=false, lastName=Smith, firstName=null, address=null, city=null, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithFirstName_mfAJ4() {
		Owner owner = new Owner();
		owner.setFirstName("John");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=John, address=null, city=null, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithAddress_ECgI5() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=123 Main St, city=null, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithCity_bBvd6() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=New York, telephone=null]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithTelephone_vfkN7() {
		Owner owner = new Owner();
		owner.setTelephone("555-555-5555");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=555-555-5555]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_oLvp0() {
		Owner owner = new Owner();
		String city = owner.getCity();
		assertEquals("City should be empty", "", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithCity_TJyC1() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String city = owner.getCity();
		assertEquals("City should be New York", "New York", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithNullCity_AfPV2() {
		Owner owner = new Owner();
		owner.setCity(null);
		String city = owner.getCity();
		assertNull("City should be null", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_KQPe0() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		assertEquals(expectedTelephone, actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1_1() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals(expectedTelephone, actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1_2() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertNull(actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1_3() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals("", actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1_4() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals("1234567890", actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1_5() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals("abcdefghij", actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_vRDP0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithNull_ftDj1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
		assertNull(owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithEmptyString_WCpe2() {
		Owner owner = new Owner();
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithInvalidString_Okic3() {
		Owner owner = new Owner();
		owner.setTelephone("abcdefghij");
		assertEquals("abcdefghij", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithDifferentValidString_jEuA5() {
		Owner owner = new Owner();
		owner.setTelephone("0987654321");
		assertEquals("0987654321", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithMaxLengthString_phNg6() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890123456789012345678901234567890");
		assertEquals("1234567890123456789012345678901234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithMinLengthString_uSSB7() {
		Owner owner = new Owner();
		owner.setTelephone("123456789012345678901234567890123456789");
		assertEquals("123456789012345678901234567890123456789", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidName_ReturnsPet_LigP0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", false);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidName_ReturnsPet_LigP0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", false);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidName_ReturnsNull_JVBF1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Barky", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_IgnoreNew_ReturnsPet_Rowr2_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", true);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_IgnoreNew_ReturnsPet_Rowr2_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", true);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_IgnoreNew_ReturnsNull_bjLu3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Barky", true);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_ReturnsNull_HFul4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_ReturnsPet_nBNA5_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, true);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_ReturnsPet_nBNA5_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, true);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_bajM1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(null, visit);
		Assertions.assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_zFvt2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addVisit(pet.getId(), null);
		Assertions.assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_YqVc3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(0, visit);
		Assertions.assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDuplicateVisit_pxwf4_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet.getId(), visit);
		owner.addVisit(pet.getId(), visit);
		Assertions.assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDuplicateVisit_pxwf4_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet.getId(), visit);
		owner.addVisit(pet.getId(), visit);
		Assertions.assertEquals(1, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisits_AJhb5_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet.getId(), visit1);
		owner.addVisit(pet.getId(), visit2);
		Assertions.assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisits_AJhb5_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet.getId(), visit1);
		owner.addVisit(pet.getId(), visit2);
		Assertions.assertEquals(2, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultiplePets_BIAX6_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultiplePets_BIAX6_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(1, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultiplePets_BIAX6_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(1, owner.getPets().get(1).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisitsAndPets_tabf7_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		Assertions.assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisitsAndPets_tabf7_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		Assertions.assertEquals(2, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisitsAndPets_tabf7_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		Assertions.assertEquals(2, owner.getPets().get(1).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_tBzU0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertEquals(0, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_UVQI0() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressNonEmpty_aFab1() {
		Owner owner = new Owner();
		owner.setAddress("456 Elm St");
		String address = owner.getAddress();
		assertEquals("456 Elm St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_ZlGd0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_ZlGd0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertEquals(1, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidId_PKVu1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NewPet_SkHE2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(pet.getId());
		assertEquals(pet, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyOwner_dQwg4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_MultiplePets_gOVb5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		Pet retrievedPet = owner.getPet(pet1.getId());
		assertEquals(pet1, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_LMrv0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals("123 Main St", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressNull_jcJn1() {
		Owner owner = new Owner();
		owner.setAddress(null);
		assertNull(owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressEmpty_CtxP2() {
		Owner owner = new Owner();
		owner.setAddress("");
		assertEquals("", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithMultipleCities_Iakx8() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
		owner.setCity("Los Angeles, CA");
		assertEquals("Los Angeles, CA", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithDifferentCities_fcod9() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
		owner.setCity("Chicago, IL");
		assertEquals("Chicago, IL", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityWithSameCity_ThGj10() {
		Owner owner = new Owner();
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
		owner.setCity("New York, NY");
		assertEquals("New York, NY", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_ZCAc1() {
		Owner owner = new Owner();
		String expectedTelephone = "1234567890";
		String actualTelephone = owner.getTelephone();
		assertEquals(expectedTelephone, actualTelephone);
		owner.setTelephone(null);
		actualTelephone = owner.getTelephone();
		assertNull(actualTelephone);
		owner.setTelephone("");
		actualTelephone = owner.getTelephone();
		assertEquals("", actualTelephone);
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals("1234567890", actualTelephone);
		owner.setTelephone("abcdefghij");
		actualTelephone = owner.getTelephone();
		assertEquals("abcdefghij", actualTelephone);
		owner.setTelephone("1234567890");
		actualTelephone = owner.getTelephone();
		assertEquals("1234567890", actualTelephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidName_ReturnsPet_LigP0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", false);
		assertNotNull(pet);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_IgnoreNew_ReturnsPet_Rowr2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", true);
		assertNotNull(pet);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_ReturnsPet_nBNA5() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, true);
		assertNotNull(pet);
		assertEquals("Fido", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDuplicateVisit_pxwf4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet.getId(), visit);
		owner.addVisit(pet.getId(), visit);
		Assertions.assertEquals(1, owner.getPets().size());
		Assertions.assertEquals(1, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisits_AJhb5() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet.getId(), visit1);
		owner.addVisit(pet.getId(), visit2);
		Assertions.assertEquals(1, owner.getPets().size());
		Assertions.assertEquals(2, owner.getPets().get(0).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultiplePets_BIAX6() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(2, owner.getPets().size());
		Assertions.assertEquals(1, owner.getPets().get(0).getVisits().size());
		Assertions.assertEquals(1, owner.getPets().get(1).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithMultipleVisitsAndPets_tabf7() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		owner.addVisit(pet1.getId(), visit1);
		owner.addVisit(pet2.getId(), visit2);
		Assertions.assertEquals(2, owner.getPets().size());
		Assertions.assertEquals(2, owner.getPets().get(0).getVisits().size());
		Assertions.assertEquals(2, owner.getPets().get(1).getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_ZlGd0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
		assertEquals(1, pet.getId());
	}

}