/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Failing {

	private OwnerRepository owners;

	private static final String VIEWS_PETS_CREATE_OR_UPDATE_FORM = "redirect:/owners/{ownerId}/pets/{petId}/edit";

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_OwnerIdNotFound_gDIS0() {
		PetController petController = new PetController(owners);
		int ownerId = 1;
		when(owners.findById(ownerId)).thenReturn(null);
		try {
			petController.findOwner(ownerId);
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: " + ownerId, e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_OwnerIdFound_VYTR1() {
		PetController petController = new PetController(owners);
		int ownerId = 1;
		Owner owner = new Owner();
		when(owners.findById(ownerId)).thenReturn(owner);
		assertEquals(owner, petController.findOwner(ownerId));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_OwnerIdNotFound_NullReturned_RUQy2() {
		PetController petController = new PetController(owners);
		int ownerId = 1;
		when(owners.findById(ownerId)).thenReturn(null);
		assertNull(petController.findOwner(ownerId));
	}

}