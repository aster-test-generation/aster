/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.system;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CrashController_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsRuntimeException_hjZI0() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected RuntimeException to be thrown");
		}
		catch (RuntimeException e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsException_GruZ1() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Exception to be thrown");
		}
		catch (Exception e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsThrowable_iVIm2() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Throwable to be thrown");
		}
		catch (Throwable e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsError_Wmyz3() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Error to be thrown");
		}
		catch (Error e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsExceptionWithCause_LvcR4() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Exception to be thrown with cause");
		}
		catch (Exception e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
			assertNotNull(e.getCause());
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getCause().getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsExceptionWithoutCause_lkOS5() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Exception to be thrown without cause");
		}
		catch (Exception e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
			assertNull(e.getCause());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsErrorWithCause_SEIG6() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Error to be thrown with cause");
		}
		catch (Error e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
			assertNotNull(e.getCause());
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getCause().getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsErrorWithoutCause_GbGv7() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Error to be thrown without cause");
		}
		catch (Error e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
			assertNull(e.getCause());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testTriggerException_throwsThrowableWithCause_DGCa8() {
		CrashController controller = new CrashController();
		try {
			controller.triggerException();
			fail("Expected Throwable to be thrown with cause");
		}
		catch (Throwable e) {
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getMessage());
			assertNotNull(e.getCause());
			assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
					e.getCause().getMessage());
		}
	}

}