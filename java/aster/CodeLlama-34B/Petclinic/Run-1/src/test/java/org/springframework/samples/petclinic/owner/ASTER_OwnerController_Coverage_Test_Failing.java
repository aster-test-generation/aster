/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Failing {

	OwnerRepository ownerRepository;

	OwnerController ownerController;

	private RedirectAttributes redirectAttributes;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitFindForm_sbBs0() {
		String expectedView = "owners/findOwners";
		String actualView = ownerController.initFindForm();
		assertEquals(expectedView, actualView);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwnerWithInvalidOwnerId_Gzqj2_1() {
		int ownerId = -1;
		ModelAndView result = ownerController.showOwner(ownerId);
		assertEquals("owners/ownerDetails", result.getViewName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwnerWithInvalidOwnerId_Gzqj2_2() {
		int ownerId = -1;
		ModelAndView result = ownerController.showOwner(ownerId);
		assertEquals(null, result.getModel().get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithNullId_UHXe1() {
		Integer ownerId = null;
		Owner result = ownerController.findOwner(ownerId);
		assertNotNull(result);
		assertEquals(new Owner(), result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwnerWithInvalidOwnerId_Gzqj2() {
		int ownerId = -1;
		ModelAndView result = ownerController.showOwner(ownerId);
		assertEquals("owners/ownerDetails", result.getViewName());
		assertEquals(null, result.getModel().get("owner"));
	}

	@Test
	public void processUpdateOwnerForm_tyra0() {
		Owner owner = new Owner();
		owner.setId(1);
		owner.setCity("New York");
		owner.setTelephone("1234567890");
		owner.setAddress("123 Main St");
		Pet pet = new Pet();
		pet.setId(1);
		pet.setName("Fido");
		owner.addPet(pet);
		OwnerController ownerController = new OwnerController(ownerRepository);
		String result = ownerController.processUpdateOwnerForm(owner, null, 1, null);
		assertEquals("redirect:/owners/1", result);
	}

}