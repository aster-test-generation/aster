/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Person_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_orUH0() {
		Person person = new Person();
		String lastName = person.getLastName();
		assertEquals("Last name should be empty", "", lastName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_ValidInput_fQOi0() {
		Person person = new Person();
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_NullInput_uROs1() {
		Person person = new Person();
		person.setFirstName(null);
		assertNull(person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_EmptyStringInput_cADu2() {
		Person person = new Person();
		person.setFirstName("");
		assertEquals("", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_InvalidInput_jrXy3() {
		Person person = new Person();
		person.setFirstName("John Doe");
		assertEquals("John Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_DuplicateInput_xfJT4() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_DifferentInput_egcd5() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("Jane");
		assertEquals("Jane", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_NullObject_XYQi6() {
		Person person = null;
		person.setFirstName("John");
		assertNull(person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_InvalidObject_Calv7() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName(null);
		assertNull(person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_DifferentObject_jOUA8() {
		Person person = new Person();
		person.setFirstName("John");
		Person person2 = new Person();
		person2.setFirstName("Jane");
		assertEquals("Jane", person2.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_DuplicateObject_JgXR9() {
		Person person = new Person();
		person.setFirstName("John");
		Person person2 = new Person();
		person2.setFirstName("John");
		assertEquals("John", person2.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_NullAndInvalidInput_HIgY10_1() {
		Person person = new Person();
		person.setFirstName(null);
		person.setFirstName("John");
		assertNull(person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_NullAndInvalidInput_HIgY10_2() {
		Person person = new Person();
		person.setFirstName(null);
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_InvalidAndNullInput_UVKl12_1() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName(null);
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_ValidAndInvalidInput_WDbw13_1() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("Jane");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstName_gups0() {
		Person person = new Person();
		String firstName = person.getFirstName();
		assertEquals("John", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithNull_vPOg1() {
		Person person = new Person();
		person.setFirstName(null);
		String firstName = person.getFirstName();
		assertNull(firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithEmptyString_xNky2() {
		Person person = new Person();
		person.setFirstName("");
		String firstName = person.getFirstName();
		assertEquals("", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithMultipleNames_RqPS4() {
		Person person = new Person();
		person.setFirstName("John Doe");
		String firstName = person.getFirstName();
		assertEquals("John", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithInvalidName_qqoS5() {
		Person person = new Person();
		person.setFirstName("John123");
		String firstName = person.getFirstName();
		assertEquals("John123", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithSpecialCharacters_qiCW6() {
		Person person = new Person();
		person.setFirstName("John Doe!");
		String firstName = person.getFirstName();
		assertEquals("John Doe!", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithAccents_JDMK7() {
		Person person = new Person();
		person.setFirstName("Jhn");
		String firstName = person.getFirstName();
		assertEquals("Jhn", firstName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastName_CjDt0() {
		Person person = new Person();
		person.setLastName("Smith");
		assertEquals("Smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithNull_wxKJ1() {
		Person person = new Person();
		person.setLastName(null);
		assertNull(person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithEmptyString_ipSG2() {
		Person person = new Person();
		person.setLastName("");
		assertEquals("", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithInvalidValue_AsPC4() {
		Person person = new Person();
		person.setLastName("123");
		assertEquals("123", person.getLastName());
	}

}