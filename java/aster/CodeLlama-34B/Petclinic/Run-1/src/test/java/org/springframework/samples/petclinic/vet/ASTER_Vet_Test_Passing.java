/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_empty_ftiN0() {
		Vet vet = new Vet();
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(0, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_null_JuNh2() {
		Vet vet = new Vet();
		vet.addSpecialty(null);
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(0, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_uJOR0() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
		assertEquals("Cardiology", specialties.get(0).getName());
		assertEquals("Dermatology", specialties.get(1).getName());
		assertEquals("Endocrinology", specialties.get(2).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesWithEmptyList_PGrp2() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(0, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesWithNullList_Pngy3() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertNull(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_Null_nSum0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_Empty_zSdL2() {
		Vet vet = new Vet();
		vet.addSpecialty(null);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_MultipleSpecialties_pLyL3() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(2, specialties.size());
		assertTrue(specialties.contains(specialty1));
		assertTrue(specialties.contains(specialty2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_NullSpecialty_ZDeK4() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		vet.addSpecialty(null);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(1, specialties.size());
		assertTrue(specialties.contains(specialty));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_PgsT0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_NullSpecialty_vjNb1() {
		Vet vet = new Vet();
		Specialty specialty = null;
		vet.addSpecialty(specialty);
		assertEquals(0, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_SpecialtyAlreadyInList_bQHk2() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_SpecialtyNotInList_bnSS3() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty2);
		assertEquals(2, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_uJOR0_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_uJOR0_2() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Cardiology", specialties.get(0).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_uJOR0_3() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Dermatology", specialties.get(1).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_uJOR0_4() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Endocrinology", specialties.get(2).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_MultipleSpecialties_pLyL3_1() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(2, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_MultipleSpecialties_pLyL3_2() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.contains(specialty1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_MultipleSpecialties_pLyL3_3() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.contains(specialty2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_NullSpecialty_ZDeK4_1() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		vet.addSpecialty(null);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(1, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_NullSpecialty_ZDeK4_2() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		vet.addSpecialty(null);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.contains(specialty));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_SpecialtyAlreadyInList_bQHk2_1() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_SpecialtyNotInList_bnSS3_1() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty2);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_SpecialtyNotInList_bnSS3_2() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		Specialty specialty2 = new Specialty();
		vet.addSpecialty(specialty2);
		assertEquals(2, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_nonEmpty_afTO1_rxEL0() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_duplicate_hopC3_ufuZ0() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(2, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_nullAndNonNull_qQKS5_NFnl0() {
		Vet vet = new Vet();
		vet.addSpecialty(null);
		vet.addSpecialty(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_nonNullAndNull_MzVM6_DJtW0() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(null);
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(1, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_differentSpecialtiesAndNull_ZMad7_NCWT0() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(null);
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(2, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_nullAndDifferentSpecialties_zRHP8_JCmM0() {
		Vet vet = new Vet();
		vet.addSpecialty(null);
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(2, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_differentSpecialtiesAndNullAndNonNull_acMP9_CvqS0() {
		Vet vet = new Vet();
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(new Specialty());
		vet.addSpecialty(null);
		vet.addSpecialty(new Specialty());
		int nrOfSpecialties = vet.getNrOfSpecialties();
		assertEquals(2, nrOfSpecialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_KOyh0_eBYn0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		specialties.add(new Specialty());
		specialties.add(new Specialty());
		vet.setSpecialtiesInternal(specialties);
		assertEquals(specialties, vet.getSpecialtiesInternal());
	}

}