/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_PdsM0_1() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_PdsM0_2() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertEquals(0, visits.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_xWaX0() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetType_NullPet_Hsmg4() {
		Pet pet = null;
		PetType petType = pet.getType();
		assertNull(petType);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_vZEe0() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNotNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithValidDate_YrKj1() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertEquals(LocalDate.of(2022, 1, 1), birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithInvalidDate_MOCu2() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNotEquals(LocalDate.of(2022, 1, 1), birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithNullDate_KCqC3() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetType_Dog_sXuB0() {
		Pet pet = new Pet();
		PetType type = new PetType();
		pet.setType(type);
		assertEquals(type, pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetType_NullType_rGHC1_xqUf0() {
		Pet pet = new Pet();
		pet.setType(null);
		PetType petType = pet.getType();
		assertNull(petType);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetType_NullName_BZsq5_KVAo0() {
		Pet pet = new Pet();
		pet.setType(new PetType());
		PetType petType = pet.getType();
		assertNotNull(petType);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_PdsM0() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
		assertEquals(0, visits.size());
	}

}