/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Passing {

	private WebDataBinder dataBinder;

	private VisitController visitController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitFormWithErrors_Xlyh0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(true);
		String viewName = visitController.processNewVisitForm(owner, 1, visit, result, redirectAttributes);
		assertEquals("pets/createOrUpdateVisitForm", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitFormWithoutErrors_tuIb1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		String viewName = visitController.processNewVisitForm(owner, 1, visit, result, redirectAttributes);
		assertEquals("redirect:/owners/{ownerId}", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitFormWithOwner_QVHD2_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		String viewName = visitController.processNewVisitForm(owner, 1, visit, result, redirectAttributes);
		assertTrue(owner.getPets().contains(pet));
	}

}