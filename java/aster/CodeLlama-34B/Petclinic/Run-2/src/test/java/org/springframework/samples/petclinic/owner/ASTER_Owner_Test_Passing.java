/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_fkil0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityNull_uTqa1() {
		Owner owner = new Owner();
		owner.setCity(null);
		assertNull(owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityEmpty_kVNN2() {
		Owner owner = new Owner();
		owner.setCity("");
		assertEquals("", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCityNotInDatabase_YSUU3() {
		Owner owner = new Owner();
		owner.setCity("NotInDatabase");
		assertNull(owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_NewPet_bSrw0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertTrue(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_ExistingPet_JKnu1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertFalse(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_YLxs0() {
		Owner owner = new Owner();
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithId_piun1() {
		Owner owner = new Owner();
		owner.setId(1);
		String expected = "Owner[id=1, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithLastName_qYwQ3() {
		Owner owner = new Owner();
		owner.setLastName("Smith");
		String expected = "Owner[id=null, new=false, lastName=Smith, firstName=null, address=null, city=null, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithFirstName_pZou4() {
		Owner owner = new Owner();
		owner.setFirstName("John");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=John, address=null, city=null, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithAddress_ibap5() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=123 Main St, city=null, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithCity_yRHB6() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=New York, telephone=null]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithTelephone_kxNC7() {
		Owner owner = new Owner();
		owner.setTelephone("555-555-5555");
		String expected = "Owner[id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=555-555-5555]";
		String actual = owner.toString();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_gOth0() {
		Owner owner = new Owner();
		String city = owner.getCity();
		assertEquals("City should be null", null, city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithCity_Ukfi1() {
		Owner owner = new Owner();
		owner.setCity("New York");
		String city = owner.getCity();
		assertEquals("City should be New York", "New York", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithNullCity_pTKQ2() {
		Owner owner = new Owner();
		owner.setCity(null);
		String city = owner.getCity();
		assertEquals("City should be null", null, city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithEmptyCity_lmie3() {
		Owner owner = new Owner();
		owner.setCity("");
		String city = owner.getCity();
		assertEquals("City should be empty", "", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithInvalidCity_aOyB4() {
		Owner owner = new Owner();
		owner.setCity("Invalid City");
		String city = owner.getCity();
		assertEquals("City should be Invalid City", "Invalid City", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithMultipleCities_czzi5() {
		Owner owner = new Owner();
		owner.setCity("New York");
		owner.setCity("Los Angeles");
		String city = owner.getCity();
		assertEquals("City should be Los Angeles", "Los Angeles", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithMultipleCitiesAndNull_OWeM6() {
		Owner owner = new Owner();
		owner.setCity("New York");
		owner.setCity(null);
		String city = owner.getCity();
		assertEquals("City should be null", null, city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithMultipleCitiesAndEmpty_pnNc7() {
		Owner owner = new Owner();
		owner.setCity("New York");
		owner.setCity("");
		String city = owner.getCity();
		assertEquals("City should be empty", "", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCityWithMultipleCitiesAndInvalid_VMFU8() {
		Owner owner = new Owner();
		owner.setCity("New York");
		owner.setCity("Invalid City");
		String city = owner.getCity();
		assertEquals("City should be Invalid City", "Invalid City", city);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_yRSs0() {
		Owner owner = new Owner();
		String telephone = owner.getTelephone();
		assertEquals("1234567890", telephone);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_bMAf0() {
		Owner owner = new Owner();
		owner.setTelephone("1234567890");
		assertEquals("1234567890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithNull_Xqos1() {
		Owner owner = new Owner();
		owner.setTelephone(null);
		assertEquals(null, owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephoneWithEmptyString_QBWj2() {
		Owner owner = new Owner();
		owner.setTelephone("");
		assertEquals("", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingPet_ghWP1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("Fido");
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyName_UIWW3() {
		Owner owner = new Owner();
		Pet result = owner.getPet("");
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingPet_hXaY1() {
		Owner owner = new Owner();
		Pet result = owner.getPet("Barky", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NullName_TyyV4() {
		Owner owner = new Owner();
		Pet result = owner.getPet(null, false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyName_WGnA5() {
		Owner owner = new Owner();
		Pet result = owner.getPet("", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_CadP0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet.getId(), visit);
		Assertions.assertEquals(1, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_lOEW1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(null, visit);
		Assertions.assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_MKNu2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addVisit(pet.getId(), null);
		Assertions.assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_NQFs3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(0, visit);
		Assertions.assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDuplicateVisit_ZjAE4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet.getId(), visit);
		owner.addVisit(pet.getId(), visit);
		Assertions.assertEquals(1, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDifferentPetId_zuhF5_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(1, pet1.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDifferentPetId_zuhF5_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(1, pet2.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDifferentVisit_sdGZ6() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		owner.addVisit(pet.getId(), visit1);
		owner.addVisit(pet.getId(), visit2);
		Assertions.assertEquals(2, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisitAndNullPetId_Ntgk8() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addVisit(null, null);
		Assertions.assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisitAndInvalidPetId_Pywe9() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addVisit(0, null);
		Assertions.assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisitAndDifferentPetId_sJkh10_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addVisit(pet1.getId(), null);
		owner.addVisit(pet2.getId(), null);
		Assertions.assertEquals(0, pet1.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisitAndDifferentPetId_sJkh10_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addVisit(pet1.getId(), null);
		owner.addVisit(pet2.getId(), null);
		Assertions.assertEquals(0, pet2.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_empty_ZvLz0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertEquals(0, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_nullPet_sdsW3() {
		Owner owner = new Owner();
		owner.addPet(null);
		List<Pet> pets = owner.getPets();
		assertEquals(0, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_nullOwner_uYvq6() {
		Owner owner = null;
		List<Pet> pets = owner.getPets();
		assertEquals(0, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_VrCz0_1() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertNotNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_VrCz0_2() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithNull_Oyuf1() {
		Owner owner = new Owner();
		owner.setAddress(null);
		String address = owner.getAddress();
		assertNull(address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithEmptyString_akVx2() {
		Owner owner = new Owner();
		owner.setAddress("");
		String address = owner.getAddress();
		assertEquals("", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithValidString_QVto3() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		String address = owner.getAddress();
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddressWithInvalidString_TNua4() {
		Owner owner = new Owner();
		owner.setAddress("Invalid Address");
		String address = owner.getAddress();
		assertNotEquals("Invalid Address", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_OvzK0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_OvzK0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertEquals(1, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_InvalidId_BJwO1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NewPet_IiQg2_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(pet.getId());
		assertNotNull(retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NewPet_IiQg2_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(pet.getId());
		assertEquals(pet.getId(), retrievedPet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_BFfX0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals("123 Main St", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithNull_UFKm1() {
		Owner owner = new Owner();
		owner.setAddress(null);
		assertNull(owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithEmptyString_ibTG2() {
		Owner owner = new Owner();
		owner.setAddress("");
		assertEquals("", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithInvalidString_pcvS3() {
		Owner owner = new Owner();
		owner.setAddress("Invalid Address");
		assertEquals("Invalid Address", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithDifferentCase_PSwv5() {
		Owner owner = new Owner();
		owner.setAddress("123 main st");
		assertEquals("123 main st", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithSpecialCharacters_wdun7() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St, New York");
		assertEquals("123 Main St, New York", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMultipleLines_uHRq8() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St\nNew York");
		assertEquals("123 Main St\nNew York", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddressWithMaxLength_hZWj9() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St, New York, NY 10001");
		assertEquals("123 Main St, New York, NY 10001", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithDifferentPetId_zuhF5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		Visit visit = new Visit();
		owner.addVisit(pet1.getId(), visit);
		owner.addVisit(pet2.getId(), visit);
		Assertions.assertEquals(1, pet1.getVisits().size());
		Assertions.assertEquals(1, pet2.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisitAndDifferentPetId_sJkh10() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addVisit(pet1.getId(), null);
		owner.addVisit(pet2.getId(), null);
		Assertions.assertEquals(0, pet1.getVisits().size());
		Assertions.assertEquals(0, pet2.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_VrCz0() {
		Owner owner = new Owner();
		String address = owner.getAddress();
		assertNotNull(address);
		assertEquals("123 Main St", address);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ValidId_OvzK0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNotNull(pet);
		assertEquals(1, pet.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NewPet_IiQg2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(pet.getId());
		assertNotNull(retrievedPet);
		assertEquals(pet.getId(), retrievedPet.getId());
	}

}