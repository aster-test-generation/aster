/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Passing {

	public void testSetBirthDate_validBirthDate_ffLP0() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	public void testSetBirthDate_nullBirthDate_ioUD1() {
		Pet pet = new Pet();
		pet.setBirthDate(null);
		assertNull(pet.getBirthDate());
	}

	public void testSetBirthDate_invalidBirthDate_Ezrl2() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 13, 1);
		pet.setBirthDate(birthDate);
		assertNotEquals(birthDate, pet.getBirthDate());
	}

	public void testSetBirthDate_differentBirthDate_Vxha3() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertNotEquals(LocalDate.of(2022, 1, 2), pet.getBirthDate());
	}

	public void testSetBirthDate_sameBirthDate_RpYg4() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	public void testSetBirthDate_differentBirthDateObject_dvzt5() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertNotEquals(LocalDate.of(2022, 1, 1), pet.getBirthDate());
	}

	public void testSetBirthDate_sameBirthDateObject_HZwq6() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	public void testSetBirthDate_differentBirthDateObjectWithSameValue_TJFB7() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertNotEquals(LocalDate.of(2022, 1, 1), pet.getBirthDate());
	}

	public void testSetBirthDate_sameBirthDateObjectWithSameValue_LtaI8() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	public void testSetBirthDate_differentBirthDateObjectWithDifferentValue_fdFF9() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.of(2022, 1, 1);
		pet.setBirthDate(birthDate);
		assertNotEquals(LocalDate.of(2022, 1, 2), pet.getBirthDate());
	}

	private PetType type;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_empty_QenT0() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertTrue(visits.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_nonEmpty_DKER1_1() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		pet.addVisit(visit);
		Collection<Visit> visits = pet.getVisits();
		assertEquals(1, visits.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_nonEmpty_DKER1_2() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		pet.addVisit(visit);
		Collection<Visit> visits = pet.getVisits();
		assertTrue(visits.contains(visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_hxqy1() {
		Pet pet = new Pet();
		pet.addVisit(null);
		assertEquals(0, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_dFaK0_1() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNotNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_dFaK0_2() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertEquals(LocalDate.now(), birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDateWithMockito_VKFc2() {
		Pet pet = mock(Pet.class);
		when(pet.getBirthDate()).thenReturn(LocalDate.now());
		LocalDate birthDate = pet.getBirthDate();
		assertEquals(LocalDate.now(), birthDate);
		verify(pet).getBirthDate();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetType_Dog_Byrp0() {
		Pet pet = new Pet();
		PetType type = new PetType();
		pet.setType(type);
		assertEquals(type, pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetType_Null_ulUc8_NuiF0() {
		Pet pet = new Pet();
		pet.setType(null);
		assertNull(pet.getType());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_nonEmpty_DKER1() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		pet.addVisit(visit);
		Collection<Visit> visits = pet.getVisits();
		assertEquals(1, visits.size());
		assertTrue(visits.contains(visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_dFaK0() {
		Pet pet = new Pet();
		LocalDate birthDate = pet.getBirthDate();
		assertNotNull(birthDate);
		assertEquals(LocalDate.now(), birthDate);
	}

}