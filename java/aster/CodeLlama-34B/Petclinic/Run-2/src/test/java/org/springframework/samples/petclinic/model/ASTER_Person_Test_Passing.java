/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Person_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_Null_rNYp0() {
		Person person = new Person();
		assertNull(person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_Empty_gCAk1() {
		Person person = new Person();
		person.setLastName("");
		assertEquals("", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_NonEmpty_Awgq2() {
		Person person = new Person();
		person.setLastName("Smith");
		assertEquals("Smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_MultipleNames_uYff3() {
		Person person = new Person();
		person.setLastName("Smith");
		person.setFirstName("John");
		assertEquals("Smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_MultipleNames_ReverseOrder_nGVT4() {
		Person person = new Person();
		person.setFirstName("John");
		person.setLastName("Smith");
		assertEquals("Smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_MultipleNames_DifferentCases_Cygs5() {
		Person person = new Person();
		person.setFirstName("John");
		person.setLastName("smith");
		assertEquals("smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_MultipleNames_DifferentCases_ReverseOrder_gmSS6() {
		Person person = new Person();
		person.setFirstName("john");
		person.setLastName("SMITH");
		assertEquals("SMITH", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetLastName_MultipleNames_DifferentCases_MixedOrder_VTKy7() {
		Person person = new Person();
		person.setFirstName("john");
		person.setLastName("sMiTh");
		assertEquals("sMiTh", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstName_TuLB0() {
		Person person = new Person();
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithNull_BpOw1() {
		Person person = new Person();
		person.setFirstName(null);
		assertNull(person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithEmptyString_Atsl2() {
		Person person = new Person();
		person.setFirstName("");
		assertEquals("", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithInvalidName_APuE4() {
		Person person = new Person();
		person.setFirstName("123");
		assertEquals("123", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithValidName_Sjtq5() {
		Person person = new Person();
		person.setFirstName("John Doe");
		assertEquals("John Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCases_sygk6_1() {
		Person person = new Person();
		person.setFirstName("john");
		person.setFirstName("JOHN");
		person.setFirstName("John");
		assertEquals("john", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCases_sygk6_2() {
		Person person = new Person();
		person.setFirstName("john");
		person.setFirstName("JOHN");
		person.setFirstName("John");
		assertEquals("JOHN", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCases_sygk6_3() {
		Person person = new Person();
		person.setFirstName("john");
		person.setFirstName("JOHN");
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentSpaces_dzwc7_1() {
		Person person = new Person();
		person.setFirstName("John  Doe");
		person.setFirstName("John   Doe");
		person.setFirstName("John    Doe");
		assertEquals("John  Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCharacters_LjBa8_1() {
		Person person = new Person();
		person.setFirstName("John Doe");
		person.setFirstName("John_Doe");
		person.setFirstName("John-Doe");
		person.setFirstName("John.Doe");
		assertEquals("John Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCharacters_LjBa8_2() {
		Person person = new Person();
		person.setFirstName("John Doe");
		person.setFirstName("John_Doe");
		person.setFirstName("John-Doe");
		person.setFirstName("John.Doe");
		assertEquals("John_Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCharacters_LjBa8_3() {
		Person person = new Person();
		person.setFirstName("John Doe");
		person.setFirstName("John_Doe");
		person.setFirstName("John-Doe");
		person.setFirstName("John.Doe");
		assertEquals("John-Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCharacters_LjBa8_4() {
		Person person = new Person();
		person.setFirstName("John Doe");
		person.setFirstName("John_Doe");
		person.setFirstName("John-Doe");
		person.setFirstName("John.Doe");
		assertEquals("John.Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLengths_YVVE9_1() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("John Doe");
		person.setFirstName("John Doe Smith");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLengths_YVVE9_2() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("John Doe");
		person.setFirstName("John Doe Smith");
		assertEquals("John Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLengths_YVVE9_3() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("John Doe");
		person.setFirstName("John Doe Smith");
		assertEquals("John Doe Smith", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLocales_TJTs11_1() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("JOHN");
		person.setFirstName("Jhn");
		person.setFirstName("JOHN");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLocales_TJTs11_2() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("JOHN");
		person.setFirstName("Jhn");
		person.setFirstName("JOHN");
		assertEquals("JOHN", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLocales_TJTs11_3() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("JOHN");
		person.setFirstName("Jhn");
		person.setFirstName("JOHN");
		assertEquals("Jhn", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstName_aGxX0() {
		Person person = new Person();
		String expected = "John";
		String actual = person.getFirstName();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithNull_OUst1() {
		Person person = new Person();
		String expected = null;
		String actual = person.getFirstName();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetFirstNameWithEmptyString_GNII2() {
		Person person = new Person();
		String expected = "";
		String actual = person.getFirstName();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithNull_bGpY2() {
		Person person = new Person();
		person.setLastName(null);
		assertNull(person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithInvalidValue_SZdn3() {
		Person person = new Person();
		person.setLastName("12345");
		assertEquals("12345", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithDifferentCase_QPhx5() {
		Person person = new Person();
		person.setLastName("smith");
		assertEquals("smith", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithSpecialCharacters_UjvE7() {
		Person person = new Person();
		person.setLastName("Smith-Johnson");
		assertEquals("Smith-Johnson", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetLastNameWithMultipleNames_ZBBK8() {
		Person person = new Person();
		person.setLastName("Smith Johnson");
		assertEquals("Smith Johnson", person.getLastName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentTypes_Mbox10_qgHa0_1() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("123");
		person.setFirstName("123.456");
		person.setFirstName("true");
		person.setFirstName("false");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentTypes_Mbox10_qgHa0_2() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("123");
		person.setFirstName("123.456");
		person.setFirstName("true");
		person.setFirstName("false");
		assertEquals("123", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentTypes_Mbox10_qgHa0_3() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("123");
		person.setFirstName("123.456");
		person.setFirstName("true");
		person.setFirstName("false");
		assertEquals("123.456", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentTypes_Mbox10_qgHa0_4() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("123");
		person.setFirstName("123.456");
		person.setFirstName("true");
		person.setFirstName("false");
		assertEquals("true", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentTypes_Mbox10_qgHa0_5() {
		Person person = new Person();
		person.setFirstName("John");
		person.setFirstName("123");
		person.setFirstName("123.456");
		person.setFirstName("true");
		person.setFirstName("false");
		assertEquals("false", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCases_sygk6() {
		Person person = new Person();
		person.setFirstName("john");
		assertEquals("john", person.getFirstName());
		person.setFirstName("JOHN");
		assertEquals("JOHN", person.getFirstName());
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentSpaces_dzwc7() {
		Person person = new Person();
		person.setFirstName("John  Doe");
		assertEquals("John  Doe", person.getFirstName());
		person.setFirstName("John   Doe");
		assertEquals("John   Doe", person.getFirstName());
		person.setFirstName("John    Doe");
		assertEquals("John    Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentCharacters_LjBa8() {
		Person person = new Person();
		person.setFirstName("John Doe");
		assertEquals("John Doe", person.getFirstName());
		person.setFirstName("John_Doe");
		assertEquals("John_Doe", person.getFirstName());
		person.setFirstName("John-Doe");
		assertEquals("John-Doe", person.getFirstName());
		person.setFirstName("John.Doe");
		assertEquals("John.Doe", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLengths_YVVE9() {
		Person person = new Person();
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
		person.setFirstName("John Doe");
		assertEquals("John Doe", person.getFirstName());
		person.setFirstName("John Doe Smith");
		assertEquals("John Doe Smith", person.getFirstName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFirstNameWithDifferentLocales_TJTs11() {
		Person person = new Person();
		person.setFirstName("John");
		assertEquals("John", person.getFirstName());
		person.setFirstName("JOHN");
		assertEquals("JOHN", person.getFirstName());
		person.setFirstName("Jhn");
		assertEquals("Jhn", person.getFirstName());
		person.setFirstName("JOHN");
		assertEquals("JOHN", person.getFirstName());
	}

}