/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NamedEntity_Test_Passing {

	NamedEntity entity = new NamedEntity();

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName_keBS0() {
		NamedEntity entity = new NamedEntity();
		String name = entity.getName();
		assertEquals("John Doe", name);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNameWithNull_Uxqk1() {
		NamedEntity entity = new NamedEntity();
		String name = entity.getName();
		assertNull(name);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNameWithEmptyString_MBAa2() {
		NamedEntity entity = new NamedEntity();
		String name = entity.getName();
		assertEquals("", name);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNameWithSpecialCharacters_DqmD4() {
		NamedEntity entity = new NamedEntity();
		String name = entity.getName();
		assertEquals("John Doe!@#$%^&*()_+", name);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetName_ELRc0() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe");
		assertEquals("John Doe", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithNull_cSoz1() {
		NamedEntity entity = new NamedEntity();
		entity.setName(null);
		assertEquals(null, entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithEmptyString_XLdt2() {
		NamedEntity entity = new NamedEntity();
		entity.setName("");
		assertEquals("", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithInvalidName_ObsI4() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe123");
		assertEquals("John Doe123", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithDifferentCase_qEET6() {
		NamedEntity entity = new NamedEntity();
		entity.setName("john doe");
		assertEquals("john doe", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithSpecialCharacters_OoxO7() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe!");
		assertEquals("John Doe!", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithMultipleNames_vjnt8() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe, Jane Doe");
		assertEquals("John Doe, Jane Doe", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithMultipleNamesAndSpecialCharacters_eunZ10() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe, Jane Doe!");
		assertEquals("John Doe, Jane Doe!", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithMultipleNamesAndDifferentCase_uNaz11() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe, jane doe");
		assertEquals("John Doe, jane doe", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithMultipleNamesAndInvalidName_vxXV12() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe, Jane Doe123");
		assertEquals("John Doe, Jane Doe123", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetNameWithMultipleNamesAndDifferentCaseAndSpecialCharacters_xbNd14() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe, jane doe!");
		assertEquals("John Doe, jane doe!", entity.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_Xczj0() {
		NamedEntity entity = new NamedEntity();
		String actual = entity.toString();
		String expected = "NamedEntity";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithNullObject_bkJf6() {
		NamedEntity entity = null;
		String actual = entity.toString();
		String expected = "null";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithNonNamedEntityObject_Trnv7() {
		Object entity = new Object();
		String actual = entity.toString();
		String expected = "Object";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithName_bHGr1_JBDM0() {
		NamedEntity entity = new NamedEntity();
		entity.setName("John Doe");
		String actual = entity.toString();
		String expected = "John Doe";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithNullName_Dhiz2_iiPB0() {
		NamedEntity entity = new NamedEntity();
		String actual = entity.toString();
		String expected = "null";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithEmptyName_FTfj3_JzJU0() {
		NamedEntity entity = new NamedEntity();
		String actual = entity.toString();
		String expected = "";
		assertEquals(expected, actual);
	}

}