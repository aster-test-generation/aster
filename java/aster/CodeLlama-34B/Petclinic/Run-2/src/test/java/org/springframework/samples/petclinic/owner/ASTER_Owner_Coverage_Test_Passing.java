/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_zmpr0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertTrue(owner.getPets().contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_InvalidPetId_ojas2() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		try {
			owner.addVisit(0, visit);
			fail("Expected IllegalArgumentException");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Invalid Pet identifier!", e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_EmptyName_fKGT1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistentName_BcFE2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("Fido", false);
		assertNull(pet);
	}

}