/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_khlu0() {
		Vet vet = new Vet();
		int expected = 3;
		int actual = vet.getNrOfSpecialties();
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_idsj0() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
		assertEquals("Cardiology", specialties.get(0).getName());
		assertEquals("Dermatology", specialties.get(1).getName());
		assertEquals("Ophthalmology", specialties.get(2).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_EmptyList_UHWP1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(0, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_OneElement_DWqM2() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(1, specialties.size());
		assertEquals("Cardiology", specialties.get(0).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_TwoElements_habN3() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(2, specialties.size());
		assertEquals("Cardiology", specialties.get(0).getName());
		assertEquals("Dermatology", specialties.get(1).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_emptySet_AhbG0() {
		Vet vet = new Vet();
		vet.setSpecialtiesInternal(new HashSet<>());
		assertEquals(0, vet.getSpecialties().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_nullSet_OQMb2() {
		Vet vet = new Vet();
		vet.setSpecialtiesInternal(null);
		assertEquals(0, vet.getSpecialties().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_Null_VIVj0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_lTvK0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertEquals(1, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_ListFull_NRAm1() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		Specialty specialty3 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		vet.addSpecialty(specialty3);
		assertEquals(3, vet.getSpecialtiesInternal().size());
		Specialty specialty4 = new Specialty();
		vet.addSpecialty(specialty4);
		assertEquals(3, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_idsj0_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(3, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_idsj0_2() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Cardiology", specialties.get(0).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_idsj0_3() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Dermatology", specialties.get(1).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_idsj0_4() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals("Ophthalmology", specialties.get(2).getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_OneElement_DWqM2_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(1, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialties_TwoElements_habN3_1() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		assertEquals(2, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_ListFull_NRAm1_1() {
		Vet vet = new Vet();
		Specialty specialty1 = new Specialty();
		Specialty specialty2 = new Specialty();
		Specialty specialty3 = new Specialty();
		vet.addSpecialty(specialty1);
		vet.addSpecialty(specialty2);
		vet.addSpecialty(specialty3);
		Specialty specialty4 = new Specialty();
		vet.addSpecialty(specialty4);
		assertEquals(3, vet.getSpecialtiesInternal().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_nonEmptySet_eeNW1_yryk0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		specialties.add(new Specialty());
		specialties.add(new Specialty());
		vet.setSpecialtiesInternal(specialties);
		assertEquals(2, vet.getSpecialties().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_NonNull_rqgC1_sXSu0_1() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(1, specialties.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_NonNull_rqgC1_sXSu0_2() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.contains(specialty));
	}

}