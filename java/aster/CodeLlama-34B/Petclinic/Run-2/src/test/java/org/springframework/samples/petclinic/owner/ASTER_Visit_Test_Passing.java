/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Visit_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_validDate_IrMK0() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(2022, 12, 25);
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_nullDate_XIkq1() {
		Visit visit = new Visit();
		visit.setDate(null);
		assertNull(visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_invalidDate_Glek2() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.of(2022, 12, 32);
		visit.setDate(date);
		assertNull(visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_Idug0_1() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertNotNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_Idug0_2() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertEquals("", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithNonEmptyString_Andu1_2() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertEquals("This is a non-empty string", description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescriptionWithNullString_dIMt3() {
		Visit visit = new Visit();
		String description = visit.getDescription();
		assertNull(description);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescription_rNhQ0() {
		Visit visit = new Visit();
		visit.setDescription("Test Description");
		assertEquals("Test Description", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithEmptyString_pfms1() {
		Visit visit = new Visit();
		visit.setDescription("");
		assertEquals("", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithNull_cbys2() {
		Visit visit = new Visit();
		visit.setDescription(null);
		assertNull(visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescriptionWithInvalidValue_fIPB3() {
		Visit visit = new Visit();
		visit.setDescription("Invalid Value");
		assertNotEquals("Invalid Value", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDate_cZPI0_1() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertNotNull(date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDate_cZPI0_2() {
		Visit visit = new Visit();
		LocalDate date = visit.getDate();
		assertEquals(LocalDate.now(), date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithNull_tjtl1() {
		Visit visit = new Visit();
		visit.setDate(null);
		LocalDate date = visit.getDate();
		assertNull(date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithPastDate_inTe2() {
		Visit visit = new Visit();
		LocalDate pastDate = LocalDate.now().minusDays(1);
		visit.setDate(pastDate);
		LocalDate date = visit.getDate();
		assertEquals(pastDate, date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDateWithFutureDate_qxxU3() {
		Visit visit = new Visit();
		LocalDate futureDate = LocalDate.now().plusDays(1);
		visit.setDate(futureDate);
		LocalDate date = visit.getDate();
		assertEquals(futureDate, date);
	}

}