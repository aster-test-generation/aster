/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndEmptyArguments_vCyK0_aehg0() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[0];
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(0, result.length);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndNonEmptyArguments_trfL3_UKGB0() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
            assertEquals("arg1", result[2]);
            assertEquals("arg2", result[3]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenStopAtNonOption_NMxH4_Jfdh0() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, true);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
            assertEquals("--", result[2]);
            assertEquals("arg1", result[3]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndEmptyArguments_vCyK2_aehg0() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[0];
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(2, result.length);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndNonEmptyArguments_trfL3_UKGB0_fid3() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(4, result.length);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
            assertEquals("arg1", result[2]);
            assertEquals("arg2", result[3]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenStopAtNonOption_NMxH4_Jfdh0_fid3() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, true);
            assertEquals(4, result.length);
            assertEquals("--aaa", result[0]);
            assertEquals("--bbb", result[1]);
            assertEquals("--", result[2]);
            assertEquals("arg1", result[3]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSign_ajgQ3_HIFs0_fid3() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a=arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSignAndArgument_ICUo4_byHi0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a=arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        String[] actual;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
            actual = new String[0];
        }
        assertArrayEquals(expected, actual);
    }
}