/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalid_OcDv3() {
        String option = "invalidOption";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidWithAdditionalChars_jUTs5() {
        String option = "invalidOption_";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidWithMultipleAdditionalChars_xAFO7() {
        String option = "invalidOption_123";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOptionWithAdditionalChars_BNUf5() {
        String option = "invalidOption_";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("The option 'invalidOption_' contains an illegal character : '_'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOptionWithMultipleAdditionalChars_siQk7() {
        String option = "invalidOption_123";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name 'invalidOption_123'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_RnUg1() {
        String option = "";
        String expected = "";
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_NullOption_TotW0() {
        try {
            OptionValidator.validate(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Expected IllegalArgumentException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOption_gwxg3() {
        String option = "invalidOption";
        try {
            OptionValidator.validate(option);
            assertEquals(String.format("Illegal option name '%s'.", option), "Invalid option name 'invalidOption'.");
        } catch (IllegalArgumentException e) {
            fail("Expected IllegalArgumentException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_OptionWithInvalidChar_cCWM4() {
        String option = "optionWithInvalidChar";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("The option 'optionWithInvalidChar' contains an illegal character : 'i'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_OptionWithValidCharAndInvalidChar_botC6() {
        String option = "optionWithValidCharAndInvalidChar";
        try {
            OptionValidator.validate(option);
            assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
        } catch (IllegalArgumentException e) {
            assertEquals("The option 'optionWithValidCharAndInvalidChar' contains an illegal character : 'n'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOption_ZZaV3() {
        String option = "invalidOption";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name 'invalidOption'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOptionWithAdditionalChars_BNUf5_fid1() {
        String option = "invalidOption_";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOptionWithMultipleAdditionalChars_siQk7_fid1() {
        String option = "invalidOption_123";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_RnUg1_fid1() {
        String option = "";
        String expected = null;
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalid_SIQr3_fid1() {
        String option = "invalid";
        String expected = null;
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidWithAdditionalChars_oKFn5_fid1() {
        String option = "invalid_with_additional_chars";
        String expected = null;
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidWithMultipleAdditionalChars_XgMl7_fid1() {
        String option = "invalid_with_multiple_additional_chars";
        String expected = null;
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_NullOption_TotW0_fid1() {
        try {
            OptionValidator.validate(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOption_gwxg3_fid1() {
        String option = "invalidOption";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals(String.format("Illegal option name '%s'.", option), e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_OptionWithInvalidChar_cCWM4_fid1() {
        String option = "optionWithInvalidChar";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_OptionWithValidCharAndInvalidChar_botC6_fid1() {
        String option = "optionWithValidCharAndInvalidChar";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
}