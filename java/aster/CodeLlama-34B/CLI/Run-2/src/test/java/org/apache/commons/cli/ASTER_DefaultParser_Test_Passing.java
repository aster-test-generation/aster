/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_AfnP3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "--", "--alpha", "--beta", "value", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptionsWithoutValues_ngeJ3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "bar", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptionsWithoutValues_ngeJ3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "bar", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(null, cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptionsWithoutValues_ngeJ3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "bar", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("bar", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptionsWithoutValues_ngeJ3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "bar", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(null, cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_WRhm3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iveH0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_jYOK1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_mZQL2_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value", "-e"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_fXxN3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_fXxN3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_fXxN3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_fXxN3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--aaa", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--bbb", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_13() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--ccc", cmd.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_14() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--ddd=value", cmd.getArgs()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_fYbf3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "-c", "--", "--unknown"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Elio3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Elio3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("b", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("c", cmd.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(6, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("betaValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("deltaValue", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_13() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("foxtrotValue", cmd.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("betaValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_emptyString_cwAo0() {
        assertEquals(-1, DefaultParser.indexOfEqual(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_singleChar_jqBx1() {
        assertEquals(0, DefaultParser.indexOfEqual("="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_multipleChars_ViOJ2() {
        assertEquals(1, DefaultParser.indexOfEqual("a=b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_nonEqualChar_cKeO4() {
        assertEquals(-1, DefaultParser.indexOfEqual("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_singleChar_allowPartialMatching_hNiJ7() {
        DefaultParser parser = new DefaultParser(true);
        assertEquals(0, parser.indexOfEqual("="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_multipleChars_allowPartialMatching_ZsQV8() {
        DefaultParser parser = new DefaultParser(true);
        assertEquals(1, parser.indexOfEqual("a=b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_nonEqualChar_allowPartialMatching_rbfO10() {
        DefaultParser parser = new DefaultParser(true);
        assertEquals(-1, parser.indexOfEqual("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_WRhm3_VGnk0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_WRhm3_VGnk0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_WRhm3_VGnk0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_WRhm3_VGnk0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_jYOK1_aHSi0_1() throws ParseException {
        Options options = new Options();
        CommandLine cmd = new DefaultParser().parse(options, new String[0], new Properties());
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_jYOK1_aHSi0_2() throws ParseException {
        Options options = new Options();
        CommandLine cmd = new DefaultParser().parse(options, new String[0], new Properties());
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_RLbp3_tDVQ0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_QSlT0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        CommandLine cmd = new DefaultParser().parse(options, new String[0], null);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_QSlT0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        CommandLine cmd = new DefaultParser().parse(options, new String[0], null);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_IVqX3_fid1() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-c", "value2"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_kWtN4_fid1() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptionValue_kVKd5_fid1() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "value3"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_kabF6_fid1() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_1_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_4_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }
}