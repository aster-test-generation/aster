/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_CFVc0() {
        Options options = new Options();
        options.addOption("foo", false, "foo option");
        options.addOption("bar", false, "bar option");
        GnuParser parser = new GnuParser();
        String[] arguments = new String[]{"--foo", "--bar"};
        String[] expected = new String[]{"--foo", "--bar"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_siRd1() {
        Options options = new Options();
        options.addOption("foo", false, "foo option");
        options.addOption("bar", false, "bar option");
        GnuParser parser = new GnuParser();
        String[] arguments = new String[]{"-foo", "-bar"};
        String[] expected = new String[]{"-foo", "-bar"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_DDaX2() {
        Options options = new Options();
        options.addOption("foo", false, "foo option");
        options.addOption("bar", false, "bar option");
        GnuParser parser = new GnuParser();
        String[] arguments = new String[]{"--foo", "--bar"};
        String[] expected = new String[]{"--foo", "--bar"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_UDJb3() {
        Options options = new Options();
        options.addOption("foo", false, "foo option");
        options.addOption("bar", false, "bar option");
        GnuParser parser = new GnuParser();
        String[] arguments = new String[]{"-foo", "-bar"};
        String[] expected = new String[]{"-foo", "-bar"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }
}