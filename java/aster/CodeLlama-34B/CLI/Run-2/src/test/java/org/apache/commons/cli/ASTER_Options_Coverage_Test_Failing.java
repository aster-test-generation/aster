/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_aHhf0_2() {
        Options options = new Options();
        String opt = "--help";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_lPJM1_2() {
        Options options = new Options();
        String opt = "--hel";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNullOptionGroup_bnVi4() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        newOptions.addOptionGroup(null);
        try {
            options.addOptions(newOptions);
            Assertions.fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            Assertions.assertEquals("OptionGroup cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0_4() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertEquals("test", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutDescription_zpwE7_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertNull(options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_aHhf0() {
        Options options = new Options();
        String opt = "--help";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals(1, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_lPJM1() {
        Options options = new Options();
        String opt = "--hel";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals(1, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNullOptions_PRQC3() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        try {
            options.addOptions(null);
            Assertions.fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            Assertions.assertEquals("Options cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertTrue(options.getOption("test").isRequired());
        Assertions.assertEquals(1, options.getRequiredOptions().size());
        Assertions.assertEquals("test", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutDescription_zpwE7() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertNull(options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0_2_fid3() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.getOption("test").isRequired());
    }
}