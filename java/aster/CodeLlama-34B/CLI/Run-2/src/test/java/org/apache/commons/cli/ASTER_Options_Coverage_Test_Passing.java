/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_aHhf0_1() {
        Options options = new Options();
        String opt = "--help";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_lPJM1_1() {
        Options options = new Options();
        String opt = "--hel";
        List<String> matchingOpts = options.getMatchingOptions(opt);
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsDuplicateKey_drBZ0() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("key", "longKey", false, "description");
        try {
            options.addOptions(newOptions);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assertions.assertEquals("Duplicate key: key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_qYre1_1() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("key2", "longKey2", false, "description");
        options.addOptions(newOptions);
        Assertions.assertTrue(options.hasOption("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_qYre1_2() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("key2", "longKey2", false, "description");
        options.addOptions(newOptions);
        Assertions.assertTrue(options.hasOption("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsEmptyOptions_vFvT2() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        options.addOptions(newOptions);
        Assertions.assertTrue(options.hasOption("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0_1() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0_2() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertFalse(options.getOption("test").isRequired());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequiredOpt_tBwb0_3() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOpt_inHs1_1() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOpt_inHs1_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertFalse(options.getOption("test").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOpt_inHs1_3() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_QeKd2_1() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_QeKd2_2() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasLongOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_QeKd2_3() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(opt, options.getOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_QeKd2_4() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(opt, options.getOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOpt_PJPS3_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertFalse(options.hasLongOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOpt_PJPS3_3() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(opt, options.getOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgName_irCI4_1() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setArgName("arg");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgName_irCI4_2() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setArgName("arg");
        options.addOption(opt);
        Assertions.assertEquals("arg", options.getOption("test").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgName_jbQp5_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertNull(options.getOption("test").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithDescription_mMXZ6_1() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setDescription("This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithDescription_mMXZ6_2() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setDescription("This is a test option");
        options.addOption(opt);
        Assertions.assertEquals("This is a test option", options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueSeparator_ICSY8_1() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setValueSeparator(':');
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueSeparator_ICSY8_2() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setValueSeparator(':');
        options.addOption(opt);
        Assertions.assertEquals(':', options.getOption("test").getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutValueSeparator_dsxD9_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertEquals(0, options.getOption("test").getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_qYre1() {
        Options options = new Options();
        options.addOption("key", "longKey", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("key2", "longKey2", false, "description");
        options.addOptions(newOptions);
        Assertions.assertTrue(options.hasOption("key"));
        Assertions.assertTrue(options.hasOption("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOpt_inHs1() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertFalse(options.getOption("test").isRequired());
        Assertions.assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_QeKd2() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertTrue(options.hasLongOption("test-long"));
        Assertions.assertEquals(opt, options.getOption("test"));
        Assertions.assertEquals(opt, options.getOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOpt_PJPS3() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertFalse(options.hasLongOption("test"));
        Assertions.assertEquals(opt, options.getOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgName_irCI4() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setArgName("arg");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertEquals("arg", options.getOption("test").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgName_jbQp5() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertNull(options.getOption("test").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithDescription_mMXZ6() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setDescription("This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertEquals("This is a test option", options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueSeparator_ICSY8() {
        Options options = new Options();
        Option opt = new Option("test", true, "Test option");
        opt.setValueSeparator(':');
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertEquals(':', options.getOption("test").getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutValueSeparator_dsxD9() {
        Options options = new Options();
        Option opt = new Option("test", false, "Test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertEquals(0, options.getOption("test").getValueSeparator());
    }
}