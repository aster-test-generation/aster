/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnknownToken_AhKv3() {
        DefaultParser parser = new DefaultParser(true);
        String token = "xyz";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown option: xyz", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_IVqX3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-c", "value2"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_kWtN4() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing option value for -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptionValue_kVKd5() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "value3"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unexpected option value: value3", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_kabF6() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid option value: value2", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_qAZR3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_xSJJ3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "charlie");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("charlie", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_LPYI3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_LPYI3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_LPYI3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_fXxN3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionProperties("a").getProperty("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rcCb0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sHrH1_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "--ccc", "--ddd=value", "--", "--aaa", "--bbb", "value", "--ccc", "--ddd=value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(4, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Elio3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Elio3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("bbb", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Elio3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("ccc", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lSHE3_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidArguments_plHM3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-c", "-d"}, properties, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionProperties("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HoMX3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1");
        options.addOption("b", "arg2");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionProperties("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("charlieValue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cJcU0_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("echoValue", cmd.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Ghlx1_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        options.addOption("e", "echo", false, "echo option");
        options.addOption("f", "foxtrot", true, "foxtrot option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "-d", "deltaValue", "-e", "-f", "foxtrotValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("charlieValue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_null_ePSr5() {
        assertEquals(-1, DefaultParser.indexOfEqual(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_emptyString_allowPartialMatching_wVPu6() {
        DefaultParser parser = new DefaultParser(true);
        assertEquals(0, parser.indexOfEqual(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_null_allowPartialMatching_demo11() {
        DefaultParser parser = new DefaultParser(true);
        assertEquals(-1, parser.indexOfEqual(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_nonEmptyExpectedOpts_vXKN3() {
        DefaultParser parser = new DefaultParser(true);
        assertThrows(MissingOptionException.class, () -> parser.checkRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_esJj7_Bpuo0() {
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        try {
            new DefaultParser().parse(null, arguments);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Options cannot be null", e.getMessage());
        } catch (ParseException e) {
            fail("Unexpected ParseException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_UEmi8_hGSc0() {
        Options options = new Options();
        try {
            new DefaultParser().parse(options, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Arguments cannot be null", e.getMessage());
        } catch (ParseException e) {
            fail("Expected NullPointerException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_emptyExpectedOpts_lVnE0_pxTR0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
        }
    }
}