/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_kIcj1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals(1, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_mLro2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals(2, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
        assertEquals("--hello", matchingOpts.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals("a", option.getOpt());
        assertEquals(null, option.getLongOpt());
        assertEquals(0, option.getArgs());
        assertEquals(false, option.hasArgs());
        assertEquals(false, option.hasValueSeparator());
        assertEquals(null, option.getConverter());
        assertEquals(null, option.getDeprecated());
        assertEquals(0, option.hashCode());
        assertEquals(null, option.getArgName());
        assertEquals(false, option.hasOptionalArg());
        assertEquals(false, option.hasArgName());
        assertEquals(null, option.getValue(null));
        assertEquals(null, option.getValues());
        assertEquals(null, option.getType());
        assertEquals(null, option.getKey());
        assertEquals(false, option.hasLongOpt());
        assertEquals(false, option.hasArg());
        assertEquals(null, option.getValue());
        assertEquals(null, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getOpt());
        assertEquals("long", option.getLongOpt());
        assertEquals(0, option.getArgs());
        assertEquals(false, option.hasArgs());
        assertEquals(false, option.hasValueSeparator());
        assertEquals(null, option.getConverter());
        assertEquals(null, option.getDeprecated());
        assertEquals(0, option.hashCode());
        assertEquals(null, option.getArgName());
        assertEquals(false, option.hasOptionalArg());
        assertEquals(false, option.hasArgName());
        assertEquals(null, option.getValue(null));
        assertEquals(null, option.getValues());
        assertEquals(null, option.getType());
        assertEquals(null, option.getKey());
        assertEquals(true, option.hasLongOpt());
        assertEquals(false, option.hasArg());
        assertEquals(null, option.getValue());
        assertEquals(null, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_KjQO2() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithNoOption_iGVK3() {
        Options options = new Options();
        options.addRequiredOption(null, null, true, "description");
        assertFalse(options.hasOption("a"));
        assertFalse(options.hasOption("long-option"));
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithShortAndLongOptionButNotRequired_LJiT4() {
        Options options = new Options();
        options.addRequiredOption("a", "long-option", false, "description");
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("long-option"));
        assertFalse(options.getOption("a").isRequired());
        assertFalse(options.getOption("long-option").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithShortOptionOnlyButNotRequired_BCTw5() {
        Options options = new Options();
        options.addRequiredOption("a", null, false, "description");
        assertTrue(options.hasOption("a"));
        assertFalse(options.hasOption("long-option"));
        assertFalse(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithLongOptionOnlyButNotRequired_lAsz6() {
        Options options = new Options();
        options.addRequiredOption(null, "long-option", false, "description");
        assertFalse(options.hasOption("a"));
        assertTrue(options.hasOption("long-option"));
        assertFalse(options.getOption("long-option").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithNoOptionButNotRequired_ZvgN7() {
        Options options = new Options();
        options.addRequiredOption(null, null, false, "description");
        assertFalse(options.hasOption("a"));
        assertFalse(options.hasOption("long-option"));
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_duplicateKey_JTjE1() {
        Options options = new Options();
        Option option = new Option("key", "value");
        options.addOption(option);
        Options newOptions = new Options();
        newOptions.addOption(option);
        assertEquals(1, newOptions.getOptions().size());
        assertEquals(1, newOptions.getOptionGroups().size());
        assertEquals(option, newOptions.getOption("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_ValidShortOption_ZAro0() {
        Options options = new Options();
        String opt = "-a";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptions_dDLN4() {
        Options options = new Options();
        String opt = "-a -b";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithSpaces_JFyQ5() {
        Options options = new Options();
        String opt = "-a -b -c";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithDashesAndSpaces_YQVd7() {
        Options options = new Options();
        String opt = "-a-b-c -d-e-f";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithDashesAndSpacesAndEquals_BYmR8() {
        Options options = new Options();
        String opt = "-a-b-c -d-e-f=g";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithDashesAndSpacesAndEqualsAndValues_ETsu9() {
        Options options = new Options();
        String opt = "-a-b-c -d-e-f=g -h-i-j=k";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullOption_YJwG2() {
        Options options = new Options();
        options.addOption(null, true, "description");
        assertEquals(0, options.getOptions().size());
        assertFalse(options.hasOption(null));
        assertFalse(options.hasLongOption(null));
        assertFalse(options.hasShortOption(null));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertEquals(0, options.getOptions().size());
        assertFalse(options.hasOption(""));
        assertFalse(options.hasLongOption(""));
        assertFalse(options.hasShortOption(""));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithShortOption_hecd0() {
        Options options = new Options();
        String shortOption = "-a";
        assertTrue(options.hasOption(shortOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_zJZN1() {
        Options options = new Options();
        String longOption = "--help";
        assertTrue(options.hasOption(longOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_kIcj1_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_kIcj1_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_mLro2_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals(2, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_mLro2_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_mLro2_3() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals("--hello", matchingOpts.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_1() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_2() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_3() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_4() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_5() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_6() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_7() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_8() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(0, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_9() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_10() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_11() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_12() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_13() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_14() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_15() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_16() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_17() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(false, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_18() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tbEB0_19() {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals(null, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_1() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_2() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals("long", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_3() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_4() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(false, option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_5() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(false, option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_6() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_7() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_8() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(0, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_9() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_10() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_11() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(false, option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_12() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_13() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_14() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_15() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_16() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(true, option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_17() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(false, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_18() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOpt_UOLw1_19() {
        Options options = new Options();
        Option option = options.getOption("--long");
        assertEquals(null, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithNoOption_iGVK3_3() {
        Options options = new Options();
        options.addRequiredOption(null, null, true, "description");
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithShortAndLongOptionButNotRequired_LJiT4_3() {
        Options options = new Options();
        options.addRequiredOption("a", "long-option", false, "description");
        assertFalse(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithShortAndLongOptionButNotRequired_LJiT4_4() {
        Options options = new Options();
        options.addRequiredOption("a", "long-option", false, "description");
        assertFalse(options.getOption("long-option").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithShortOptionOnlyButNotRequired_BCTw5_3() {
        Options options = new Options();
        options.addRequiredOption("a", null, false, "description");
        assertFalse(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithLongOptionOnlyButNotRequired_lAsz6_3() {
        Options options = new Options();
        options.addRequiredOption(null, "long-option", false, "description");
        assertFalse(options.getOption("long-option").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionWithNoOptionButNotRequired_ZvgN7_3() {
        Options options = new Options();
        options.addRequiredOption(null, null, false, "description");
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_duplicateKey_JTjE1_2() {
        Options options = new Options();
        Option option = new Option("key", "value");
        options.addOption(option);
        Options newOptions = new Options();
        newOptions.addOption(option);
        assertEquals(1, newOptions.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullOption_YJwG2_1() {
        Options options = new Options();
        options.addOption(null, true, "description");
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullOption_YJwG2_2() {
        Options options = new Options();
        options.addOption(null, true, "description");
        assertFalse(options.hasOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullOption_YJwG2_4() {
        Options options = new Options();
        options.addOption(null, true, "description");
        assertFalse(options.hasShortOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3_1() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3_2() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertFalse(options.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3_3() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertFalse(options.hasLongOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3_4() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertFalse(options.hasShortOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithEmptyOption_Twyr3_5() {
        Options options = new Options();
        options.addOption("", true, "description");
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_InvalidOption_ReturnsFalse_NfVA1_ZYcg0() {
        Options options = new Options();
        options.addOption("--help", "help");
        assertFalse(options.hasLongOption("--version"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_EmptyOption_ReturnsFalse_JPXq3_wnFr0() {
        Options options = new Options();
        options.addOption("--help", "help");
        assertFalse(options.hasLongOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_OptionWithFourHyphens_ReturnsTrue_jOSQ8_AWqg0() {
        Options options = new Options();
        options.addOption("----help", "help");
        assertTrue(options.hasLongOption("----help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_shortOpts_zsTp0_CeyZ0() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        String expected = "[ Options: [ short a ] [ long ]";
        String actual = options.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_longOpts_SpzQ1_tpqc0() {
        Options options = new Options();
        options.addOption("long", null, false, "long");
        String expected = "[ Options: [ short ] [ long long ]";
        String actual = options.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequired_soSM3_JfsK0_2() {
        Options options = new Options();
        Option option = new Option("a", false, "description");
        options.addOption(option);
        assertFalse(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_nullGroupAndDescription_HEwa6_EDVx0_1() {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options.addOptionGroup(optionGroup);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(1, optionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_nullGroupAndDescription_HEwa6_EDVx0_2() {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options.addOptionGroup(optionGroup);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_nonEmpty_zADE1_FmiG0_1() {
        Options options = new Options();
        options.addOption("option1", null, false, "description");
        options.addOption("option2", null, false, "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(2, requiredOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_nonEmpty_zADE1_FmiG0_2() {
        Options options = new Options();
        options.addOption("option1", null, false, "description");
        options.addOption("option2", null, false, "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.contains("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_nonEmpty_zADE1_FmiG0_3() {
        Options options = new Options();
        options.addOption("option1", null, false, "description");
        options.addOption("option2", null, false, "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.contains("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_null_rRZT2_jnTR0_1() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(1, requiredOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_null_rRZT2_jnTR0_2() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        List<?> requiredOptions = options.getRequiredOptions();
        assertNull(requiredOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_duplicate_vQTW3_iegQ0_2() {
        Options options = new Options();
        options.addOption("option1", null, false, "description");
        options.addOption("option2", null, false, "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals("option1", requiredOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_duplicate_vQTW3_iegQ0_3() {
        Options options = new Options();
        options.addOption("option1", null, false, "description");
        options.addOption("option2", null, false, "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals("option2", requiredOptions.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_invalidType2_znCx5_KhPZ0_1() {
        Options options = new Options();
        options.addOption(new Option("test", "test description"));
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(1, requiredOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_invalidType2_znCx5_KhPZ0_2() {
        Options options = new Options();
        options.addOption(new Option("test", "test description"));
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(new Option("test", "test description"), requiredOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_lfGv5_MZvl0_1() {
        Options options = new Options();
        String shortOption1 = "-a";
        String shortOption2 = "-b";
        assertTrue(options.hasOption(shortOption1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_lfGv5_MZvl0_2() {
        Options options = new Options();
        String shortOption1 = "-a";
        String shortOption2 = "-b";
        assertTrue(options.hasOption(shortOption2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDuplicateOptions_PALX6_Sgqk0_1() {
        Options options = new Options();
        String shortOption1 = "-a";
        String shortOption2 = "-a";
        assertTrue(options.hasOption(shortOption1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDuplicateOptions_PALX6_Sgqk0_2() {
        Options options = new Options();
        String shortOption1 = "-a";
        String shortOption2 = "-a";
        assertTrue(options.hasOption(shortOption2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMixedOptions_wwWZ7_WfcZ0_1() {
        Options options = new Options();
        String shortOption = "-a";
        String longOption = "--help";
        assertTrue(options.hasOption(shortOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMixedOptions_wwWZ7_WfcZ0_2() {
        Options options = new Options();
        String shortOption = "-a";
        String longOption = "--help";
        assertTrue(options.hasOption(longOption));
    }
}