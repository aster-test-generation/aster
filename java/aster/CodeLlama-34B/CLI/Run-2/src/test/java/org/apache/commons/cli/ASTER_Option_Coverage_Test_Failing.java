/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NotInstanceOfOption_tSIX0() {
        Option option = new Option("-a", "--all", true, "description");
        Object obj = new Object();
        Assertions.assertFalse(option.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_eXYs1() {
        Option option = new Option("-a", "--all", true, "description");
        Assertions.assertFalse(option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_gAXa0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithNonClassType_jfoK1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType("type");
        assertEquals("type", option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_UnsupportedOperationException_jTch1() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.clone();
            Assertions.fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            Assertions.assertEquals("UnsupportedOperationException message", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_EsGp0() {
        Option option = new Option("option", "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithValues_EBvS5() {
        Option option = new Option("option", "description");
        option.addValue("value1");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_maFw0() {
        Option option = new Option("-a", "--arg", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithNullArgName_kLpI1() {
        Option option = new Option("-a", "--arg", true, "description");
        option.setArgName(null);
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithEmptyArgName_cfYV2() {
        Option option = new Option("-a", "--arg", true, "description");
        option.setArgName("");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_optionalArg_wynU0() {
        Option option = new Option("test", "test option", true, "test description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_noOptionalArg_eFQc3() {
        Option option = new Option("test", "test option", false, "test description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOption_nsms0() {
        Option option = new Option("option", "longOption", true, "description");
        String expected = "[ Option option longOption [ARG...] :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutLongOption_wxZa1() {
        Option option = new Option("option", true, "description");
        String expected = "[ Option option [ARG...] :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithArg_iYxm4() {
        Option option = new Option("option", true, "description");
        String expected = "[ Option option [ARG] :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutArgsOrArg_FnYA5() {
        Option option = new Option("option", true, "description");
        String expected = "[ Option option :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullLongOption_vZFR6() {
        Option option = new Option("option", null, true, "description");
        String expected = "[ Option option [ARG...] :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLongOption_tzqR7() {
        Option option = new Option("option", "", true, "description");
        String expected = "[ Option option [ARG...] :: description :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullDescription_tHTg8() {
        Option option = new Option("option", true, null);
        String expected = "[ Option option [ARG...] :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyDescription_cQxl9() {
        Option option = new Option("option", true, "");
        String expected = "[ Option option [ARG...] :: type ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withLongOption_qrwm1() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option' 'longOption': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withoutLongOption_rJue2() {
        Option option = new Option("option", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullLongOption_KlZu3() {
        Option option = new Option("option", null, true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyLongOption_Iive4() {
        Option option = new Option("option", "", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullOption_YtBx5() {
        Option option = new Option(null, "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'longOption': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyOption_JJFo6() {
        Option option = new Option("", "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'longOption': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullDescription_mado7() {
        Option option = new Option("option", "longOption", true, null);
        String result = option.toDeprecatedString();
        assertEquals("Option 'option' 'longOption': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyDescription_ZkkF8() {
        Option option = new Option("option", "longOption", true, "");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option' 'longOption': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyOptionAndLongOption_KSKC10() {
        Option option = new Option("", "", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }
}