/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_Bljw0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String expected = "value";
        when(commandLine.getParsedOptionValue(String.valueOf(opt), defaultValue)).thenReturn(expected);
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_ParseException_zRPp0() {
        CommandLine commandLine = new CommandLine();
        String opt = "invalid_option";
        Object result = commandLine.getOptionObject(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_NullOption_bdzj2() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        Object result = commandLine.getOptionObject(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_hfvj0_fid1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String value = commandLine.getParsedOptionValue(opt);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withValues_ChEM0_1_fid1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(0, props.size());
    }
}