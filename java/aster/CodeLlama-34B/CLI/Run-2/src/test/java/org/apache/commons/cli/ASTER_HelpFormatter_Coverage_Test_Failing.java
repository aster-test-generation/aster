/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    private Options options;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_nCNL0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 0;
        int expected = 10;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_tYok1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 15;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_DEke2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_BgCb0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 2);
        String expected = "  -a, --aaa   description\n" +
                "  -b, --bbb <arg>   description\n" +
                "  -c, --ccc   description\n" +
                "  -d, --ddd <arg>   description\n";
        assertEquals(expected, sb.toString());
    }
}