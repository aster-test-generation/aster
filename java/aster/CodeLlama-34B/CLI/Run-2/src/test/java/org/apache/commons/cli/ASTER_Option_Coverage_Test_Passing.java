/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClassType_dMXo0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValue_hkpF0() {
        Option option = new Option("test", "test option", true, "test description");
        String defaultValue = "default value";
        String value = option.getValue(defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValueUnsupportedOperationException_TtaA0() {
        Option option = new Option("test", "test", false, "test");
        try {
            option.addValue("test");
            fail("UnsupportedOperationException should have been thrown");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithLongOption_uvuz1() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasArg_Sope2() {
        Option option = new Option("option", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasOptionalArg_VVin3() {
        Option option = new Option("option", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_HKTw0() {
        Option option = new Option("test", "test option", true, "test description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWithLongOption_IzpR1() {
        Option option = new Option("test", "test", true, "test description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWithDescription_rwOZ2() {
        Option option = new Option("test", "test description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_notDeprecated_mzaD0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullOptionAndLongOption_HIFo9() {
        Option option = new Option(null, null, true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_argCountUninitialized_vcng0() {
        Option option = new Option("test", "test", false, "test");
        try {
            option.processValue("test");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_acceptsArg_bDnJ2_xqDp0() {
        Option option = new Option("test", "test option", true, "test description");
        option.setArgs(1);
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_argCountGreaterThanZero_cGwN0_vcbm0() {
        Option option = new Option("test", "test", true, "test");
        option.setArgName("test");
        option.setArgs(1);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithArgCount_LiKf4_chZF0() {
        Option option = new Option("option", "description");
        option.setArgs(1);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountGreaterThanOne_LDxt0_OLHw0() {
        Option option = new Option("test", "test option", true, "test description");
        option.setArgs(2);
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_noArgCount_dFMa4_qpwQ0() {
        Option option = new Option("test", "test option", false, "test description");
        option.setArgs(0);
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_gAXa0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_EsGp0_fid2() {
        Option option = new Option("option", "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_optionalArg_wynU0_fid2() {
        Option option = new Option("test", "test option", true, "test description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_noOptionalArg_eFQc3_fid2() {
        Option option = new Option("test", "test option", false, "test description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOption_nsms0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        String expected = "[ Option option longOption [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutLongOption_wxZa1_fid2() {
        Option option = new Option("option", true, "description");
        String expected = "[ Option option [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullLongOption_vZFR6_fid2() {
        Option option = new Option("option", null, true, "description");
        String expected = "[ Option option [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLongOption_tzqR7_fid2() {
        Option option = new Option("option", "", true, "description");
        String expected = "[ Option option  [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullDescription_tHTg8_fid2() {
        Option option = new Option("option", true, null);
        String expected = "[ Option option [ARG] :: null :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyDescription_cQxl9_fid2() {
        Option option = new Option("option", true, "");
        String expected = "[ Option option [ARG] ::  :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withoutLongOption_rJue2_fid2() {
        Option option = new Option("option", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullLongOption_KlZu3_fid2() {
        Option option = new Option("option", null, true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyLongOption_Iive4_fid2() {
        Option option = new Option("option", "", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullOption_YtBx5_fid2() {
        Option option = new Option(null, "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNullDescription_mado7_fid2() {
        Option option = new Option("option", "longOption", true, null);
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withEmptyDescription_ZkkF8_fid2() {
        Option option = new Option("option", "longOption", true, "");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }
}