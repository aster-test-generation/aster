/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_fpVd0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_AexB1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a -b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_bnsm2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a -b -c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_Yosu3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a -b -c -d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_itZy0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(cmd.getOptionValue("long-option"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_fkEx1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(cmd.getOptionValue("s"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_NknC2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown-option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(cmd.getOptionValue("unknown-option"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_emptyExpectedOpts_cEOQ0() throws org.apache.commons.cli.MissingOptionException {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_nonEmptyExpectedOpts_JfbV1() throws org.apache.commons.cli.MissingOptionException {
        DefaultParser parser = new DefaultParser(true);
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_cNLt0_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_okUW1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAmbiguousOption_EtaO3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected AmbiguousOptionException");
        } catch (AmbiguousOptionException e) {
            assertEquals("aa", e.getOption());
            assertEquals(2, e.getMatchingOptions().size());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_sxrN1_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_sxrN1_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_UJVY2_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_UJVY2_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_UJVY2_3() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_mfUe0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "foo", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_IZuZ2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "-b", "bar"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("foo", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_IZuZ2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "-b", "bar"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("bar", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tHMl3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("foo", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_AHjR4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_AHjR4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("foo", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_AHjR4_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("bar", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_yuhH0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_yuhH0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_yuhH0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EukX2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Qkgw3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_HAAf0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_RbGd1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_Ddjy2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_Ddjy2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_CQpC3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_CQpC3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_ZFXp4_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_ZFXp4_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_ZFXp4_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_EiCQ5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_EiCQ5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_EiCQ5_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("long-option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_XKcL6_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_XKcL6_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_XKcL6_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("value2", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("2", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullToken_DPzG0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", cmd.getOptionValue("help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_jjev1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("help", false, "print this message");
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", cmd.getOptionValue("help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_YhHs2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("h", "help", false, "print this message");
        String[] arguments = new String[]{"-h"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-h", cmd.getOptionValue("help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_swbM0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_swbM0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_UIqd1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_UIqd1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qIXg2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qIXg2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qIXg2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_dcEp3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_dcEp3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_dcEp3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_xbbT4_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_xbbT4_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_xbbT4_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_xbbT4_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long-option2", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_CFqx5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value", "-s2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_CFqx5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value", "-s2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_CFqx5_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value", "-s2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_CFqx5_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value", "-s2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s2", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alpha value", cmd.getOptionProperties("alpha").getProperty("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("beta value", cmd.getOptionProperties("beta").getProperty("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("gamma value", cmd.getOptionProperties("gamma").getProperty("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("delta value", cmd.getOptionProperties("delta").getProperty("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("alpha value", cmd.getOptionProperties("alpha").getProperty("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("beta value", cmd.getOptionProperties("beta").getProperty("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("gamma value", cmd.getOptionProperties("gamma").getProperty("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("delta value", cmd.getOptionProperties("delta").getProperty("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_CIPj0_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("--long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_fOay1_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "short", false, "a short option"));
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-n", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_3() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongPrefix_WQJy3_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("--l", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hunu4_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("p", "property", false, "a property option"));
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-p", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hunu4_3() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("p", "property", false, "a property option"));
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5_2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"-s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("-s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_RlwY3_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "long option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--long"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_RlwY3_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "long option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--long"}, null, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOption_DuHl0() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithValue_FmQY2_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithValue_FmQY2_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithEqualSign_gsBi4_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithEqualSign_gsBi4_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_ihhG0() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "a long option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--long"}, null, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_ElCM3() throws ParseException {
        Options options = new Options();
        options.addOption("p", true, "a property");
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-p"}, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_zNeK0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_zNeK0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_zNeK0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("arg2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ZVxm1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ZVxm1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ZVxm1_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals("arg2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStripLeadingAndTrailingQuotes_mXFM1_VoUw0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "\"value\""};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("\"value\"", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vIIb3_xAvl0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_HAAf0_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_RbGd1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_Ddjy2_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_CQpC3_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_EiCQ5_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option", "value", "--long-option2", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_XKcL6_2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--a", "value", "--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_CIPj0_2_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_fOay1_2_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "short", false, "a short option"));
        String[] arguments = new String[]{"s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_1_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(-1, cmd.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_2_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-n", cmd.getOptions()[0].getOpt());
        assertEquals("-1", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2_3_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("number"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hunu4_2_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("p", "property", false, "a property option"));
        String[] arguments = new String[]{"p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("p", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5_2_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_cNLt0() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_okUW1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_sxrN1() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_UJVY2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_IZuZ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "-b", "bar"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("foo", cmd.getOptionValue("a"));
        assertEquals("bar", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tHMl3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("foo", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_AHjR4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("foo", cmd.getOptionValue("a"));
        assertEquals("bar", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_yuhH0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EukX2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals(null, cmd.getOptionValue("bbb"));
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Qkgw3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals(null, cmd.getOptionValue("bbb"));
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_Ddjy2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_ZFXp4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "-b", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("value", commandLine.getOptionValue("a"));
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_EiCQ5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("value", commandLine.getOptionValue("long-option"));
        assertEquals("value", commandLine.getOptionValue("long-option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_XKcL6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("value", commandLine.getOptionValue("a"));
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value2", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("2", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_swbM0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_UIqd1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qIXg2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_dcEp3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_xbbT4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("long-option", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
        assertEquals("long-option2", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_CFqx5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value", "-s2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
        assertEquals("s2", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("d"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("value", cmd.getOptionValue("d"));
        assertEquals("alpha value", cmd.getOptionProperties("alpha").getProperty("alpha"));
        assertEquals("beta value", cmd.getOptionProperties("beta").getProperty("beta"));
        assertEquals("gamma value", cmd.getOptionProperties("gamma").getProperty("gamma"));
        assertEquals("delta value", cmd.getOptionProperties("delta").getProperty("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("d"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("value", cmd.getOptionValue("d"));
        assertEquals("alpha value", cmd.getOptionProperties("alpha").getProperty("alpha"));
        assertEquals("beta value", cmd.getOptionProperties("beta").getProperty("beta"));
        assertEquals("gamma value", cmd.getOptionProperties("gamma").getProperty("gamma"));
        assertEquals("delta value", cmd.getOptionProperties("delta").getProperty("delta"));
        assertEquals("--alpha", cmd.getArgList().get(0));
        assertEquals("--beta=value", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_CIPj0() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("--long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_fOay1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "short", false, "a short option"));
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("-s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_jQUR2() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("n", "number", false, "a number option"));
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("-n", cmd.getOptions()[0].getOpt());
        assertEquals("-1", cmd.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongPrefix_WQJy3() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("--l", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hunu4() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("p", "property", false, "a property option"));
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("-p", cmd.getOptions()[0].getOpt());
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"-s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("-s", cmd.getOptions()[0].getOpt());
        assertEquals(1, cmd.getArgList().size());
        assertEquals("--long", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_RlwY3() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "long option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--long"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithValue_FmQY2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithEqualSign_gsBi4() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "a long option with value");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_zNeK0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("arg1", cmd.getOptionValue("a"));
        assertEquals("arg2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ZVxm1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("arg1", cmd.getOptionValue("a"));
        assertEquals("arg2", cmd.getOptionValue("b"));
    }
}