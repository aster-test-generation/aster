/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenEmptyOptionsAndArguments_RwxH0_Gzrr0() {
        Options options = new Options();
        String[] arguments = new String[0];
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(0, result.length);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenEmptyOptionsAndNonEmptyArguments_FSQZ1_aHZM0() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(2, result.length);
            assertEquals("arg1", result[0]);
            assertEquals("arg2", result[1]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenLongOption_VGXN5_Dnqf0() {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aaa", "arg1", "--bbb", "arg2"};
        PosixParser parser = new PosixParser();
        try {
            String[] result = parser.flatten(options, arguments, false);
            assertEquals(4, result.length);
            assertEquals("--aaa", result[0]);
            assertEquals("arg1", result[1]);
            assertEquals("--bbb", result[2]);
            assertEquals("arg2", result[3]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_UWWH0_LWzM0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "--long-option", "value"};
        String[] expected = new String[]{"-a", "-b", "--long-option", "value"};
        try {
            String[] actual = parser.flatten(options, arguments, false);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_bahj1_WlsJ0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "--long-option", "value"};
        String[] expected = new String[]{"-a", "-b", "--long-option", "value"};
        try {
            String[] actual = parser.flatten(options, arguments, true);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEmptyOptions_KEdj0_hIai0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = false;
        String[] expected = new String[0];
        String[] actual = new String[0];
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOption_XsUA1_gHXW0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndArgument_OevW2_cjzh0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        try {
            String[] actual = parser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSign_ajgQ3_HIFs0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a=arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndNoArgumentAndStopAtNonOption_lUma6_cQbV0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = true;
        String[] expected = new String[]{"-a"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }
}