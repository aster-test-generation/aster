/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    private CommandLine commandLine;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_empty_XuHB0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_aTbh0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_DhTE3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_JqPi4() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_buZB5() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_EDYq0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_yAfx4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptionsArray_MsnF11() {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDefaultValue_QNeX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithMultipleValuesAndRequiredArg_VOvN8() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        option.setRequired(true);
        String value1 = "value1";
        String value2 = "value2";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOption_GaFR4() {
        CommandLine commandLine = new CommandLine();
        assertNull(commandLine.getOptionValue("invalid-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_ICyW0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_fBJu2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_ozNa3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndDefaultValue_eajT4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NullOption_HsqG0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NullDefaultValue_QjuQ1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = null;
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_iRpl0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_RpWO2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_kTKm3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_CNNJ4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optA_FowR0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optB_YIoH1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('b');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optC_tzAK2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('c');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optD_yUbG3() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('d');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optE_etUt4() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('e');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optF_qotc5() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('f');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optG_aTgt6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('g');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optH_zeLD7() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('h');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optI_rGpu8() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('i');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optJ_YdWB9() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('j');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optK_MsJC10() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('k');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optL_LjvR11() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('l');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optM_Hqqu12() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('m');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optN_OtpQ13() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('n');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optO_gTCy14() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('o');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optP_MElV15() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('p');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optQ_VTTF16() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('q');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optR_kZcu17() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('r');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOption_SlEI0_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a");
        assertEquals(1, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithInvalidOption_Rxqn1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-z");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOptionAndValues_VNsM0_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a=b,c");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithInvalidOptionAndValues_qSFN3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-z=b,c");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotPresent_YQZg1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionPresent_EpFr2_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        commandLine.addOption(option);
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionPresent_EpFr2_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        commandLine.addOption(option);
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(1, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotPresent_VtVS4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        Properties props = commandLine.getOptionProperties(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithParseException_Kpxt1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("opt");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithInvalidOption_rIRo2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("invalid_opt");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_EYYO0() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = "default";
        String expected = "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_null_iJuj3() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = null;
        String expected = null;
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_empty_RFPZ4() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = "";
        String expected = "";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_invalid_BMbG6() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = "invalid";
        String expected = "invalid";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithInvalidOption_Tabr1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("z");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNullOption_DPMG2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(null);
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithEmptyOption_LYnU3() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNonExistentOption_NfFu6() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("nonExistentOption");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithOptionThatDoesNotHaveAnObject_Dbrg7() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("optionWithoutObject");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithOptionThatHasAnObjectButIsNotTheCorrectType_lYot9() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("optionWithObjectButWrongType");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_emptyString_ehMA2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_invalidOption_JpBZ4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("invalid");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOptions_hoYG1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String[] values = commandLine.getOptionValues(option);
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithChar_jpwR0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithString_vksF1() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidChar_efIm2() {
        CommandLine commandLine = new CommandLine();
        char opt = 'z';
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidString_gBLk3() {
        CommandLine commandLine = new CommandLine();
        String opt = "z";
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNull_Mzey4() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyString_nNYM5() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        boolean result = commandLine.hasOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ykKm7_1() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        assertFalse(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ykKm7_2() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        assertFalse(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8_1() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertFalse(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8_2() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertFalse(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8_3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_HlrD9_1() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = null;
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_NotPresent_yFSi1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_NotPresent_TMps6() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertFalse(commandLine.hasOption(option1));
        assertFalse(commandLine.hasOption(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_fkwQ0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertEquals(0, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithOneArgument_Rjql1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        assertEquals(1, argList.size());
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMultipleArguments_wjLt2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        assertEquals(3, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg2", argList.get(1));
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithNullArguments_QApq4() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add(null);
        assertEquals(1, argList.size());
        assertNull(argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithDuplicateArguments_ASlK5() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg1");
        assertEquals(2, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg1", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals(5, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg2", argList.get(1));
        assertEquals("arg3", argList.get(2));
        assertNull(argList.get(3));
        assertEquals("arg4", argList.get(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_AUXC0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_supplier_KLiH2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "supplied");
        assertEquals("supplied", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyStringDefaultValue_ZNwI4() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nullStringDefaultValue_NWMX6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonExistentOption_nullStringDefaultValue_vwEz14() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_DkdH0() {
        commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_invalidOption_rnLA3() {
        commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValues("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_Spuw3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-invalid");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_wMNu3() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOption_mqoa4() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("invalid"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyOption_dvyB8() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void handleDeprecated(Option option) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_OptionNull_tXMH0() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_HlrD9_3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = null;
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyStringOption_IgpS10_3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_NotPresent_TMps6_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertFalse(commandLine.hasOption(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_NotPresent_TMps6_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertFalse(commandLine.hasOption(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithOneArgument_Rjql1_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithOneArgument_Rjql1_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMultipleArguments_wjLt2_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        assertEquals(3, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMultipleArguments_wjLt2_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMultipleArguments_wjLt2_3() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        assertEquals("arg2", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMultipleArguments_wjLt2_4() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithNullArguments_QApq4_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add(null);
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithNullArguments_QApq4_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add(null);
        assertNull(argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithDuplicateArguments_ASlK5_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg1");
        assertEquals(2, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithDuplicateArguments_ASlK5_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg1");
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithDuplicateArguments_ASlK5_3() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg1");
        assertEquals("arg1", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals(5, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_3() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals("arg2", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_4() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_5() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertNull(argList.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithMixedArguments_azcQ8_6() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        argList.add("arg1");
        argList.add("arg2");
        argList.add("arg3");
        argList.add(null);
        argList.add("arg4");
        assertEquals("arg4", argList.get(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qJAa0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qJAa0_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qJAa0_4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_wnNB5_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_wnNB5_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_emptyArray_hhvS8_Exnp0() {
        CommandLine commandLine = new CommandLine();
        String value = commandLine.getOptionValue(new Option("test", "test option"));
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LCoh0_khrn0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_pQgR3_awtP0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_dGSB4_MIyH0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNoDefaultValue_toQr1_vkQl0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNoDefaultValue_toQr1_mDPa1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        String value = commandLine.getOptionValue((Option) option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionalArg_SJQf2_aXuF1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        option.setOptionalArg(true);
        String value = commandLine.getOptionValue((Option) option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithRequiredArg_xlAt3_VNuV1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        option.setRequired(true);
        String value = commandLine.getOptionValue((Option) option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_gMxn2_TIuA1() {
        CommandLine commandLine = new CommandLine();
        assertNull(commandLine.getOptionValue((Option) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_validOption_defaultValue_Vwzp0_lwIn0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_invalidOption_defaultValue_fiQz2_lgin0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--invalidOption";
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_nullOption_defaultValue_KyTo4_adDY0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_nullOption_defaultValue_KyTo4_fRbI1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_nullOption_nonDefaultValue_vkmY5_iYrv0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String defaultValue = "default";
        String nonDefaultValue = "nonDefault";
        String expected = nonDefaultValue;
        String actual = commandLine.getParsedOptionValue(opt, nonDefaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_nullOption_nonDefaultValue_vkmY5_YgtV1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String nonDefaultValue = "nonDefault";
        String expected = nonDefaultValue;
        String actual = commandLine.getParsedOptionValue(opt, nonDefaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_emptyOption_defaultValue_HNLP6_MuWh0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDefaultValue_FXTZ0_WIvv0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = null;
        String actualValue = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNonDefaultValue_nPvr1_pGoW0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "default";
        String actualValue = commandLine.getOptionValue(option);
        assertNotEquals(defaultValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_Ulkb2_JlFW0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String actualValue = commandLine.getParsedOptionValue(option, defaultValue);
        assertNull(actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_wGDz3_NaPi0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = null;
        String actualValue = commandLine.getParsedOptionValue(option);
        assertNull(actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_aTbh0_vUYw0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        String actual = commandLine.getParsedOptionValue(option, "default");
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_DhTE3_VETh0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        String actual = commandLine.getParsedOptionValue(option, () -> "default");
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_JqPi4_byJD0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        String actual = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_buZB5_THsY0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = () -> "default value";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_yAfx4_TNxO0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_yAfx4_TNxO0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_ICyW0_rniJ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_fBJu2_YoBH0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_ozNa3_NdAN0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String actual = commandLine.getOptionValue(option, (Supplier<String>) null);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_gKTP0_JTBm0_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getOptionValue("test");
        assertEquals(option.getLongOpt(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOption_fNmt3_YXsD0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("invalid");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOption_wflD2_RBiN0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getOptionValue("invalid");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_gtVX3_HkrO1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getOptionValue(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDuplicateOptions_jWdg6_DeAI0_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test", "test option 1");
        Option option2 = new Option("test", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String result = commandLine.getOptionValue("test");
        assertEquals(option1.getLongOpt(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNonStringOption_lIzP5_XGyc0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("1");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_char_defaultValue_HIlU0_KOim0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_char_defaultValue_optionNotPresent_pKOS1_FDWR1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getOptionValue(new Option("b", defaultValue));
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonExistentOption_nullDefaultValue_dVTr9_eRrD0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z');
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithNullOption_pQDo4_iPkb0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_DjEV9_PyNs1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertFalse(commandLine.hasOption("invalid"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_OptionPresentWithDefaultValueAndNoValue_EKfh6_bVPr0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", false, "Test option");
        commandLine.addOption(option);
        try {
            assertEquals("default", commandLine.getParsedOptionValue(option, () -> "default"));
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}