/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    private HelpFormatter formatter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_validWidth_MRuE0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(10);
        assertEquals(10, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_YqHO1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1);
        assertEquals(-1, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_zeroWidth_IURB3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(0);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_negativeWidth_ACfy4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1 - 10);
        assertEquals(-10, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_largeWidth_fiRk5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(1000);
        assertEquals(1000, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_smallWidth_vjcA6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(1);
        assertEquals(1, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_defaultWidth_qQml7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(HelpFormatter.DEFAULT_WIDTH);
        assertEquals(HelpFormatter.DEFAULT_WIDTH, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_customWidth_KcOd8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(50);
        assertEquals(50, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_nullFormatter_Xssv9() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(10);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidFormatter_ObzA10() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Width must be positive"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_nullFormatter_XZTd12() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyString_goKD0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ShortText_EcYW1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a short text.";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a short text.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_LongText_vZuM2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a long text that will be wrapped.";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a long text that will be wrapped.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_MultipleLines_ktYE3() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a text with\nmultiple lines.";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_TabStop_jLbO4() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 10;
        String text = "This is a text with a tab stop.";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a text with a tab stop.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_1_teUq0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 0;
        int expected = 10;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_2_Xczi1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 15;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_3_HDSf2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_4_VWdH3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 15;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_5_XSWY4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_6_LKpN5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 25;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_7_nbFx6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_8_Srok7() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 35;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_9_nSCt8() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 40;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_10_DHuF9() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 45;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_11_oClC10() {
        HelpFormatter formatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_GppQ0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithNegativeValue_adTy1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(-1 - 10);
        assertEquals(-10, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithZeroValue_WgZU2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(0);
        assertEquals(0, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithLargeValue_TnpW3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(1000);
        assertEquals(1000, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullOptions_KMxz5() {
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        Options options = null;
        int leftPad = 2;
        int descPad = 4;
        String footer = "footer";
        boolean autoUsage = true;
        HelpFormatter formatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_null_vCIL0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptionComparator(null);
        assertNull(formatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_pHKz0() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(10);
        assertEquals("          ", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithZero_NOrU1() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(0);
        assertEquals("", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_QoNB0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "print this help message");
        options.addOption("v", "version", false, "print version information");
        options.addOption("i", "input", true, "input file");
        options.addOption("o", "output", true, "output file");
        formatter.printHelp(80, "myapp", "My Application", options, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithHeader_XdOB1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "print this help message");
        options.addOption("v", "version", false, "print version information");
        options.addOption("i", "input", true, "input file");
        options.addOption("o", "output", true, "output file");
        formatter.printHelp(80, "myapp", "My Application", options, "This is a header");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithRequiredOption_vVVU3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("h", "help", false, "print this help message");
        options.addOption("v", "version", false, "print version information");
        options.addOption("i", "input", true, "input file");
        options.addOption("o", "output", true, "output file");
        formatter.printHelp(80, "myapp", "My Application", options, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptionGroup_xSyN4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("h", "help", false, "print this help message"));
        group.addOption(new Option("v", "version", false, "print version information"));
        options.addOptionGroup(group);
        options.addOption("i", "input", true, "input file");
        options.addOption("o", "output", true, "output file");
        formatter.printHelp(80, "myapp", "My Application", options, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptionGroupAndRequiredOption_WQIm5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("h", "help", false, "print this help message"));
        group.addOption(new Option("v", "version", false, "print version information"));
        options.addOptionGroup(group);
        options.addRequiredOption("i", "input", true, "input file");
        options.addOption("o", "output", true, "output file");
        formatter.printHelp(80, "myapp", "My Application", options, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_xtXy0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String expected = "";
        String actual = formatter.renderOptions(sb, width, options, leftPad, descPad).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_hZDn1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "aaa"));
        options.addOption(new Option("b", "bbb", false, "bbb"));
        int leftPad = 2;
        int descPad = 2;
        String expected = "  -a, --aaa   aaa\n  -b, --bbb   bbb\n";
        String actual = formatter.renderOptions(sb, width, options, leftPad, descPad).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_FYPa2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "aaa"));
        options.addOption(new Option("b", "bbb", false, "bbb"));
        options.addOption(new Option("c", "ccc", false, "ccc"));
        int leftPad = 2;
        int descPad = 2;
        String expected = "  -a, --aaa   aaa\n  -b, --bbb   bbb\n  -c, --ccc   ccc\n";
        String actual = formatter.renderOptions(sb, width, options, leftPad, descPad).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions4_FYAj3() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "aaa"));
        options.addOption(new Option("b", "bbb", false, "bbb"));
        options.addOption(new Option("c", "ccc", false, "ccc"));
        options.addOption(new Option("d", "ddd", false, "ddd"));
        int leftPad = 2;
        int descPad = 2;
        String expected = "  -a, --aaa   aaa\n  -b, --bbb   bbb\n  -c, --ccc   ccc\n  -d, --ddd   ddd\n";
        String actual = formatter.renderOptions(sb, width, options, leftPad, descPad).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_null_eUKf0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(null);
        assertEquals(null, formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_empty_Vuid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_valid_EqdC3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_invalid_zOBp4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("invalid");
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_multiple_wvdg5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_different_WJwv6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator(":");
        assertEquals(":", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_nullAfterValid_dIGl7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator(null);
        assertEquals(null, formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_emptyAfterValid_xDoo8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator("");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_EmptyString_fGaS0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("");
        assertEquals("", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_Null_DYZh1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine(null);
        assertEquals(null, formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_ValidString_OBPY2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello");
        assertEquals("hello", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_InvalidString_wrsy3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello\n");
        assertEquals("hello", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLines_TmVP4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello\nworld");
        assertEquals("hello\nworld", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLinesWithTabs_wapt6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello\n\tworld");
        assertEquals("hello\n\tworld", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLinesWithCarriageReturn_vSrH7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello\r\nworld");
        assertEquals("hello\r\nworld", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLinesWithCarriageReturnAndLineFeed_mrWQ8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("hello\r\n\nworld");
        assertEquals("hello\r\n\nworld", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_yZYd0() {
        HelpFormatter formatter = new HelpFormatter();
        String newLine = formatter.getNewLine();
        assertEquals("\n", newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_default_MJYa0() {
        HelpFormatter formatter = new HelpFormatter();
        int width = formatter.getWidth();
        assertEquals(74, width);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithInvalidPrefixAndMixedNonWhitespace_jQxb18() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_NRCK0() {
        HelpFormatter formatter = new HelpFormatter();
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_1() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(-1, comparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(-1, comparator.compare(option2, option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_3() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_AGRm0() {
        formatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_OyvL1() {
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithCustomPrefix_llMP2() {
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullPrefix_YmDO3() {
        formatter.setOptPrefix(null);
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyPrefix_lnAM4() {
        formatter.setOptPrefix("");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithInvalidPrefix_geLq5() {
        formatter.setOptPrefix("invalid");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixes_lpvE7() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithDifferentPrefixes_ugqB8() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullAndEmptyPrefix_uQeZ9() {
        formatter.setOptPrefix(null);
        formatter.setOptPrefix("");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyAndNullPrefix_UpEQ10() {
        formatter.setOptPrefix("");
        formatter.setOptPrefix(null);
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithInvalidAndValidPrefix_EKHV11() {
        formatter.setOptPrefix("invalid");
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithValidAndInvalidPrefix_OEts12() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("invalid");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixesAndInvalidPrefix_bLPW13() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("invalid");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixesAndValidPrefix_QRlT14() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixesAndDifferentPrefixes_YHvm15() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixesAndNullPrefix_fGhf16() {
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("-");
        formatter.setOptPrefix(null);
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_YqHO1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_negativeWidth_ACfy4_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-10);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_nullFormatter_XZTd12_fid1() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_fDuY1() {
        String expected = ":";
        String actual = formatter.getLongOptSeparator();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_MultipleLines_ktYE3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a text with\nmultiple lines.";
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a text with\nmultiple lines.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_1_teUq0_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 0;
        int expected = 10;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_2_Xczi1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 15;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_3_HDSf2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_nhtk1() {
        formatter.setArgName("arg");
        assertEquals("arg", formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithNull_iQMq2() {
        formatter.setArgName(null);
        assertNull(formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithEmptyString_DKfU3() {
        formatter.setArgName("");
        assertEquals("", formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithNegativeValue_adTy1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(-10);
        assertEquals(0, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegative_CmYP2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(-10);
        assertEquals("", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_invalid_zOBp4_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("invalid");
        assertEquals(null, formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_nSWR1() {
        String expected = "Usage:";
        String actual = formatter.getSyntaxPrefix();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_default_MJYa0_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int width = formatter.getWidth();
        assertEquals(80, width);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_PJqB1() {
        formatter.setLongOptPrefix("--");
        assertEquals("--", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithNull_WLQI2() {
        formatter.setLongOptPrefix(null);
        assertNull(formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithEmptyString_uunp3() {
        formatter.setLongOptPrefix("");
        assertEquals("", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleNonWhitespace_EJHz7() {
        formatter.setLongOptPrefix("-- --");
        assertEquals("-- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMixedNonWhitespace_ogKP9() {
        formatter.setLongOptPrefix("-- -- --");
        assertEquals("-- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_default_jkAP0() {
        HelpFormatter formatter = new HelpFormatter();
        String argName = formatter.getArgName();
        assertEquals("", argName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(0, comparator.compare(option1, option2));
        assertEquals(0, comparator.compare(option2, option3));
        assertEquals(0, comparator.compare(option3, option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithDifferentOptions_NuKZ2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotEquals(0, comparator.compare(option1, option2));
        assertNotEquals(0, comparator.compare(option2, option3));
        assertNotEquals(0, comparator.compare(option3, option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_null_wYRz0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        assertEquals(null, formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_emptyString_jmpJ1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("");
        assertEquals("", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_validString_SOho2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_invalidString_Wxvv3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_nullWithDefault_nJat4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_emptyStringWithDefault_qdQf5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_enhn0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        assertEquals(10, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPaddingWithNegativeValue_UJgx1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(-10);
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPaddingWithZeroValue_UPZj2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(0);
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_default_VCRc0() {
        HelpFormatter formatter = new HelpFormatter();
        String actual = formatter.getLongOptPrefix();
        assertEquals("--", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_null_obIl0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_empty_jDuO1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_nonWhitespace_wNCw3() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_mixed_nsDR4() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world");
        assertEquals("hello world", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_longString_lLSC5() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world this is a long string");
        assertEquals("hello world this is a long string", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_mixedString_WNGr10() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world this is a mixed string");
        assertEquals("hello world this is a mixed string", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_plXN0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNull_OyXl1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix(null);
        assertEquals(null, formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithEmptyString_cLWE2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("");
        assertEquals("", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLines_IxLT4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n");
        assertEquals("prefix\n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewline_EGmu6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n");
        assertEquals("prefix\n  \n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewlineAndTab_hLFI7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n\t");
        assertEquals("prefix\n  \n\t", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewlineAndTabAndCarriageReturn_Yyfl8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n\t\r");
        assertEquals("prefix\n  \n\t\r", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewlineAndTabAndCarriageReturnAndLineFeed_JqWt9() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n\t\r\n");
        assertEquals("prefix\n  \n\t\r\n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewlineAndTabAndCarriageReturnAndLineFeedAndNull_sufG10() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n\t\r\n\0");
        assertEquals("prefix\n  \n\t\r\n\0", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleLinesAndWhitespaceAndNewlineAndTabAndCarriageReturnAndLineFeedAndNullAndWhitespaceAndNewline_uUHr12() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix\n  \n\t\r\n\0 \n");
        assertEquals("prefix\n  \n\t\r\n\0 \n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(0, comparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_2_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(0, comparator.compare(option2, option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithOptions_pccf1_3_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertEquals(0, comparator.compare(option3, option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithDifferentOptions_NuKZ2_1() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotEquals(0, comparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithDifferentOptions_NuKZ2_2() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotEquals(0, comparator.compare(option2, option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithDifferentOptions_NuKZ2_3() {
        HelpFormatter formatter = new HelpFormatter();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        Option option3 = new Option("c", "ccc");
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotEquals(0, comparator.compare(option3, option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_nullWidth_nullFormatter_anFE11_chPJ0() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_nullWidth_invalidFormatter_XeVC13_CxRS0() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithMultipleOptions_daNF1_aNAk1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "Print this help message");
        options.addOption("v", "version", false, "Print the version number");
        formatter.printHelp("myapp", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLineWithCustomNewLine_DgHH1_vvsO0() {
        HelpFormatter formatter = new HelpFormatter();
        String newLine = formatter.getNewLine();
        assertEquals("\r\n", newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLineWithValidNewLine_Lkgb5_dveD0() {
        HelpFormatter formatter = new HelpFormatter();
        String newLine = formatter.getNewLine();
        assertEquals("valid", newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_custom_crOl1_MNtk0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(10);
        int width = formatter.getWidth();
        assertEquals(10, width);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_custom_iWsl1_dCfS0() {
        HelpFormatter formatter = new HelpFormatter();
        String actual = formatter.getLongOptPrefix();
        assertEquals("-", actual);
    }
}