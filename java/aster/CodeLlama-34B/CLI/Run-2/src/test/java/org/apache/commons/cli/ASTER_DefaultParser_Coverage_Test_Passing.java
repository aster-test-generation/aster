/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithCurrentOptionAcceptsArgAndIsArgument_Vrau0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "arg"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithCurrentOptionAndAcceptsArg_UVoT0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithCurrentOptionAcceptsArgAndIsArgument_lbHD0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_FCrW0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_FCrW0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pJsW1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pJsW1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_nQlb0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-1.0"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_nQlb0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-1.0"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-1.0", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_NuuH1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_NuuH1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uzbu2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uzbu2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_xXEj0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_xXEj0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_xXEj0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_zuVi1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_zuVi1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_zuVi1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cXDl0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cXDl0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cXDl0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_sYuI1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_sYuI1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_sYuI1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_pSyM2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "-d", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_pSyM2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "-d", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_pSyM2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "-d", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_pSyM2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "-d", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_LRFg0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_LRFg0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_xJDA1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_xJDA1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_xJDA1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_SecW2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_SecW2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_SecW2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_SecW2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ItCu0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ItCu0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ItCu0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_YfDj1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "-1", "--arg2", "-2", "--arg3", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_YfDj1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "-1", "--arg2", "-2", "--arg3", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-2", cmd.getOptionValue("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_YfDj1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "-1", "--arg2", "-2", "--arg3", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_okEQ2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_okEQ2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_okEQ2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_okEQ2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("non-option", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithCurrentOptionAcceptsArgAndIsArgument_RhWs0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_yIjS0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BCmc3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BCmc3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithValue_xflB4_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithValue_xflB4_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithValue_xflB4_3() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_ICtl5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_ICtl5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_ICtl5_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_IlmY6() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", false, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_AjLe1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = null;
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_IZuZ2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "-b", "bar"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tHMl3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutAllowPartialMatching_mvZk1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutAllowPartialMatching_mvZk1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutAllowPartialMatching_mvZk1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EukX2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EukX2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Qkgw3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Qkgw3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_wDwP4() throws ParseException {
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbbvalue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("cccvalue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("bbbvalue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("cccvalue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_cifx2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_cifx2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_cifx2_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_6() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_7() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2_8() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullArguments_TDCD0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, null, null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_iEms1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[0], null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_kCoi2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_kCoi2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Lmbt3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b", "-c"}, null, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Lmbt3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b", "-c"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Lmbt3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b", "-c"}, null, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Lmbt3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b", "-c"}, null, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_KzGO1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_KzGO1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_KzGO1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_XmJD2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_XmJD2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_XmJD2_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_gYEh3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "directory", true, "the directory to use");
        String[] arguments = new String[]{"-d", "test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("test", cmd.getOptionValue("directory"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_hlVd4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "directory", true, "the directory to use");
        String[] arguments = new String[]{"-d=test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("test", cmd.getOptionValue("directory"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndSpaceAndEqualSignAndQuotes_Wicq7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "directory", true, "the directory to use");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_BVEU6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value", "--long-option2=value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mztW0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--alpha", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Pypp1_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        options.addOption("d", "delta", true, "delta option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma", "--delta=value", "--", "--alpha", "--beta=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        properties.setProperty("delta", "delta value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--beta=value", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_CIPj0_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_fOay1_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "short", false, "a short option"));
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongPrefix_WQJy3_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("l", "long", false, "a long option"));
        String[] arguments = new String[]{"--l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hunu4_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("p", "property", false, "a property option"));
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5_1() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"-s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5_3() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"-s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Rpxd5_4() throws ParseException {
        Options options = new Options();
        options.addOption(new Option("s", "stop", false, "a stop option"));
        String[] arguments = new String[]{"-s", "--", "--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("--long", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullArguments_gTYx0() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, null, null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_hVAg1() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[0], null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_iStc2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_iStc2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_UvcN4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_UvcN4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_UvcN4_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_JZKd5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_JZKd5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_JZKd5_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSignAndSpaceAndStopAtNonOption_cKbz8() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value", "--", "arg"}, null, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOption_DhZt0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOption_mHkA1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValue_UPgF2_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValue_UPgF2_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValue_nCXW3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValue_nCXW3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValueAndProperties_Izth4_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValueAndProperties_Izth4_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValueAndProperties_CNMy5_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        properties.setProperty("short", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValueAndProperties_CNMy5_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        properties.setProperty("short", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOption_zuYK1() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithValue_ILvE3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithValue_ILvE3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithEqualSign_MZKP5_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithEqualSign_MZKP5_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_cEIO1() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-s"}, null, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_vWBz2() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "an argument");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_OzKX4_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-s", "--", "arg"}, null, true);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_OzKX4_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-s", "--", "arg"}, null, true);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_OzKX4_3() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-s", "--", "arg"}, null, true);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseRequiredArgs_YPMN5() throws ParseException {
        Options options = new Options();
        options.addOption("r", true, "a required argument");
        options.getOption("r").setRequired(true);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-r", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionGroup_aNCF7_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "option a"));
        group.addOption(new Option("b", "option b"));
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionGroup_aNCF7_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "option a"));
        group.addOption(new Option("b", "option b"));
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertFalse(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStripLeadingAndTrailingQuotes_Ocgp0_OwMv0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "\"value\""};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vIIb3_xAvl0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vIIb3_xAvl0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutStopAtNonOption_AHjR4_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "foo", "--", "-b", "bar"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_2_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "2");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mXVh1_5_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "true");
        properties.setProperty("c", "1");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_YhHs2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("h", "help", false, "print this message");
        String[] arguments = new String[]{"-h"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_zNeK0_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg0"};
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_FCrW0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_nQlb0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-1.0"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("-1.0", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_NuuH1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uzbu2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_xXEj0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_zuVi1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cXDl0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_sYuI1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("-2", cmd.getOptionValue("b"));
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_pSyM2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "-d", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
        assertEquals(null, cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_LRFg0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_xJDA1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_SecW2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptionValue("aaa"));
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ItCu0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("arg1"));
        assertEquals("value2", cmd.getOptionValue("arg2"));
        assertEquals("value3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_YfDj1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "-1", "--arg2", "-2", "--arg3", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("arg1"));
        assertEquals("-2", cmd.getOptionValue("arg2"));
        assertEquals("-3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_okEQ2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("arg1"));
        assertEquals("value2", cmd.getOptionValue("arg2"));
        assertEquals("value3", cmd.getOptionValue("arg3"));
        assertEquals("non-option", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BCmc3() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithValue_xflB4() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_ICtl5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutAllowPartialMatching_mvZk1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(null, cmd.getOptionValue("aaa"));
        assertEquals(null, cmd.getOptionValue("bbb"));
        assertEquals(null, cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_ndqF0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("bbbvalue", cmd.getOptionValue("b"));
        assertEquals("cccvalue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_HPXC1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", true, "bbb option");
        options.addOption("c", "ccc", true, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "bbbvalue", "--ccc", "cccvalue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("bbbvalue", cmd.getOptionValue("b"));
        assertEquals("cccvalue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_cifx2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wxZj0() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LmNC2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "value", "-b", "-c", "1", "--", "arg1", "arg2"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, true);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("1", cmd.getOptionValue("c"));
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_bRIX3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] args = new String[]{"-a", "-1", "-b", "-c", "1"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertTrue(cmd.hasOption("a"));
        assertEquals("-1", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("1", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_kCoi2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Lmbt3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b", "-c"}, null, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_ohdR4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value1", "-b", "value2", "-c", "value3"}, null, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_KzGO1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_XmJD2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_iStc2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_UvcN4() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_JZKd5() throws ParseException {
        Options options = new Options();
        options.addOption("a", true, "a option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValue_UPgF2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
        assertEquals("value", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValue_nCXW3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_longOptionWithValueAndProperties_Izth4() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option with value");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
        assertEquals("value", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_shortOptionWithValueAndProperties_CNMy5() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        properties.setProperty("short", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithValue_ILvE3() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortOptionWithEqualSign_MZKP5() throws ParseException {
        Options options = new Options();
        options.addOption("s", true, "a short option with value");
        String[] arguments = new String[]{"-s=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("value", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_OzKX4() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "a short option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-s", "--", "arg"}, null, true);
        assertTrue(cmd.hasOption("s"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionGroup_aNCF7() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "option a"));
        group.addOption(new Option("b", "option b"));
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("b"));
    }
}