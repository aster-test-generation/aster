/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_emptyOptions_Ahjg0() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[0];
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_oneOption_TWIp1_1() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_oneOption_TWIp1_2() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_twoOptions_wQcQ2_1() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_twoOptions_wQcQ2_2() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_twoOptions_wQcQ2_3() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-b", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_threeOptions_sHCD3_1() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_threeOptions_sHCD3_2() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_threeOptions_sHCD3_3() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-b", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_threeOptions_sHCD3_4() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-c", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_BCQe4_1() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_BCQe4_2() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, true);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_noMatch_KMuT5_1() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_noMatch_KMuT5_2() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_noMatch_KMuT5_3() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("--", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_noMatch_KMuT5_4() {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--", "-b"};
        String[] result = parser.flatten(new Options(), arguments, false);
        assertEquals("-b", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_requiredOption_EPeE6_1() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(options, arguments, false);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_requiredOption_EPeE6_2() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(options, arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_requiredOption_missing_wZBc7() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "description");
        String[] arguments = new String[0];
        String[] result = parser.flatten(options, arguments, false);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_optionGroup_Cmdf8_1() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
        group.addOption(new Option("b", "beta", false, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(options, arguments, false);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_optionGroup_Cmdf8_2() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
        group.addOption(new Option("b", "beta", false, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        String[] result = parser.flatten(options, arguments, false);
        assertEquals("-a", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_optionGroup_missing_vnCo9() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
    }
}