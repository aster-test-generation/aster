/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_1() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(opt, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_4() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(type, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_5() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(required, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_6() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argCount, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_7() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(optionalArg, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_8() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(valueSeparator, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_PZkI0_9() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_1() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertNull(option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_4() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(type, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_5() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(required, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_6() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argCount, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_7() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(optionalArg, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_8() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(valueSeparator, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullOpt_yeyY1_9() {
        String opt = null;
        String description = "description";
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_1() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(opt, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_2() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_4() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(type, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_5() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(required, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_6() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argCount, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_7() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(optionalArg, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_8() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(valueSeparator, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_rlQh2_9() {
        String opt = "opt";
        String description = null;
        String longOption = "longOption";
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_1() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(opt, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_3() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_4() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(type, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_5() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(required, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_6() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argCount, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_7() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(optionalArg, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_8() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(valueSeparator, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_tAjU3_9() {
        String opt = "opt";
        String description = "description";
        String longOption = null;
        Class<?> type = String.class;
        boolean required = false;
        int argCount = Option.UNINITIALIZED;
        boolean optionalArg = false;
        char valueSeparator = (char) 0;
        String argName = null;
        Option option = OptionBuilder.create(opt);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullType_nTDO4() {
        String opt = "opt";
        String description = "description";
        String longOption = "longOption";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithHasOptionalArgsAndHasOptionalArgs_EHsq12() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithLongOpt_hasOptionalArg_gbiR5_BWgA0() {
        OptionBuilder builder = OptionBuilder.hasOptionalArg();
        String longOpt = "longOpt";
        Option option = builder.withLongOpt(longOpt).create();
        assertEquals(longOpt, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithLongOpt_hasArgs_int_int_int_WXTs11_avQA0() {
        OptionBuilder builder = OptionBuilder.withLongOpt("longOpt");
        builder.hasArgs(2);
        Option option = builder.create();
        assertEquals("longOpt", option.getLongOpt());
    }
}