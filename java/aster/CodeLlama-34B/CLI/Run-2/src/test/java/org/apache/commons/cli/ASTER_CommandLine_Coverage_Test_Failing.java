/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithChar_imjJ0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('a');
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_hfvj0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String value = commandLine.getParsedOptionValue(opt);
        assertEquals("a", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_ValidOption_PSAr1() {
        CommandLine commandLine = new CommandLine();
        String opt = "valid_option";
        Object result = commandLine.getOptionObject(opt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withValues_ChEM0_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withValues_ChEM0_2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value1", props.get("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withValues_ChEM0_3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value2", props.get("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withoutValues_RhXk1_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(1, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withoutValues_RhXk1_2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("true", props.get("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withValues_ChEM0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
        assertEquals("value1", props.get("opt1"));
        assertEquals("value2", props.get("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withoutValues_RhXk1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(1, props.size());
        assertEquals("true", props.get("opt"));
    }
}