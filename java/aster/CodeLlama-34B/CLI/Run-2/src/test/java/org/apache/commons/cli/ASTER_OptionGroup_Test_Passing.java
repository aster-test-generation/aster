/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_nGxS0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_ShIL1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        assertFalse(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_YKji0() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertEquals(0, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithOneOption_CUBY1_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("name1", "value1");
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithOneOption_CUBY1_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("name1", "value1");
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.contains("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithMultipleOptions_jPEo2_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name2", "value2");
        Option option3 = new Option("name3", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertEquals(3, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithMultipleOptions_jPEo2_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name2", "value2");
        Option option3 = new Option("name3", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.contains("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithMultipleOptions_jPEo2_3() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name2", "value2");
        Option option3 = new Option("name3", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.contains("name2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithMultipleOptions_jPEo2_4() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name2", "value2");
        Option option3 = new Option("name3", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.contains("name3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithDuplicateOptions_TANN3_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name1", "value2");
        Option option3 = new Option("name1", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithDuplicateOptions_TANN3_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name1", "value2");
        Option option3 = new Option("name1", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.contains("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithNullName_YFwC6() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option(null, "value");
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithNullValue_LUBs8() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("name", null);
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithEmptyValue_tAAv9() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("name", "");
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithNullNameAndValue_OFNb11() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option(null, null);
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_IZtH0() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(0, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_wEAJ1_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option1", "Option 1");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_wEAJ1_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option1", "Option 1");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_zTTb2_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        Option option3 = new Option("option3", "Option 3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(3, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_zTTb2_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        Option option3 = new Option("option3", "Option 3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_zTTb2_3() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        Option option3 = new Option("option3", "Option 3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_zTTb2_4() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        Option option3 = new Option("option3", "Option 3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOption_FHPf4_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option1", "Option 1");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOption_FHPf4_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option1", "Option 1");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullKey_AsCI7() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option(null, "Option 1");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullValue_VdXI8() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option1", null);
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullKeyAndValue_jTBO9() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option(null, null);
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidKey_Pmrf11() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("invalid_key", "Option 1");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_NullOptionGroup_WJEQ7() {
        OptionGroup optionGroup = null;
        assertNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_default_XExG0() {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        assertNull(selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_empty_ehst0() {
        OptionGroup optionGroup = new OptionGroup();
        String expected = "[]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_singleOption_Sozj1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "alpha");
        optionGroup.addOption(option);
        String expected = "[-a alpha]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_multipleOptions_WjkX2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        String expected = "[-a alpha, -b beta]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_optionWithDescription_Zmct3_EOdQ0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "alpha", true, "This is a description");
        optionGroup.addOption(option);
        String expected = "[-a This is a description]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_ValidOption_PlfA1_fNuO0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
            assertEquals(option.getKey(), optionGroup.getSelected());
        } catch (AlreadySelectedException e) {
            fail("AlreadySelectedException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_AlreadySelected_kZjT2_rMxj0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        try {
            optionGroup.setSelected(option1);
            try {
                optionGroup.setSelected(option2);
                fail("Expected AlreadySelectedException");
            } catch (AlreadySelectedException e) {
                assertEquals(option1.getKey(), optionGroup.getSelected());
            }
        } catch (AlreadySelectedException e) {
            fail("Unexpected AlreadySelectedException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_NullSelected_tChN3_tMJa0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
            optionGroup.setSelected(null);
            assertNull(optionGroup.getSelected());
        } catch (AlreadySelectedException e) {
            fail("AlreadySelectedException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithOneOption_CUBY1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("name1", "value1");
        optionGroup.addOption(option);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
        assertTrue(names.contains("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithMultipleOptions_jPEo2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name2", "value2");
        Option option3 = new Option("name3", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertEquals(3, names.size());
        assertTrue(names.contains("name1"));
        assertTrue(names.contains("name2"));
        assertTrue(names.contains("name3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesWithDuplicateOptions_TANN3() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("name1", "value1");
        Option option2 = new Option("name1", "value2");
        Option option3 = new Option("name1", "value3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<String> names = optionGroup.getNames();
        assertEquals(1, names.size());
        assertTrue(names.contains("name1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_wEAJ1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option1", "Option 1");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
        assertTrue(options.contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_zTTb2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        Option option3 = new Option("option3", "Option 3");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option3);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(3, options.size());
        assertTrue(options.contains(option1));
        assertTrue(options.contains(option2));
        assertTrue(options.contains(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOption_FHPf4() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option1", "Option 1");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
        assertTrue(options.contains(option1));
    }
}