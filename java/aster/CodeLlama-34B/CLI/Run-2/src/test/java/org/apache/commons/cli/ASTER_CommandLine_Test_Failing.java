/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    private CommandLine commandLine;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_jhZL0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("opt");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithValidOption_Nuqb0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("a");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithOptionThatHasAnObject_vzam8() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("optionWithObject");
        assertNotNull(optionObject);
        assertEquals(optionObject, "optionWithObject");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_char_eFjd0_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_char_eFjd0_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_string_pSjA1_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_string_pSjA1_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_OptionNotPresent_UFLC1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", false, "Test option");
        try {
            commandLine.getParsedOptionValue(option);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Option 'test' not present", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithOneOption_ifAt2_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals(1, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithOneOption_ifAt2_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals("option", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_fOOr3_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] values = commandLine.getOptionValues(option1);
        assertEquals(2, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_fOOr3_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] values = commandLine.getOptionValues(option1);
        assertEquals("option1", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_fOOr3_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] values = commandLine.getOptionValues(option1);
        assertEquals("option2", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDuplicateOptions_wjJa4_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals(2, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDuplicateOptions_wjJa4_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals("option", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDuplicateOptions_wjJa4_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals("option", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optA_FowR0_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a');
        assertEquals("a", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optB_YIoH1_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('b');
        assertEquals("b", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optC_tzAK2_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('c');
        assertEquals("c", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optD_yUbG3_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('d');
        assertEquals("d", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optE_etUt4_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('e');
        assertEquals("e", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optF_qotc5_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('f');
        assertEquals("f", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optG_aTgt6_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('g');
        assertEquals("g", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optH_zeLD7_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('h');
        assertEquals("h", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optI_rGpu8_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('i');
        assertEquals("i", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optJ_YdWB9_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('j');
        assertEquals("j", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optK_MsJC10_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('k');
        assertEquals("k", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optL_LjvR11_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('l');
        assertEquals("l", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optM_Hqqu12_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('m');
        assertEquals("m", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optN_OtpQ13_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('n');
        assertEquals("n", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optO_gTCy14_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('o');
        assertEquals("o", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optP_MElV15_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('p');
        assertEquals("p", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optQ_VTTF16_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('q');
        assertEquals("q", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optR_kZcu17_fid1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('r');
        assertEquals("r", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOption_SlEI0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a");
        assertEquals(1, props.size());
        assertEquals("true", props.get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOptionAndValues_VNsM2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a=b,c");
        assertEquals(2, props.size());
        assertEquals("b", props.get("a"));
        assertEquals("c", props.get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotPresent_YQZg1_fid1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        Properties props = commandLine.getOptionProperties(option);
        assertNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionPresent_EpFr2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        commandLine.addOption(option);
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
        assertEquals(1, props.size());
        assertEquals("true", props.get("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_found_Ofsx2() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = "default";
        String expected = "value";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithOptionThatHasAnObject_vzam8_fid1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("optionWithObject");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_char_eFjd0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(1, optionValues.length);
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_string_pSjA1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals(1, optionValues.length);
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_emptyString_ehMA2_fid1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_invalidOption_JpBZ4_fid1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("invalid");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithOneOption_ifAt2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals(1, values.length);
        assertEquals("option", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_fOOr3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] values = commandLine.getOptionValues(option1);
        assertEquals(2, values.length);
        assertEquals("option1", values[0]);
        assertEquals("option2", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDuplicateOptions_wjJa4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        commandLine.addOption(option);
        commandLine.addOption(option);
        String[] values = commandLine.getOptionValues(option);
        assertEquals(2, values.length);
        assertEquals("option", values[0]);
        assertEquals("option", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithChar_jpwR0_fid1() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        boolean result = commandLine.hasOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithString_vksF1_fid1() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        boolean result = commandLine.hasOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ykKm7() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        assertTrue(result1);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_HlrD9() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = null;
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyStringOption_IgpS10() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_PcNX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Empty_oisg3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "Test option");
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_ANyP5() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertTrue(commandLine.hasOption(option1));
        assertTrue(commandLine.hasOption(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonExistentOption_nqAO8() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "default");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonExistentOption_supplier_YkPC10() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "supplied");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonExistentOption_emptyStringDefaultValue_CueV12() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_empty_gyxa1() {
        commandLine = new CommandLine();
        assertEquals(Collections.emptyList(), commandLine.getOptionValues(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_validOption_SgJQ2() {
        commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertEquals(Collections.singletonList("alpha"), commandLine.getOptionValues("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptions_utwH5() {
        commandLine = new CommandLine();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertEquals(Arrays.asList("alpha", "beta"), commandLine.getOptionValues("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptionsWithSameName_lBwX6() {
        commandLine = new CommandLine();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("a", "beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertEquals(Arrays.asList("alpha", "beta"), commandLine.getOptionValues("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptionsWithDifferentNames_RZjF7() {
        commandLine = new CommandLine();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertEquals(Collections.singletonList("alpha"), commandLine.getOptionValues("a"));
        assertEquals(Collections.singletonList("beta"), commandLine.getOptionValues("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptionsWithDifferentNamesAndSameValue_vlZH9() {
        commandLine = new CommandLine();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertEquals(Collections.singletonList("alpha"), commandLine.getOptionValues("a"));
        assertEquals(Collections.singletonList("alpha"), commandLine.getOptionValues("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_Ftju0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-opt");
        assertNotNull(optionValues);
        assertEquals(1, optionValues.length);
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_ZBQS1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertNotNull(optionValues);
        assertEquals(1, optionValues.length);
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_ypri2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertNotNull(optionValues);
        assertEquals(1, optionValues.length);
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qJAa0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("aaa"));
        assertFalse(commandLine.hasOption("b"));
        assertFalse(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_wnNB5() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("aaa"));
        assertTrue(commandLine.hasOption("b"));
        assertTrue(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOption_SlEI0_2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a");
        assertEquals("true", props.get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOptionAndValues_VNsM2_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a=b,c");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOptionAndValues_VNsM2_2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a=b,c");
        assertEquals("b", props.get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOptionAndValues_VNsM2_3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("-a=b,c");
        assertEquals("c", props.get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionPresent_EpFr2_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        commandLine.addOption(option);
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("true", props.get("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ykKm7_1_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ykKm7_2_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8_1_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_LzpK8_2_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "z";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_HlrD9_1_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = null;
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_HlrD9_2() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = null;
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyStringOption_IgpS10_1() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyStringOption_IgpS10_2() {
        CommandLine commandLine = new CommandLine();
        String opt1 = "a";
        String opt2 = "b";
        String opt3 = "";
        boolean result1 = commandLine.hasOption(opt1);
        boolean result2 = commandLine.hasOption(opt2);
        boolean result3 = commandLine.hasOption(opt3);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_ANyP5_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertTrue(commandLine.hasOption(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Option_Multiple_ANyP5_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        assertTrue(commandLine.hasOption(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_Ftju0_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-opt");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_Ftju0_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-opt");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_Ftju0_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-opt");
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_ZBQS1_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_ZBQS1_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_ZBQS1_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_ypri2_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_ypri2_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_ypri2_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qJAa0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_wnNB5_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertTrue(commandLine.hasOption("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_wnNB5_4() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("a", "aaa");
        Option option2 = new Option("b", "bbb");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        assertTrue(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_singleArg_efdM1_FSIV0_1() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getOptionValues("arg1");
        assertEquals(1, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_singleArg_efdM1_FSIV0_2() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getOptionValues("arg1");
        assertEquals("arg1", args[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_multipleArgs_noOv2_Dayk0_1() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(3, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_multipleArgs_noOv2_Dayk0_2() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals("arg1", args[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_multipleArgs_noOv2_Dayk0_3() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals("arg2", args[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_multipleArgs_noOv2_Dayk0_4() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals("arg3", args[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_sgdA1_aJpG0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--apple", true, "Apple option");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_sgdA1_aJpG0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--apple", true, "Apple option");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_wVaf8_ROKG0_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--apple", true, "Apple option");
        Option option2 = new Option("-b", "--banana", true, "Banana option");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_wVaf8_ROKG0_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--apple", true, "Apple option");
        Option option2 = new Option("-b", "--banana", true, "Banana option");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_wVaf8_ROKG0_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--apple", true, "Apple option");
        Option option2 = new Option("-b", "--banana", true, "Banana option");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_swNU0_ihly0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "a");
        assertEquals("a", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDeprecatedOption_MiMB3_pjdd0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("d", "deprecated option");
        assertEquals("d", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithLongOpt_mqYe1_wsnf1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("--long-opt", true, "long-opt");
        String value = commandLine.getOptionValue(option);
        assertEquals("long-opt", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyOption_CeHx4_nzyZ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", false, "");
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_validOption_nonDefaultValue_yEFB1_GFuV0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        String defaultValue = "default";
        String nonDefaultValue = "nonDefault";
        String expected = nonDefaultValue;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_invalidOption_nonDefaultValue_FUQF3_ZImO0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--invalidOption";
        String defaultValue = "default";
        String nonDefaultValue = "nonDefault";
        String expected = nonDefaultValue;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_emptyOption_nonDefaultValue_ADvZ7_JuPX0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String defaultValue = "default";
        String nonDefaultValue = "nonDefault";
        String expected = nonDefaultValue;
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDefaultValue_QNeX0_eINp0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option", true, "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_gKTP0_JTBm0_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getOptionValue("test");
        assertEquals(option.getOpt(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithMultipleOptions_sUIz5_iobP0_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option result = commandLine.getParsedOptionValue("test1");
        result = commandLine.getParsedOptionValue("test2");
        assertEquals(option1.getOpt(), result.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithMultipleOptions_sUIz5_iobP0_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option result = commandLine.getParsedOptionValue("test1");
        result = commandLine.getParsedOptionValue("test2");
        assertEquals(option1.getLongOpt(), result.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithMultipleOptions_sUIz5_iobP0_3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option result = commandLine.getParsedOptionValue("test1");
        result = commandLine.getParsedOptionValue("test2");
        assertEquals(option2.getOpt(), result.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithMultipleOptions_sUIz5_iobP0_4() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option result = commandLine.getParsedOptionValue("test1");
        result = commandLine.getParsedOptionValue("test2");
        assertEquals(option2.getLongOpt(), result.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDuplicateOptions_jWdg6_DeAI0_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test", "test option 1");
        Option option2 = new Option("test", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String result = commandLine.getOptionValue("test");
        assertEquals(option1.getOpt(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNull_xFoe0_GehE1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties((Option) null);
        assertNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_duplicateOptions_lxYC6_ivzc0_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues(new Option("a", "a"));
        assertEquals(2, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_duplicateOptions_lxYC6_ivzc0_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues(new Option("a", "a"));
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_duplicateOptions_lxYC6_ivzc0_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues(new Option("a", "a"));
        assertEquals("a", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_invalidOptionType2_apgL11_HdMW0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("1.0");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_invalidOptionType3_dxwQ12_GjDq0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues(new Option("option", "description"));
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_char_defaultValue_optionPresent_RRfQ2_IiiK0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "";
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertNotEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_OptionPresent_CCBw2_Nocc0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", false, "Test option");
        commandLine.addOption(option);
        try {
            assertEquals("test", commandLine.getParsedOptionValue(option));
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}