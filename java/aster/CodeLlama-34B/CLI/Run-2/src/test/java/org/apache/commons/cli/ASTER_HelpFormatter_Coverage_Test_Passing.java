/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    private Options options;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_lFdh0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 10;
        String text = "This is a test text that should be wrapped.";
        formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        Assertions.assertEquals("This is a test text that should be wrapped.", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_lVzb3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 15;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_aSCi4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_iNUm5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 25;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_NKXr6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_iSnP7() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 35;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_CbRl8() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 40;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_cmdLineSyntaxNull_FEFy0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = null;
        String header = "Header";
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        try {
            formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_cmdLineSyntaxEmpty_KoTp1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "";
        String header = "Header";
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        try {
            formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_autoUsageTrue_AMTj2() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmd";
        String header = "Header";
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_autoUsageFalse_qELx3() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmd";
        String header = "Header";
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = false;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_headerNull_ezAp4() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmd";
        String header = null;
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_UtjQ1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "arg1", false, "description");
        options.addOption("b", "arg2", true, "description");
        options.addOption("c", "arg3", false, "description");
        options.addOption("d", "arg4", true, "description");
        options.addOption("e", "arg5", false, "description");
        options.addOption("f", "arg6", true, "description");
        options.addOption("g", "arg7", false, "description");
        options.addOption("h", "arg8", true, "description");
        options.addOption("i", "arg9", false, "description");
        options.addOption("j", "arg10", true, "description");
        options.addOption("k", "arg11", false, "description");
        options.addOption("l", "arg12", true, "description");
        options.addOption("m", "arg13", false, "description");
        options.addOption("n", "arg14", true, "description");
        options.addOption("o", "arg15", false, "description");
        options.addOption("p", "arg16", true, "description");
        options.addOption("q", "arg17", false, "description");
        options.addOption("r", "arg18", true, "description");
        options.addOption("s", "arg19", false, "description");
        options.addOption("t", "arg20", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_sWrM0() {
        HelpFormatter formatter = new HelpFormatter();
        String input = "   Hello World   ";
        String expected = "   Hello World";
        String actual = formatter.rtrim(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_nCNL0_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 9;
        int startPos = 0;
        int expected = 9;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_tYok1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 14;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_DEke2_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = 14;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }
}