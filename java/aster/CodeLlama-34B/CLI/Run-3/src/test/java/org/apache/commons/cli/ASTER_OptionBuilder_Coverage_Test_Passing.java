/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDescription_CYAx0() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullArgName_ornA1() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOption_bRnK2() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithStringType_yGje3() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithRequiredFalse_rQMv4() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithArgCountUninitialized_pSsJ5() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertEquals(Option.UNINITIALIZED, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptionalArgFalse_fzXy6() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValueSeparatorNull_GxFM7() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertEquals((char) 0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_longOptionNotNull_lXTP1_Hohl0_1() throws java.lang.IllegalArgumentException {
        OptionBuilder.withLongOpt("test");
        Option option = OptionBuilder.create();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_longOptionNotNull_lXTP1_Hohl0_2() throws java.lang.IllegalArgumentException {
        OptionBuilder.withLongOpt("test");
        Option option = OptionBuilder.create();
        assertEquals("test", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithReset_Lwms8() throws java.lang.IllegalArgumentException {
        Option option = OptionBuilder.create("test");
        assertNull(option.getDescription());
        assertNull(option.getArgName());
        assertNull(option.getLongOpt());
        assertEquals(String.class, option.getType());
        assertFalse(option.isRequired());
        assertEquals(Option.UNINITIALIZED, option.getArgs());
        assertFalse(option.hasOptionalArg());
        assertEquals((char) 0, option.getValueSeparator());
    }
}