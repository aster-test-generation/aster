/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    private List<Object> requiredOpts = new ArrayList<>();
    private Map<String, Option> longOpts = new LinkedHashMap<>();
    private Map<String, Option> shortOpts = new LinkedHashMap<>();
    private Map<String, OptionGroup> optionGroups = new LinkedHashMap<>();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_WsHS0_1() throws Exception {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals(2, helpOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_WsHS0_2() throws Exception {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals("-h", helpOptions.get(0).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_WsHS0_3() throws Exception {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals("--help", helpOptions.get(1).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_emptyString_fvkL0() throws Exception {
        Options options = new Options();
        assertFalse(options.hasLongOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_nullString_Xmpd1() throws Exception {
        Options options = new Options();
        assertFalse(options.hasLongOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOpt_tQKK0() throws Exception {
        Options options = new Options();
        Option option = options.getOption("-a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_KUpX0() throws Exception {
        Options options = new Options();
        Collection<Option> actualOptions = options.getOptions();
        assertTrue(actualOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_aRNr1_1() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertEquals(2, actualOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_aRNr1_2() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertTrue(actualOptions.contains(new Option("option1", "value1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_aRNr1_3() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertTrue(actualOptions.contains(new Option("option2", "value2")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_LIcU2() throws Exception {
        Options options = new Options();
        Collection<Option> actualOptions = options.getOptions();
        assertNull(actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalid_ZDuq3_1() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertNotEquals(2, actualOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalid_ZDuq3_2() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertFalse(actualOptions.contains(new Option("option1", "value1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalid_ZDuq3_3() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actualOptions = options.getOptions();
        assertFalse(actualOptions.contains(new Option("option2", "value2")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicate_sJgx4_1() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option1", "value1"));
        Collection<Option> actualOptions = options.getOptions();
        assertEquals(1, actualOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicate_sJgx4_2() throws Exception {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option1", "value1"));
        Collection<Option> actualOptions = options.getOptions();
        assertTrue(actualOptions.contains(new Option("option1", "value1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_GndR5() throws Exception {
        Options options = new Options();
        options.addOption(null);
        Collection<Option> actualOptions = options.getOptions();
        assertNull(actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption1_iZbG0_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption1_iZbG0_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        assertTrue(options.hasLongOption("long-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption1_iZbG0_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption1_iZbG0_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "description");
        assertEquals("description", options.getOption("a").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption2_mCgq1_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("b", "long-b", false, "description");
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption2_mCgq1_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("b", "long-b", false, "description");
        assertTrue(options.hasLongOption("long-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption2_mCgq1_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("b", "long-b", false, "description");
        assertFalse(options.getOption("b").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption2_mCgq1_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("b", "long-b", false, "description");
        assertEquals("description", options.getOption("b").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption3_AzPi2_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("c", "long-c", true, "description");
        assertTrue(options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption3_AzPi2_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("c", "long-c", true, "description");
        assertTrue(options.hasLongOption("long-c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption3_AzPi2_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("c", "long-c", true, "description");
        assertTrue(options.getOption("c").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption3_AzPi2_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("c", "long-c", true, "description");
        assertEquals("description", options.getOption("c").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption4_kZfa3_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("d", "long-d", false, "description");
        assertTrue(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption4_kZfa3_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("d", "long-d", false, "description");
        assertTrue(options.hasLongOption("long-d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption4_kZfa3_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("d", "long-d", false, "description");
        assertFalse(options.getOption("d").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption4_kZfa3_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("d", "long-d", false, "description");
        assertEquals("description", options.getOption("d").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption5_Kpic4_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("e", "long-e", true, "description");
        assertTrue(options.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption5_Kpic4_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("e", "long-e", true, "description");
        assertTrue(options.hasLongOption("long-e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption5_Kpic4_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("e", "long-e", true, "description");
        assertTrue(options.getOption("e").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption5_Kpic4_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("e", "long-e", true, "description");
        assertEquals("description", options.getOption("e").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption6_qFGp5_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("f", "long-f", false, "description");
        assertTrue(options.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption6_qFGp5_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("f", "long-f", false, "description");
        assertTrue(options.hasLongOption("long-f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption6_qFGp5_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("f", "long-f", false, "description");
        assertFalse(options.getOption("f").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption6_qFGp5_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("f", "long-f", false, "description");
        assertEquals("description", options.getOption("f").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption7_SUQL6_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("g", "long-g", true, "description");
        assertTrue(options.hasOption("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption7_SUQL6_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("g", "long-g", true, "description");
        assertTrue(options.hasLongOption("long-g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption7_SUQL6_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("g", "long-g", true, "description");
        assertTrue(options.getOption("g").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption7_SUQL6_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("g", "long-g", true, "description");
        assertEquals("description", options.getOption("g").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption8_oRdK7_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("h", "long-h", false, "description");
        assertTrue(options.hasOption("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption8_oRdK7_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("h", "long-h", false, "description");
        assertTrue(options.hasLongOption("long-h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption8_oRdK7_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("h", "long-h", false, "description");
        assertFalse(options.getOption("h").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption8_oRdK7_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("h", "long-h", false, "description");
        assertEquals("description", options.getOption("h").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption9_vAfX8_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("i", "long-i", true, "description");
        assertTrue(options.hasOption("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption9_vAfX8_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("i", "long-i", true, "description");
        assertTrue(options.hasLongOption("long-i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption9_vAfX8_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("i", "long-i", true, "description");
        assertTrue(options.getOption("i").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption9_vAfX8_4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("i", "long-i", true, "description");
        assertEquals("description", options.getOption("i").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequired_rjlL0_1() throws Exception {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertTrue(options.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequired_rjlL0_3() throws Exception {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertEquals("required", options.getOption("r").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequired_rjlL0_4() throws Exception {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertEquals("This is a required option", options.getOption("r").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionOptional_HheA1_1() throws Exception {
        Options options = new Options();
        Option option = new Option("o", "optional", false, "This is an optional option");
        options.addOption(option);
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionOptional_HheA1_3() throws Exception {
        Options options = new Options();
        Option option = new Option("o", "optional", false, "This is an optional option");
        options.addOption(option);
        assertEquals("optional", options.getOption("o").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionOptional_HheA1_4() throws Exception {
        Options options = new Options();
        Option option = new Option("o", "optional", false, "This is an optional option");
        options.addOption(option);
        assertEquals("This is an optional option", options.getOption("o").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValue_GQwC2_1() throws Exception {
        Options options = new Options();
        Option option = new Option("v", "value", true, "This is an option with a value");
        options.addOption(option);
        assertTrue(options.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValue_GQwC2_3() throws Exception {
        Options options = new Options();
        Option option = new Option("v", "value", true, "This is an option with a value");
        options.addOption(option);
        assertEquals("value", options.getOption("v").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValue_GQwC2_4() throws Exception {
        Options options = new Options();
        Option option = new Option("v", "value", true, "This is an option with a value");
        options.addOption(option);
        assertEquals("This is an option with a value", options.getOption("v").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefault_YSrm3_1() throws Exception {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertTrue(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefault_YSrm3_3() throws Exception {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("default", options.getOption("d").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefault_YSrm3_4() throws Exception {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("This is an option with a value and a default value", options.getOption("d").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefault_YSrm3_5() throws Exception {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("default", options.getOption("d").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupNull_oRSg1() throws Exception {
        Option option = new Option("a", "alpha", false, "This is option a");
        Options options = new Options();
        OptionGroup actualOptionGroup = options.getOptionGroup(option);
        assertNull(actualOptionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_empty_rPEL0() throws Exception {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_nonEmpty_tlEc1_1() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options.addOptionGroup(optionGroup);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(1, optionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_nonEmpty_tlEc1_2() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options.addOptionGroup(optionGroup);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_null_lxYc2() throws Exception {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNull(optionGroups);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_FMpk3_1() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(2, optionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_FMpk3_2() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_FMpk3_3() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_iCuP0_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_IVsC1_1() throws Exception {
        Options options = new Options();
        options.addOption("b", "long-b", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_BMzs2_1() throws Exception {
        Options options = new Options();
        options.addOption("c", "long-c", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_APqm3_1() throws Exception {
        Options options = new Options();
        options.addOption("d", "long-d", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_OXoT4_1() throws Exception {
        Options options = new Options();
        options.addOption("e", "long-e", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_umhG5_1() throws Exception {
        Options options = new Options();
        options.addOption("f", "long-f", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_lxup6_1() throws Exception {
        Options options = new Options();
        options.addOption("g", "long-g", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_emptyOptions_UUqu0() throws Exception {
        Options options = new Options();
        Options newOptions = new Options();
        assertEquals(options, newOptions.addOptions(options));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_duplicateKey_IRYW1() throws Exception {
        Options options = new Options();
        Option opt = new Option("key", "description");
        options.addOption(opt);
        Options newOptions = new Options();
        newOptions.addOption(opt);
        assertThrows(IllegalArgumentException.class, () -> newOptions.addOptions(options));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_validOptions_apml2() throws Exception {
        Options options = new Options();
        Option opt1 = new Option("key1", "description1");
        Option opt2 = new Option("key2", "description2");
        options.addOption(opt1);
        options.addOption(opt2);
        Options newOptions = new Options();
        newOptions.addOption(opt1);
        newOptions.addOption(opt2);
        assertEquals(options, newOptions.addOptions(options));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_required_vgEQ0_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_notRequired_FcKK1_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_withOptions_adAy2_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        group.addOption(option1);
        group.addOption(option2);
        options.addOptionGroup(group);
        assertEquals(2, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithValidShortOption_cRVb0() throws Exception {
        Options options = new Options();
        String opt = "a";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithInvalidShortOption_UiFQ1() throws Exception {
        Options options = new Options();
        String opt = "invalid";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithNullShortOption_WxvN2() throws Exception {
        Options options = new Options();
        String opt = null;
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithEmptyShortOption_lBNd3() throws Exception {
        Options options = new Options();
        String opt = "";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithLongOption_bofE4() throws Exception {
        Options options = new Options();
        String opt = "--long";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithMultipleShortOptions_UZjo5() throws Exception {
        Options options = new Options();
        String opt = "a,b,c";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithMultipleShortOptionsAndInvalidOption_UuIs6() throws Exception {
        Options options = new Options();
        String opt = "a,b,c,invalid";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithMultipleShortOptionsAndNullOption_mpNf7() throws Exception {
        Options options = new Options();
        String opt = "a,b,c,null";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithMultipleShortOptionsAndEmptyOption_hKvl8() throws Exception {
        Options options = new Options();
        String opt = "a,b,c,";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithMultipleShortOptionsAndLongOption_TXkO9() throws Exception {
        Options options = new Options();
        String opt = "a,b,c,--long";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndNoArg_lwKk0_1() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "description");
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndNoArg_lwKk0_2() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndNoArg_lwKk0_3() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndNoArg_lwKk0_4() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "description");
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndArg_Ydhe1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "description");
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndArg_Ydhe1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndArg_Ydhe1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortNameAndArg_Ydhe1_4() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "description");
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndNoArg_QhdZ2_1() throws Exception {
        Options options = new Options();
        options.addOption("--long", false, "description");
        Option option = options.getOption("--long");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndNoArg_QhdZ2_2() throws Exception {
        Options options = new Options();
        options.addOption("--long", false, "description");
        Option option = options.getOption("--long");
        assertEquals("--long", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndNoArg_QhdZ2_3() throws Exception {
        Options options = new Options();
        options.addOption("--long", false, "description");
        Option option = options.getOption("--long");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndNoArg_QhdZ2_4() throws Exception {
        Options options = new Options();
        options.addOption("--long", false, "description");
        Option option = options.getOption("--long");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndArg_JLgE3_1() throws Exception {
        Options options = new Options();
        options.addOption("--long", true, "description");
        Option option = options.getOption("--long");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndArg_JLgE3_2() throws Exception {
        Options options = new Options();
        options.addOption("--long", true, "description");
        Option option = options.getOption("--long");
        assertEquals("--long", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndArg_JLgE3_3() throws Exception {
        Options options = new Options();
        options.addOption("--long", true, "description");
        Option option = options.getOption("--long");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongNameAndArg_JLgE3_4() throws Exception {
        Options options = new Options();
        options.addOption("--long", true, "description");
        Option option = options.getOption("--long");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongName_kOWE4_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", false, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongName_kOWE4_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", false, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongName_kOWE4_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", false, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongName_kOWE4_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", false, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongName_kOWE4_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", false, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("--long", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongNameAndArg_tQvj5_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", true, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongNameAndArg_tQvj5_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", true, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongNameAndArg_tQvj5_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", true, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongNameAndArg_tQvj5_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", true, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortAndLongNameAndArg_tQvj5_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "--long", true, "description");
        Option option = options.getOption("a");
        option = options.getOption("--long");
        assertEquals("--long", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionReturnsOptionsObject_FbYT0() throws Exception {
        Options options = new Options();
        options.addOption("test", "description");
        assertEquals(options, options.addOption("test", "description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionAddsOptionWithCorrectDescription_pNaV2() throws Exception {
        Options options = new Options();
        options.addOption("test", "description");
        assertEquals("description", options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionAddsOptionWithCorrectType_PBeJ3() throws Exception {
        Options options = new Options();
        options.addOption("test", "description");
        assertEquals(String.class, options.getOption("test").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionAddsOptionWithCorrectRequiredFlag_MsAx4() throws Exception {
        Options options = new Options();
        options.addOption("test", "description");
        assertFalse(options.getOption("test").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionAddsOptionWithCorrectValue_Ghbo6() throws Exception {
        Options options = new Options();
        options.addOption("test", "description");
        assertNull(options.getOption("test").getValue());
    }
}