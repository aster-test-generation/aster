/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_fcvC0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa");
        options.addOption("b", "bbb", false, "bbb");
        options.addOption("c", "ccc", false, "ccc");
        PosixParser parser = new PosixParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, true);
        String[] expected = new String[]{"-a", "-b", "-c"};
        Assertions.assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithoutStopAtNonOption_ButT1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa");
        options.addOption("b", "bbb", false, "bbb");
        options.addOption("c", "ccc", false, "ccc");
        PosixParser parser = new PosixParser();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        String[] result = parser.flatten(options, arguments, false);
        String[] expected = new String[]{"-a", "-b", "-c"};
        Assertions.assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNonOption_jOsz2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa");
        options.addOption("b", "bbb", false, "bbb");
        options.addOption("c", "ccc", false, "ccc");
        PosixParser parser = new PosixParser();
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        String[] result = parser.flatten(options, arguments, true);
        String[] expected = new String[]{"-a", "-b", "--", "-c"};
        Assertions.assertArrayEquals(expected, result);
    }
}