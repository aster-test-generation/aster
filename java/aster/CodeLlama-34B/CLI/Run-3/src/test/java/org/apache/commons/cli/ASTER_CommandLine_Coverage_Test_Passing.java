/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    private CommandLine commandLine;
    private Option option;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue_OcEJ1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_mLai0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_ParseException_kZAc0() {
        CommandLine commandLine = new CommandLine();
        String opt = "invalid_option";
        Object result = commandLine.getOptionObject(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_NullOption_sTMj2() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        Object result = commandLine.getOptionObject(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoValues_JvMY1_lbWO0() {
        Properties props = new Properties();
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_pFTS0_mSNB0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDefaultValue_mkAG1_Bbna0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String result = commandLine.getOptionValue('a', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasNoValues_HPLI2_dvwn0() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Collections.emptyList());
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_1() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_2() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.getProperty("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_SsKI0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String expected = "default";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }
}