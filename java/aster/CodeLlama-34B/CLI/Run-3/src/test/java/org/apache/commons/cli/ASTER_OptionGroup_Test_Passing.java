/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    private OptionGroup optionGroup;
    private String selected;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_empty_MAlF0() throws Exception {
        optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertTrue(names.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_nullOption_jDLH4() throws Exception {
        optionGroup = new OptionGroup();
        optionGroup.addOption(null);
        Collection<String> names = optionGroup.getNames();
        assertEquals(0, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_nullKeyAndNonEmptyValue_gYNw13() throws Exception {
        optionGroup = new OptionGroup();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_FqwO0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(0, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_HDou1_1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(2, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_HDou1_2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_HDou1_3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_ssYn2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicates_IbNO3_1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option1);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(2, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicates_IbNO3_2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option1);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicates_IbNO3_3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        optionGroup.addOption(option1);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_True_NrPT0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_False_GLTv1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        assertFalse(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_default_IavH0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        assertEquals("", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_null_bsZz2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setSelected(null);
        String selected = optionGroup.getSelected();
        assertNull(selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_empty_dBze0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        String expected = "[]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_singleOption_JbWa1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "description");
        optionGroup.addOption(option);
        String expected = "[a: description]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_multipleOptions_Goms2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "description1");
        Option option2 = new Option("b", "description2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        String expected = "[a: description1, b: description2]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_longOptOnly_cswh3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option(null, "description");
        optionGroup.addOption(option);
        String expected = "[--description]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_optAndLongOpt_hlQe4() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "description");
        optionGroup.addOption(option);
        String expected = "[-a, --description]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_PuYI0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "description");
        optionGroup.addOption(option);
        assertTrue(optionGroup.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_lzrp0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "Option Description");
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithLongOption_CYYE1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "Option Description", true, "longOption");
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }
}