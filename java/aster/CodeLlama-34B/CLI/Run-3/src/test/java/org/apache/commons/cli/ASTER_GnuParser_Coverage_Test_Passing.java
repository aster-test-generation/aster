/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_RtoV0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, false);
        assertEquals(4, tokens.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_RtoV0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, false);
        assertEquals("-a", tokens[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_RtoV0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, false);
        assertEquals("-b", tokens[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_RtoV0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, false);
        assertEquals("value", tokens[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_RtoV0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, false);
        assertEquals("-c", tokens[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_BaGd1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, true);
        assertEquals("-a", tokens[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_BaGd1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, true);
        assertEquals("-b", tokens[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_BaGd1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "description");
        options.addOption("b", true, "description");
        options.addOption("c", false, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c"};
        GnuParser parser = new GnuParser();
        String[] tokens = parser.flatten(options, arguments, true);
        assertEquals(4, tokens.length);
    }
}