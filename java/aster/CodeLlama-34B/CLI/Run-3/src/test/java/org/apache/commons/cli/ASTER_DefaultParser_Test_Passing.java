/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_WBhh1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_jEWC2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_jEWC2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_Jmwg3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_Jmwg3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndMultipleArguments_HOAm4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndMultipleArguments_HOAm4_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptions_gUBW5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptions_gUBW5_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptions_gUBW5_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptionsAndArguments_ldCS6_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptionsAndArguments_ldCS6_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptionsAndArguments_ldCS6_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgumentAndMultipleOptionsAndArguments_ldCS6_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_npZV0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_npZV0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_wvEh1_1() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_wvEh1_2() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_wvEh1_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_wvEh1_4() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_rqxR2_1() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("--long").build());
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_rqxR2_2() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("--long").build());
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--long", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_rqxR2_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("--long").build());
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_rqxR2_4() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("--long").build());
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_JLqy3_1() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_JLqy3_2() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_JLqy3_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_JLqy3_4() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_JLqy3_5() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_feJf0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_xFln1_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").build());
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_TtQe2_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_zMwI3_3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_zMwI3_4() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_cNeA0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("alpha", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(false, cmd.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zGRi1_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("This is option a", cmd.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("alpha", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, cmd.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_fmya2_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("This is option a", cmd.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("alpha", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, cmd.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMultipleArguments_hzPn3_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("This is option a", cmd.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptions_lNtB0_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptions_lNtB0_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutOptions_lNtB0_3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_RraT1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_RraT1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_RraT1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_RraT1_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_RraT1_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ibLx2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg1");
        properties.setProperty("b", "arg2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ibLx2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg1");
        properties.setProperty("b", "arg2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ibLx2_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg1");
        properties.setProperty("b", "arg2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ibLx2_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg1");
        properties.setProperty("b", "arg2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ibLx2_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg1");
        properties.setProperty("b", "arg2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_czGy3_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "--", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_czGy3_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "--", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_czGy3_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "--", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_czGy3_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "--", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_czGy3_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        String[] arguments = new String[]{"-a", "arg1", "--", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertFalse(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_EnuS0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_alxO1_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_alxO1_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LvII2_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LvII2_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_LvII2_3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--version", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZItH3_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        properties.setProperty("help", "true");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZItH3_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        properties.setProperty("help", "true");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZItH3_3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        properties.setProperty("help", "true");
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_riaQ4_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_riaQ4_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--help", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_GHqH5_1() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(Option.builder("a").build());
        optionGroup.addOption(Option.builder("b").build());
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_GHqH5_2() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(Option.builder("a").build());
        optionGroup.addOption(Option.builder("b").build());
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_GHqH5_3() throws Exception {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(Option.builder("a").build());
        optionGroup.addOption(Option.builder("b").build());
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_pBBT0() throws Exception {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        options.addOption("e", "eee", false, "description");
        options.addOption("f", "fff", true, "description");
        options.addOption("g", "ggg", false, "description");
        options.addOption("h", "hhh", true, "description");
        options.addOption("i", "iii", false, "description");
        options.addOption("j", "jjj", true, "description");
        options.addOption("k", "kkk", false, "description");
        options.addOption("l", "lll", true, "description");
        options.addOption("m", "mmm", false, "description");
        options.addOption("n", "nnn", true, "description");
        options.addOption("o", "ooo", false, "description");
        options.addOption("p", "ppp", true, "description");
        options.addOption("q", "qqq", false, "description");
        options.addOption("r", "rrr", true, "description");
        options.addOption("s", "sss", false, "description");
        options.addOption("t", "ttt", true, "description");
        options.addOption("u", "uuu", false, "description");
        options.addOption("v", "vvv", true, "description");
        options.addOption("w", "www", false, "description");
        options.addOption("x", "xxx", true, "description");
        options.addOption("y", "yyy", false, "description");
        options.addOption("z", "zzz", true, "description");
        String[] arguments = new String[]{
                "-a", "--bbb", "bbb", "-c", "--ddd", "ddd", "-e", "--fff", "fff", "-g", "--ggg", "ggg", "-h", "--hhh", "hhh", "-i", "--iii", "iii", "-j", "--jjj", "jjj", "-k", "--kkk", "kkk", "-l", "--lll", "lll", "-m", "--mmm", "mmm", "-n", "--nnn", "nnn", "-o", "--ooo", "ooo", "-p", "--ppp", "ppp", "-q", "--qqq", "qqq", "-r", "--rrr", "rrr", "-s", "--sss", "sss", "-t", "--ttt", "ttt", "-u", "--uuu", "uuu", "-v", "--vvv", "vvv", "-w", "--www", "www", "-x", "--xxx", "xxx", "-y", "--yyy", "yyy", "-z", "--zzz", "zzz"
        };
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        properties.setProperty("d", "ddd");
        properties.setProperty("e", "eee");
        properties.setProperty("f", "fff");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_mNqF0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertFalse(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJbm1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "bravo", false, "description");
        options.addOption("c", "charlie", false, "description");
        String[] arguments = new String[]{"-a", "-b", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        properties.setProperty("c", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(null, cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_LMHX0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OulT1() throws Exception {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_kwBp2() throws Exception {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionValue_WSnC3() throws Exception {
        Options options = new Options();
        options.addOption("o", true, "description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_SqVx4() throws Exception {
        Options options = new Options();
        options.addOption("p", true, "description");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nmJW5_1() throws Exception {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nmJW5_2() throws Exception {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nmJW5_3() throws Exception {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_iwgI6() throws Exception {
        Options options = new Options();
        options.addOption("n", true, "description");
        String[] arguments = new String[]{"-n", "-1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_gKQc7() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "description"));
        group.addOption(new Option("b", "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vXvQ3_1() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "arg1", false, "Argument 1");
        options.addRequiredOption("b", "arg2", false, "Argument 2");
        options.addOption("c", "arg3", false, "Argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vXvQ3_2() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "arg1", false, "Argument 1");
        options.addRequiredOption("b", "arg2", false, "Argument 2");
        options.addOption("c", "arg3", false, "Argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vXvQ3_3() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "arg1", false, "Argument 1");
        options.addRequiredOption("b", "arg2", false, "Argument 2");
        options.addOption("c", "arg3", false, "Argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value3", cmd.getOptionValue("arg3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptions_wjpI0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptions_wjpI0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptions_wjpI0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_cUtS2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", true, "gamma option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_cUtS2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", true, "gamma option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_cUtS2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", true, "gamma option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        properties.setProperty("gamma", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbbValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("cccValue", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("eeeValue", cmd.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_poas0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        options.addOption("d", "ddd", false, "description");
        options.addOption("e", "eee", true, "description");
        options.addOption("f", "fff", true, "description");
        String[] arguments = new String[]{"-a", "-b", "bbbValue", "--ccc", "cccValue", "--ddd", "--eee", "eeeValue",
                "--fff", "fffValue"};
        Properties properties = new Properties();
        properties.setProperty("a", "aValue");
        properties.setProperty("b", "bValue");
        properties.setProperty("c", "cValue");
        properties.setProperty("d", "dValue");
        properties.setProperty("e", "eValue");
        properties.setProperty("f", "fValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("fffValue", cmd.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, cmd.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("description", cmd.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndProperties_Umvo3_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionProperties("a").getProperty("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_MdeN1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_GfoV2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndArgument_GfoV2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndProperties_GnJi3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(false);
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_EmptyString_NPYI0() throws Exception {
        String token = "";
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_NullString_CLaq1() throws Exception {
        String token = null;
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_NoEqualSign_TtbV2() throws Exception {
        String token = "abc";
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_EqualSignAtStart_VgQt3() throws Exception {
        String token = "=abc";
        int expected = 0;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_EqualSignInMiddle_NYHZ4() throws Exception {
        String token = "abc=def";
        int expected = 3;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_EqualSignAtEnd_GgBT5() throws Exception {
        String token = "abc=";
        int expected = 3;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_MultipleEqualSigns_QmhX6() throws Exception {
        String token = "abc=def=ghi";
        int expected = 3;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_WhitespaceBeforeEqualSign_CJDh7() throws Exception {
        String token = "abc =def";
        int expected = 4;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_emptyExpectedOpts_nmcj0() throws Exception {
        DefaultParser parser = new DefaultParser(false);
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_vDhm1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_QiYE2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        options.addOption("b", "beta", false, "This is option b");
        String[] arguments = new String[]{"-a", "-b"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_QiYE2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        options.addOption("b", "beta", false, "This is option b");
        String[] arguments = new String[]{"-a", "-b"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_YCXQ3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is option a"));
        group.addOption(new Option("b", "beta", false, "This is option b"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_yWfD4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "This is option a");
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithArg_BxGp5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithArg_BxGp5_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "This is option a");
        String[] arguments = new String[]{"-a", "arg"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("arg", cmd.getOptionObject("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithDefaultValue_hwUc6_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        options.addOption("b", "beta", false, "This is option b");
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionWithDefaultValue_hwUc6_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "This is option a");
        options.addOption("b", "beta", false, "This is option b");
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }
}