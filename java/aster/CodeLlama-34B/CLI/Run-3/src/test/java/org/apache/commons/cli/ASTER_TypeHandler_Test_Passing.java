/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.nio.file.Path;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Passing {
    public void testCreateURLWithValidString_TUEU0() throws ParseException {
        String urlString = "https://www.example.com";
        URL actualURL = TypeHandler.createURL(urlString);
    }

    public void testCreateURLWithInvalidString_EpJP1() throws Exception {
        String urlString = "invalid_url";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid URL"));
        }
    }

    public void testCreateURLWithNullString_DOqs2() throws Exception {
        String urlString = null;
        try {
            TypeHandler.createURL(urlString);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertTrue(e.getMessage().contains("URL string cannot be null"));
        }
    }

    public void testCreateURLWithEmptyString_zCpj3() throws Exception {
        String urlString = "";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid URL"));
        }
    }

    public void testCreateURLWithMalformedURL_qlpA4() throws Exception {
        String urlString = "https://www.example.com/path/to/resource?query=value";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Malformed URL"));
        }
    }

    public void testCreateURLWithUnsupportedProtocol_mhFK5() throws Exception {
        String urlString = "ftp://www.example.com";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unsupported protocol"));
        }
    }

    public void testCreateURLWithInvalidPort_Yigl6() throws Exception {
        String urlString = "https://www.example.com:65536";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid port"));
        }
    }

    public void testCreateURLWithInvalidHost_FAOg7() throws Exception {
        String urlString = "https://www.example.com:8080/path/to/resource";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid host"));
        }
    }

    public void testCreateURLWithInvalidPath_dcnl8() throws Exception {
        String urlString = "https://www.example.com/path/to/resource?query=value";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid path"));
        }
    }

    public void testCreateURLWithInvalidQuery_VqhS9() throws Exception {
        String urlString = "https://www.example.com/path/to/resource?query=value";
        try {
            TypeHandler.createURL(urlString);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid query"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithNullString_iZbe0() throws Exception {
        try {
            Object result = TypeHandler.createValue(null, String.class);
            assertNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithEmptyString_uMnK1() throws Exception {
        try {
            Object result = TypeHandler.createValue("", String.class);
            assertEquals("", result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithValidString_mxTP2() throws Exception {
        try {
            Object result = TypeHandler.createValue("hello", String.class);
            assertEquals("hello", result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithInvalidString_DZsE3() throws Exception {
        try {
            Object result = TypeHandler.createValue("hello", Integer.class);
            fail("Exception should be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof ParseException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithNullClass_capr4() throws Exception {
        try {
            Object result = TypeHandler.createValue("hello", null);
            fail("Exception should be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof ParseException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithInvalidClass_txvl5() throws Exception {
        try {
            Object result = TypeHandler.createValue("hello", Object.class);
            fail("Exception should be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof ParseException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithValidClass_rETn6() throws Exception {
        try {
            Object result = TypeHandler.createValue("123", Integer.class);
            assertEquals(123, result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithValidClassName_YYQi0() throws ParseException {
        String className = "java.lang.String";
        Class<?> expectedClass = String.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithInvalidClassName_Hpkh1() throws Exception {
        String className = "invalid.class.name";
        try {
            TypeHandler.createClass(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithNullClassName_PIRV2() throws Exception {
        String className = null;
        try {
            TypeHandler.createClass(className);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Class name cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithEmptyClassName_iVWY3() throws Exception {
        String className = "";
        try {
            TypeHandler.createClass(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class name cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithWhitespaceClassName_SbgX4() throws Exception {
        String className = "   ";
        try {
            TypeHandler.createClass(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class name cannot contain only whitespace", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithNonExistentClass_jBrt5() throws Exception {
        String className = "com.example.NonExistentClass";
        try {
            TypeHandler.createClass(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class not found: " + className, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithPrimitiveType_wzRX6() throws Exception {
        String className = "int";
        Class<?> expectedClass = int.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithArrayType_zwEw7() throws Exception {
        String className = "java.lang.String[]";
        Class<?> expectedClass = String[].class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithGenericType_MCkC8() throws Exception {
        String className = "java.util.List<java.lang.String>";
        Class<?> expectedClass = List.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithGenericTypeWithMultipleBounds_lgUo9() throws Exception {
        String className = "java.util.List<java.lang.String, java.lang.Integer>";
        Class<?> expectedClass = List.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithGenericTypeWithWildcard_IlIc10() throws Exception {
        String className = "java.util.List<? extends java.lang.String>";
        Class<?> expectedClass = List.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithGenericTypeWithWildcardAndMultipleBounds_yhAw11() throws Exception {
        String className = "java.util.List<? extends java.lang.String, ? extends java.lang.Integer>";
        Class<?> expectedClass = List.class;
        Class<?> actualClass = TypeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFile_jkXT0() throws Exception {
        String string = "test.txt";
        File file = TypeHandler.createFile(string);
        assertEquals(string, file.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithNullString_BKGp1() throws Exception {
        String string = null;
        File file = TypeHandler.createFile(string);
        assertNull(file);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithEmptyString_HCZI2() throws Exception {
        String string = "";
        File file = TypeHandler.createFile(string);
        assertNull(file);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidString_PBFb3() throws Exception {
        String string = "invalid";
        File file = TypeHandler.createFile(string);
        assertNull(file);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_String_Class_XpCW0() throws ParseException {
        String string = "123";
        Class<Integer> clazz = Integer.class;
        Integer expected = 123;
        Integer actual = TypeHandler.createValue(string, clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_String_Class_NullString_Pviy1() throws ParseException {
        String string = null;
        Class<Integer> clazz = Integer.class;
        Integer expected = null;
        Integer actual = TypeHandler.createValue(string, clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_String_Class_NullClass_iccz2() throws ParseException {
        String string = "123";
        Class<Integer> clazz = null;
        Integer expected = null;
        Integer actual = TypeHandler.createValue(string, clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_String_Class_InvalidString_ACDt3() throws ParseException {
        String string = "abc";
        Class<Integer> clazz = Integer.class;
        Integer expected = null;
        Integer actual = TypeHandler.createValue(string, clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_Default_ytcq0() throws Exception {
        TypeHandler defaultHandler = TypeHandler.getDefault();
        assertNotNull(defaultHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_EmptyMap_KXeb2() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler emptyHandler = new TypeHandler(converterMap);
        assertNotNull(emptyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_NullMap_WDAj3() throws Exception {
        TypeHandler nullHandler = new TypeHandler(null);
        assertNotNull(nullHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_1() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertEquals(16, map.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_2() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_3() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Class.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_4() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Date.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_5() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(File.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_6() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Path.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_7() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Number.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_8() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(URL.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_9() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(FileInputStream.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_10() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_11() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_12() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Short.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_13() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Byte.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_14() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_15() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_16() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(Float.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_17() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(BigInteger.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDefaultMap_OdgI0_18() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();
        assertTrue(map.containsKey(BigDecimal.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_ValidFilePath_NqIW0_1() throws ParseException {
        String filePath = "path/to/file.txt";
        FileInputStream fis = TypeHandler.openFile(filePath);
        assertNotNull(fis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_InvalidFilePath_IPXc1() throws Exception {
        String filePath = "path/to/invalid/file.txt";
        try {
            TypeHandler.openFile(filePath);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid file path: " + filePath, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_NullFilePath_SKaU2() throws Exception {
        String filePath = null;
        try {
            TypeHandler.openFile(filePath);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("File path cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_EmptyFilePath_tAJK3() throws Exception {
        String filePath = "";
        try {
            TypeHandler.openFile(filePath);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("File path cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_NullString_xycn0() throws Exception {
        String string = null;
        Number expected = null;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_EmptyString_gBMh1() throws Exception {
        String string = "";
        Number expected = null;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_InvalidString_QJoS2() throws Exception {
        String string = "abc";
        Number expected = null;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_IntegerString_sEqS3() throws Exception {
        String string = "123";
        Number expected = 123;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_DoubleString_RSuo4() throws Exception {
        String string = "123.456";
        Number expected = 123.456;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_FloatString_JndF6() throws Exception {
        String string = "123.456f";
        Number expected = 123.456f;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_ShortString_FrpA7() throws Exception {
        String string = "12345";
        Number expected = 12345;
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_BigDecimalString_rciG9() throws Exception {
        String string = "123.456";
        Number expected = new BigDecimal("123.456");
        Number actual = TypeHandler.createNumber(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithValidString_otFT0() throws Exception {
        String string = "2022-02-28";
        Date expected = new Date(2022, 1, 28);
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidString_RcKc1() throws Exception {
        String string = "2022-02-30";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithNullString_kwzj2() throws Exception {
        String string = null;
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithEmptyString_yeyb3() throws Exception {
        String string = "";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidFormatString_rSWI4() throws Exception {
        String string = "2022-02-28T12:30:00";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidDateString_VEeM5() throws Exception {
        String string = "2022-02-31";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidTimeString_YIxk6() throws Exception {
        String string = "2022-02-28T24:00:00";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidZoneString_oDFS7() throws Exception {
        String string = "2022-02-28T12:30:00+05:00";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidZoneOffsetString_zYmO8() throws Exception {
        String string = "2022-02-28T12:30:00+05:00[UTC]";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDateWithInvalidZoneIdString_vtwq9() throws Exception {
        String string = "2022-02-28T12:30:00+05:00[America/New_York]";
        Date expected = null;
        Date actual = TypeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithNullString_nHPQ0_1() throws Exception {
        File[] files = TypeHandler.createFiles(null);
        assertNotNull(files);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithNullString_nHPQ0_2() throws Exception {
        File[] files = TypeHandler.createFiles(null);
        assertEquals(0, files.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithEmptyString_LiEd1_1() throws Exception {
        File[] files = TypeHandler.createFiles("");
        assertNotNull(files);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithEmptyString_LiEd1_2() throws Exception {
        File[] files = TypeHandler.createFiles("");
        assertEquals(0, files.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithValidString_zDsT2_1() throws Exception {
        File[] files = TypeHandler.createFiles("file1.txt");
        assertNotNull(files);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithValidString_zDsT2_2() throws Exception {
        File[] files = TypeHandler.createFiles("file1.txt");
        assertEquals(1, files.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFilesWithValidString_zDsT2_3() throws Exception {
        File[] files = TypeHandler.createFiles("file1.txt");
        assertEquals("file1.txt", files[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithValidClassName_QvLz0() throws ParseException {
        String className = "java.lang.String";
        Object obj = TypeHandler.createObject(className);
        assertEquals(String.class, obj.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithInvalidClassName_xDpi1() throws ParseException {
        String className = "invalid.class.name";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithNullClassName_uUks2() throws ParseException {
        String className = null;
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class name cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithEmptyClassName_xXyQ3() throws ParseException {
        String className = "";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class name cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithBlankClassName_ETZX4() throws ParseException {
        String className = "   ";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class name cannot be blank", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithNonExistentClass_teZf5() throws ParseException {
        String className = "com.example.NonExistentClass";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Class not found: com.example.NonExistentClass", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithAbstractClass_GQRM6() throws ParseException {
        String className = "java.lang.AbstractStringBuilder";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Cannot instantiate abstract class: java.lang.AbstractStringBuilder", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithInterface_KXhU7() throws ParseException {
        String className = "java.lang.CharSequence";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Cannot instantiate interface: java.lang.CharSequence", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithPrimitiveType_YqWD8() throws ParseException {
        String className = "int";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Cannot instantiate primitive type: int", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObjectWithArrayType_jdOH9() throws ParseException {
        String className = "java.lang.String[]";
        try {
            TypeHandler.createObject(className);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Cannot instantiate array type: java.lang.String[]", e.getMessage());
        }
    }
}