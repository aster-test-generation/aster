/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Failing {
    private CommandLine commandLine;
    private Option option;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_1() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_2() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.getProperty("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_3() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.getProperty("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasNoValues_HPLI2() {
        when(option.getValuesList()).thenReturn(Collections.emptyList());
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_ValidOption_SqTp1() {
        CommandLine commandLine = new CommandLine();
        String opt = "valid_option";
        Object result = commandLine.getOptionObject(opt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IFhG0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String expected = "value";
        String actual = commandLine.getParsedOptionValue(opt);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_JhAe0_1() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_JhAe0_2() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.getProperty("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionIsNotNull_mYws1_JhAe0_3() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1=value1", "key2=value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.getProperty("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_3() {
        Option option = mock(Option.class);
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.getProperty("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IFhG0_fid1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String expected = "value";
        String actual = commandLine.getParsedOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoValues_JvMY1_lbWO0_fid1() {
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_1_fid1() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_2_fid1() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.getProperty("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_whenOptionHasInvalidValues_gFIH3_unTl0_3_fid1() {
        when(option.getValuesList()).thenReturn(Arrays.asList("key1value1", "key2value2"));
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.getProperty("key2"));
    }
}