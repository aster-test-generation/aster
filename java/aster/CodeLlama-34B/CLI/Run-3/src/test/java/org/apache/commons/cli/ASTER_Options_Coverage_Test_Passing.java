/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_Slbk2_1() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_Slbk2_2() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasLongOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_nuIt3_1() {
        Options options = new Options();
        Option opt = new Option("test", false, "This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_nuIt3_2() {
        Options options = new Options();
        Option opt = new Option("test", false, "This is a test option");
        options.addOption(opt);
        Assertions.assertFalse(options.hasLongOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsDuplicateKey_psBd0() {
        Options options = new Options();
        options.addOption("key", "value");
        Options newOptions = new Options();
        newOptions.addOption("key", "value");
        try {
            options.addOptions(newOptions);
            assertTrue(false);
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_VZXe1_1() {
        Options options = new Options();
        options.addOption("key", "value");
        Options newOptions = new Options();
        newOptions.addOption("key1", "value1");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_VZXe1_2() {
        Options options = new Options();
        options.addOption("key", "value");
        Options newOptions = new Options();
        newOptions.addOption("key1", "value1");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoOptions_uDaD2() {
        Options options = new Options();
        Options newOptions = new Options();
        options.addOptions(newOptions);
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOpt_IqfH2() {
        Options options = new Options();
        assertFalse(options.hasOption("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithShortOpt_xbUD0_dhgI0() {
        Options options = new Options();
        options.addOption("a", "apple");
        assertTrue(options.hasOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOpt_Ufni1_ycKo0() {
        Options options = new Options();
        options.addOption("apple", "a");
        assertTrue(options.hasOption("--apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_Slbk2() {
        Options options = new Options();
        Option opt = new Option("test", "test-long", true, "This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertTrue(options.hasLongOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_nuIt3() {
        Options options = new Options();
        Option opt = new Option("test", false, "This is a test option");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertFalse(options.hasLongOption("test-long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_VZXe1() {
        Options options = new Options();
        options.addOption("key", "value");
        Options newOptions = new Options();
        newOptions.addOption("key1", "value1");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("key"));
        assertTrue(options.hasOption("key1"));
    }
}