/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_awXh0() {
        Option option = new Option("option", "longOption", true, "description");
        String expected = "[ Option option longOption [ARG...] :: description :: type ]";
        String actual = option.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_xXvp1() {
        Option option = new Option("option", "longOption", false, "description");
        String expected = "[ Option option longOption [ARG] :: description :: type ]";
        String actual = option.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithValues_JPpq4() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithNonClassType_KdNJ1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(1);
        Assertions.assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_eHgs1() {
        Option option = new Option("test", true, "description");
        String[] values = option.getValues();
        assertNotNull(values);
        assertEquals(1, values.length);
        assertEquals("test", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleValues_JxCW3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleValuesAndNoArg_TuLG4() {
        Option option = new Option("option", "longOption", false, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleValuesAndArg_Npdg5() {
        Option option = new Option("option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleValuesAndNoArgAndNoDescription_baSq6() {
        Option option = new Option("option", "longOption", false, null);
        option.addValue("value1");
        option.addValue("value2");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleValuesAndArgAndNoDescription_nSeg7() {
        Option option = new Option("option", true, null);
        option.addValue("value1");
        option.addValue("value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_optionalArg_zhyQ0() {
        Option option = new Option("test", "test", true, "test");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_noOptionalArg_jVoU3() {
        Option option = new Option("test", "test", false, "test");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_vyNX0() {
        Option option = new Option("-a", "--arg", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithoutArgName_kJmf1() {
        Option option = new Option("-a", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithNullArgName_SiIt2() {
        Option option = new Option("-a", null, true, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_eHgs1_1() {
        Option option = new Option("test", true, "description");
        String[] values = option.getValues();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_eHgs1_2() {
        Option option = new Option("test", true, "description");
        String[] values = option.getValues();
        assertEquals(1, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_eHgs1_3() {
        Option option = new Option("test", true, "description");
        String[] values = option.getValues();
        assertEquals("test", values[0]);
    }
}