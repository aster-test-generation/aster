/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Object_yJYa0() throws Exception {
        assertEquals(PatternOptionBuilder.OBJECT_VALUE, PatternOptionBuilder.getValueType('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_String_tczM1() throws Exception {
        assertEquals(PatternOptionBuilder.STRING_VALUE, PatternOptionBuilder.getValueType(':'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Number_mLqR2() throws Exception {
        assertEquals(PatternOptionBuilder.NUMBER_VALUE, PatternOptionBuilder.getValueType('%'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Class_waAU3() throws Exception {
        assertEquals(PatternOptionBuilder.CLASS_VALUE, PatternOptionBuilder.getValueType('+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Date_RNhW4() throws Exception {
        assertEquals(PatternOptionBuilder.DATE_VALUE, PatternOptionBuilder.getValueType('#'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_ExistingFile_JfDQ5() throws Exception {
        assertEquals(PatternOptionBuilder.EXISTING_FILE_VALUE, PatternOptionBuilder.getValueType('<'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_File_TNgM6() throws Exception {
        assertEquals(PatternOptionBuilder.FILE_VALUE, PatternOptionBuilder.getValueType('>'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Files_svDj7() throws Exception {
        assertEquals(PatternOptionBuilder.FILES_VALUE, PatternOptionBuilder.getValueType('*'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Url_CknO8() throws Exception {
        assertEquals(PatternOptionBuilder.URL_VALUE, PatternOptionBuilder.getValueType('/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Invalid_VXRc9() throws Exception {
        assertNull(PatternOptionBuilder.getValueType('?'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_Ifqh0_1() throws Exception {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_Ifqh0_2() throws Exception {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_Ifqh0_3() throws Exception {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern1_Ifqh0_4() throws Exception {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("c", options.getOption("c").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_bXpI1_1() throws Exception {
        String pattern = "a!b";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_bXpI1_2() throws Exception {
        String pattern = "a!b";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_bXpI1_3() throws Exception {
        String pattern = "a!b";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern2_bXpI1_4() throws Exception {
        String pattern = "a!b";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_1() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_2() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_3() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_4() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("c", options.getOption("c").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_5() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern3_jMea2_6() throws Exception {
        String pattern = "a!b!c";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("b").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_1() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_2() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_3() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_4() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("c", options.getOption("c").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_5() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("d", options.getOption("d").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_6() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_7() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("b").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern4_jqUo3_8() throws Exception {
        String pattern = "a!b!c!d";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("c").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_1() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(5, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_2() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_3() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_4() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("c", options.getOption("c").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_5() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("d", options.getOption("d").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_6() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("e", options.getOption("e").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_7() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_8() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("b").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_9() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("c").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern5_tBkA4_10() throws Exception {
        String pattern = "a!b!c!d!e";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("d").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_1() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(6, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_2() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("a", options.getOption("a").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_3() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("b", options.getOption("b").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_4() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("c", options.getOption("c").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_5() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("d", options.getOption("d").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_6() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("e", options.getOption("e").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_7() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals("f", options.getOption("f").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_8() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_9() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("b").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_10() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("c").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_11() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("d").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern6_rlXq5_12() throws Exception {
        String pattern = "a!b!c!d!e!f";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.getOption("e").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_char_bYIE0() throws Exception {
        char ch = 'a';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertEquals(Character.class, valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_int_SLBr1() throws Exception {
        char ch = '1';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertEquals(Integer.class, valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_string_rVvU5() throws Exception {
        char ch = 'a';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertEquals(String.class, valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_null_qxIE6() throws Exception {
        char ch = '\0';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertNull(valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_invalid_DspR7() throws Exception {
        char ch = '!';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertNull(valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_empty_otbD8() throws Exception {
        char ch = ' ';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertNull(valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_whitespace_oLns9() throws Exception {
        char ch = '\t';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
        assertNull(valueClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_At_DoHh0() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Colon_LRYG1() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode(':'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Percent_lrQW2() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('%'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Plus_RUMN3() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Hash_owDl4() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('#'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_LessThan_WgFN5() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('<'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_GreaterThan_cfDn6() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('>'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Asterisk_ucwv7() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('*'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_ForwardSlash_cDXK8() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_ExclamationMark_NkZj9() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('!'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_InvalidCharacter_boTT10() throws Exception {
        assertFalse(PatternOptionBuilder.isValueCode('a'));
    }
}