/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_PucD0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String optPrefix = formatter.getOptPrefix();
        assertEquals("-", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithCustomPrefix_PoBJ1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("--");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("--", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullPrefix_MsBS2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyPrefix_FMOi3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithInvalidPrefix_CNkj4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("invalid");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("invalid", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixes_rHjN5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("--", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithDifferentPrefixes_UKye6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        formatter.setOptPrefix("---");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("---", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithSamePrefixes_IPtL7() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("-");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("-", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullAndEmptyPrefixes_WsLP8() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        formatter.setOptPrefix("");
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyAndNullPrefixes_lZqX9() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("");
        formatter.setOptPrefix(null);
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullAndInvalidPrefixes_BKib10() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        formatter.setOptPrefix("invalid");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("invalid", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithInvalidAndNullPrefixes_ZTDc11() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("invalid");
        formatter.setOptPrefix(null);
        String optPrefix = formatter.getOptPrefix();
        assertEquals("invalid", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixesAndNull_Frrn12() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        formatter.setOptPrefix(null);
        String optPrefix = formatter.getOptPrefix();
        assertEquals("--", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_RISt0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(10);
        assertEquals(10, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithNegativeValue_MPcE1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithZeroValue_vXhz2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(0);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithLargeValue_cBlW3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_1_oojI0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a test string that is longer than the width of the text area.";
        String expected = "This is a test string that is longer than the width of the text area.\n";
        String actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text).toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_MzNp0() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 0;
        int expected = 10;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_hliG1() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 5;
        int expected = 10;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_BKhy2() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 10;
        int expected = 10;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_bJGw3() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 15;
        int expected = -1;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_XdKw4() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_mlUR5() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 25;
        int expected = -1;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_wVHO6() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_ADSi7() throws Exception {
        HelpFormatter hf = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 35;
        int expected = -1;
        int actual = hf.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_STGJ0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithNegativeValue_KPNQ1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(-10);
        assertEquals(0, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithZeroValue_Dkwf2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(0);
        assertEquals(0, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNullCmdLineSyntax_Nrlk0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = null;
        String header = "Header";
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        try {
            formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithEmptyCmdLineSyntax_oZtP1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "";
        String header = "Header";
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        try {
            formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithAutoUsageSetToFalse_bZuZ2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "Header";
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = false;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
        assertEquals("cmdLineSyntax", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNullHeader_jrLr3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmdLineSyntax";
        String header = null;
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
        assertEquals("cmdLineSyntax", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithEmptyHeader_eiLJ4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "";
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        String footer = "Footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
        assertEquals("cmdLineSyntax", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_ukFa0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(10);
        assertEquals("          ", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_eWlo0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        StringBuffer expected = new StringBuffer();
        expected.append("  -a, --alpha <arg>   This is a description of the option\n");
        expected.append("  -b, --beta <arg>    This is a description of the option\n");
        expected.append("  -c, --gamma <arg>   This is a description of the option\n");
        StringBuffer actual = formatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals(expected.toString(), actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_Unvz0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorWithNull_UVen1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(null);
        assertNull(formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorWithEmptyString_QZwg2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorWithMultipleCharacters_WZyX4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=:");
        assertEquals("=:", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorWithDifferentSeparator_uHfG5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(":");
        assertEquals(":", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLineWithNewLineWithDifferentLineSeparatorAndTabs_wkYM9() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\t\r\n");
        assertEquals("\t\r\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_default_muzA0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String syntaxPrefix = formatter.getSyntaxPrefix();
        assertEquals("", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void main(String[] args) {
        HelpFormatter formatter = new HelpFormatter();
        String syntaxPrefix = formatter.getSyntaxPrefix();
        System.out.println(syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptions_nullWriter_vtDy0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        int leftPad = 2;
        int descPad = 4;
        try {
            formatter.printOptions(null, 80, options, leftPad, descPad);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Writer cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_MlNt0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--");
        assertEquals("--", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithNull_dgpz1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix(null);
        assertEquals(null, formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithEmptyString_sxdk2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("");
        assertEquals("", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithNonWhitespace_XqFe4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-");
        assertEquals("-", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleCharacters_jkfu5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--long");
        assertEquals("--long", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithDifferentPrefix_bUNE6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--long");
        formatter.setLongOptPrefix("--short");
        assertEquals("--short", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithSamePrefix_kVPG7() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--long");
        formatter.setLongOptPrefix("--long");
        assertEquals("--long", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithDifferentPrefixAndNonWhitespace_TyiV10() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--long");
        formatter.setLongOptPrefix("-short");
        assertEquals("-short", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithSamePrefixAndNonWhitespace_UWLW11() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--long");
        formatter.setLongOptPrefix("-long");
        assertEquals("-long", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithDifferentPrefixAndDifferentCharacters_PYuI14() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_default_aTbY0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String argName = formatter.getArgName();
        assertEquals("", argName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_oxrx0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_null_aFFc0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_empty_csDx1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_alphanumeric_dcGv3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("abc123");
        assertEquals("abc123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_JdgA0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNull_DYaI1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix(null);
        assertNull(formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithEmptyString_ebJv2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("");
        assertEquals("", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleCalls_WicF5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix1");
        formatter.setSyntaxPrefix("prefix2");
        assertEquals("prefix2", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithSameValue_sfoK6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNullAndNonNull_TDOr8() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix(null);
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNonNullAndNull_caKH9() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        formatter.setSyntaxPrefix(null);
        assertNull(formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithEmptyStringAndNonEmptyString_yiUd10() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("");
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNonEmptyStringAndEmptyString_lwgl11() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        formatter.setSyntaxPrefix("");
        assertEquals("", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_usmN0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        Options options = new Options();
        String footer = "This is my program.";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals("myprogram\nMy Program\n\nThis is my program.", formatter.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_kDvG1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        Options options = new Options();
        String footer = "This is my program.";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals("myprogram\nMy Program\n\nThis is my program.", formatter.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_zfPG2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        Options options = new Options();
        String footer = "This is my program.";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals("myprogram\nMy Program\n\nThis is my program.", formatter.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_pIIv0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = "This is a test string that should be wrapped to 80 characters or less.";
        formatter.printWrapped(pw, width, text);
        assertEquals(text.length(), pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithIndent_royr1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        int indent = 4;
        String text = "This is a test string that should be wrapped to 80 characters or less with an indent of 4.";
        formatter.printWrapped(pw, width, indent, text);
        assertEquals(text.length() + indent, pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithNewline_qITs2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = "This is a test string that should be wrapped to 80 characters or less with a newline.";
        formatter.printWrapped(pw, width, text);
        assertEquals(text.length() + 1, pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithIndentAndNewline_XxWO3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        int indent = 4;
        String text = "This is a test string that should be wrapped to 80 characters or less with an indent of 4 and a newline.";
        formatter.printWrapped(pw, width, indent, text);
        assertEquals(text.length() + indent + 1, pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithEmptyText_NGms4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = "";
        formatter.printWrapped(pw, width, text);
        assertEquals(0, pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithNullText_uPpt5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = null;
        formatter.printWrapped(pw, width, text);
        assertEquals(0, pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithNegativeWidth_eZCr6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = -1;
        String text = "This is a test string that should be wrapped to 80 characters or less.";
        formatter.printWrapped(pw, width, text);
        assertEquals(text.length(), pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithZeroWidth_JqJS7() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 0;
        String text = "This is a test string that should be wrapped to 80 characters or less.";
        formatter.printWrapped(pw, width, text);
        assertEquals(text.length(), pw.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithLargeWidth_MXLe8() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 1000;
    }
}