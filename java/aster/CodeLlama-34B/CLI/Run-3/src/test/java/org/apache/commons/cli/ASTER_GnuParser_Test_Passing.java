/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_vUFQ0() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "--help"};
        String[] expected = new String[]{"--", "--help"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_utTp1() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-", "-h"};
        String[] expected = new String[]{"-", "-h"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_lwJm2() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        String[] expected = new String[]{"--help", "--version"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_yDTN3() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v"};
        String[] expected = new String[]{"-h", "-v"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_zFtg4() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "--help"};
        String[] expected = new String[]{"--help", "--version", "--help"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_cweh5() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v", "-h"};
        String[] expected = new String[]{"-h", "-v", "-h"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_XjlX6() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "--help", "--version"};
        String[] expected = new String[]{"--help", "--version", "--help", "--version"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_dIyg7() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v", "-h", "-v"};
        String[] expected = new String[]{"-h", "-v", "-h", "-v"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_IohB8() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "--help", "--version", "--help"};
        String[] expected = new String[]{"--help", "--version", "--help", "--version", "--help"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }
}