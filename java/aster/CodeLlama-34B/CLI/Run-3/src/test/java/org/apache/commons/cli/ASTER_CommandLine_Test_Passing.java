/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_empty_xEol0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_nullArray_VxNj7() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertNull(args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_wjIX0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_zDZR1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_Vxop2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndNullDefaultValue_ppsZ5() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_eqQQ0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_YEsH3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_vvHi4() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_WBMV0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_bxna1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_bxna1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_rbNn2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_rbNn2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_rbNn2_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptions_MEtJ3_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptions_MEtJ3_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_RYOa4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOption_gRkR5() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_PHSG7() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_emptyAndNullOptions_bGOd10() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_notPresent_xPmJ0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "default";
        String value = cmd.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_presentNoValue_jypV2() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("option", "description");
        cmd.addOption(option);
        String defaultValue = "default";
        String value = cmd.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_validOption_zvDG0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help";
        String expectedValue = "help";
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_invalidOption_tDNS1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--invalid";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_nullOption_RpfF2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = null;
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_emptyOption_zbCP3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_shortOption_JWwi5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "-h";
        String expectedValue = "help";
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithValue_qFFM6() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help=true";
        String expectedValue = "true";
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithoutValue_BAhE7() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithMultipleValues_ZLiU8() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help=true,false";
        String expectedValue = "true,false";
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithInvalidValue_iMaJ9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help=invalid";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithEmptyValue_lrrp10() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help=";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionWithNonBooleanValue_TSpI12() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--help=non-boolean";
        String expectedValue = null;
        String actualValue = commandLine.getOptionValue(option);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndDefaultValueWithDifferentCaseAndSpaces_Pqgb9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "  --HeLp  ";
        Supplier<String> defaultValue = () -> "default";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NullOption_lFKH0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NonNullOption_BWPF1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndNullDefaultValueAndNonEmptyOption_uxMI9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "--invalid";
        String defaultValue = null;
        String expected = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_OvQM0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt1");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_OvQM0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt1");
        assertEquals("value1", props.get("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_OvQM0_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt1");
        assertEquals("value2", props.get("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithInvalidOpt_Hnbq1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("invalidOpt");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEmptyOpt_uNnH3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotNull_qYQM1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionValues_teTz2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionValues_teTz2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.getProperty("option.value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionValues_teTz2_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.getProperty("option.value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject1_QTia0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option1");
        assertEquals(result, "value1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject2_KfaN1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option2");
        assertEquals(result, "value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject3_kJTV2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option3");
        assertEquals(result, "value3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject4_fzbg3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option4");
        assertEquals(result, "value4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject5_MkoI4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option5");
        assertEquals(result, "value5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject6_mcix5() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option6");
        assertEquals(result, "value6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject7_zrHu6() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option7");
        assertEquals(result, "value7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject8_LubU7() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option8");
        assertEquals(result, "value8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject9_lwvn8() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option9");
        assertEquals(result, "value9");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject10_asPM9() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("option10");
        assertEquals(result, "value10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_cMZx0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_notFound_NVht1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('b', "defaultValue");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_empty_OJFg3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_specialCharacters_bYuX5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "!@#$%^&*()_+");
        assertEquals("!@#$%^&*()_+", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_emptyOption_cEev8() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("", "defaultValue");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_specialCharactersOption_eDSg10() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("!@#$%^&*()_+", "defaultValue");
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_char_jSQt0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_char_jSQt0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_string_eCGT1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_string_eCGT1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_empty_UCow2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesNoValues_rQTf1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesOneValue_neeT2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesOneValue_neeT2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_TLhX3_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_TLhX3_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_TLhX3_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesMultipleValues_TLhX3_4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", false, "description");
        option.addValue("value1");
        option.addValue("value2");
        option.addValue("value3");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value3", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithValidOption_JKrz0() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOption_YfjB1() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption('z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_xzBY2() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionThatDoesNotExist_lFie4() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("--does-not-exist"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionThatExists_kCPC5() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("--help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionThatExistsButIsNotTheFirstOption_Mmus6() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("--version"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionExists_HzOS0() throws Exception {
        Option option = new Option("option", "description");
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionDoesNotExist_OeUc1() throws Exception {
        Option option = new Option("option", "description");
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithArgNameExists_iWYf8() throws Exception {
        Option option = new Option("option", "description", true, "argName");
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithArgNameDoesNotExist_bFbJ9() throws Exception {
        Option option = new Option("option", "description", true, "argName");
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_empty_MAJx0() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> args = commandLine.getArgList();
        assertTrue(args.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_singleArg_mybc1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        List<String> args = commandLine.getArgList();
        assertEquals(1, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_singleArg_mybc1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        List<String> args = commandLine.getArgList();
        assertEquals("arg1", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_LqSb2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        List<String> args = commandLine.getArgList();
        assertEquals(2, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_LqSb2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        List<String> args = commandLine.getArgList();
        assertEquals("arg1", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_LqSb2_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        List<String> args = commandLine.getArgList();
        assertEquals("arg2", args.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArg_LfMd3_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        List<String> args = commandLine.getArgList();
        assertEquals(1, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArg_LfMd3_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        List<String> args = commandLine.getArgList();
        assertNull(args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArg_SjNo4_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        List<String> args = commandLine.getArgList();
        assertEquals(1, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArg_SjNo4_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        List<String> args = commandLine.getArgList();
        assertEquals("", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArg_Jxdl6_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        List<String> args = commandLine.getArgList();
        assertEquals(1, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArg_Jxdl6_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        List<String> args = commandLine.getArgList();
        assertEquals("invalid", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_uxEG7_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> args = commandLine.getArgList();
        assertEquals(2, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_uxEG7_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> args = commandLine.getArgList();
        assertNull(args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_uxEG7_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> args = commandLine.getArgList();
        assertNull(args.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_DrbB8_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> args = commandLine.getArgList();
        assertEquals(2, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_DrbB8_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> args = commandLine.getArgList();
        assertEquals("", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_DrbB8_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> args = commandLine.getArgList();
        assertEquals("", args.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_iCwK10_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> args = commandLine.getArgList();
        assertEquals(2, args.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_iCwK10_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> args = commandLine.getArgList();
        assertEquals("invalid", args.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_iCwK10_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> args = commandLine.getArgList();
        assertEquals("invalid", args.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndDefaultValue_CVgE0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        Supplier<String> defaultValue = () -> "default value";
        String expected = "option value";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_singleOption_Vklr1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_singleOption_Vklr1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a");
        assertEquals("-a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptions_dOVN2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a -b -c");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptions_dOVN2_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a -b -c");
        assertEquals("-a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptions_dOVN2_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a -b -c");
        assertEquals("-b", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_multipleOptions_dOVN2_4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a -b -c");
        assertEquals("-c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithValue_vATE3_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithValue_vATE3_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value");
        assertEquals("-a=value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValues_zetb4_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2");
        assertEquals(2, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValues_zetb4_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2");
        assertEquals("-a=value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValues_zetb4_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2");
        assertEquals("-a=value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValuesAndSpaces_DbqS5_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2 -a=value3");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValuesAndSpaces_DbqS5_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2 -a=value3");
        assertEquals("-a=value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValuesAndSpaces_DbqS5_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2 -a=value3");
        assertEquals("-a=value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_optionWithMultipleValuesAndSpaces_DbqS5_4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a=value1 -a=value2 -a=value3");
        assertEquals("-a=value3", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_validOption_ytwt2() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_invalidOption_dCMv3() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithValue_sWxP4() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithoutValue_DXQX5() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValues_Vwkj6() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=value1,value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparator_rTyS7() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=value1,value2,value3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotes_vwrE8() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotesAndEscapedQuotes_TADc9() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\",\"value4,value5,value6\""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotesAndEscapedQuotesAndEscapedBackslash_IjDV10() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\",\"value4,value5,value6\",\"value7,value8,value9\""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotesAndEscapedQuotesAndEscapedBackslashAndEscapedNewline_fUpS11() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\",\"value4,value5,value6\",\"value7,value8,value9\"\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotesAndEscapedQuotesAndEscapedBackslashAndEscapedNewlineAndEscapedCarriageReturn_DRAx12() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\",\"value4,value5,value6\",\"value7,value8,value9\"\n\r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionWithMultipleValuesAndSeparatorAndQuotesAndEscapedQuotesAndEscapedBackslashAndEscapedNewlineAndEscapedCarriageReturnAndEscapedTab_fTMX13() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a=\"value1,value2,value3\",\"value4,value5,value6\",\"value7,value8,value9\"\n\r\t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_cYVB0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String value = commandLine.getOptionValue(option);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithArgs_waSI1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.setArgs(2);
        String[] values = commandLine.getOptionValues(option);
        assertEquals(2, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithArgs_waSI1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.setArgs(2);
        String[] values = commandLine.getOptionValues(option);
        assertEquals("value1", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithArgs_waSI1_3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.setArgs(2);
        String[] values = commandLine.getOptionValues(option);
        assertEquals("value2", values[1]);
    }
}