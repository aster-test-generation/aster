/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_NoArgs_TTDU0() throws Exception {
        Option option = new Option("-a", false, "description");
        int args = option.getArgs();
        assertEquals(0, args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_OneArg_juzB1() throws Exception {
        Option option = new Option("-a", true, "description");
        int args = option.getArgs();
        assertEquals(1, args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_TwoArgs_RvuS2() throws Exception {
        Option option = new Option("-a", true, "description");
        int args = option.getArgs();
        assertEquals(2, args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription1_TlAT0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription2_ldDK1() throws Exception {
        Option option = new Option("a", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription3_tyKg2() throws Exception {
        Option option = new Option("a", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName1_eIBc0() throws Exception {
        Option option = new Option("a", "argName", true, "description");
        option.setArgName("newArgName");
        assertEquals("newArgName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName2_WNRA1() throws Exception {
        Option option = new Option("a", true, "description");
        option.setArgName("newArgName");
        assertEquals("newArgName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName3_HvDF2() throws Exception {
        Option option = new Option("a", "description");
        option.setArgName("newArgName");
        assertEquals("newArgName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithLongOption_sFEs0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithoutLongOption_maQK1() throws Exception {
        Option option = new Option("a", true, "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithEmptyLongOption_dBeX2() throws Exception {
        Option option = new Option("a", "", true, "description");
        assertEquals("", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredWithoutLongOption_uuKf0() throws Exception {
        Option option = new Option("a", false, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredWithLongOption_cuIk1() throws Exception {
        Option option = new Option("a", "longOption", false, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredWithoutHasArg_grhj2() throws Exception {
        Option option = new Option("a", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withNoValues_DdhK0() throws Exception {
        Option option = new Option("-a", "--apple", false, "Apple option");
        assertNull(option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_yVZn0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObjectSameValues_zMYJ1() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObjectDifferentValues_LUVm2() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", false, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_jeVY3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_gVXZ0() throws Exception {
        Option option = new Option("-a", "--all", false, "Show all options");
        String expected = "[ Option -a --all :: Show all options :: boolean ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOptionAndDescription_zNbV1() throws Exception {
        Option option = new Option("-a", "--all", true, "Show all options");
        String expected = "[ Option -a --all :: Show all options :: boolean ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasArg_oWiq0() throws Exception {
        Option option = new Option("-a", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasArgs_aeTm1() throws Exception {
        Option option = new Option("-a", true, "description");
        option.hasArgs();
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasOptionalArg_BqLL2() throws Exception {
        Option option = new Option("-a", true, "description");
        option.hasOptionalArg();
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithNoArgs_ljln5() throws Exception {
        Option option = new Option("-a", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithTypeHandler_Ngrj0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Converter<?, ?> converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithoutTypeHandler_aGzZ1_1() throws Exception {
        Option option = new Option("option", "description");
        Converter<?, ?> converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithNullConverter_OwJl2() throws Exception {
        Option option = new Option("option", "description");
        option.setConverter(null);
        Converter<?, ?> converter = option.getConverter();
        assertNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithNullType_cEjT3() throws Exception {
        Option option = new Option("option", "description");
        option.setType(null);
        Converter<?, ?> converter = option.getConverter();
        assertNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_notDeprecated_nSwK0() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        String actual = option.toDeprecatedString();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_deprecated_IbVU1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toDeprecatedString();
        assertEquals("Option 'option' 'longOption': deprecated", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator1_alSq0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        char valueSeparator = option.getValueSeparator();
        assertEquals(valueSeparator, '=');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_gaaJ1() throws Exception {
        Option option = new Option("a", true, "description");
        char valueSeparator = option.getValueSeparator();
        assertEquals(valueSeparator, ' ');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_OrYC2() throws Exception {
        Option option = new Option("a", "description");
        char valueSeparator = option.getValueSeparator();
        assertEquals(valueSeparator, ' ');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_Option_String_IEZV0() throws Exception {
        Option option = new Option("option", "description");
        option.setDescription("new description");
        assertEquals("new description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_Option_String_HasArg_NAmY2() throws Exception {
        Option option = new Option("option", true, "description");
        option.setDescription("new description");
        assertEquals("new description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndLongOption_egaG0_3() throws CloneNotSupportedException {
        Option option = new Option("-a", "--all", true, "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getDescription(), clone.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndLongOption_egaG0_4() throws CloneNotSupportedException {
        Option option = new Option("-a", "--all", true, "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getValues(), clone.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndHasArg_Wxpr1_3() throws CloneNotSupportedException {
        Option option = new Option("-a", true, "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getDescription(), clone.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndHasArg_Wxpr1_4() throws CloneNotSupportedException {
        Option option = new Option("-a", true, "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getValues(), clone.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndDescription_JfeX2_2() throws CloneNotSupportedException {
        Option option = new Option("-a", "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getDescription(), clone.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithOptionAndDescription_JfeX2_3() throws CloneNotSupportedException {
        Option option = new Option("-a", "description");
        Option clone = (Option) option.clone();
        assertEquals(option.getValues(), clone.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConverterWithNullConverter_pIit1() throws Exception {
        Option option = new Option("option", "description");
        option.setConverter(null);
        assertNull(option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated1_ZeNZ0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertNotNull(deprecated);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated1_ZeNZ0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated1_ZeNZ0_3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("longOption", deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_NDNE1_1() throws Exception {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertNotNull(deprecated);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_NDNE1_2() throws Exception {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_NDNE1_3() throws Exception {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertNull(deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_DkAQ2_1() throws Exception {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertNotNull(deprecated);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_DkAQ2_2() throws Exception {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertEquals("description", deprecated.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_DkAQ2_3() throws Exception {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecated = option.getDeprecated();
        assertNull(deprecated.getSince());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_noArgsAllowed_FaAb0() throws Exception {
        Option option = new Option("-a", "--arg", false, "description");
        try {
            option.processValue("value");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_longOptionAndOption_zDSu0() throws Exception {
        Option option = new Option("-a", "--apple", true, "Apple");
        int expected = Objects.hash("--apple", "-a");
        int actual = option.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_optionOnly_qgEE1() throws Exception {
        Option option = new Option("-a", true, "Apple");
        int expected = Objects.hash("-a");
        int actual = option.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithShortOption_GLmn0() throws Exception {
        Option option = new Option("a", "This is a short option");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithLongOption_rRYT1() throws Exception {
        Option option = new Option("--long-option", "This is a long option");
        assertEquals("--long-option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithNoOption_XcUR2() throws Exception {
        Option option = new Option(null, null, false, "This is a no option");
        assertEquals(null, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_true_TEmh0() throws Exception {
        Option option = new Option("-a", "--apple", true, "Apple option");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClassType_zIqK0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithInvalidClassType_xkmj1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Integer.class);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithNullClassType_xdrz2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(null);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionAndLongOption_jDYu0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionAndHasArg_WrlN1() throws Exception {
        Option option = new Option("a", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOption_dtUa2() throws Exception {
        Option option = new Option("a", "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_NoValues_YAER0() throws Exception {
        Option option = new Option("a", "description");
        String[] values = option.getValues();
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithOptionAndLongOption_Hdxf0() throws Exception {
        Option option = new Option("-a", "--all", true, "description");
        assertEquals("option", option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithOptionAndHasArg_Zjfn1() throws Exception {
        Option option = new Option("-a", true, "description");
        assertEquals("option", option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeWithOption_dyGy2() throws Exception {
        Option option = new Option("-a", "description");
        assertEquals("option", option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithOption_GOSW0() throws Exception {
        Option option = new Option("-a", "--apple", true, "Apple option");
        assertEquals("-a", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithNullOptionAndLongOption_vBVS2() throws Exception {
        Option option = new Option(null, "--apple", true, "Apple option");
        assertEquals("--apple", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withLongOption_JUyj0() throws Exception {
        Option option = new Option("-a", "--all", true, "Display all options");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withoutLongOption_wrFs1() throws Exception {
        Option option = new Option("-a", true, "Display all options");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithNoArg_XLjK0() throws Exception {
        Option option = new Option("a", false, "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOneArg_UjUA1() throws Exception {
        Option option = new Option("a", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValues_EEDk1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList1_oaVs0_1() throws Exception {
        Option option = new Option("a", "aaa", true, "description");
        List<String> values = option.getValuesList();
        assertEquals(1, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList1_oaVs0_2() throws Exception {
        Option option = new Option("a", "aaa", true, "description");
        List<String> values = option.getValuesList();
        assertEquals("aaa", values.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_Anag1() throws Exception {
        Option option = new Option("b", "bbb", false, "description");
        List<String> values = option.getValuesList();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_NOrC2_1() throws Exception {
        Option option = new Option("c", "ccc", true, "description");
        List<String> values = option.getValuesList();
        assertEquals(1, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_NOrC2_2() throws Exception {
        Option option = new Option("c", "ccc", true, "description");
        List<String> values = option.getValuesList();
        assertEquals("ccc", values.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithValidLongOpt_hmMQ0() throws Exception {
        Option option = new Option("a", "description");
        option.setLongOpt("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithNullLongOpt_KQgX1() throws Exception {
        Option option = new Option("a", "description");
        option.setLongOpt(null);
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithEmptyLongOpt_ydyU2() throws Exception {
        Option option = new Option("a", "description");
        option.setLongOpt("");
        assertEquals("", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithShortOptionAndDescription_jgWz0() throws Exception {
        Option option = new Option("a", "description");
        assertEquals("a", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgNameWithLongOptionAndDescription_iPpg1() throws Exception {
        Option option = new Option("--long-option", "description");
        assertEquals("--long-option", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_optionalArg_false_VaEH0() throws Exception {
        Option option = new Option("-a", false, "description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithOptionalArg_Chwj0() throws Exception {
        Option option = new Option("-a", "--arg", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithoutOptionalArg_fUvo1() throws Exception {
        Option option = new Option("-a", "--arg", false, "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArgName_lgin0() throws Exception {
        Option option = new Option("-a", "--arg", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withoutArgName_Bvbf1() throws Exception {
        Option option = new Option("-a", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonEmptyLongOption_QuXh9() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "defaultValue";
        String value = option.getValue(defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredWithLongOption_aRkv0() throws Exception {
        Option option = new Option("-a", "--apple", true, "Apple");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredWithShortOption_PkMz1() throws Exception {
        Option option = new Option("-b", true, "Banana");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredWithoutOption_QDIZ2() throws Exception {
        Option option = new Option("-c", "Candy");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidType_rmyE0() throws Exception {
        Option option = new Option("option", "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithInvalidType_Bsul1() throws Exception {
        Option option = new Option("option", "description");
        option.setType(null);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue1_rxEp0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue2_hyol1() throws Exception {
        Option option = new Option("option", true, "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue3_StgD2() throws Exception {
        Option option = new Option("option", "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }
}