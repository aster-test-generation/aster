/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_AlreadySelectedException_Test_Passing {
    private Option option;
    private OptionGroup group;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_zlCW0() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("a", "alpha", false, "This is option a");
        group.addOption(option);
        AlreadySelectedException ex = new AlreadySelectedException(group, option);
        assertEquals(option, ex.getOption());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithArg_hbXP1() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("a", "alpha", true, "This is option a");
        group.addOption(option);
        AlreadySelectedException ex = new AlreadySelectedException(group, option);
        assertEquals(option, ex.getOption());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup1_kOel0() throws Exception {
        AlreadySelectedException exception = new AlreadySelectedException("message");
        OptionGroup group = exception.getOptionGroup();
        assertNotNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup2_BpHR1() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        group.addOption(option);
        AlreadySelectedException exception = new AlreadySelectedException(group, option);
        OptionGroup actualGroup = exception.getOptionGroup();
        assertEquals(group, actualGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup3_wdiN2() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("option", true, "description");
        group.addOption(option);
        AlreadySelectedException exception = new AlreadySelectedException(group, option);
        OptionGroup actualGroup = exception.getOptionGroup();
        assertEquals(group, actualGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup4_LNxZ3() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("option", "description");
        group.addOption(option);
        AlreadySelectedException exception = new AlreadySelectedException(group, option);
        OptionGroup actualGroup = exception.getOptionGroup();
        assertEquals(group, actualGroup);
    }
}