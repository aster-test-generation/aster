/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_null_Adai0() throws Exception {
        assertNull(OptionValidator.validate(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_empty_ZQtY1() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOption_gMkG2() throws Exception {
        assertEquals("option", OptionValidator.validate("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOption_wMPn3() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOptionWithAdditionalChars_GZpF4() throws Exception {
        assertEquals("option_with_additional_chars", OptionValidator.validate("option_with_additional_chars"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOptionWithAdditionalChars_ADnY5() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option_with_additional_chars"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOptionWithAdditionalCharsAndSpaces_GkkR6() throws Exception {
        assertEquals("option_with_additional_chars_and_spaces", OptionValidator.validate("option_with_additional_chars_and_spaces"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOptionWithAdditionalCharsAndSpaces_FNUn7() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option_with_additional_chars_and_spaces"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOptionWithAdditionalCharsAndSpacesAndSpecialChars_KFvF8() throws Exception {
        assertEquals("option_with_additional_chars_and_spaces_and_special_chars", OptionValidator.validate("option_with_additional_chars_and_spaces_and_special_chars"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOptionWithAdditionalCharsAndSpacesAndSpecialChars_Rmtk9() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option_with_additional_chars_and_spaces_and_special_chars"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOptionWithAdditionalCharsAndSpacesAndSpecialCharsAndNumbers_oCtY10() throws Exception {
        assertEquals("option_with_additional_chars_and_spaces_and_special_chars_and_numbers", OptionValidator.validate("option_with_additional_chars_and_spaces_and_special_chars_and_numbers"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOptionWithAdditionalCharsAndSpacesAndSpecialCharsAndNumbers_pAsN11() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option_with_additional_chars_and_spaces_and_special_chars_and_numbers"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validOptionWithAdditionalCharsAndSpacesAndSpecialCharsAndNumbersAndUnderscores_aOnB12() throws Exception {
        assertEquals("option_with_additional_chars_and_spaces_and_special_chars_and_numbers_and_underscores", OptionValidator.validate("option_with_additional_chars_and_spaces_and_special_chars_and_numbers_and_underscores"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidOptionWithAdditionalCharsAndSpacesAndSpecialCharsAndNumbersAndUnderscores_RiiT13() throws Exception {
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate("invalid_option_with_additional_chars_and_spaces_and_special_chars_and_numbers_and_underscores"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_null_Ipdl0() throws Exception {
        String option = null;
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_empty_wTDV1() throws Exception {
        String option = "";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_valid_zSVF2() throws Exception {
        String option = "valid";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalid_bATr3() throws Exception {
        String option = "invalid";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name 'invalid'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalidChar_QWII4() throws Exception {
        String option = "invalid_char";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar_qMmO5() throws Exception {
        String option = "valid_char";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar2_drts6() throws Exception {
        String option = "valid_char2";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar3_IcrG7() throws Exception {
        String option = "valid_char3";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar4_zuaH8() throws Exception {
        String option = "valid_char4";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar5_Tclh9() throws Exception {
        String option = "valid_char5";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar6_MSQO10() throws Exception {
        String option = "valid_char6";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar7_OyRk11() throws Exception {
        String option = "valid_char7";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar8_IWHA12() throws Exception {
        String option = "valid_char8";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar9_kHsI13() throws Exception {
        String option = "valid_char9";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar10_Vstb14() throws Exception {
        String option = "valid_char10";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar11_DHni15() throws Exception {
        String option = "valid_char11";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_validChar12_KbUV16() throws Exception {
        String option = "valid_char12";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_null_PSWa0() throws Exception {
        String option = null;
        assertNull(OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_empty_OttV1() throws Exception {
        String option = "";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_valid_MPHy2() throws Exception {
        String option = "valid";
        assertEquals(option, OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_invalid_kCvi3() throws Exception {
        String option = "invalid";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_specialChar_VeGQ4() throws Exception {
        String option = "special_char";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_longOption_YmWe5() throws Exception {
        String option = "long_option";
        assertEquals(option, OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_longOptionWithSpecialChar_SrPI6() throws Exception {
        String option = "long_option_with_special_char";
        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }
}