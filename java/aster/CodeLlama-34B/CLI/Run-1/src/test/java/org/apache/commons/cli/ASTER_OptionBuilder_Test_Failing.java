/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgName_hasOptionalArgs_numArgs_hYFJ6() {
        OptionBuilder.withArgName("argName");
        assertEquals(1, OptionBuilder.hasOptionalArgs(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOpt_PzYr0_fid1() {
        Option option = OptionBuilder.create('a');
        assertEquals('a', option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_vxRj1_fid1() {
        Option option = OptionBuilder.create("longOpt");
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_7_fid1() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_8() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_10() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(null, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithType_hasArgs_YAXK5_Pggc0() {
        OptionBuilder builder = OptionBuilder.hasArgs();
        builder.withType(String.class);
        Option option = builder.create();
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_7() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_8() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(opt, option.getOpt());
        assertEquals(null, option.getLongOpt());
        assertEquals(null, option.getDescription());
        assertEquals(false, option.hasArg());
        assertEquals(false, option.hasOptionalArg());
        assertEquals(Option.UNINITIALIZED, option.getArgs());
        assertEquals(null, option.getType());
        assertEquals(null, option.getConverter());
        assertEquals(0, option.getValueSeparator());
        assertEquals(null, option.getArgName());
    }
}