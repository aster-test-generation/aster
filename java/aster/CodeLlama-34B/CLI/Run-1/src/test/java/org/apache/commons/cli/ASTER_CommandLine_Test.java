/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_kKvl0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "t", false, "Test option");
        commandLine.addOption(option);
        String value = commandLine.getOptionValue("test");
        Assertions.assertEquals("t", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_Jkpm0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(option, () -> defaultValue);
        Assertions.assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_srfT0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
        assertEquals("value1", props.get("opt1"));
        assertEquals("value2", props.get("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithInvalidOpt_eqLH1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("invalid");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEmptyOpt_mtVn3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_HxYf0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNonNullOption_MnXP1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("converted", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_YMKW0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_ZFPV2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_mFMm3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_eQSk4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotNull_eSlj1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(1, props.size());
        assertEquals("description", props.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionWithValues_UcRs2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
        assertEquals("value1", props.get("option"));
        assertEquals("value2", props.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndDefaultValue_VNzQ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "defaultValue";
        String expected = "value";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndNoDefaultValue_MOVp1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = null;
        String expected = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_lkQJ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_dgic1() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_JeTg2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_RZRq5() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNonNullDefaultValue_EFbl6() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDefaultValue_hvQb0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_zXDX1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyDefaultValue_Mvbu2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_twhZ4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyOption_dPDb5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_Rnnh7() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndEmptyDefaultValue_mHNy8() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNonEmptyDefaultValue_BqhT9() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithValidOption_TmyN0() {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOption_TLPX1() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption('z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_VmnJ3() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ZDzI5() {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a -b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_QcjN6() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a -z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_LcFI7() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a null"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyOption_fgXR8() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_LNkI0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a");
        assertEquals(1, optionValues.length);
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_MCgT1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertEquals(1, optionValues.length);
        assertEquals("long-opt", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_qIZj2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertEquals(1, optionValues.length);
        assertEquals("d", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_qtvE3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-invalid");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOption_dEEw1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOption_ZFva2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndValues_wDxd3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
        assertEquals(1, optionValues.length);
        assertEquals("value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndMultipleValues_HcDp4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
        assertEquals(2, optionValues.length);
        assertEquals("value1", optionValues[0]);
        assertEquals("value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_MDzX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("aaa"));
        assertFalse(commandLine.hasOption("b"));
        assertFalse(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOption_TDyv4() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("invalid"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionNull_rayF0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_XKaE0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyDefaultValue_BlLq2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyOption_OIyN5() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonEmptyOption_VGFa6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("a", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_InvalidOption_ReturnsDefaultValue_Ddxq1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        String defaultValue = "default";
        assertEquals(defaultValue, commandLine.getParsedOptionValue(opt, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_validOption_EtJr0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("--option");
        assertNotNull(optionObject);
        assertEquals("--option", optionObject.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_invalidOption_GOBc1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("--invalid-option");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_nullOption_tSTj2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(null);
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_emptyOption_YCgC3() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_empty_QtRf1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_valid_srxH2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertNotNull(optionValues);
        assertEquals(1, optionValues.length);
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_invalid_WorT3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("invalid");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertNotNull(optionValues);
        assertEquals(3, optionValues.length);
        assertEquals("a", optionValues[0]);
        assertEquals("b", optionValues[1]);
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertNotNull(optionValues);
        assertEquals(3, optionValues.length);
        assertEquals("a", optionValues[0]);
        assertEquals("a", optionValues[1]);
        assertEquals("a", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertNotNull(optionValues);
        assertEquals(3, optionValues.length);
        assertEquals("a", optionValues[0]);
        assertEquals("b", optionValues[1]);
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertNotNull(optionValues);
        assertEquals(3, optionValues.length);
        assertEquals("a", optionValues[0]);
        assertEquals("b", optionValues[1]);
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertNotNull(optionValues);
        assertEquals(4, optionValues.length);
        assertEquals("a", optionValues[0]);
        assertEquals("b", optionValues[1]);
        assertEquals("c", optionValues[2]);
        assertEquals("d", optionValues[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithValidOption_LzkV0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-a");
        assertNotNull(optionObject);
        assertEquals("-a", optionObject.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithInvalidOption_rrZM1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-z");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndDefaultValue_zAcm0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndNullDefaultValue_MFtQ1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndDefaultValue_ZxfT2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndNullDefaultValue_mArv3() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndEmptyDefaultValue_UGpG4() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndEmptyDefaultValue_CCCP6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndSupplierThatThrowsException_fLds8() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> {
            throw new RuntimeException("Supplier throws exception");
        });
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndSupplierThatThrowsException_toQX9() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> {
            throw new RuntimeException("Supplier throws exception");
        });
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_empty_WdPy0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_Evms0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_dCbS1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_nUDz2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
        assertEquals(option1, options[0]);
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptions_OYLs3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_YXdg4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithEmptyOptions_lnso1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithNullOptions_Bmkk5() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_empty_dDdy0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_singleArg_dEcy1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_tSSK2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        List<String> argList = commandLine.getArgList();
        assertEquals(3, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg2", argList.get(1));
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArg_WXNE3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
        assertNull(argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArg_ArFS4() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
        assertEquals("", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArg_xzzU6() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
        assertEquals("invalid", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_bbTu7() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
        assertNull(argList.get(0));
        assertNull(argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_niRQ8() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
        assertEquals("", argList.get(0));
        assertEquals("", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_XObU10() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
        assertEquals("invalid", argList.get(0));
        assertEquals("invalid", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(7, argList.size());
        assertEquals("arg1", argList.get(0));
        assertEquals("arg2", argList.get(1));
        assertEquals("arg3", argList.get(2));
        assertNull(argList.get(3));
        assertEquals("", argList.get(4));
        assertEquals(" ", argList.get(5));
        assertEquals("invalid", argList.get(6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_vjQS0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_RhUg1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        option.setLongOpt("test-long");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithArg_ozlX2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionalArg_lYiJ3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        option.setOptionalArg(true);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithRequiredArg_bITS4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setRequired(true);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithValueSeparator_xlWJ5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setValueSeparator(':');
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithType_NhxC11() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setType(String.class);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDescription_vsFx13() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setDescription("This is a test description");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithArgs_ZgWW14() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setArgs(2);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOpt_aYdW17() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setLongOpt("test-long");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_APeD0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("test");
        assertEquals(1, optionValues.length);
        assertEquals("test", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_rUyj2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("test1");
        assertEquals(1, optionValues.length);
        assertEquals("test1", optionValues[0]);
        optionValues = commandLine.getOptionValues("test2");
        assertEquals(1, optionValues.length);
        assertEquals("test2", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_tAeX3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("invalid");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOption_KOZj5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithTabOption_zCGb7() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\t");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithNewlineOption_hwjR8() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\n");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithCarriageReturnOption_QZVI9() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\r");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithFormFeedOption_dNmF10() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\f");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithVerticalTabOption_ZlFD11() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\u000B");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionExists_PRgm0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionDoesNotExist_OdWh1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }
}