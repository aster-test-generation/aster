/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_invalidOption_olvp3() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("invalidOption", "value");
        try {
            parser.processProperties(properties);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_optionWithoutValue_bOnx4() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Option 'option' requires a value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_optionWithInvalidValue_agSk5() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid value 'invalidValue' for option 'option'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_optionWithMultipleValuesAndInvalidValue_ZnIO8() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "value1,invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid value 'invalidValue' for option 'option'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_optionWithMultipleValuesAndNoValue_sLmj10() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("option", "value1,");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Option 'option' requires a value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectNumberOfOptions_MYVw1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(10, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_2() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_3() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_4() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_5() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_6() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_7() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_8() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_9() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2_10() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("value1", options.getOption("-a").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_2() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(true, options.getOption("-b").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_3() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(1, options.getOption("-c").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_4() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(1.0, options.getOption("-d").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_5() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("value2", options.getOption("-e").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_6() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(false, options.getOption("-f").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_7() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(2, options.getOption("-g").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_8() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(2.0, options.getOption("-h").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_9() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("value3", options.getOption("-i").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4_10() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(true, options.getOption("-j").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option A", options.getOption("-a").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_2() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option B", options.getOption("-b").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_3() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option C", options.getOption("-c").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_4() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option D", options.getOption("-d").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_5() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option E", options.getOption("-e").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_6() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option F", options.getOption("-f").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_7() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option G", options.getOption("-g").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_8() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option H", options.getOption("-h").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_9() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option I", options.getOption("-i").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5_10() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option J", options.getOption("-j").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_invalidOption_hAlI1() throws ParseException {
        GnuParser parser = new GnuParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionFalseAndNonOptionArguments_bvJf5() throws ParseException {
        GnuParser parser = new GnuParser();
        parser.parse(new Options(), new String[]{"-a", "--b", "c"}, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value2", cmd.getOptionValues("b")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_empty_vtZJ0_fid1() throws MissingOptionException {
        GnuParser parser = new GnuParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_LaEA5_fid1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b", "--", "arg"};
        String[] expected = new String[]{"-a", "-b", "--"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOptionWithArgument_zBci6_fid1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--", "arg3"};
        String[] expected = new String[]{"-a", "arg1", "-b", "arg2", "--"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsNonNull_hryY0_fid1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6_3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_wkVY0() {
        GnuParser parser = new GnuParser();
        List<String> requiredOptions = parser.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_wJRD3_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_wJRD3_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_npPL4_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_npPL4_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_Cnlr5_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_Cnlr5_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndEmptyProperties_sYxn6_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndEmptyProperties_sYxn6_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndEmptyArguments_IaHK7_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, new String[0], properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndEmptyArguments_IaHK7_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, new String[0], properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndInvalidProperties_KikR8_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("gamma", "value1");
        properties.setProperty("delta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndInvalidProperties_KikR8_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("gamma", "value1");
        properties.setProperty("delta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndInvalidProperties_KikR8_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("gamma", "value1");
        properties.setProperty("delta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    public void testParse_YQQf0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    public void testParse_YQQf0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    public void testParse_YQQf0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getOptionValue("b"));
    }

    @Test
    public void testParse_YQQf0_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg3", cmd.getOptionValue("long"));
    }

    @Test
    public void testParse_YQQf0_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionProperties("long").getProperty("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithNullOptions_vEvF5_RPIX0_1() {
        GnuParser parser = new GnuParser();
        parser.setOptions(null);
        assertNull(parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithNullOptions_vEvF5_RPIX0_2() {
        GnuParser parser = new GnuParser();
        parser.setOptions(null);
        assertNull(parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptions_Efoa7_zBEr0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOption(new Option("a", "alpha", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithMultipleOptions_oQGI3_NQFG0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOption(new Option("b", "beta", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionsAndOptionGroups_ZhdS9_cqsn0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionGroupsAndOptions_AfdJ10_dnwm0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionGroupsAndOptionsAndOptionGroups_LdtC12_btzu0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionsAndOptionGroupsAndOptions_PWjN11_cgGG0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options.getOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_ymlN2() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("-a"));
        assertTrue(options.getOptions().contains("-b"));
        assertTrue(options.getOptions().contains("-c"));
        assertTrue(options.getOptions().contains("-d"));
        assertTrue(options.getOptions().contains("-e"));
        assertTrue(options.getOptions().contains("-f"));
        assertTrue(options.getOptions().contains("-g"));
        assertTrue(options.getOptions().contains("-h"));
        assertTrue(options.getOptions().contains("-i"));
        assertTrue(options.getOptions().contains("-j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionValues_BhQA4() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("value1", options.getOption("-a").getValue());
        assertEquals(true, options.getOption("-b").getValue());
        assertEquals(1, options.getOption("-c").getValue());
        assertEquals(1.0, options.getOption("-d").getValue());
        assertEquals("value2", options.getOption("-e").getValue());
        assertEquals(false, options.getOption("-f").getValue());
        assertEquals(2, options.getOption("-g").getValue());
        assertEquals(2.0, options.getOption("-h").getValue());
        assertEquals("value3", options.getOption("-i").getValue());
        assertEquals(true, options.getOption("-j").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_DPtE5() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals("Option A", options.getOption("-a").getDescription());
        assertEquals("Option B", options.getOption("-b").getDescription());
        assertEquals("Option C", options.getOption("-c").getDescription());
        assertEquals("Option D", options.getOption("-d").getDescription());
        assertEquals("Option E", options.getOption("-e").getDescription());
        assertEquals("Option F", options.getOption("-f").getDescription());
        assertEquals("Option G", options.getOption("-g").getDescription());
        assertEquals("Option H", options.getOption("-h").getDescription());
        assertEquals("Option I", options.getOption("-i").getDescription());
        assertEquals("Option J", options.getOption("-j").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
        assertEquals("value1", cmd.getOptionValues("b")[0]);
        assertEquals("value2", cmd.getOptionValues("b")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
        assertEquals("value1", cmd.getOptionValues("b")[0]);
        assertEquals("value2", cmd.getOptionValues("b")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_wJRD3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_npPL4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_Cnlr5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndEmptyProperties_sYxn6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndEmptyArguments_IaHK7() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, new String[0], properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndInvalidProperties_KikR8() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("gamma", "value1");
        properties.setProperty("delta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }
}