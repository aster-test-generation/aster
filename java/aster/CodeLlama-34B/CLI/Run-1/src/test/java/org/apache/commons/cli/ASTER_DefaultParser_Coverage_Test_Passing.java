/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    private CommandLine commandLine;
    private Util util;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_MqVS0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_MqVS0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_MqVS0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleParseDoubleAndReturnTrue_gZjU1() throws ParseException {
        Options options = new Options();
        options.addOption("d", "double", true, "double option");
        String[] arguments = new String[]{"-d", "1.2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleParseDoubleAndReturnFalse_kvxF2() throws ParseException {
        Options options = new Options();
        options.addOption("d", "double", true, "double option");
        String[] arguments = new String[]{"-d", "1.2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertFalse(cmd.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleParseDoubleAndReturnNull_AZeP3() throws ParseException {
        Options options = new Options();
        options.addOption("d", "double", true, "double option");
        String[] arguments = new String[]{"-d", "1.2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_xXiL0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_xXiL0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_oDie1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_oDie1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_oDie1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_QSCG2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_QSCG2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_QSCG2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_QSCG2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_AKQz3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_AKQz3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_AKQz3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_HEfF0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_HEfF0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_HEfF0_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_qylR2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_roAT3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", true, "an option with a value");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_eMVF4() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", true, "an option with a value");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_iCpC5_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "a short option");
        String[] arguments = new String[]{"-s", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_qpYH0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_qpYH0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_bvbm1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_bvbm1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_vutP2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_vutP2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_NlJT3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_NlJT3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRtJ5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg", "--", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_bnbR0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_bnbR0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_IBbY4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_IBbY4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_EwpF0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_EwpF0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_dIQr3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short", false, "description");
        options.addOption("l", "long", false, "description");
        String[] arguments = new String[]{"-s", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_dIQr3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short", false, "description");
        options.addOption("l", "long", false, "description");
        String[] arguments = new String[]{"-s", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_lyQf4_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_lyQf4_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_nfKZ5_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "property", true, "description");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("property", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_nfKZ5_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "property", true, "description");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("property", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_AfsR0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_AfsR0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_AfsR0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_NPwZ2() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithArgument_RsdO3() throws ParseException {
        Options options = new Options();
        options.addOption("o", true, "description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithNegativeNumberArgument_FsuV4() throws ParseException {
        Options options = new Options();
        options.addOption("o", true, "description");
        String[] arguments = new String[]{"-o", "-123"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-123", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithProperties_HKGV5() throws ParseException {
        Options options = new Options();
        options.addOption("o", true, "description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        properties.setProperty("o", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_aUBD2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_YAKc3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ORfX5_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ORfX5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ORfX5_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_VWRE0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_VWRE0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_gdCU1_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_EqYK2_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ejEu3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ejEu3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_bfgd4_1() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("prop", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_bfgd4_2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("prop", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_YDmE5_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_YDmE5_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_YDmE5_3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_LbbZ2_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_LbbZ2_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_sZsv3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_uICq4() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "description");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("prop", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_YqxM5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_YqxM5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_YqxM5_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ENaD3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ENaD3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_JcJJ4_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        properties.setProperty("s", "prop");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_CXft3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_CXft3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("argValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rBaV4_1() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "propValue"};
        Properties properties = new Properties();
        properties.setProperty("prop", "propValue");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rBaV4_2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "propValue"};
        Properties properties = new Properties();
        properties.setProperty("prop", "propValue");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("propValue", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_QYea5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_QYea5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("argValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_QYea5_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_QYea5_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("nonOption", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_rDjy0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_rDjy0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_rDjy0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_XVAs1_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_XVAs1_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_IEZm2_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_IEZm2_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_IEZm2_3() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_IEZm2_4() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_RpWw3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"-s", "-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_RpWw3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"-s", "-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_RpWw3_3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"-s", "-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_RpWw3_4() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"-s", "-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_currentOptionRequiresArgAndIsJavaPropertyAndHasValueAndCurrentOptionIsNullAndTokenIsEmptyAndIsJavaPropertyIsFalseAndTokenIsNotEmptyAndTokenIsNotJavaProperty_hqTX9() throws ParseException {
        Option option = new Option("a", "arg");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_yHYd0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_yHYd0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseCurrentOptionAcceptsArg_nSTp1_1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseCurrentOptionAcceptsArg_nSTp1_2() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_tFgc5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_tFgc5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("unknown", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_wofY0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_wofY0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_wofY0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_wofY0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ffeT1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ffeT1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ffeT1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ffeT1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_partialMatchingOptions_GUvD7() throws ParseException {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_XFar3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_Epna0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cVrN0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cVrN0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_awgR1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "-1", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "-1");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_awgR1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "-1", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "-1");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_MHhT2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_MHhT2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_MHhT2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("non-option", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_hgKn6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version", "-h", "-v"};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DBHw0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DBHw0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DBHw0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_DkGG1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_DkGG1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_DkGG1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lKDT2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lKDT2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lKDT2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullArguments_fUei0() throws ParseException {
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_KjWd3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_KjWd3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_oEit0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_oEit0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_oEit0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_oEit0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_UrbZ1_1() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", "aaa", false, "aaa option");
        options.addOption("bbb", "bbb", false, "bbb option");
        options.addOption("ccc", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_UrbZ1_2() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", "aaa", false, "aaa option");
        options.addOption("bbb", "bbb", false, "bbb option");
        options.addOption("ccc", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_UrbZ1_3() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", "aaa", false, "aaa option");
        options.addOption("bbb", "bbb", false, "bbb option");
        options.addOption("ccc", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_UrbZ1_4() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", "aaa", false, "aaa option");
        options.addOption("bbb", "bbb", false, "bbb option");
        options.addOption("ccc", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wdbb0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wdbb0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_bZWU2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "--", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_bZWU2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "--", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertNull(cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_KmCm5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GXOn0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GXOn0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GXOn0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GXOn0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_ylWx3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "--bbb", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_ylWx3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "--bbb", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_ylWx3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "--bbb", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_ylWx3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "--bbb", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_luHi4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNullArguments_mQCN0() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, null, null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_durq1() throws ParseException {
        Options options = new Options();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[0], null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_XDOC2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_XDOC2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Mtyc3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Mtyc3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Mtyc3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_BrZJ4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_BrZJ4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_BrZJ4_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_Lnvy5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_Lnvy5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_Lnvy5_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    public void testParse_HZAj0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "description");
        options.addOption("b", "arg2", true, "description");
        options.addOption("c", "arg3", true, "description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    public void testParseWithPartialMatching_HVXp1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "description");
        options.addOption("b", "arg2", true, "description");
        options.addOption("c", "arg3", true, "description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    public void testParseWithStopAtNonOption_wMyO2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "description");
        options.addOption("b", "arg2", true, "description");
        options.addOption("c", "arg3", true, "description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    public void testParseWithStopAtNonOptionAndPartialMatching_lnPF3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "description");
        options.addOption("b", "arg2", true, "description");
        options.addOption("c", "arg3", true, "description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        DefaultParser parser = new DefaultParser(true);
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    public void testParse_jjkT0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals(26, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_mPas0_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Uvgl1_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_QTja2_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_tTfN3_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kOhb4_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAW5_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertFalse(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertFalse(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_MqVS0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_iQpr1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", true, "description");
        String[] arguments = new String[]{"--aaa=value1", "--bbb=value2", "--ccc=value3"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_xXiL0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_oDie1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"--aaa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_QSCG2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"--aaa=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptionValue("aaa"));
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousOption_AKQz3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"--aa"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("aaa", cmd.getOptions()[0].getLongOpt());
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_HEfF0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_qpYH0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_bvbm1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("arg", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_vutP2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_NlJT3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_bnbR0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_IBbY4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_EwpF0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_dIQr3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short", false, "description");
        options.addOption("l", "long", false, "description");
        String[] arguments = new String[]{"-s", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertTrue(cmd.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_lyQf4() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_nfKZ5() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "property", true, "description");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("property", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_AfsR0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ORfX5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_VWRE0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ejEu3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_bfgd4() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "value"};
        Properties properties = new Properties();
        properties.setProperty("prop", "value");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_YDmE5() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_LbbZ2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_YqxM5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseArgument_ENaD3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("arg", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_tmuT5() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg", "--", "non-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("arg", cmd.getOptionValue("s"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("non-option", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_CXft3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
        assertEquals("argValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rBaV4() throws ParseException {
        Options options = new Options();
        options.addOption("p", "prop", true, "a property");
        String[] arguments = new String[]{"-p", "propValue"};
        Properties properties = new Properties();
        properties.setProperty("prop", "propValue");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("p"));
        assertEquals("propValue", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_QYea5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        String[] arguments = new String[]{"-a", "argValue", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
        assertEquals("argValue", cmd.getOptionValue("a"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("nonOption", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_rDjy0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_XVAs1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_IEZm2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "a long option");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("l"));
        assertTrue(cmd.hasOption("long"));
        assertEquals("value", cmd.getOptionValue("l"));
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseConcatenatedOptions_RpWw3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"-s", "-l"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("s"));
        assertTrue(cmd.hasOption("short"));
        assertTrue(cmd.hasOption("l"));
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSkipParsing_yHYd0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseCurrentOptionAcceptsArg_nSTp1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"-a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_tFgc5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("unknown", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_wofY0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ffeT1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DBHw0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_DkGG1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("-2", cmd.getOptionValue("b"));
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lKDT2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        options.addOption("c", "arg3", true, "argument 3");
        String[] arguments = new String[]{"--arg1", "value1", "--arg2", "value2", "--arg3", "value3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_KjWd3() throws ParseException {
        Options options = new Options();
        options.addOption("s", false, "description");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("s", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_oEit0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_UrbZ1() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", "aaa", false, "aaa option");
        options.addOption("bbb", "bbb", false, "bbb option");
        options.addOption("ccc", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("aaa"));
        assertTrue(cmd.hasOption("bbb"));
        assertTrue(cmd.hasOption("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wdbb0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_bZWU2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "--", "-b", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertNull(cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GXOn0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_ylWx3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"-a", "--bbb", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "aaa");
        properties.setProperty("b", "bbb");
        properties.setProperty("c", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSingleOption_XDOC2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMultipleOptions_Mtyc3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertEquals(2, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_BrZJ4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_Lnvy5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a=value"}, null, false);
        assertEquals(1, cmd.getOptions().length);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
    }
}