/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_yWwz0() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndNoArgumentAndMultipleArguments_YAJs10() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_QZno2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-c", "arg2"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_JiyJ3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptionValue_Cvbe4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptionValue_GGqm5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", ""};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_xnoX7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "invalid"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndInvalidOption_Yeic9() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "aaa", false, "description"));
        group.addOption(new Option("b", "bbb", false, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "arg1", "-c", "arg2"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2_1() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2_2() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2_3() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2_4() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_RLpA4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        PosixParser parser = new PosixParser();
        try {
            parser.parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_wvcZ0() {
        PosixParser parser = new PosixParser();
        List<String> requiredOptions = parser.getRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidProperties_BpRH5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsNull_YLqO2_sqyb0() {
        PosixParser parser = new PosixParser();
        parser.setOptions(new Options());
        assertNotNull(parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_lGvQ0_kbiA0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsRequiredOptions_tutB1_zPWk0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        parser.setOptions(options);
        assertEquals(options.getRequiredOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsRequiredOptionsNull_VHxV3_CXKl0() {
        PosixParser parser = new PosixParser();
        parser.setOptions(new Options());
        assertEquals(Collections.emptyList(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOption_eynT1_ZySL0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndArgument_roTI2_fQpk0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndEmptyArguments_DLXz2_VaDf0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[0];
        String[] expected = new String[]{"--aaa", "--bbb"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_xCjn0_swFo0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--long-option", "value"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "--long-option", "value"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_vlWh0_IDVG0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "-b", "-c"};
        try {
            String[] actual = parser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndNoArgumentAndEqualSign_Mvmn8_WNXk0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"-a="};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndMultipleArguments_fTYA6_hoSz0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a", "arg", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg", "arg2", "arg3"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndNonEmptyArguments_mxlw3_VcCM0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] expected = new String[]{"--aaa", "--bbb", "arg1", "arg2"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_LcGw1_Jmjc0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--long-a", "--long-b", "--long-c"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"--long-a", "--long-b", "--long-c"};
        try {
            String[] actual = parser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_TUzN2_Suqn0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        boolean stopAtNonOption = true;
        String[] expected = new String[]{"-a", "-b", "-c"};
        try {
            String[] actual = parser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_yzCd1_quRE0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--long-option", "value"};
        boolean stopAtNonOption = true;
        String[] expected = new String[]{"-a", "--long-option", "value"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }
}