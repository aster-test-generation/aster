/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Collections;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_empty_vtZJ0() throws MissingOptionException {
        GnuParser parser = new GnuParser();
        parser.setOptions(new Options());
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs_withMissingArgument_dzXj5() throws ParseException {
        GnuParser parser = new GnuParser();
        Option option = new Option("test", false, "Test option");
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        iter.add("-test");
        try {
            parser.processArgs(option, iter);
            fail("Expected MissingArgumentException");
        } catch (MissingArgumentException e) {
            assertEquals("Missing argument for option: test", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndValues_cADK9_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("option1", "option1", true, ""));
        options.addOption(new Option("option2", "option2", false, ""));
        CommandLine cmd = parser.parse(options, new String[]{"-option1", "value1", "-option2"}, null, false);
        assertEquals("value1", cmd.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndValues_cADK9_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("option1", "option1", true, ""));
        options.addOption(new Option("option2", "option2", false, ""));
        CommandLine cmd = parser.parse(options, new String[]{"-option1", "value1", "-option2"}, null, false);
        assertEquals(null, cmd.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_emptyArguments_tdah0() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[0];
        String[] expected = new String[0];
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_singleOption_Iyqw1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a"};
        String[] expected = new String[]{"-a"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_singleOptionWithArgument_vKFn2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "arg"};
        String[] expected = new String[]{"-a", "arg"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_multipleOptions_EnEL3() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        String[] expected = new String[]{"-a", "-b"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_multipleOptionsWithArguments_PxPM4() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2"};
        String[] expected = new String[]{"-a", "arg1", "-b", "arg2"};
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOption_LaEA5() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b", "--", "arg"};
        String[] expected = new String[]{"-a", "-b", "--", "arg"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOptionWithArgument_zBci6() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--", "arg3"};
        String[] expected = new String[]{"-a", "arg1", "-b", "arg2", "--"};
        String[] actual = parser.flatten(options, arguments, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_stopAtNonOptionWithoutArgumentAndWithArgument_NcYh8() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--", "arg3"};
        String[] expected = new String[]{"-a", "arg1", "-b", "arg2", "--", "arg3"};
        String[] actual = parser.flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsNonNull_hryY0() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsAndValues_nQzf6_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "value", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--value", "value", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "value1", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--value1", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value1", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleValuesForOption_Hjhx7_5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value1", cmd.getOptionValues("b")[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(5, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "value1", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--value1", "value1", "-a", "--value1", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value1", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value1", cmd.getOptionValues("b")[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsWithSameName_BOya8_6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("value2", cmd.getOptionValues("b")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionsWithSameNameButDifferentValues_YrBf9_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", false, "description");
        String[] arguments = new String[]{"-a", "--beta", "value1", "-a", "--beta", "value2", "-c"};
        CommandLine cmd = parser.parse(options, arguments, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_wJRD3_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_npPL4_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_Cnlr5_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndEmptyProperties_sYxn6_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndEmptyArguments_IaHK7_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, new String[0], properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndInvalidPropertiesAndArguments_lTzN9() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_nullProperties_PFKH0_NrJE0() throws ParseException {
        Options options = new Options();
        GnuParser parser = new GnuParser();
        parser.processProperties(null);
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithNoOptions_abpR4_ZtzH0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithNoOptions_abpR4_ZtzH0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        parser.setOptions(options);
        assertEquals(Collections.emptyList(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_CtCP0_okDw0() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        parser.setOptions(options);
        assertEquals(options.getRequiredOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithRequiredOptions_cXVW1_Cvkl0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "This is a required option");
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithRequiredOptions_cXVW1_Cvkl0_2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "This is a required option");
        parser.setOptions(options);
        assertEquals(options.getRequiredOptions(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptions_Efoa7_zBEr0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOption(new Option("a", "alpha", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithMultipleOptions_oQGI3_NQFG0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOption(new Option("b", "beta", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionsAndOptionGroups_ZhdS9_cqsn0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionGroupsAndOptions_AfdJ10_dnwm0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionGroupsAndOptionsAndOptionGroups_LdtC12_btzu0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsWithDuplicateOptionsAndOptionGroupsAndOptions_PWjN11_cgGG0_1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "This is an option in the group"));
        options.addOption(new Option("a", "alpha", false, "This is an option"));
        options.addOptionGroup(group);
        options.addOption(new Option("a", "alpha", false, "This is another option"));
        parser.setOptions(options);
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndValues_cADK9() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption(new Option("option1", "option1", true, ""));
        options.addOption(new Option("option2", "option2", false, ""));
        CommandLine cmd = parser.parse(options, new String[]{"-option1", "value1", "-option2"}, null, false);
        assertEquals("value1", cmd.getOptionValue("option1"));
        assertEquals(null, cmd.getOptionValue("option2"));
    }
}