/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Comparator;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    private HelpFormatter formatter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorWithDifferentSeparator_xHPH1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(":");
        String longOptSeparator = formatter.getLongOptSeparator();
        assertEquals(":", longOptSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorWithNullSeparator_mpTV2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(null);
        String longOptSeparator = formatter.getLongOptSeparator();
        assertNull(longOptSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_Decg0() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(10);
        assertEquals("          ", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegativeLength_TZaE1() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(0);
        assertEquals("", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_tSkC0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_ValidSeparator_ODXV0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullSeparator_tmAv1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_EmptySeparator_crmc2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_MultipleSeparator_pXDF4_2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator(":");
        assertEquals(":", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyString_VTDX0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "";
        StringBuffer expected = new StringBuffer();
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected.toString(), actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ShortString_XxfC1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a short string.";
        StringBuffer expected = new StringBuffer();
        expected.append(text);
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected.toString(), actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EmptyText_bBmu0() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("", 10, 0);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NoWrap_jZnX1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test", 10, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtTab_sPCJ3() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\t", 10, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLine_iUqS4() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n", 10, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtCarriageReturn_EDxF5() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\r", 10, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtSpace_qHgc6() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test ", 10, 10);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtTabAndNewLine_vzru8() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\t\n", 10, 10);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLineAndTab_frVQ9() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n\t", 10, 10);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtCarriageReturnAndNewLine_LICW10() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\r\n", 10, 10);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLineAndCarriageReturn_jESu11() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n\r", 10, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_null_RSvT0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix(null);
        assertEquals(null, formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_empty_Yryt1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("");
        assertEquals("", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_valid_DKqR2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_invalid_SFMs3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_multiple_OUpE4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        assertEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_different_RhKM5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        assertNotEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_same_vvun6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("-");
        assertEquals("-", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_omTj0() {
        HelpFormatter formatter = new HelpFormatter();
        String prefix = formatter.getLongOptPrefix();
        assertEquals("--", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_null_HmuA0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_empty_fqoz1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_nonWhitespace_UrJs3() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_mixed_KXhR4() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world");
        assertEquals("hello world", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_ValidPadding_WNkE0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        assertEquals(10, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_InvalidPadding_JQVi1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(-1);
        assertEquals(-1, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_ZeroPadding_NIcO6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(0);
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_MaxValuePadding_ChLt7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_MinValuePadding_ZzIE8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_RandomPadding_aMId9() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(new Random().nextInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_EUsx0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNull_WyHq1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix(null);
        assertEquals(null, formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithEmptyString_FkqC2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("");
        assertEquals("", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNewline_pWDC5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("\n");
        assertEquals("\n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleNewlines_Qvvu6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("\n\n");
        assertEquals("\n\n", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithTab_YsKL7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("\t");
        assertEquals("\t", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMultipleTabs_mtTi8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("\t\t");
        assertEquals("\t\t", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithMixedWhitespaceAndNewlines_WnBK10() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix(" \t \n ");
        assertEquals(" \t \n ", formatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_validWidth_IwLe0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(10);
        assertEquals(10, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_fPaq1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1);
        assertEquals(-1, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_zeroWidth_EnhL3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(0);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_maxWidth_Fhfh4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_minWidth_IPag5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_randomWidth_Qbji6() {
        HelpFormatter formatter = new HelpFormatter();
        int randomWidth = new Random().nextInt();
        formatter.setWidth(randomWidth);
        assertEquals(randomWidth, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_nullFormatter_tKEy7() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(10);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_zeroWidth_nullFormatter_vECp11() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_maxWidth_nullFormatter_PrCn13() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(Integer.MAX_VALUE);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_minWidth_nullFormatter_rVls15() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(Integer.MIN_VALUE);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_randomWidth_nullFormatter_ltbH17() {
        HelpFormatter formatter = null;
        try {
            formatter.setWidth(new Random().nextInt());
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithCustomPadding_cVxL1() {
        HelpFormatter formatter = new HelpFormatter();
        int customPadding = 10;
        formatter.setDescPadding(customPadding);
        int descPadding = formatter.getDescPadding();
        assertEquals(customPadding, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithLargePadding_AXpq4() {
        HelpFormatter formatter = new HelpFormatter();
        int largePadding = 100;
        formatter.setDescPadding(largePadding);
        int descPadding = formatter.getDescPadding();
        assertEquals(largePadding, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_null_zZKh0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptionComparator(null);
        assertNull(formatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_nullOption_nullComparator_yuXg8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptionComparator(null);
        formatter.setOptionComparator(null);
        assertNull(formatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_ValidNewLine_Aean0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n");
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NullNewLine_MAOm2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_EmptyNewLine_JfQU3() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_TabNewLine_IBvD5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\t");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NewLineWithMixedTabsAndSpacesAndNewLinesAndWhitespaceAndNewLineAndNewLineAndNewLine_oeqN22() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_qEwg0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--");
        Assertions.assertEquals("--", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithNull_iUhF1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix(null);
        Assertions.assertEquals(null, formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithEmptyString_LmlG2() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("");
        Assertions.assertEquals("", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleNonWhitespace_wOQJ6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- --");
        Assertions.assertEquals("-- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleMixedNonWhitespace_Hdwq8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- -- --");
        Assertions.assertEquals("-- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleMixedNonWhitespaceAndWhitespace_fSsv10() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- -- -- --");
        Assertions.assertEquals("-- -- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleMixedNonWhitespaceAndWhitespaceAndSpecialCharacters_aKtl12() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- -- -- -- --");
        Assertions.assertEquals("-- -- -- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleMixedNonWhitespaceAndWhitespaceAndSpecialCharactersAndNumbers_hEhT14() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- -- -- -- -- --");
        Assertions.assertEquals("-- -- -- -- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixWithMultipleMixedNonWhitespaceAndWhitespaceAndSpecialCharactersAndNumbersAndUppercase_fsOr16() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("-- -- -- -- -- -- --");
        Assertions.assertEquals("-- -- -- -- -- -- --", formatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_PJpO0() {
        HelpFormatter formatter = new HelpFormatter();
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_Wgcf0() {
        formatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_MultipleSeparator_pXDF4() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
        formatter.setLongOptSeparator(":");
        assertEquals(":", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals("My Program", header);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals("This is a test program", footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_6() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_7() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals("My Program", header);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals("This is a test program", footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_6() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_7() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertTrue(options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals("My Program", header);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals("This is a test program", footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_6() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_7() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertTrue(options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_valid_KJEn2_lyZW0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("arg");
        assertEquals("arg", formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_empty_BVzY1_KTIw0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("");
        assertEquals("", formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_NonNumericPadding_ZCNO4_OFNE0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(3);
        assertEquals(3, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNumericPadding_DUyy10_vlOM0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        int descPadding = formatter.getDescPadding();
        assertEquals(10, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithLargeNumericPadding_tGTG13_QSHn0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(100);
        int descPadding = formatter.getDescPadding();
        assertEquals(100, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNullPadding_QEyf6_jyCl0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(0);
        int descPadding = formatter.getDescPadding();
        assertEquals(0, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNonNumericPadding_zMJI9_RNoA0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(3);
        int descPadding = formatter.getDescPadding();
        assertEquals(3, descPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNonNumericPaddingAndCustomPadding_HnNw18_kLrT0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        int customPadding = 10;
        formatter.setDescPadding(customPadding);
        int descPadding = formatter.getDescPadding();
        assertEquals(customPadding, descPadding);
    }
}