/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_AlreadySelectedException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsNonNull_QpPl0() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        assertNotNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNames_ToaV1() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        assertEquals(Arrays.asList("Test exception"), names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectOptions_HoUu2() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<Option> options = group.getOptions();
        assertEquals(Arrays.asList(new Option("Test exception", "Test exception", false, "Test description")), options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNumberOfNames_atbD4() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        assertEquals(1, names.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNumberOfOptions_mVzQ5() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<Option> options = group.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndOptions_XGZb7_1() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        Collection<Option> options = group.getOptions();
        assertEquals(Arrays.asList("Test exception"), names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndOptions_XGZb7_2() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        Collection<Option> options = group.getOptions();
        assertEquals(Arrays.asList(new Option("Test exception", "Test exception", false, "Test description")), options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndSelectedOptions_RDPX8_1() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        String selected = group.getSelected();
        assertEquals(Arrays.asList("Test exception"), names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndSelectedOptions_RDPX8_2() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        String selected = group.getSelected();
        assertEquals("Test exception", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectOptionsAndSelectedOptions_yKHl9_1() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<Option> options = group.getOptions();
        String selected = group.getSelected();
        assertEquals(Arrays.asList(new Option("Test exception", "Test exception", false, "Test description")), options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectOptionsAndSelectedOptions_yKHl9_2() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<Option> options = group.getOptions();
        String selected = group.getSelected();
        assertEquals("Test exception", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_nUUt0() {
        AlreadySelectedException exception = new AlreadySelectedException("message");
        Option option = exception.getOption();
        assertEquals("message", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectSelectedOption_oboZ3() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        String selected = group.getSelected();
        assertEquals("Test exception", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndOptions_XGZb7() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        Collection<Option> options = group.getOptions();
        assertEquals(Arrays.asList("Test exception"), names);
        assertEquals(Arrays.asList(new Option("Test exception", "Test exception", false, "Test description")), options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectNamesAndSelectedOptions_RDPX8() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<String> names = group.getNames();
        String selected = group.getSelected();
        assertEquals(Arrays.asList("Test exception"), names);
        assertEquals("Test exception", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupReturnsCorrectOptionsAndSelectedOptions_yKHl9() {
        AlreadySelectedException exception = new AlreadySelectedException("Test exception");
        OptionGroup group = exception.getOptionGroup();
        Collection<Option> options = group.getOptions();
        String selected = group.getSelected();
        assertEquals(Arrays.asList(new Option("Test exception", "Test exception", false, "Test description")), options);
        assertEquals("Test exception", selected);
    }
}