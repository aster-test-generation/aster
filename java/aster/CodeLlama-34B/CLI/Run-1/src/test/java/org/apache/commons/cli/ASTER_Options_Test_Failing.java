/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_dMjq1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals(1, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_odai2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals(2, matchingOpts.size());
        assertEquals("--help", matchingOpts.get(0));
        assertEquals("--hello", matchingOpts.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_hohM2() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_Whhm0() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals(2, helpOptions.size());
        assertEquals("-h", helpOptions.get(0).getOpt());
        assertEquals("--help", helpOptions.get(1).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_noOpts_jHEF3() {
        Options options = new Options();
        String expected = "[ Options: [ short null ] [ long null ]";
        String actual = options.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_ValidOption_oGBg0() {
        Options options = new Options();
        String opt = "--help";
        boolean result = options.hasLongOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_MultipleOptions_NnXY5() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--version";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentCases_ocaL6() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--HELP";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentLeadingHyphens_NMuo7() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "-help";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentTrailingHyphens_hHGN8() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--help-";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_ValidShortOption_QBbI0() {
        Options options = new Options();
        String opt = "a";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptions_lQAi4() {
        Options options = new Options();
        String opt = "a,b,c";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithInvalid_FoXO5() {
        Options options = new Options();
        String opt = "a,b,c,invalid";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithNull_ntcn6() {
        Options options = new Options();
        String opt = "a,b,c,null";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithEmpty_QBfE7() {
        Options options = new Options();
        String opt = "a,b,c,";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MultipleShortOptionsWithMixed_HXQl8() {
        Options options = new Options();
        String opt = "a,b,c,invalid,null,";
        boolean result = options.hasShortOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_null_aioC2() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNull(optionGroups);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt1", options.getOption("opt1").getOpt());
        assertEquals("description1", options.getOption("opt1").getDescription());
        assertTrue(options.hasOption("opt1"));
        assertTrue(options.hasLongOption("opt1"));
        assertFalse(options.hasShortOption("opt1"));
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals("opt1", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt2", options.getOption("opt2").getOpt());
        assertEquals("description2", options.getOption("opt2").getDescription());
        assertTrue(options.hasOption("opt2"));
        assertTrue(options.hasLongOption("opt2"));
        assertFalse(options.hasShortOption("opt2"));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt3", options.getOption("opt3").getOpt());
        assertEquals("description3", options.getOption("opt3").getDescription());
        assertTrue(options.hasOption("opt3"));
        assertTrue(options.hasLongOption("opt3"));
        assertFalse(options.hasShortOption("opt3"));
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals("opt3", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt4", options.getOption("opt4").getOpt());
        assertEquals("description4", options.getOption("opt4").getDescription());
        assertTrue(options.hasOption("opt4"));
        assertTrue(options.hasLongOption("opt4"));
        assertFalse(options.hasShortOption("opt4"));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt5", options.getOption("opt5").getOpt());
        assertEquals("description5", options.getOption("opt5").getDescription());
        assertTrue(options.hasOption("opt5"));
        assertTrue(options.hasLongOption("opt5"));
        assertFalse(options.hasShortOption("opt5"));
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals("opt5", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt6", options.getOption("opt6").getOpt());
        assertEquals("description6", options.getOption("opt6").getDescription());
        assertTrue(options.hasOption("opt6"));
        assertTrue(options.hasLongOption("opt6"));
        assertFalse(options.hasShortOption("opt6"));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt7", options.getOption("opt7").getOpt());
        assertEquals("description7", options.getOption("opt7").getDescription());
        assertTrue(options.hasOption("opt7"));
        assertTrue(options.hasLongOption("opt7"));
        assertFalse(options.hasShortOption("opt7"));
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals("opt7", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt8", options.getOption("opt8").getOpt());
        assertEquals("description8", options.getOption("opt8").getDescription());
        assertTrue(options.hasOption("opt8"));
        assertTrue(options.hasLongOption("opt8"));
        assertFalse(options.hasShortOption("opt8"));
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt9", options.getOption("opt9").getOpt());
        assertEquals("description9", options.getOption("opt9").getDescription());
        assertTrue(options.hasOption("opt9"));
        assertTrue(options.hasLongOption("opt9"));
        assertFalse(options.hasShortOption("opt9"));
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals("opt9", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_dMjq1_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_dMjq1_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_odai2_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals(2, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_odai2_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals("--help", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MultipleMatches_odai2_3() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--he");
        assertEquals("--hello", matchingOpts.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_Whhm0_1() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals(2, helpOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_Whhm0_2() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals("-h", helpOptions.get(0).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_Whhm0_3() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        assertEquals("--help", helpOptions.get(1).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_MultipleOptions_NnXY5_1() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--version";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_MultipleOptions_NnXY5_2() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--version";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentCases_ocaL6_1() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--HELP";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentCases_ocaL6_2() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--HELP";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentLeadingHyphens_NMuo7_1() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "-help";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentLeadingHyphens_NMuo7_2() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "-help";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentTrailingHyphens_hHGN8_1() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--help-";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_DifferentTrailingHyphens_hHGN8_2() {
        Options options = new Options();
        String opt1 = "--help";
        String opt2 = "--help-";
        boolean result1 = options.hasLongOption(opt1);
        boolean result2 = options.hasLongOption(opt2);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_5() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertTrue(options.hasLongOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_6() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertFalse(options.hasShortOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_7() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_8() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals("opt1", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_5() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertTrue(options.hasLongOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_6() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertFalse(options.hasShortOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_5() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertTrue(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_6() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertFalse(options.hasShortOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_7() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_8() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals("opt3", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_5() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertTrue(options.hasLongOption("opt4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_6() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertFalse(options.hasShortOption("opt4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_5() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertTrue(options.hasLongOption("opt5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_6() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertFalse(options.hasShortOption("opt5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_7() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_8() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals("opt5", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_5() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertTrue(options.hasLongOption("opt6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_6() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertFalse(options.hasShortOption("opt6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_5() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertTrue(options.hasLongOption("opt7"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_6() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertFalse(options.hasShortOption("opt7"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_7() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_8() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals("opt7", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_5() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertTrue(options.hasLongOption("opt8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_6() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertFalse(options.hasShortOption("opt8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_5() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertTrue(options.hasLongOption("opt9"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_6() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertFalse(options.hasShortOption("opt9"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_7() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_8() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals("opt9", options.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_sDRJ0_JnkZ0_2() {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertTrue(options.getOption("r").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionSetsOptionAsRequired_KqsK2_cgwz0() {
        Options options = new Options();
        Option option = new Option("a", "long-a", true, "description");
        options.addOption(option);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefaultValue_qcoL3_Abtu0_4() {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("default", options.getOption("d").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_mZmI3_RgHE0_1() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(1, optionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_mZmI3_RgHE0_2() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_differentGroups_mSZa4_LauD0_1() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertEquals(2, optionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_differentGroups_mSZa4_LauD0_3() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.contains(optionGroup2));
    }
}