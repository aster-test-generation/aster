/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_EmptyString_BrGM0() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("");
        assertEquals(0, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_NoMatch_rNoq3() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--non-existent");
        assertEquals(0, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_SbVz0() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertTrue(actual.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_AhrV1() {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actual = options.getOptions();
        assertEquals(2, actual.size());
        assertTrue(actual.contains(new Option("option1", "value1")));
        assertTrue(actual.contains(new Option("option2", "value2")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_InvalidOption_BFUG1() {
        Options options = new Options();
        String opt = "--invalid";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NullOption_LXBv2() {
        Options options = new Options();
        String opt = null;
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_EmptyOption_ReUv3() {
        Options options = new Options();
        String opt = "";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_InvalidShortOption_eIML1() {
        Options options = new Options();
        String opt = "invalid";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_NullShortOption_OZYJ2() {
        Options options = new Options();
        String opt = null;
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_EmptyShortOption_ZipO3() {
        Options options = new Options();
        String opt = "";
        boolean result = options.hasShortOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_emptyOptions_doYR0() {
        Options options = new Options();
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(0, newOptions.getOptions().size());
        assertEquals(0, newOptions.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(3, newOptions.getOptions().size());
        assertEquals(0, newOptions.getOptionGroups().size());
        assertTrue(newOptions.hasOption("a"));
        assertTrue(newOptions.hasOption("b"));
        assertTrue(newOptions.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupNull_WpgM1() {
        Option option = new Option("a", "alpha", false, "This is option a");
        Options options = new Options();
        assertNull(options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_empty_fIyI0() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_pLFV0() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertEquals("long-option", option.getLongOpt());
        assertTrue(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullLongOption_weav1() {
        Options options = new Options();
        options.addOption("a", null, true, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertNull(option.getLongOpt());
        assertTrue(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_CSAI2() {
        Options options = new Options();
        options.addOption("a", "long-option", true, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertEquals("long-option", option.getLongOpt());
        assertTrue(option.hasArg());
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArg_DiMX3() {
        Options options = new Options();
        options.addOption("a", "long-option", false, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertEquals("long-option", option.getLongOpt());
        assertFalse(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullDescription_HtAP5() {
        Options options = new Options();
        options.addOption("a", "long-option", false, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertEquals("long-option", option.getLongOpt());
        assertFalse(option.hasArg());
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOption_IWmK7() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertNull(option.getLongOpt());
        assertFalse(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOptionAndDescription_Rxmc9() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
        assertNull(option.getLongOpt());
        assertFalse(option.hasArg());
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgAndNullLongOptionAndDescription_jUgg10() {
        Options options = new Options();
        options.addOption("a", null, true, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption10_uUgD9() {
        Options options = new Options();
        options.addOption("opt10", false, "description10");
        assertEquals(1, options.getOptions().size());
        assertEquals("opt10", options.getOption("opt10").getOpt());
        assertEquals("description10", options.getOption("opt10").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_Efro0() {
        Options options = new Options();
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_AhrV1_1() {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actual = options.getOptions();
        assertEquals(2, actual.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_AhrV1_2() {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actual = options.getOptions();
        assertTrue(actual.contains(new Option("option1", "value1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nonEmpty_AhrV1_3() {
        Options options = new Options();
        options.addOption(new Option("option1", "value1"));
        options.addOption(new Option("option2", "value2"));
        Collection<Option> actual = options.getOptions();
        assertTrue(actual.contains(new Option("option2", "value2")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_emptyOptions_doYR0_1() {
        Options options = new Options();
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(0, newOptions.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_emptyOptions_doYR0_2() {
        Options options = new Options();
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(0, newOptions.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1_1() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(3, newOptions.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1_2() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertEquals(0, newOptions.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1_3() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertTrue(newOptions.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1_4() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertTrue(newOptions.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_nonEmptyOptions_uHYO1_5() {
        Options options = new Options();
        options.addOption(new Option("a", "aaa", false, "description"));
        options.addOption(new Option("b", "bbb", true, "description"));
        options.addOption(new Option("c", "ccc", false, "description"));
        Options newOptions = new Options();
        newOptions.addOptions(options);
        assertTrue(newOptions.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_pLFV0_1() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_pLFV0_2() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "description");
        Option option = options.getOption("a");
        assertEquals("long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_pLFV0_3() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "description");
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_pLFV0_4() {
        Options options = new Options();
        options.addOption("a", "long-option", true, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullLongOption_weav1_1() {
        Options options = new Options();
        options.addOption("a", null, true, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullLongOption_weav1_2() {
        Options options = new Options();
        options.addOption("a", null, true, "description");
        Option option = options.getOption("a");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullLongOption_weav1_3() {
        Options options = new Options();
        options.addOption("a", null, true, "description");
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullLongOption_weav1_4() {
        Options options = new Options();
        options.addOption("a", null, true, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_CSAI2_1() {
        Options options = new Options();
        options.addOption("a", "long-option", true, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_CSAI2_2() {
        Options options = new Options();
        options.addOption("a", "long-option", true, null);
        Option option = options.getOption("a");
        assertEquals("long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_CSAI2_3() {
        Options options = new Options();
        options.addOption("a", "long-option", true, null);
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullDescription_CSAI2_4() {
        Options options = new Options();
        options.addOption("a", "long-option", true, null);
        Option option = options.getOption("a");
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArg_DiMX3_1() {
        Options options = new Options();
        options.addOption("a", "long-option", false, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArg_DiMX3_2() {
        Options options = new Options();
        options.addOption("a", "long-option", false, "description");
        Option option = options.getOption("a");
        assertEquals("long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArg_DiMX3_3() {
        Options options = new Options();
        options.addOption("a", "long-option", false, "description");
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArg_DiMX3_4() {
        Options options = new Options();
        options.addOption("a", "long-option", false, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullDescription_HtAP5_1() {
        Options options = new Options();
        options.addOption("a", "long-option", false, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullDescription_HtAP5_2() {
        Options options = new Options();
        options.addOption("a", "long-option", false, null);
        Option option = options.getOption("a");
        assertEquals("long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullDescription_HtAP5_3() {
        Options options = new Options();
        options.addOption("a", "long-option", false, null);
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullDescription_HtAP5_4() {
        Options options = new Options();
        options.addOption("a", "long-option", false, null);
        Option option = options.getOption("a");
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOption_IWmK7_1() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOption_IWmK7_2() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        Option option = options.getOption("a");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOption_IWmK7_3() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOption_IWmK7_4() {
        Options options = new Options();
        options.addOption("a", null, false, "description");
        Option option = options.getOption("a");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOptionAndDescription_Rxmc9_1() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        Option option = options.getOption("a");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOptionAndDescription_Rxmc9_2() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        Option option = options.getOption("a");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOptionAndDescription_Rxmc9_3() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgAndNullLongOptionAndDescription_Rxmc9_4() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        Option option = options.getOption("a");
        assertNull(option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_1() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_2() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals("opt1", options.getOption("opt1").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_3() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertEquals("description1", options.getOption("opt1").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_ieoQ0_4() {
        Options options = new Options();
        options.addOption("opt1", true, "description1");
        assertTrue(options.hasOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_1() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_2() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertEquals("opt2", options.getOption("opt2").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_3() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertEquals("description2", options.getOption("opt2").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_4() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertTrue(options.hasOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_rOvS1_7() {
        Options options = new Options();
        options.addOption("opt2", false, "description2");
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_1() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_2() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals("opt3", options.getOption("opt3").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_3() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertEquals("description3", options.getOption("opt3").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_XRPv2_4() {
        Options options = new Options();
        options.addOption("opt3", true, "description3");
        assertTrue(options.hasOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_1() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_2() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertEquals("opt4", options.getOption("opt4").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_3() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertEquals("description4", options.getOption("opt4").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_4() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertTrue(options.hasOption("opt4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption4_mzIn3_7() {
        Options options = new Options();
        options.addOption("opt4", false, "description4");
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_1() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_2() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals("opt5", options.getOption("opt5").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_3() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertEquals("description5", options.getOption("opt5").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption5_YGje4_4() {
        Options options = new Options();
        options.addOption("opt5", true, "description5");
        assertTrue(options.hasOption("opt5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_1() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_2() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertEquals("opt6", options.getOption("opt6").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_3() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertEquals("description6", options.getOption("opt6").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_4() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertTrue(options.hasOption("opt6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption6_bkcg5_7() {
        Options options = new Options();
        options.addOption("opt6", false, "description6");
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_1() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_2() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals("opt7", options.getOption("opt7").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_3() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertEquals("description7", options.getOption("opt7").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption7_fUNH6_4() {
        Options options = new Options();
        options.addOption("opt7", true, "description7");
        assertTrue(options.hasOption("opt7"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_1() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_2() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertEquals("opt8", options.getOption("opt8").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_3() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertEquals("description8", options.getOption("opt8").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_4() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertTrue(options.hasOption("opt8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption8_XXUs7_7() {
        Options options = new Options();
        options.addOption("opt8", false, "description8");
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_1() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_2() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals("opt9", options.getOption("opt9").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_3() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertEquals("description9", options.getOption("opt9").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption9_Tzwt8_4() {
        Options options = new Options();
        options.addOption("opt9", true, "description9");
        assertTrue(options.hasOption("opt9"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption10_uUgD9_1() {
        Options options = new Options();
        options.addOption("opt10", false, "description10");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption10_uUgD9_2() {
        Options options = new Options();
        options.addOption("opt10", false, "description10");
        assertEquals("opt10", options.getOption("opt10").getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption10_uUgD9_3() {
        Options options = new Options();
        options.addOption("opt10", false, "description10");
        assertEquals("description10", options.getOption("opt10").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_sDRJ0_JnkZ0_1() {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertTrue(options.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_sDRJ0_JnkZ0_3() {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertEquals("required", options.getOption("r").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_sDRJ0_JnkZ0_4() {
        Options options = new Options();
        Option option = new Option("r", "required", false, "This is a required option");
        options.addOption(option);
        assertEquals("This is a required option", options.getOption("r").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_HLzQ0_JjqL0() {
        Option option = new Option("a", "alpha", false, "This is option a");
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(option);
        Options options = new Options();
        options.addOptionGroup(optionGroup);
        assertEquals(optionGroup, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionAddsOptionToList_ygvP1_cfCf0() {
        Options options = new Options();
        Option option = new Option("a", "long-a", true, "description");
        options.addOption(option);
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOptionReturnsOptionsObject_wxqi0_brNG0() {
        Options options = new Options();
        Option option = new Option("a", "long-a", true, "description");
        options.addOption(option);
        assertEquals(options, options.addOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefaultValue_qcoL3_Abtu0_1() {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertTrue(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefaultValue_qcoL3_Abtu0_2() {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("default", options.getOption("d").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithValueAndDefaultValue_qcoL3_Abtu0_3() {
        Options options = new Options();
        Option option = new Option("d", "default", true, "This is an option with a value and a default value");
        options.addOption(option);
        assertEquals("This is an option with a value and a default value", options.getOption("d").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_duplicates_mZmI3_RgHE0_3() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertFalse(optionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_SingleMatch_dMjq1_1_fid2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--help");
    }
}