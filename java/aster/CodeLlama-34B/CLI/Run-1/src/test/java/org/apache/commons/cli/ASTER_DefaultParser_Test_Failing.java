/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_nullToken_guQU6() {
        String token = null;
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("a").getProperty("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("b").getProperty("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("c").getProperty("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("d").getProperty("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("a"), "alphaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("d"), "deltaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("f"), "foxtrotValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("h"), "hotelValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("j"), "julietValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("l"), "limaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_14() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("n"), "novemberValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_16() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("p"), "papaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_18() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("r"), "romeoValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_20() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("t"), "tangoValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_22() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("v"), "victorValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_emptyExpectedOpts_OCbV0_MQXh0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_MseH2_BKrx0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_MseH2_BKrx0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_MseH2_BKrx0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_MseH2_BKrx0_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_MseH2_BKrx0_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1_3_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("-a", cmd.getOptions()[0].getOpt());
        assertEquals(null, cmd.getOptions()[0].getValue());
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2_3_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3_3_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_EsLB2_4_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
        assertEquals("-b", cmd.getArgs()[1]);
        assertEquals("-c", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_GJRG1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("-a", cmd.getArgs()[0]);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ULDa2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
        assertEquals("-a", cmd.getArgs()[0]);
        assertEquals("-b", cmd.getArgs()[1]);
        assertEquals("-c", cmd.getArgs()[2]);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMda3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgs().length);
        assertEquals("-a", cmd.getArgs()[0]);
        assertEquals("-b", cmd.getArgs()[1]);
        assertEquals("-c", cmd.getArgs()[2]);
        assertEquals(3, cmd.getOptions().length);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(4, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("value", cmd.getOptionValue("c"));
        assertEquals("value", cmd.getOptionValue("d"));
        assertEquals("value", cmd.getOptionProperties("a").getProperty("a"));
        assertEquals("value", cmd.getOptionProperties("b").getProperty("b"));
        assertEquals("value", cmd.getOptionProperties("c").getProperty("c"));
        assertEquals("value", cmd.getOptionProperties("d").getProperty("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("true", cmd.getOptionValue("c"));
        assertEquals("extra", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("a"), "alphaValue");
        assertEquals(cmd.getOptionValue("b"), "betaValue");
        assertEquals(cmd.getOptionValue("c"), "charlieValue");
        assertEquals(cmd.getOptionValue("d"), "deltaValue");
        assertEquals(cmd.getOptionValue("e"), "echoValue");
        assertEquals(cmd.getOptionValue("f"), "foxtrotValue");
        assertEquals(cmd.getOptionValue("g"), "golfValue");
        assertEquals(cmd.getOptionValue("h"), "hotelValue");
        assertEquals(cmd.getOptionValue("i"), "indiaValue");
        assertEquals(cmd.getOptionValue("j"), "julietValue");
        assertEquals(cmd.getOptionValue("k"), "kiloValue");
        assertEquals(cmd.getOptionValue("l"), "limaValue");
        assertEquals(cmd.getOptionValue("m"), "mikeValue");
        assertEquals(cmd.getOptionValue("n"), "novemberValue");
        assertEquals(cmd.getOptionValue("o"), "oscarValue");
        assertEquals(cmd.getOptionValue("p"), "papaValue");
        assertEquals(cmd.getOptionValue("q"), "quebecValue");
        assertEquals(cmd.getOptionValue("r"), "romeoValue");
        assertEquals(cmd.getOptionValue("s"), "sierraValue");
        assertEquals(cmd.getOptionValue("t"), "tangoValue");
        assertEquals(cmd.getOptionValue("u"), "uniformValue");
        assertEquals(cmd.getOptionValue("v"), "victorValue");
    }
}