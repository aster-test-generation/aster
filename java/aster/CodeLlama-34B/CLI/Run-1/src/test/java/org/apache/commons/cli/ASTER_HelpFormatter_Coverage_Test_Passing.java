/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    private Option option;
    private Options options;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_nYUP0() {
        HelpFormatter formatter = new HelpFormatter();
        String input = "   Hello World   ";
        String expected = "   Hello World";
        String actual = formatter.rtrim(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_CiCh3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 10;
        int startPos = 15;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_mPkl4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_bVul5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 10;
        int startPos = 25;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_PaSM6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_HQLK0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a test string that should be wrapped at 80 characters.";
        formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a test string that should be wrapped at 80 characters.", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_1_MJxr0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int leftPad = 2;
        int descPad = 2;
        formatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_11_WmVe10() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 80;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_gDmo0_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 9;
        int startPos = 0;
        int expected = 9;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_NSUj1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 9;
        int startPos = 5;
        int expected = 9;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_huiE2_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text.";
        int width = 10;
        int startPos = 10;
        int expected = 16;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }
}