/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Fixed_Test {

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_kKvl0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "t", false, "Test option");
        commandLine.addOption(option);
        String value = commandLine.getOptionValue("test");
        Assertions.assertEquals("t", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_Jkpm0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(option, () -> defaultValue);
        Assertions.assertEquals(defaultValue, actual);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_srfT0_1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_srfT0_2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value1", props.get("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithValidOpt_srfT0_3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value2", props.get("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithInvalidOpt_eqLH1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("invalid");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEmptyOpt_mtVn3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_HxYf0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNonNullOption_MnXP1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("converted", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_YMKW0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_ZFPV2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_mFMm3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_eQSk4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertNull(value);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotNull_eSlj1_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(1, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionNotNull_eSlj1_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("description", props.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionWithValues_UcRs2_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionWithValues_UcRs2_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value1", props.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_optionWithValues_UcRs2_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        option.addValue("value1");
        option.addValue("value2");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals("value2", props.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndDefaultValue_VNzQ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = () -> "defaultValue";
        String expected = "value";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndNoDefaultValue_MOVp1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        Supplier<String> defaultValue = null;
        String expected = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_lkQJ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_dgic1() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_JeTg2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_RZRq5() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNonNullDefaultValue_EFbl6() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDefaultValue_hvQb0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullDefaultValue_zXDX1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyDefaultValue_Mvbu2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNonEmptyDefaultValue_DVFP3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_twhZ4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyOption_dPDb5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNonEmptyOption_Dqzy6() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNullDefaultValue_Rnnh7() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = null;
        String value = commandLine.getOptionValue(option, defaultValue);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndEmptyDefaultValue_mHNy8() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOptionAndNonEmptyDefaultValue_BqhT9() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "defaultValue";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithValidOption_TmyN0() {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithInvalidOption_TLPX1() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption('z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_VmnJ3() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithWhitespaceOption_DdvO4() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(" "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_ZDzI5() {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("-a -b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndInvalidOption_QcjN6() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a -z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndNullOption_LcFI7() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a null"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndEmptyOption_fgXR8() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndWhitespaceOption_TXFO9() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("-a  "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_LNkI0_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_LNkI0_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-a");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_MCgT1_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithLongOpt_MCgT1_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("--long-opt");
        assertEquals("long-opt", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_qIZj2_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithDeprecatedOption_qIZj2_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-d");
        assertEquals("d", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_qtvE3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("-invalid");
        assertEquals(0, optionValues.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOption_dEEw1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNull(optionValues);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOption_ZFva2_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOption_ZFva2_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(0, optionValues.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndValues_wDxd3_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndValues_wDxd3_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndValues_wDxd3_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value1", optionValues[0]);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndMultipleValues_HcDp4_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndMultipleValues_HcDp4_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(2, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndMultipleValues_HcDp4_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOptionAndMultipleValues_HcDp4_4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", false, "");
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_MDzX0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_MDzX0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_MDzX0_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_MDzX0_4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "aaa");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_fQEY3() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_optionNull_rayF0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "option description");
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_defaultValue_XKaE0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyDefaultValue_BlLq2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonEmptyDefaultValue_rMXs3() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyOption_OIyN5() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonEmptyOption_VGFa6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("a", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_emptyOptionAndDefaultValue_TSHs8() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nonEmptyOptionAndDefaultValue_CXay9() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("a", "defaultValue");
        assertEquals("defaultValue", optionValue);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_InvalidOption_ReturnsDefaultValue_Ddxq1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        String defaultValue = "default";
        assertEquals(defaultValue, commandLine.getParsedOptionValue(opt, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_validOption_EtJr0_1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("--option");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_validOption_EtJr0_2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("--option");
        assertEquals("--option", optionObject.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_invalidOption_GOBc1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("--invalid-option");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_nullOption_tSTj2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(null);
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_emptyOption_YCgC3() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_whitespaceOption_arrB4() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(" ");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_empty_QtRf1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_valid_srxH2_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_valid_srxH2_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_valid_srxH2_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_invalid_WorT3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("invalid");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4_4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertEquals("b", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_multiple_TclZ4_5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c");
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5_4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertEquals("a", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_duplicate_tRTx5_5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,a,a");
        assertEquals("a", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6_4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertEquals("b", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_whitespace_tPpw6_5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a b c");
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertEquals(3, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7_4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertEquals("b", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_specialChars_roRg7_5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a-b-c");
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertEquals(4, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertEquals("a", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertEquals("b", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertEquals("c", optionValues[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_opt_mixed_BFnj8_6() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("a,b,c,d");
        assertEquals("d", optionValues[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithValidOption_LzkV0_1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-a");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithValidOption_LzkV0_2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-a");
        assertEquals("-a", optionObject.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithInvalidOption_rrZM1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-z");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithEmptyOption_GOHA2() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("");
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNullOption_Shpx3() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(null);
        assertNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndDefaultValue_zAcm0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndNullDefaultValue_MFtQ1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndDefaultValue_ZxfT2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndNullDefaultValue_mArv3() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> null);
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndEmptyDefaultValue_UGpG4() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndNonEmptyDefaultValue_RLIP5() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndEmptyDefaultValue_CCCP6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "");
        assertEquals("", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndNonEmptyDefaultValue_WhQP7() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> "defaultValue");
        assertEquals("defaultValue", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndSupplierThatThrowsException_fLds8() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> {
            throw new RuntimeException("Supplier throws exception");
        });
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndSupplierThatThrowsException_toQX9() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('z', () -> {
            throw new RuntimeException("Supplier throws exception");
        });
        assertNull(optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_empty_WdPy0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_empty_Evms0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_dCbS1_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_singleOption_dCbS1_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_nUDz2_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_nUDz2_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_multipleOptions_nUDz2_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptions_OYLs3_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptions_OYLs3_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOption_YXdg4() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOption_GSdL5_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOption_GSdL5_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("-a", "--alpha");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptions_RvVj6() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_aZsX7_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_aZsX7_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptions_aZsX7_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mixedOptions_ZTbs8_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mixedOptions_ZTbs8_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mixedOptions_ZTbs8_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptionsWithSameName_rLwn9_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptionsWithSameName_rLwn9_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptionsWithDifferentNames_Rmba10_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptionsWithDifferentNames_Rmba10_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_duplicateOptionsWithDifferentNames_Rmba10_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptionsWithSameName_benD11_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptionsWithSameName_benD11_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptionsWithDifferentNames_hpPI12_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptionsWithDifferentNames_hpPI12_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nullOptionsWithDifferentNames_hpPI12_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-b", "--beta");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptionsWithSameName_Ehky13_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalidOptionsWithSameName_Ehky13_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("-a", "--alpha");
        Option option2 = new Option("-a", "--alpha");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithEmptyOptions_lnso1_1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithEmptyOptions_lnso1_2() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithNullOptions_Bmkk5_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithNullOptions_Bmkk5_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
        Iterator<Option> iterator = commandLine.iterator();
        assertFalse(iterator.hasNext());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_empty_dDdy0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_singleArg_dEcy1_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_singleArg_dEcy1_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_tSSK2_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        List<String> argList = commandLine.getArgList();
        assertEquals(3, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_tSSK2_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_tSSK2_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg2", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_multipleArgs_tSSK2_4() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArg_WXNE3_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArg_WXNE3_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertNull(argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArg_ArFS4_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArg_ArFS4_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals("", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_whitespaceArg_tvKh5_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(" ");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_whitespaceArg_tvKh5_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(" ");
        List<String> argList = commandLine.getArgList();
        assertEquals(" ", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArg_xzzU6_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(1, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArg_xzzU6_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("invalid", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_bbTu7_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_bbTu7_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertNull(argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_nullArgs_bbTu7_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        commandLine.addArg(null);
        List<String> argList = commandLine.getArgList();
        assertNull(argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_niRQ8_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_niRQ8_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals("", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_emptyArgs_niRQ8_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("");
        commandLine.addArg("");
        List<String> argList = commandLine.getArgList();
        assertEquals("", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_whitespaceArgs_LtxZ9_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(" ");
        commandLine.addArg(" ");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_whitespaceArgs_LtxZ9_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(" ");
        commandLine.addArg(" ");
        List<String> argList = commandLine.getArgList();
        assertEquals(" ", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_whitespaceArgs_LtxZ9_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(" ");
        commandLine.addArg(" ");
        List<String> argList = commandLine.getArgList();
        assertEquals(" ", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_XObU10_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(2, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_XObU10_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("invalid", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_invalidArgs_XObU10_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("invalid");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("invalid", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(7, argList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg1", argList.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_3() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg2", argList.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_4() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("arg3", argList.get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_5() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertNull(argList.get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_6() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("", argList.get(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_7() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals(" ", argList.get(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_mixedArgs_BdfV11_8() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("arg1");
        commandLine.addArg("arg2");
        commandLine.addArg("arg3");
        commandLine.addArg(null);
        commandLine.addArg("");
        commandLine.addArg(" ");
        commandLine.addArg("invalid");
        List<String> argList = commandLine.getArgList();
        assertEquals("invalid", argList.get(6));
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_vjQS0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_RhUg1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        option.setLongOpt("test-long");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithArg_ozlX2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionalArg_lYiJ3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", false, "This is a test option");
        option.setOptionalArg(true);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithRequiredArg_bITS4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setRequired(true);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithValueSeparator_xlWJ5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setValueSeparator(':');
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithType_NhxC11() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setType(String.class);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDescription_vsFx13() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setDescription("This is a test description");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithArgs_ZgWW14() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setArgs(2);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOpt_aYdW17() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option", true, "This is a test option");
        option.setLongOpt("test-long");
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_APeD0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("test");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_APeD0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("test");
        assertEquals("test", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_rUyj2_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("test1");
        optionValues = commandLine.getOptionValues("test2");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_rUyj2_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("test1");
        optionValues = commandLine.getOptionValues("test2");
        assertEquals("test1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_rUyj2_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("test1");
        optionValues = commandLine.getOptionValues("test2");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithMultipleOptions_rUyj2_4() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test option 1");
        Option option2 = new Option("test2", "test option 2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("test1");
        optionValues = commandLine.getOptionValues("test2");
        assertEquals("test2", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_tAeX3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("invalid");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOption_KOZj5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithWhitespaceOption_uMDI6() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(" ");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithTabOption_zCGb7() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\t");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithNewlineOption_hwjR8() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\n");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithCarriageReturnOption_QZVI9() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\r");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithFormFeedOption_dNmF10() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\f");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithVerticalTabOption_ZlFD11() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\u000B");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyOptionValues_gDYT13() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithWhitespaceOptionValues_WMza14() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(" ");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithTabOptionValues_LHjm15() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\t");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithNewlineOptionValues_xCfD16() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("\n");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionExists_PRgm0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionDoesNotExist_OdWh1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsEmpty_rNMC5() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsWhitespace_oQiv6() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(" "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsNotAValidOption_YhRf8() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("invalid"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsAValidOptionButNotInTheList_rfdG9() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsAValidOptionAndInTheList_WvaV10() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsAValidOptionAndInTheListButNotInTheList_YiiJ13() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsAValidOptionAndNotInTheList_cPKw16() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsAValidOptionAndNotInTheListButInTheList_QMST19() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "alpha");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_GLWd0_Sudb0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_Dxrg2_Qdbj0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_SCpv3_cQUM0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_oVlc4_NOLN0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(null, result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDeprecatedOption_OgJB1_Llqe0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDeprecatedOption_adEP1_eMde0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        String defaultValue = "default";
        String value = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOption_JMcO4_XqIp0() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOption_rJer2_uovo0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getParsedOptionValue("invalid");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_rjED3_rtqN0() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String value = commandLine.getOptionValue(option);
        assertNull(value);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LJio0_rBBf0_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        Option result = commandLine.getParsedOptionValue("test");
        assertEquals(option.getOpt(), result.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LJio0_rBBf0_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        Option result = commandLine.getParsedOptionValue("test");
        assertEquals(option.getLongOpt(), result.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_ExbJ3_pSJi0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String result = commandLine.getParsedOptionValue(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOption_djCN3_lAsB0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String value = commandLine.getParsedOptionValue("invalid");
        assertNull(value);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ANml0_fqNZ0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String value = commandLine.getParsedOptionValue("test");
        assertEquals(value, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithNullOpt_Kqny2_bLTu0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties((String) null);
        assertEquals(0, props.size());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDeprecatedOption_dCTO3_RVRt0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "option");
        Supplier<String> defaultValue = () -> "default";
        String value = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", value);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDeprecatedOption_VqnK1_ccfF0_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        Option result = commandLine.getParsedOptionValue("test");
        assertEquals(option.getOpt(), result.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithDeprecatedOption_VqnK1_ccfF0_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        Option result = commandLine.getParsedOptionValue("test");
        assertEquals(option.getLongOpt(), result.getLongOpt());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_OptionWithNoValue_ReturnsDefaultValue_XKpQ2_GNVr0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        String defaultValue = "default";
        commandLine.addOption(new Option(opt, null, false, ""));
        assertEquals(defaultValue, commandLine.getParsedOptionValue(opt, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_OptionWithNoValueAndNoDefault_ReturnsNull_BUrT5_aRqE0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "--option";
        commandLine.addOption(new Option(opt, false, ""));
        assertNull(commandLine.getParsedOptionValue(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_opt_nullDefaultValue_dPwg1_kiqc1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', (String) null);
        assertNull(optionValue);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_nullArgs_iQDt3_XgjV0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_emptyArgs_rfJD4_kihc0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_emptyArray_czvL8_Bcwm0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertEquals(0, args.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithInvalidOptionAndNullArgument_oswV9_RtDR0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("-z");
        assertNull(optionObject);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertNotNull(nextOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertEquals("option1", nextOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_5() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertEquals("value1", nextOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithOneOption_UHbo2_CZdm0_6() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option1", "value1");
        commandLine.addOption(option);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        assertFalse(iterator.hasNext());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_2() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_3() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_4() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertEquals("option1", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_5() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertEquals("value1", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_6() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_7() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_8() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertEquals("option2", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_9() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertEquals("value2", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HxcU0_sNgA0_10() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        Option option = iterator.next();
        option = iterator.next();
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_opt_defaultValue_etua0_QSsu0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertEquals(defaultValue, result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_opt_defaultValue_null_xEiP2_eFXC0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_opt_defaultValue_null_nonNull_kNef18_ajIK0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithNullOption_tlfp4_CYdP0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test option");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals(0, optionValues.length);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_optionIsNotAString_ipbW7_WdGB0() {
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption("1"));
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOptionAndDefaultValue_UoIT2_Yzsb0() {
        CommandLine commandLine = new CommandLine();
        String option = "invalid";
        Supplier<String> defaultValue = () -> "default";
        String expected = "default";
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithValidOptionAndDefaultValue_Gzch0_mqxS0() {
        CommandLine commandLine = new CommandLine();
        String option = "a";
        Supplier<String> defaultValue = () -> "default";
        String expected = "default";
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            fail("Unexpected exception thrown: " + e.getMessage());
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithValidOptionAndNoDefaultValue_RBTh1_Eywu0() {
        CommandLine commandLine = new CommandLine();
        String option = "a";
        Supplier<String> defaultValue = null;
        String expected = null;
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndNoDefaultValue_XAMe5_nFxy0() {
        CommandLine commandLine = new CommandLine();
        String option = null;
        Supplier<String> defaultValue = null;
        String expected = null;
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithEmptyOptionAndNoDefaultValue_jTPC7_OSCF0() {
        CommandLine commandLine = new CommandLine();
        String option = "";
        Supplier<String> defaultValue = null;
        String expected = null;
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithEmptyOption_XZbT1_DPdo0() {
        CommandLine commandLine = new CommandLine();
        try {
            commandLine.getParsedOptionValue("");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("option", e.getMessage());
        } catch (ParseException e) {
            assertEquals("option", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOptionAndNoDefaultValue_NFhG3_rUvO0() {
        CommandLine commandLine = new CommandLine();
        String option = "invalid";
        Supplier<String> defaultValue = null;
        String expected = null;
        try {
            String actual = commandLine.getParsedOptionValue(option, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithInvalidOption_dZuv2_aThA0() {
        CommandLine commandLine = new CommandLine();
        try {
            commandLine.getParsedOptionValue("invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("option", e.getMessage());
        } catch (ParseException e) {
            assertEquals("invalid", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithValidOption_xnyj3_gwdb0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        try {
            assertEquals("description", commandLine.getParsedOptionValue(option));
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertNotNull(nextOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_4() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("option1", nextOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_5() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("value1", nextOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_6() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_7() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertNotNull(nextOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_8() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("option2", nextOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_9() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("value2", nextOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_10() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_11() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertNotNull(nextOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_12() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("option3", nextOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_13() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertEquals("value3", nextOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratorWithMultipleOptions_rbMr3_YzNG0_14() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "value1");
        Option option2 = new Option("option2", "value2");
        Option option3 = new Option("option3", "value3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        Iterator<Option> iterator = commandLine.iterator();
        Option nextOption = iterator.next();
        nextOption = iterator.next();
        nextOption = iterator.next();
        assertFalse(iterator.hasNext());
    }
}