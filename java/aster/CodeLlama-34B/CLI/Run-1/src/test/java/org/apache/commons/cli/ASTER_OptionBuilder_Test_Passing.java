/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOpt_PzYr0() {
        Option option = OptionBuilder.create('a');
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_vxRj1() {
        Option option = OptionBuilder.create("longOpt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_1() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(opt, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_2() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_3() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(null, option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_4() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(false, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_5() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_6() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(Option.UNINITIALIZED, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_7() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOption_fkwG0_9() {
        String opt = "a";
        Option option = OptionBuilder.create(opt);
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithDescription_YBNn2_yndj0() {
        Option option = OptionBuilder.withDescription("description").create("opt");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_1() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(opt, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_2() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_3() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(description, option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_4() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(false, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_5() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_6() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(Option.UNINITIALIZED, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_9() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithValidOptionAndDescription_Pzqz2_mpie0_10() {
        String opt = "a";
        String description = "description";
        Option option = OptionBuilder.withDescription(description).create(opt);
        assertEquals(null, option.getArgName());
    }
}