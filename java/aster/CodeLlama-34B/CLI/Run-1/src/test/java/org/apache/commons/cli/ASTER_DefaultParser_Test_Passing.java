/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_IoYp0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_IoYp0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_emptyString_tCWU0() {
        String token = "";
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_noEqualSign_uNbV1() {
        String token = "abc";
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_equalSignAtStart_IThg2() {
        String token = "=abc";
        int expected = 0;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_equalSignInMiddle_CMpP3() {
        String token = "ab=c";
        int expected = 2;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_equalSignAtEnd_LLtD4() {
        String token = "abc=";
        int expected = 3;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_multipleEqualSigns_nSQy5() {
        String token = "a=b=c";
        int expected = 1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidArguments_yFbo3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, new String[]{"-c", "-d"}, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(4, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WTsn3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        options.addOption("d", "ddd", true, "description");
        String[] arguments = new String[]{"-a", "-b", "value", "-c", "-d", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        properties.setProperty("d", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptions_ERGM3_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "value", "--charlie", "extra"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "value");
        properties.setProperty("charlie", "true");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("extra", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("b"), "betaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("c"), "charlieValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("e"), "echoValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("g"), "golfValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("i"), "indiaValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("k"), "kiloValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_13() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("m"), "mikeValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_15() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("o"), "oscarValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_17() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("q"), "quebecValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_19() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("s"), "sierraValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_21() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(cmd.getOptionValue("u"), "uniformValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndPartialMatchingAndStopAtNonOption_GwNa11() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{};
        boolean stopAtNonOption = true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithoutProperties_IyWH1() throws ParseException {
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_GIWd0_1_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", false, "delta option");
        options.addOption("e", "echo", true, "echo option");
        options.addOption("f", "foxtrot", false, "foxtrot option");
        options.addOption("g", "golf", true, "golf option");
        options.addOption("h", "hotel", false, "hotel option");
        options.addOption("i", "india", true, "india option");
        options.addOption("j", "juliet", false, "juliet option");
        options.addOption("k", "kilo", true, "kilo option");
        options.addOption("l", "lima", false, "lima option");
        options.addOption("m", "mike", true, "mike option");
        options.addOption("n", "november", false, "november option");
        options.addOption("o", "oscar", true, "oscar option");
        options.addOption("p", "papa", false, "papa option");
        options.addOption("q", "quebec", true, "quebec option");
        options.addOption("r", "romeo", false, "romeo option");
        options.addOption("s", "sierra", true, "sierra option");
        options.addOption("t", "tango", false, "tango option");
        options.addOption("u", "uniform", true, "uniform option");
        options.addOption("v", "victor", false, "victor option");
        options.addOption("w", "whiskey", true, "whiskey option");
        options.addOption("x", "x-ray", false, "x-ray option");
        options.addOption("y", "yankee", true, "yankee option");
        options.addOption("z", "zulu", false, "zulu option");
        String[] arguments = new String[]{"-a", "-b", "betaValue", "-c", "charlieValue", "-d", "-e", "echoValue", "-f", "-g", "golfValue", "-h", "-i", "indiaValue", "-j", "-k", "kiloValue", "-l", "-m", "mikeValue", "-n", "-o", "oscarValue", "-p", "-q", "quebecValue", "-r", "-s", "sierraValue", "-t", "-u", "uniformValue", "-v", "-w", "whiskeyValue", "-x", "-y", "yankeeValue", "-z", "zuluValue"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("beta", "betaValue");
        properties.setProperty("charlie", "charlieValue");
        properties.setProperty("delta", "deltaValue");
        properties.setProperty("echo", "echoValue");
        properties.setProperty("foxtrot", "foxtrotValue");
        properties.setProperty("golf", "golfValue");
        properties.setProperty("hotel", "hotelValue");
        properties.setProperty("india", "indiaValue");
        properties.setProperty("juliet", "julietValue");
        properties.setProperty("kilo", "kiloValue");
        properties.setProperty("lima", "limaValue");
        properties.setProperty("mike", "mikeValue");
        properties.setProperty("november", "novemberValue");
        properties.setProperty("oscar", "oscarValue");
        properties.setProperty("papa", "papaValue");
        properties.setProperty("quebec", "quebecValue");
        properties.setProperty("romeo", "romeoValue");
        properties.setProperty("sierra", "sierraValue");
        properties.setProperty("tango", "tangoValue");
        properties.setProperty("uniform", "uniformValue");
        properties.setProperty("victor", "victorValue");
        properties.setProperty("whiskey", "whiskeyValue");
        properties.setProperty("x-ray", "x-rayValue");
        properties.setProperty("yankee", "yankeeValue");
        properties.setProperty("zulu", "zuluValue");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_IoYp0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgs().length);
        assertEquals(0, cmd.getOptions().length);
    }
}