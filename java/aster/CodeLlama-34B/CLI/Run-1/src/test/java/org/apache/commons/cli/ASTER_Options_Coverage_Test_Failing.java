/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_Rgtp0_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt");
        assertEquals("--long-opt", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_HYTb1_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt-1");
        assertEquals("--long-opt-1", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_Rgtp0() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt");
        assertEquals(1, matchingOpts.size());
        assertEquals("--long-opt", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_HYTb1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt-1");
        assertEquals(1, matchingOpts.size());
        assertEquals("--long-opt-1", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOptionAndLongOption_JitZ5_kxxo0_3_fid3() {
        Options options = new Options();
        Option option = new Option("test", "test-option", false, "Test option");
        options.addOption(option);
        Assertions.assertFalse(options.hasOption("test"));
    }
}