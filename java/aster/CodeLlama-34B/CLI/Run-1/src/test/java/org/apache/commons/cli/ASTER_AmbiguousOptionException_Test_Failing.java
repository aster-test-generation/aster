/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_AmbiguousOptionException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_nullOption_lMnN3() {
        AmbiguousOptionException exception = new AmbiguousOptionException(null, Collections.singletonList("option1"));
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertTrue(matchingOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_nullOptions_Iwrx4() {
        AmbiguousOptionException exception = new AmbiguousOptionException("option1", null);
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertTrue(matchingOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_emptyOption_yInH5() {
        AmbiguousOptionException exception = new AmbiguousOptionException("", Collections.singletonList("option1"));
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertTrue(matchingOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_duplicateOptions_kNOE7_1() {
        AmbiguousOptionException exception = new AmbiguousOptionException("option1", Arrays.asList("option1", "option1"));
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_caseInsensitive_UdOK8_2() {
        AmbiguousOptionException exception = new AmbiguousOptionException("option1", Arrays.asList("Option1", "option2"));
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertTrue(matchingOptions.contains("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_caseSensitive_vnct9_1() {
        AmbiguousOptionException exception = new AmbiguousOptionException("option1", Arrays.asList("Option1", "option2"));
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_nullOptions_Iwrx4_fid1() {
        AmbiguousOptionException exception = new AmbiguousOptionException("option1", null);
        Collection<String> matchingOptions = exception.getMatchingOptions();
        assertNull(matchingOptions);
    }
}