/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Failing {
    private Supplier<String> defaultValue;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_mpPC0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String expected = "value";
        String actual = commandLine.getParsedOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_ValidOption_QBud1() {
        CommandLine commandLine = new CommandLine();
        String opt = "valid_option";
        Object result = commandLine.getOptionObject(opt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEvenNumberOfValues_tRGq0_1() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2", "value2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEvenNumberOfValues_tRGq0_2() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2", "value2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value1", props.get("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEvenNumberOfValues_tRGq0_3() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2", "value2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value2", props.get("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithOddNumberOfValues_IhrY1_1() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithOddNumberOfValues_IhrY1_2() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("value1", props.get("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithOddNumberOfValues_IhrY1_3() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals("true", props.get("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithChar_ImXt0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('a');
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithString_fCyy1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("a");
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_mpPC0_fid1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String expected = "value";
        String actual = commandLine.getParsedOptionValue(opt);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEvenNumberOfValues_tRGq0() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2", "value2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
        assertEquals("value1", props.get("key1"));
        assertEquals("value2", props.get("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithOddNumberOfValues_IhrY1() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<String>(Arrays.asList("key1", "value1", "key2"));
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(2, props.size());
        assertEquals("value1", props.get("key1"));
        assertEquals("true", props.get("key2"));
    }
}