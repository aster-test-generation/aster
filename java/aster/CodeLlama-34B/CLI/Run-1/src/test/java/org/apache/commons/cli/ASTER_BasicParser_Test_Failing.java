/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_empty_jdXC0() throws MissingOptionException {
        BasicParser parser = new BasicParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsNonNull_FZsP0() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectNumberOfOptions_miOc1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(5, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--help"));
        assertTrue(options.getOptions().contains("--version"));
        assertTrue(options.getOptions().contains("--long-option"));
        assertTrue(options.getOptions().contains("--short-option"));
        assertTrue(options.getOptions().contains("--option-group"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(Boolean.class, options.getOption("--help").getType());
        assertEquals(Boolean.class, options.getOption("--version").getType());
        assertEquals(String.class, options.getOption("--long-option").getType());
        assertEquals(String.class, options.getOption("--short-option").getType());
        assertEquals(OptionGroup.class, options.getOption("--option-group").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("Show help message", options.getOption("--help").getDescription());
        assertEquals("Show version information", options.getOption("--version").getDescription());
        assertEquals("A long option", options.getOption("--long-option").getDescription());
        assertEquals("A short option", options.getOption("--short-option").getDescription());
        assertEquals("An option group", options.getOption("--option-group").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectRequiredOptions_gRUH7() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(Arrays.asList("--help", "--version"), options.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_InvalidOption_ubdL3() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("invalidOption", "value");
        try {
            parser.processProperties(properties);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionWithoutValue_hTad4() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option", "");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Option 'option' requires a value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionWithInvalidValue_iXGM5() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option", "invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid value 'invalidValue' for option 'option'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_KqXm0() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_invalidOption_bhcM1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithArg_olSI2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
        assertEquals("arg", parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutArg_rinw3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
        assertNull(parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithRequiredOption_iVEE6() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
        assertTrue(parser.getOptions().getOption("-a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutRequiredOption_EKVn7() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
        assertFalse(parser.getOptions().getOption("-a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArguments_EIhb4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertNotNull(cmd);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOption_klAn5() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertNotNull(cmd);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("gamma", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalse_GpRB6() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertNotNull(cmd);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("gamma", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionAndMultipleNonOptionArguments_NjLC7() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertNotNull(cmd);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals(2, cmd.getArgList().size());
        assertEquals("gamma", cmd.getArgList().get(0));
        assertEquals("delta", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalseAndMultipleNonOptionArguments_agXa8() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertNotNull(cmd);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("alpha", cmd.getOptionValue("a"));
        assertEquals("beta", cmd.getOptionValue("b"));
        assertEquals(2, cmd.getArgList().size());
        assertEquals("gamma", cmd.getArgList().get(0));
        assertEquals("delta", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_nwWJ0() {
        BasicParser parser = new BasicParser();
        List<String> requiredOptions = parser.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_uMGL3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_KMjv4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertNotNull(cmd);
        assertEquals("", cmd.getOptionValue("alpha"));
        assertEquals("", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_DuCx5() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArgumentsAndPropertiesAndNullOptions_Slnv6() throws ParseException {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(null, arguments, properties);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptions_AcOp7() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptionsFalse_CaXz8() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
        assertEquals("value1", cmd.getOptionValue("alpha"));
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2_1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2_2() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--version"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2_3() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2_4() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionNames_quFW2_5() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().contains("--option-group"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3_1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(Boolean.class, options.getOption("--help").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3_2() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(Boolean.class, options.getOption("--version").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3_3() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(String.class, options.getOption("--long-option").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3_4() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(String.class, options.getOption("--short-option").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionTypes_wxjt3_5() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(OptionGroup.class, options.getOption("--option-group").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5_1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("Show help message", options.getOption("--help").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5_2() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("Show version information", options.getOption("--version").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5_3() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("A long option", options.getOption("--long-option").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5_4() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("A short option", options.getOption("--short-option").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsCorrectOptionDescriptions_QMSz5_5() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals("An option group", options.getOption("--option-group").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionWithoutValue_hTad4_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("option", true, "");
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("option", "");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Option 'option' requires a value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionWithInvalidValue_iXGM5_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("option", true, "");
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("option", "invalidValue");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid value 'invalidValue' for option 'option'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_KqXm0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_KqXm0_3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("-a", parser.getOptions().getOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithArg_olSI2_4() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("arg", parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutArg_rinw3_4() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertNotNull(parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithRequiredOption_iVEE6_3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("-a", parser.getOptions().getOption("-a").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutRequiredOption_EKVn7_2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals(0, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_nwWJ0_fid1() {
        BasicParser parser = new BasicParser();
        List<String> requiredOptions = parser.getRequiredOptions();
        assertNotNull(requiredOptions);
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    public void testParse_ksBt0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(5, cmd.getOptions().length);
    }

    @Test
    public void testParse_ksBt0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    public void testParse_ksBt0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getOptionValue("b"));
    }

    @Test
    public void testParse_ksBt0_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg4", cmd.getOptionValue("long-option"));
    }

    @Test
    public void testParse_ksBt0_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg4", cmd.getOptionProperties("long-option").getProperty("long-option"));
    }

    @Test
    public void testParse_KgGg0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, cmd.getOptions().length);
    }

    @Test
    public void testParse_KgGg0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue("a"));
        assertEquals("arg2", cmd.getOptionValue("b"));
        assertEquals("arg3", cmd.getOptionValue("long-option"));
        assertEquals("arg4", cmd.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_KqXm0_2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals(1, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_KqXm0_3_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("-a", parser.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutArg_rinw3_4_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertNull(parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithRequiredOption_iVEE6_4_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().getOption("-a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithoutRequiredOption_EKVn7_4_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertFalse(parser.getOptions().getOption("-a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArguments_EIhb4_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArguments_EIhb4_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOption_klAn5_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOption_klAn5_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalse_GpRB6_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalse_GpRB6_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionAndMultipleNonOptionArguments_NjLC7_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionAndMultipleNonOptionArguments_NjLC7_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalseAndMultipleNonOptionArguments_agXa8_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndStopAtNonOptionFalseAndMultipleNonOptionArguments_agXa8_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta", "gamma", "delta"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_uMGL3_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputs_uMGL3_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_KMjv4_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertEquals("", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndArgumentsAndNullProperties_KMjv4_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        CommandLine cmd = parser.parse(options, arguments, null);
        assertEquals("", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_DuCx5_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionsAndPropertiesAndNullArguments_DuCx5_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, null, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArgumentsAndPropertiesAndNullOptions_Slnv6_1() throws ParseException {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(null, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArgumentsAndPropertiesAndNullOptions_Slnv6_2() throws ParseException {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(null, arguments, properties);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArgumentsAndPropertiesAndNullOptions_Slnv6_3() throws ParseException {
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(null, arguments, properties);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptions_AcOp7_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptions_AcOp7_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptionsFalse_CaXz8_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidInputsAndIgnoreRequiredOptionsFalse_CaXz8_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value1");
        properties.setProperty("beta", "value2");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("beta"));
    }

    @Test
    public void testParse_ksBt0_4_fid3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "--long-option", "arg3"};
        Properties properties = new Properties();
        properties.setProperty("long-option", "arg4");
        boolean stopAtNonOption = false;
        CommandLine cmd = new BasicParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg3", cmd.getOptionValue("long-option"));
    }
}