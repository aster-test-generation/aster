/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    private CommandLine commandLine;
    private Util util;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_HsrT0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_iqqO1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_nhLK2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abcd");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_jJZN1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_pBUh0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa=value", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "value");
        properties.setProperty("bbb", "value");
        properties.setProperty("ccc", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_pBUh0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa=value", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "value");
        properties.setProperty("bbb", "value");
        properties.setProperty("ccc", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_pBUh0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa=value", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "value");
        properties.setProperty("bbb", "value");
        properties.setProperty("ccc", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleParseDouble_yKFQ0() throws ParseException {
        Options options = new Options();
        options.addOption("d", "double", true, "double option");
        String[] arguments = new String[]{"-d", "1.2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1.2, cmd.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_emptyExpectedOpts_ohTE0() throws org.apache.commons.cli.MissingOptionException {
        DefaultParser parser = new DefaultParser();
        try {
            parser.checkRequiredOptions();
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
            assertEquals(0, e.getMissingOptions().size());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_nonEmptyExpectedOpts_OAyc1() throws org.apache.commons.cli.MissingOptionException {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.checkRequiredOptions();
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
            assertEquals(1, e.getMissingOptions().size());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSkipParsing_mPas0() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Uvgl1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_QTja2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgument_tTfN3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kOhb4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        properties.setProperty("a", "arg");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAW5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_OmDM4_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_OmDM4_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_OmDM4_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WLkF0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WLkF0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WLkF0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_tuYK1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_tuYK1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_tuYK1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_LRnz2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "--arg4", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        properties.setProperty("arg4", "4");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_LRnz2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "--arg4", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        properties.setProperty("arg4", "4");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_LRnz2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "--arg4", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        properties.setProperty("arg4", "4");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_LRnz2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "--arg4", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        properties.setProperty("arg4", "4");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("4", cmd.getOptionValue("arg4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_Btjh1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_iCpC5_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "a short option");
        String[] arguments = new String[]{"-s", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZVkU4_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptionProperties("arg").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZVkU4_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionProperties("arg").getProperty("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRtJ5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg", "--", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_geGj1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_geGj1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_cfXT2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_cfXT2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ykCA3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ykCA3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kvLm5_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kvLm5_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_exfW1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_LxAJ2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_LxAJ2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_ZLbj1() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_iQmF4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", true, "description");
        String[] arguments = new String[]{"-p", "prop"};
        Properties properties = new Properties();
        properties.setProperty("prop", "value");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionProperties("p").getProperty("prop"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_gdCU1_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_EqYK2_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("short", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_JcJJ4_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        properties.setProperty("s", "prop");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("prop", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_djyc4_1() throws ParseException {
        Options options = new Options();
        options.addOption("D", "define", true, "define a system property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_djyc4_2() throws ParseException {
        Options options = new Options();
        options.addOption("D", "define", true, "define a system property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("define"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_djyc4_3() throws ParseException {
        Options options = new Options();
        options.addOption("D", "define", true, "define a system property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_djyc4_4() throws ParseException {
        Options options = new Options();
        options.addOption("D", "define", true, "define a system property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("define"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_XlQP5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUnknownToken_XlQP5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_wiTE2_1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a=arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_wiTE2_2() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a=arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_HFPa3_1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_HFPa3_2() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_thzg0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa", "--bb", "--cc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_thzg0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa", "--bb", "--cc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_thzg0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa", "--bb", "--cc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_awYE1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_awYE1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_awYE1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_RIbR2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_RIbR2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_RIbR2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nullOptions_Lvad0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nullArguments_mdlw1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nullProperties_nVUm2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_noStopAtNonOption_ojed4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_noStopAtNonOption_ojed4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_noStopAtNonOption_ojed4_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertFalse(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertFalse(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ROrU0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ROrU0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ROrU0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_gwik1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_gwik1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_gwik1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_WDIf2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_WDIf2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_WDIf2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_wMRp1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_JEjB2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_HGOq3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_plNQ4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_QHWC5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_hOPh6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse8_NMOg7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse9_sgJz8() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "--long", "value", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cVrN0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_awgR1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "-1", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "-1");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_MHhT2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_MNdq0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_MNdq0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_KVOa1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_KVOa1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("h", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_TWEB2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_TWEB2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_TWEB2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vdvK3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vdvK3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("h", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vdvK3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("v", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(4, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("h", cmd.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("v", cmd.getOptions()[3].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(6, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("h", cmd.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("v", cmd.getOptions()[3].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("help", cmd.getOptions()[4].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5_7() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("version", cmd.getOptions()[5].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_HCxY2_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_HCxY2_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_PMbl4_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_PMbl4_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_PMbl4_3() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_zTur5_1() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_zTur5_2() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_zTur5_3() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value3", cmd.getOptionValue("a", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value4", cmd.getOptionValue("b", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("beta value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("beta value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("beta value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_LEXa1_1() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", false, "description");
        options.addOption("bbb", false, "description");
        options.addOption("ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_LEXa1_2() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", false, "description");
        options.addOption("bbb", false, "description");
        options.addOption("ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_LEXa1_3() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", false, "description");
        options.addOption("bbb", false, "description");
        options.addOption("ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("bbb"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_LEXa1_4() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", false, "description");
        options.addOption("bbb", false, "description");
        options.addOption("ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("ccc"));
    }

    @Test
    public void testParse_jjkT0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    public void testParse_jjkT0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    public void testParse_jjkT0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    public void testParse_jjkT0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("delta", cmd.getOptionValue("d"));
    }

    @Test
    public void testParse_jjkT0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("epsilon", cmd.getOptionValue("e"));
    }

    @Test
    public void testParse_jjkT0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("zeta", cmd.getOptionValue("f"));
    }

    @Test
    public void testParse_jjkT0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("eta", cmd.getOptionValue("g"));
    }

    @Test
    public void testParse_jjkT0_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("theta", cmd.getOptionValue("h"));
    }

    @Test
    public void testParse_jjkT0_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("iota", cmd.getOptionValue("i"));
    }

    @Test
    public void testParse_jjkT0_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("kappa", cmd.getOptionValue("j"));
    }

    @Test
    public void testParse_jjkT0_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("lambda", cmd.getOptionValue("k"));
    }

    @Test
    public void testParse_jjkT0_13() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("mu", cmd.getOptionValue("l"));
    }

    @Test
    public void testParse_jjkT0_14() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("nu", cmd.getOptionValue("m"));
    }

    @Test
    public void testParse_jjkT0_15() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("xi", cmd.getOptionValue("n"));
    }

    @Test
    public void testParse_jjkT0_16() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("omicron", cmd.getOptionValue("o"));
    }

    @Test
    public void testParse_jjkT0_17() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("pi", cmd.getOptionValue("p"));
    }

    @Test
    public void testParse_jjkT0_18() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("rho", cmd.getOptionValue("q"));
    }

    @Test
    public void testParse_jjkT0_19() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("sigma", cmd.getOptionValue("r"));
    }

    @Test
    public void testParse_jjkT0_20() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("tau", cmd.getOptionValue("s"));
    }

    @Test
    public void testParse_jjkT0_21() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("upsilon", cmd.getOptionValue("t"));
    }

    @Test
    public void testParse_jjkT0_22() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("phi", cmd.getOptionValue("u"));
    }

    @Test
    public void testParse_jjkT0_23() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("chi", cmd.getOptionValue("v"));
    }

    @Test
    public void testParse_jjkT0_24() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("psi", cmd.getOptionValue("w"));
    }

    @Test
    public void testParse_jjkT0_25() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("omega", cmd.getOptionValue("x"));
    }

    @Test
    public void testParse_jjkT0_26() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("omicron", cmd.getOptionValue("y"));
    }

    @Test
    public void testParse_jjkT0_27() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        options.addOption("d", "delta", false, "description");
        options.addOption("e", "epsilon", false, "description");
        options.addOption("f", "zeta", false, "description");
        options.addOption("g", "eta", false, "description");
        options.addOption("h", "theta", false, "description");
        options.addOption("i", "iota", false, "description");
        options.addOption("j", "kappa", false, "description");
        options.addOption("k", "lambda", false, "description");
        options.addOption("l", "mu", false, "description");
        options.addOption("m", "nu", false, "description");
        options.addOption("n", "xi", false, "description");
        options.addOption("o", "omicron", false, "description");
        options.addOption("p", "pi", false, "description");
        options.addOption("q", "rho", false, "description");
        options.addOption("r", "sigma", false, "description");
        options.addOption("s", "tau", false, "description");
        options.addOption("t", "upsilon", false, "description");
        options.addOption("u", "phi", false, "description");
        options.addOption("v", "chi", false, "description");
        options.addOption("w", "psi", false, "description");
        options.addOption("x", "omega", false, "description");
        options.addOption("y", "omicron", false, "description");
        options.addOption("z", "zeta", false, "description");
        String[] arguments = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        boolean stopAtNonOption = false;
        CommandLine cmd = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertEquals("zeta", cmd.getOptionValue("z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_wiTE2_1_fid1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a=arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_wiTE2_2_fid1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a=arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_HFPa3_1_fid1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_HFPa3_2_fid1() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_wMRp1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals(0, commandLine.getOptions().length);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("-a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_JEjB2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("--long", commandLine.getOptions()[0].getOpt());
        assertEquals(null, commandLine.getOptions()[0].getValue());
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_HGOq3_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_plNQ4_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals("value", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_hOPh6_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--long", "--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("--long", commandLine.getOptions()[0].getOpt());
        assertEquals("--long", commandLine.getOptions()[1].getOpt());
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_ptvV2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a-b-c-");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_pBUh0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa=value", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "value");
        properties.setProperty("bbb", "value");
        properties.setProperty("ccc", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("aaa"));
        assertEquals("value", cmd.getOptionValue("bbb"));
        assertEquals("value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_qXoB1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "value");
        properties.setProperty("bbb", "value");
        properties.setProperty("ccc", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("aaa"));
        assertEquals("value", cmd.getOptionValue("bbb"));
        assertEquals("value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_OmDM4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getOptions().length);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("--unknown", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WLkF0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_tuYK1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "-1", "-b", "-2", "-c", "-3"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "-2");
        properties.setProperty("arg3", "-3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("-2", cmd.getOptionValue("b"));
        assertEquals("-3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_LRnz2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "argument 1");
        options.addOption("b", "arg2", false, "argument 2");
        options.addOption("c", "arg3", false, "argument 3");
        String[] arguments = new String[]{"-a", "1", "-b", "2", "-c", "3", "--", "--arg4", "4"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "1");
        properties.setProperty("arg2", "2");
        properties.setProperty("arg3", "3");
        properties.setProperty("arg4", "4");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("1", cmd.getOptionValue("a"));
        assertEquals("2", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
        assertEquals("4", cmd.getOptionValue("arg4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_iCpC5() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", false, "a short option");
        String[] arguments = new String[]{"-s", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZVkU4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptionProperties("arg").size());
        assertEquals("value", cmd.getOptionProperties("arg").getProperty("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRtJ5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", false, "argument");
        String[] arguments = new String[]{"arg", "--", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_geGj1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("arg", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_cfXT2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ykCA3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kvLm5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        properties.setProperty("arg", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("value", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_LxAJ2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("long"));
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_gdCU1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "a long option");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("l"));
        assertEquals("long", cmd.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseShortOption_EqYK2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "a short option");
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("short", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseProperties_JcJJ4() throws ParseException {
        Options options = new Options();
        options.addOption("s", "long", true, "description");
        String[] arguments = new String[]{"-s", "arg"};
        Properties properties = new Properties();
        properties.setProperty("s", "prop");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(cmd.hasOption("s"));
        assertEquals("prop", cmd.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseJavaProperty_djyc4() throws ParseException {
        Options options = new Options();
        options.addOption("D", "define", true, "define a system property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("D"));
        assertTrue(cmd.hasOption("define"));
        assertEquals("value", cmd.getOptionValue("D"));
        assertEquals("value", cmd.getOptionValue("define"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithEqual_wiTE2() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a=arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOptionWithoutEqual_HFPa3() throws ParseException {
        Options options = new Options();
        Option option = Option.builder("a").hasArg().build();
        options.addOption(option);
        String[] arguments = new String[]{"--a", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatching_thzg0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aa", "--bb", "--cc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_awYE1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_RIbR2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "aaa option");
        options.addOption("b", "bbb", false, "bbb option");
        options.addOption("c", "ccc", false, "ccc option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa value");
        properties.setProperty("bbb", "bbb value");
        properties.setProperty("ccc", "ccc value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("aaa value", cmd.getOptionValue("aaa"));
        assertEquals("bbb value", cmd.getOptionValue("bbb"));
        assertEquals("ccc value", cmd.getOptionValue("ccc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_stopAtNonOption_opeZ3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_noStopAtNonOption_ojed4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XKkX5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value1");
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_noMatchingOptions_ENYJ6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        properties.setProperty("c", "value1");
        properties.setProperty("d", "value2");
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
        assertFalse(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("b"));
        assertNull(cmd.getOptionValue("a"));
        assertNull(cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rjWo0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_pXbJ1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", true, "description");
        options.addOption("c", "ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "value", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "value");
        properties.setProperty("c", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ROrU0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_gwik1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "-1", "-b", "value2", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "-1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_WDIf2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg1", false, "arg1 description");
        options.addOption("b", "arg2", false, "arg2 description");
        options.addOption("c", "arg3", false, "arg3 description");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2", "--", "-c"};
        Properties properties = new Properties();
        properties.setProperty("arg1", "value1");
        properties.setProperty("arg2", "value2");
        properties.setProperty("arg3", "value3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cVrN0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("true", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_awgR1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "-1", "-b", "-c", "3"};
        Properties properties = new Properties();
        properties.setProperty("a", "-1");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
        assertEquals("true", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOption_MHhT2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        options.addOption("c", "count", true, "count");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "3", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        properties.setProperty("b", "true");
        properties.setProperty("c", "3");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("true", cmd.getOptionValue("b"));
        assertEquals("3", cmd.getOptionValue("c"));
        assertEquals("non-option", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_MNdq0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_KVOa1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("h", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_TWEB2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_vdvK3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
        assertEquals("h", cmd.getOptions()[0].getOpt());
        assertEquals("v", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_oEjU4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(4, cmd.getOptions().length);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
        assertEquals("h", cmd.getOptions()[2].getOpt());
        assertEquals("v", cmd.getOptions()[3].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_NKWz5() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--help", "--version", "-h", "-v", "--help", "--version"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(6, cmd.getOptions().length);
        assertEquals("help", cmd.getOptions()[0].getLongOpt());
        assertEquals("version", cmd.getOptions()[1].getLongOpt());
        assertEquals("h", cmd.getOptions()[2].getOpt());
        assertEquals("v", cmd.getOptions()[3].getOpt());
        assertEquals("help", cmd.getOptions()[4].getLongOpt());
        assertEquals("version", cmd.getOptions()[5].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongOption_HCxY2() throws ParseException {
        Options options = new Options();
        options.addOption("long", false, "description");
        String[] arguments = new String[]{"--long"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValue_PMbl4() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionWithValueAndEqualSign_zTur5() throws ParseException {
        Options options = new Options();
        options.addOption("long", true, "description");
        String[] arguments = new String[]{"--long=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("long", cmd.getOptions()[0].getLongOpt());
        assertEquals("value", cmd.getOptions()[0].getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_YHpQ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg1", true, "argument 1");
        options.addOption("b", "arg2", true, "argument 2");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
        assertEquals("value3", cmd.getOptionValue("a", "default"));
        assertEquals("value4", cmd.getOptionValue("b", "default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QQgv0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
        assertEquals("beta value", cmd.getOptionValue("b"));
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_FIsB1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"--alpha", "--beta", "--charlie"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
        assertEquals("beta value", cmd.getOptionValue("b"));
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMixedOptions_RRce2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "charlie", false, "charlie option");
        String[] arguments = new String[]{"-a", "--beta", "-c"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("charlie", "charlie value");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
        assertEquals("beta value", cmd.getOptionValue("b"));
        assertEquals("charlie value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_LEXa1() throws ParseException {
        Options options = new Options();
        options.addOption("aaa", false, "description");
        options.addOption("bbb", false, "description");
        options.addOption("ccc", false, "description");
        String[] arguments = new String[]{"--aaa", "--bbb", "--ccc"};
        Properties properties = new Properties();
        properties.setProperty("aaa", "aaa");
        properties.setProperty("bbb", "bbb");
        properties.setProperty("ccc", "ccc");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getOptions().length);
        assertTrue(cmd.hasOption("aaa"));
        assertTrue(cmd.hasOption("bbb"));
        assertTrue(cmd.hasOption("ccc"));
    }
}