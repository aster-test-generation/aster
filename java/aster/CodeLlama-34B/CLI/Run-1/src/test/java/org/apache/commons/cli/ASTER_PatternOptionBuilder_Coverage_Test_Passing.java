/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_1() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_2() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_3() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_4() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("a", optionA.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_5() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_6() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_7() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionB);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_8() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("b", optionB.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_9() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_10() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_11() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_12() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("c", optionC.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_13() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_bOZt0_14() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_1() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_2() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_3() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_4() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("a", optionA.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_5() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_6() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_7() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionB);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_8() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("b", optionB.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_9() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_10() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_11() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_12() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("c", optionC.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_13() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_zDtQ1_14() {
        String pattern = "abc!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertTrue(optionC.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_1() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_2() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_3() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_4() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("a", optionA.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_5() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_6() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_7() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionB);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_8() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("b", optionB.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_9() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_10() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_11() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_12() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals("c", optionC.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_13() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertTrue(optionC.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithType_ovYM2_14() {
        String pattern = "abc:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.isRequired());
    }
}