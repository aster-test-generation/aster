/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    private HelpFormatter formatter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithNegativeValue_orNA1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(-1 - 10);
        assertEquals(-10, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullFormatter_YFsk6() {
        HelpFormatter formatter = null;
        formatter.setLongOptSeparator("=");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullFormatterAndSeparator_MfBH7() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator(null);
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_NullText_jTgu5() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = null;
        StringBuffer expected = new StringBuffer();
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtEnd_AyVV2() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test", -1, -1);
        assertEquals(10, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_differentCase2_EoXO8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("not equal");
        assertNotEquals("not equal", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithNullFormatter_IToa7() {
        HelpFormatter formatter = null;
        String expected = "Usage:";
        String actual = formatter.getSyntaxPrefix();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_NegativePadding_leZQ5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(-1 - 10);
        assertEquals(-10, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidFormatter_qAUk8() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(-1);
            assertThrows(IllegalArgumentException.class, () -> formatter.setWidth(-1));
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_zeroWidth_invalidFormatter_MenT12() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(0);
            assertThrows(IllegalArgumentException.class, () -> formatter.setWidth(0));
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_maxWidth_invalidFormatter_ahJX14() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(Integer.MAX_VALUE);
            assertThrows(IllegalArgumentException.class, () -> formatter.setWidth(Integer.MAX_VALUE));
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_minWidth_invalidFormatter_gLPa16() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(Integer.MIN_VALUE);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_randomWidth_invalidFormatter_KYbW18() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(new Random().nextInt());
            assertThrows(IllegalArgumentException.class, () -> formatter.setWidth(new Random().nextInt()));
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_hjsf0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@2b9da1db", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithRequiredOption_xChB1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@4cd5241e", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithOptionGroup_COTv2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@69f34f39", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithRequiredOptionGroup_zfgF3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@7617fa47", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithOptionGroupWithRequiredOption_TKox4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@2622fa20", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithOptionGroupWithRequiredOptionAndRequiredOptionGroup_nxaL5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("java.io.PrintWriter@50929272", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLines_uAyo6() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n\n\\n\n");
        assertEquals("\\n\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NewLineWithTabs_IWFo8() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n	\t");
        assertEquals("\\n	", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NewLineWithMultipleTabs_cBrq10() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n		\t\t");
        assertEquals("\\n		", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NewLineWithMixedSpacesAndTabsAndNewLines_Ctwj13() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n 	 \t\n 	");
        assertEquals("\\n 	", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_QRgr0() {
        HelpFormatter formatter = new HelpFormatter();
        String longOptSeparator = formatter.getLongOptSeparator();
        assertEquals("=", longOptSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegativeLength_TZaE1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String padding = formatter.createPadding(-10);
        assertEquals("", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPaddingWithNegativeValue_orNA1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(-10);
        assertEquals(0, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_fWkR1() {
        String newLine = formatter.getNewLine();
        assertEquals("\n", newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLineWithCustomNewLine_FDoF2() {
        String customNewLine = "\\r\\n";
        formatter.setNewLine(customNewLine);
        String newLine = formatter.getNewLine();
        assertEquals(customNewLine, newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLineWithNullNewLine_OQKV3() {
        formatter.setNewLine(null);
        String newLine = formatter.getNewLine();
        assertNull(newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_WBtW1() {
        String optPrefix = formatter.getOptPrefix();
        assertEquals("-", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithCustomPrefix_CgYW2() {
        String customPrefix = "--";
        formatter.setOptPrefix(customPrefix);
        String optPrefix = formatter.getOptPrefix();
        assertEquals(customPrefix, optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullPrefix_BLVx3() {
        formatter.setOptPrefix(null);
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyPrefix_oBrq4() {
        formatter.setOptPrefix("");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNonWhitespacePrefix_EBma6() {
        formatter.setOptPrefix("-");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("-", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithMultiplePrefixes_oKKc7() {
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        String optPrefix = formatter.getOptPrefix();
        assertEquals("--", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithInvalidPrefix_xJhF8() {
        formatter.setOptPrefix("invalid");
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithNullFormatter_ubAG9() {
        formatter = null;
        String optPrefix = formatter.getOptPrefix();
        assertNull(optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefixWithEmptyFormatter_IWYg10() {
        formatter = new HelpFormatter();
        String optPrefix = formatter.getOptPrefix();
        assertEquals("", optPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_InvalidSeparator_WxGc5() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("invalid");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullFormatter_YFsk6_fid1() {
        HelpFormatter formatter = null;
        formatter.setLongOptSeparator("=");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullFormatterAndSeparator_MfBH7_fid1() {
        HelpFormatter formatter = null;
        formatter.setLongOptSeparator(null);
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_NullFormatterAndEmptySeparator_uAru8_fid1() {
        HelpFormatter formatter = null;
        formatter.setLongOptSeparator("");
        assertEquals("", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyString_VTDX0_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "";
        StringBuffer expected = new StringBuffer();
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ShortString_XxfC1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a short string.";
        StringBuffer expected = new StringBuffer();
        expected.append(text);
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NoWrap_jZnX1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test", 10, 0);
        assertEquals(-1, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtEnd_AyVV2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test", 10, 10);
        assertEquals(10, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtTab_sPCJ3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\t", 10, 10);
        assertEquals(11, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLine_iUqS4_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n", 10, 10);
        assertEquals(11, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtCarriageReturn_EDxF5_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\r", 10, 10);
        assertEquals(11, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtSpace_qHgc6_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test ", 10, 10);
        assertEquals(11, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtMultipleSpaces_iZVL7_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test   ", 10, 10);
        assertEquals(13, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtTabAndNewLine_vzru8_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\t\n", 10, 10);
        assertEquals(12, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLineAndTab_frVQ9_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n\t", 10, 10);
        assertEquals(12, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtCarriageReturnAndNewLine_LICW10_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\r\n", 10, 10);
        assertEquals(12, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WrapAtNewLineAndCarriageReturn_jESu11_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        int pos = formatter.findWrapPos("This is a test\n\r", 10, 10);
        assertEquals(12, pos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_differentCase2_EoXO8_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("-");
        formatter.setOptPrefix("--");
        assertNotEquals("--", formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_avxF1() {
        String expected = "Usage:";
        String actual = formatter.getSyntaxPrefix();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_InvalidPadding_JQVi1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(-1);
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_NegativePadding_leZQ5_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(-10);
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_RandomPadding_aMId9_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(new Random().nextInt());
        assertEquals(0, formatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidWidth_fPaq1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(-1);
        assertEquals(0, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_invalidFormatter_qAUk8_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_zeroWidth_invalidFormatter_MenT12_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_maxWidth_invalidFormatter_ahJX14_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(Integer.MAX_VALUE);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_minWidth_invalidFormatter_gLPa16_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(Integer.MIN_VALUE);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_randomWidth_invalidFormatter_KYbW18_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        try {
            formatter.setWidth(new Random().nextInt());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_hjsf0_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("myapp [a | b | c]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithRequiredOption_xChB1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("myapp [a | b | c]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithOptionGroup_COTv2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("myapp [a | b | c]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsageWithRequiredOptionGroup_zfgF3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        group.addOption(new Option("c", "gamma", false, "gamma option"));
        options.addOptionGroup(group);
        String app = "myapp";
        int width = 80;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, width, app, options);
        assertEquals("myapp [a | b | c]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_tPRy0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        Options options = new Options();
        int leftPad = 2;
        int descPad = 2;
        StringBuffer expected = new StringBuffer();
        expected.append("  -a, --alpha   Alpha option\n");
        expected.append("  -b, --beta    Beta option\n");
        expected.append("  -c, --gamma   Gamma option\n");
        StringBuffer actual = formatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals(expected.toString(), actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_InvalidNewLine_FKjb1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("invalid");
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_NullNewLine_MAOm2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine(null);
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_EmptyNewLine_JfQU3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("");
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_TabNewLine_IBvD5_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\t");
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_MultipleNewLines_uAyo6_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\\n\\n");
        assertEquals("\\n", formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_NGde1() {
        int width = formatter.getWidth();
        assertEquals(80, width);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_default_DRhN0() {
        HelpFormatter formatter = new HelpFormatter();
        String argName = formatter.getArgName();
        assertEquals("", argName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals("myprogram [options]", cmdLineSyntax);
        assertEquals("My Program", header);
        assertEquals("This is a test program", footer);
        assertEquals(3, options.getOptions().size());
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("b"));
        assertTrue(options.hasOption("c"));
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals("myprogram [options]", cmdLineSyntax);
        assertEquals("My Program", header);
        assertEquals("This is a test program", footer);
        assertEquals(3, options.getOptions().size());
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("b"));
        assertTrue(options.hasOption("c"));
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals("myprogram [options]", cmdLineSyntax);
        assertEquals("My Program", header);
        assertEquals("This is a test program", footer);
        assertEquals(3, options.getOptions().size());
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("b"));
        assertTrue(options.hasOption("c"));
        assertFalse(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_zYGe0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "Show this help message and exit");
        options.addOption("v", "version", false, "Show version information and exit");
        String cmdLineSyntax = "myapp [options]";
        String header = "My App";
        String footer = "Copyright (c) 2023 My Company";
        int leftPad = 2;
        int descPad = 4;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printHelp(pw, 80, cmdLineSyntax, header, options, leftPad, descPad, footer);
        String expected = "Usage: myapp [options]\n" +
                "My App\n" +
                "Options:\n" +
                "  -h, --help      Show this help message and exit\n" +
                "  -v, --version   Show version information and exit\n" +
                "Copyright (c) 2023 My Company\n";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithLeftPad0_vneW1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "Show this help message and exit");
        options.addOption("v", "version", false, "Show version information and exit");
        String cmdLineSyntax = "myapp [options]";
        String header = "My App";
        String footer = "Copyright (c) 2023 My Company";
        int leftPad = 0;
        int descPad = 4;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printHelp(pw, 80, cmdLineSyntax, header, options, leftPad, descPad, footer);
        String expected = "Usage: myapp [options]\n" +
                "My App\n" +
                "Options:\n" +
                "  -h, --help      Show this help message and exit\n" +
                "  -v, --version   Show version information and exit\n" +
                "Copyright (c) 2023 My Company\n";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithDescPad0_bmmH2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "Show this help message and exit");
        options.addOption("v", "version", false, "Show version information and exit");
        String cmdLineSyntax = "myapp [options]";
        String header = "My App";
        String footer = "Copyright (c) 2023 My Company";
        int leftPad = 2;
        int descPad = 0;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printHelp(pw, 80, cmdLineSyntax, header, options, leftPad, descPad, footer);
        String expected = "Usage: myapp [options]\n" +
                "My App\n" +
                "Options:\n" +
                "  -h, --help      Show this help message and exit\n" +
                "  -v, --version   Show version information and exit\n" +
                "Copyright (c) 2023 My Company\n";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNegativeLeftPad_BWTr3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "help", false, "Show this help message and exit");
        options.addOption("v", "version", false, "Show version information and exit");
        String cmdLineSyntax = "myapp [options]";
        String header = "My App";
        String footer = "Copyright (c) 2023 My Company";
        int leftPad = -2;
        int descPad = 4;
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printHelp(pw, 80, cmdLineSyntax, header, options, leftPad, descPad, footer);
        String expected = "Usage: myapp [options]\n" +
                "My App\n" +
                "Options:\n" +
                "  -h, --help      Show this help message and exit\n" +
                "  -v, --version   Show version information and exit\n" +
                "Copyright (c) 2023 My Company\n";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_MultipleSeparator_pXDF4_1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptSeparator("=");
        formatter.setLongOptSeparator(":");
        assertEquals("=", formatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_fXRf0_1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertEquals("myprogram [options]", cmdLineSyntax);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_hbFu1_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, true);
        assertEquals("myprogram [options]", cmdLineSyntax);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_NjcV2_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String cmdLineSyntax = "myprogram";
        String header = "My Program";
        String footer = "This is a test program";
        formatter.printHelp(cmdLineSyntax, header, options, footer, false);
        assertEquals("myprogram [options]", cmdLineSyntax);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefixWithCustomPrefix_NxjJ1_HldJ0() {
        HelpFormatter formatter = new HelpFormatter();
        String prefix = formatter.getLongOptPrefix();
        assertEquals("-", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_LongString_Tzok2_OYUm0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 1;
        String text = "This is a long string that will wrap to the next line.";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a long string that will wrap to the next line.");
        expected.append("\n");
        expected.append("This is a long string that will wrap to the next line.");
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_NextLineTabStop_pZrU3_qYum0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int nextLineTabStop = 10;
        String text = "This is a long string that will wrap to the next line.";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a long string that will wrap to the next line.");
        expected.append("\n");
        expected.append("          This is a long string that will wrap to the next line.");
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_Width_lCRD4_vSZg0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 40;
        int nextLineTabStop = 1;
        String text = "This is a long string that will wrap to the next line.";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a long string that will wrap to the next line.");
        expected.append("\n");
        expected.append("This is a long string that will wrap to the next line.");
        StringBuffer actual = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_emptyAndWhitespace_AUum6_Jhvj1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world");
        assertEquals("hello", result);
    }
}