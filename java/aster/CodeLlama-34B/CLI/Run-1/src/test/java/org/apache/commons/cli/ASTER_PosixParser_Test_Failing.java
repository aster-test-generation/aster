/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_empty_zpZo0() throws MissingOptionException {
        PosixParser parser = new PosixParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_blmL0_1() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_invalidOption_YLEW1() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        try {
            parser.processOption("-z", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -z", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithArg_SZZh2_3() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("-a", parser.getOptions().getOption("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithArg_SZZh2_4() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("arg", parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithLongOption_CzgL1() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assertTrue(options.hasOption("--help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithShortOption_fvKV2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assertNotNull(options);
        assertTrue(options.hasShortOption("-h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOption_fRkX5() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        Option option = options.getOption("-h");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithAllOptions_XFgx7_1() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        Collection<Option> allOptions = options.getOptions();
        assertNotNull(allOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithAllOptions_XFgx7_2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        Collection<Option> allOptions = options.getOptions();
        assertFalse(allOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithInvalidOption_CWgs8() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        Option option = options.getOption("-invalid");
        assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithInvalidOptionGroup_ArqR9() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        OptionGroup group = options.getOptionGroup(new Option("--invalid", "--invalid"));
        assertNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptionValue_PwmS6() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", null};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ybSe3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        try {
            parser.parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_NKEj5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        try {
            parser.parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertFalse(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("beta value", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("gamma value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_4() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_5() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_cyAM3_KKex0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--long-a", "--long-b", "--long-c"};
        boolean stopAtNonOption = true;
        String[] expected = new String[]{"--long-a", "--long-b", "--long-c"};
        try {
            String[] actual = parser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenStopAtNonOptionTrue_AuDH4_nDvg0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] expected = new String[]{"--aaa", "--bbb", "arg1", "arg2"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, true);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndNonEmptyArgumentsStopAtNonOptionTrueWithNonOptionTokens_SEVf8_owSg0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "--", "arg2"};
        String[] expected = new String[]{"--aaa", "--bbb", "arg1", "--", "arg2"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, true);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_blmL0() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_optionWithArg_SZZh2() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertTrue(parser.getOptions().hasOption("-a"));
        assertEquals(1, parser.getRequiredOptions().size());
        assertEquals("-a", parser.getRequiredOptions().get(0));
        assertEquals("arg", parser.getOptions().getOption("-a").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_yWwz0_fid2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithLongOption_CzgL1_fid2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assertTrue(options.hasLongOption("--help"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithShortOption_fvKV2_fid2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        assertTrue(options.hasShortOption("-h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptionGroup_ADDO3() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        OptionGroup group = options.getOptionGroup(new Option("-h", "--help"));
        assertNotNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMatchingOptions_WBRf6() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        List<String> matchingOptions = options.getMatchingOptions("-h");
        assertNotNull(matchingOptions);
        assertFalse(matchingOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithAllOptions_XFgx7() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        Collection<Option> allOptions = options.getOptions();
        assertNotNull(allOptions);
        assertFalse(allOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithInvalidOptionGroup_ArqR9_fid2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        OptionGroup group = options.getOptionGroup(new Option("-invalid", "--invalid"));
        assertNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_QZno2_fid2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-c", "arg2"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_JiyJ3_fid2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithExtraOptionValue_Cvbe4_fid2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized argument: arg3", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptionValue_GGqm5_fid2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", ""};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_xnoX7_fid2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "arg1", "-b", "invalid"};
        boolean stopAtNonOption = false;
        try {
            new PosixParser().parse(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_RLpA4_fid2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        PosixParser parser = new PosixParser();
        try {
            parser.parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_empty_wvcZ0_fid2() {
        PosixParser parser = new PosixParser();
        List<String> requiredOptions = parser.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("gamma value", cmd.getOptionValue("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_ZYaQ1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--delta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertFalse(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionValue_zegW2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("beta value", cmd.getOptionValue("b"));
        assertEquals("gamma value", cmd.getOptionValue("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertTrue(cmd.hasOption("c"));
        assertEquals("value", cmd.getOptionValue("b"));
        assertEquals("gamma value", cmd.getOptionValue("c"));
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_blmL0_2() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals(1, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_validOption_blmL0_3_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        parser.processOption("-a", iter);
        assertEquals("-a", parser.getRequiredOptions().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMatchingOptions_WBRf6_1() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        List<String> matchingOptions = options.getMatchingOptions("-h");
        assertNotNull(matchingOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMatchingOptions_WBRf6_2() {
        PosixParser parser = new PosixParser();
        Options options = parser.getOptions();
        List<String> matchingOptions = options.getMatchingOptions("-h");
        assertFalse(matchingOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hutV0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDefaultValue_Kiqb1_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, new Properties(), false);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WLUW2_5() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("a", "alpha");
        properties.setProperty("b", "beta");
        properties.setProperty("c", "gamma");
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("gamma", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("gamma value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uISC0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        properties.setProperty("gamma", "gamma value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("gamma value", cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingProperties_pOjC4_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "gamma", false, "gamma option");
        String[] arguments = new String[]{"-a", "-b", "value", "--gamma"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha value");
        properties.setProperty("beta", "beta value");
        PosixParser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("alpha value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsNull_YLqO2_sqyb0_fid3() {
        PosixParser parser = new PosixParser();
        parser.setOptions(null);
        assertNull(parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionsRequiredOptionsNull_VHxV3_CXKl0_fid3() {
        PosixParser parser = new PosixParser();
        parser.setOptions(null);
        assertEquals(Collections.emptyList(), parser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_1_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_2_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_3_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_4_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-b", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_RAUA0_jZLo0_5_fid3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", cmd.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndEmptyArguments_DLXz2_VaDf0_fid3() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[0];
        String[] expected = new String[]{"--aaa", "--bbb"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSign_wUKX3_blfn0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a=arg"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSignAndArgument_YWXb4_qzCf0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a=arg", "arg2"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg", "arg2"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndNoArgumentAndEqualSign_Mvmn8_WNXk0_fid3() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"-a="};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenNonEmptyOptionsAndNonEmptyArguments_mxlw3_VcCM0_fid3() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        options.addOption("b", "bbb", false, "description");
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] expected = new String[]{"--aaa", "--bbb", "arg1", "arg2"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndEqualSignAndMultipleArguments_zqUc5_MGDH0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", true, "description");
        String[] arguments = new String[]{"-a=arg", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg", "arg2", "arg3"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOptionAndNoArgumentAndEqualSignAndMultipleArguments_uXje9_UFGQ0() {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aaa", false, "description");
        String[] arguments = new String[]{"-a=arg", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        String[] expected = new String[]{"-a", "arg", "arg2", "arg3"};
        String[] actual = null;
        try {
            actual = parser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }
}