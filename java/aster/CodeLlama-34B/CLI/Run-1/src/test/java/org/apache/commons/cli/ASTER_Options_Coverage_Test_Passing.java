/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_startsWith_Rgtp0_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_contains_HYTb1_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("--long-opt-1");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_required_NMra0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        options.addOptionGroup(group);
        assertTrue(options.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_notRequired_EzuT1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        options.addOptionGroup(group);
        assertFalse(options.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsDuplicateKey_DuOJ0() {
        Options options = new Options();
        options.addOption("key1", "longKey1", false, "description1");
        Options newOptions = new Options();
        newOptions.addOption("key1", "longKey1", false, "description1");
        try {
            options.addOptions(newOptions);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assertions.assertEquals("Duplicate key: key1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsNoDuplicateKey_WvmJ1() {
        Options options = new Options();
        options.addOption("key1", "longKey1", false, "description1");
        Options newOptions = new Options();
        newOptions.addOption("key2", "longKey2", false, "description2");
        options.addOptions(newOptions);
        Assertions.assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_PaRv2_1() {
        Options options = new Options();
        Option option = new Option("test", "test-option", true, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_PaRv2_2() {
        Options options = new Options();
        Option option = new Option("test", "test-option", true, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasLongOption("test-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_zYPe3_1() {
        Options options = new Options();
        Option option = new Option("test", true, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_zYPe3_2() {
        Options options = new Options();
        Option option = new Option("test", true, "Test option");
        options.addOption(option);
        Assertions.assertFalse(options.hasLongOption("test-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOptionAndLongOption_JitZ5_kxxo0_1() {
        Options options = new Options();
        Option option = new Option("test", "test-option", false, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOptionAndLongOption_JitZ5_kxxo0_2() {
        Options options = new Options();
        Option option = new Option("test", "test-option", false, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasLongOption("test-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOptionAndLongOptionAndDescription_Ehri7_xasE0_4() {
        Options options = new Options();
        Option option = new Option("test", "test-option", false, "Test option");
        options.addOption(option);
        Assertions.assertEquals("Test option", options.getOption("test").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_PaRv2() {
        Options options = new Options();
        Option option = new Option("test", "test-option", true, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertTrue(options.hasLongOption("test-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_zYPe3() {
        Options options = new Options();
        Option option = new Option("test", true, "Test option");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("test"));
        Assertions.assertFalse(options.hasLongOption("test-option"));
    }
}