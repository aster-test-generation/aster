/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_ZtGv2() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(Collections.emptyList(), options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedWithNullOption_rPze4() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("null", "null", false, "null"));
        String selected = optionGroup.getSelected();
        assertEquals("null", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedWithEmptyOption_HjnS5_cfRU0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("", ""));
        String selected = optionGroup.getSelected();
        assertEquals("", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedInvalidOption_RWKv3_iRwJ0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid option: " + option, e.getMessage());
        } catch (AlreadySelectedException e) {
            assertEquals("Option already selected: " + option, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_null_ZtGv2_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_NullOptionGroup_akUB7_fid1() {
        OptionGroup optionGroup = null;
        assertFalse(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_xqnt0_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        assertEquals("", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedWithNullOption_rPze4_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(null);
        String selected = optionGroup.getSelected();
        assertEquals("", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_singleOption_FIGa1_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "alpha");
        optionGroup.addOption(option);
        String expected = "[a]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_multipleOptions_tMlV2_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "alpha");
        Option option2 = new Option("b", "beta");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        String expected = "[a, b]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_optionWithDescription_JPUr3_AqOa0_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("a", "alpha", true, "This is a description");
        optionGroup.addOption(option);
        String expected = "[a - This is a description]";
        String actual = optionGroup.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedOption_AEBV1_HHJy0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
            assertEquals(option, optionGroup.getSelected());
        } catch (AlreadySelectedException e) {
            fail("AlreadySelectedException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedAlreadySelected_Zszx2_TuLI0_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        try {
            optionGroup.setSelected(option1);
            optionGroup.setSelected(option2);
            fail("Expected AlreadySelectedException");
        } catch (AlreadySelectedException e) {
            assertEquals(option1, e.getOption());
            assertEquals(option2, e.getOption());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedWithMixedOptions6_rqsQ13_OGTq0_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(Option.builder("option1").build());
        optionGroup.addOption(Option.builder("option2").build());
        optionGroup.addOption(Option.builder("option3").build());
        optionGroup.addOption(Option.builder("option4").build());
        String selected = optionGroup.getSelected();
        assertEquals("option1", selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_invalid_XQzw3() {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("option1", "Option 1");
        Option option2 = new Option("option2", "Option 2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        Collection<Option> options = optionGroup.getOptions();
        assertNotEquals(2, options.size());
        assertFalse(options.contains(option1));
        assertFalse(options.contains(option2));
    }
}