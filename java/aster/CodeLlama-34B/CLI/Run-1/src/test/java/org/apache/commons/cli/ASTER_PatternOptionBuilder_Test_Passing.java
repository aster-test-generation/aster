/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_At_jsRZ0() {
        assertTrue(PatternOptionBuilder.isValueCode('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Colon_ROez1() {
        assertTrue(PatternOptionBuilder.isValueCode(':'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Percent_BfID2() {
        assertTrue(PatternOptionBuilder.isValueCode('%'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Plus_kdah3() {
        assertTrue(PatternOptionBuilder.isValueCode('+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Hash_ArDP4() {
        assertTrue(PatternOptionBuilder.isValueCode('#'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_LessThan_Fgsg5() {
        assertTrue(PatternOptionBuilder.isValueCode('<'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_GreaterThan_EpVC6() {
        assertTrue(PatternOptionBuilder.isValueCode('>'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Asterisk_dHCR7() {
        assertTrue(PatternOptionBuilder.isValueCode('*'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Slash_WHja8() {
        assertTrue(PatternOptionBuilder.isValueCode('/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCode_Exclamation_BzIb9() {
        assertTrue(PatternOptionBuilder.isValueCode('!'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_OBJECT_VALUE_FxrE0() {
        char ch = '@';
        Class<?> expected = PatternOptionBuilder.OBJECT_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_STRING_VALUE_pcKP1() {
        char ch = ':';
        Class<?> expected = PatternOptionBuilder.STRING_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_NUMBER_VALUE_LaeZ2() {
        char ch = '%';
        Class<?> expected = PatternOptionBuilder.NUMBER_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_CLASS_VALUE_rXoY3() {
        char ch = '+';
        Class<?> expected = PatternOptionBuilder.CLASS_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_DATE_VALUE_nNMt4() {
        char ch = '#';
        Class<?> expected = PatternOptionBuilder.DATE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_EXISTING_FILE_VALUE_ZPeL5() {
        char ch = '<';
        Class<?> expected = PatternOptionBuilder.EXISTING_FILE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_FILE_VALUE_ZYOg6() {
        char ch = '>';
        Class<?> expected = PatternOptionBuilder.FILE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_FILES_VALUE_XOjc7() {
        char ch = '*';
        Class<?> expected = PatternOptionBuilder.FILES_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_URL_VALUE_mNLo8() {
        char ch = '/';
        Class<?> expected = PatternOptionBuilder.URL_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_null_mtsY9() {
        char ch = ' ';
        Class<?> expected = null;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_char_UsJB0() {
        char ch = 'a';
        Object valueClass = PatternOptionBuilder.getValueClass(ch);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithEmptyString_xXjM0() {
        String pattern = "";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithSingleOption_gPVg1_1() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithSingleOption_gPVg1_2() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithSingleOption_gPVg1_3() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithSingleOption_gPVg1_4() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_1() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_2() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_3() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_4() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionA.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_5() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionB);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_6() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_7() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionB.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_8() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertNotNull(optionC);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_9() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2_10() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option optionA = options.getOption("a");
        Option optionB = options.getOption("b");
        Option optionC = options.getOption("c");
        assertFalse(optionC.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_YKRw3_1() {
        String pattern = "a!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_YKRw3_2() {
        String pattern = "a!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_YKRw3_3() {
        String pattern = "a!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_YKRw3_4() {
        String pattern = "a!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArg_xipE4_1() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArg_xipE4_2() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArg_xipE4_3() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArg_xipE4_4() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndRequired_GvjL5_1() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndRequired_GvjL5_2() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndRequired_GvjL5_3() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndRequired_GvjL5_4() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndConverter_OhIO6_5() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(Converter.DEFAULT, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndConverterAndType_yCwT7_6() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOption("a");
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_string_bugB1_uAlQ0() {
        String str = "abc";
        Object valueClass = PatternOptionBuilder.getValueClass(str.charAt(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClass_boolean_xAfp5_WojC0() {
        char b = 't';
        Object valueClass = PatternOptionBuilder.getValueClass(b);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithSingleOption_gPVg1() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertFalse(option.isRequired());
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithMultipleOptions_KvUH2() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(3, options.getOptions().size());
        Option optionA = options.getOption("a");
        assertNotNull(optionA);
        assertFalse(optionA.isRequired());
        assertFalse(optionA.hasArg());
        Option optionB = options.getOption("b");
        assertNotNull(optionB);
        assertFalse(optionB.isRequired());
        assertFalse(optionB.hasArg());
        Option optionC = options.getOption("c");
        assertNotNull(optionC);
        assertFalse(optionC.isRequired());
        assertFalse(optionC.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOption_YKRw3() {
        String pattern = "a!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertTrue(option.isRequired());
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArg_xipE4() {
        String pattern = "a:";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertFalse(option.isRequired());
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndRequired_GvjL5() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertTrue(option.isRequired());
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndConverter_OhIO6() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertTrue(option.isRequired());
        assertTrue(option.hasArg());
        assertEquals(Converter.DEFAULT, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithOptionWithArgAndConverterAndType_yCwT7() {
        String pattern = "a:!";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
        Option option = options.getOption("a");
        assertNotNull(option);
        assertTrue(option.isRequired());
        assertTrue(option.hasArg());
        assertEquals(Converter.DEFAULT, option.getConverter());
        assertEquals(String.class, option.getType());
    }
}