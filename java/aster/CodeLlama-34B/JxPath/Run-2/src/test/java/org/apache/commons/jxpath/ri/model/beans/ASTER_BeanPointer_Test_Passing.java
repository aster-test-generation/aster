/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    private Object bean;
    private QName name;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private Locale locale;
    @Mock
    private QName qName;
    @Mock
    private Object object;
    @Mock
    private BeanPointer other;
    @InjectMocks
    private BeanPointer beanPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithAtomic_InBT5() {
        QName name = new QName("name");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        BeanPointer beanPointer = new BeanPointer(name, new Object(), beanInfo, Locale.ENGLISH);
        assertEquals(name, beanPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer6_esmR5() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullBean_ySGQ1() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals("null()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_YZge2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Integer(10), new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals("10", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_kWwH3() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Boolean(true), new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals("true()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithStringBean_ClIt4() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), "hello", new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals("'hello'", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithDefault_SUYM5() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), new Locale("en"));
        assertEquals("/", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_wOIq0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        int length = beanPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithDynamicPropertyHandlerClass_eaad2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class, DynamicPropertyHandler.class), Locale.ENGLISH);
        int length = beanPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithAtomic_OvUv3() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class, true), Locale.ENGLISH);
        int length = beanPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue1_bGWc0() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        Object baseValue = beanPointer.getBaseValue();
        assertEquals(Object.class, baseValue.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue2_ARNS1() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        Object baseValue = beanPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue7_TOTC6() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        Object baseValue = beanPointer.getBaseValue();
        assertTrue(baseValue instanceof Object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue8_GmHl7() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        Object baseValue = beanPointer.getBaseValue();
        assertFalse(baseValue instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_kFTD0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNullLocale_ecqM11() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNullParent_hWhu12() {
        BeanPointer beanPointer = new BeanPointer(null, new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class));
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValue_cRWh0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), null, null, null);
        assertTrue(beanPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_Ifyl0() {
        QName name = new QName("name");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
        Locale locale = Locale.ENGLISH;
        BeanPointer pointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals(name.hashCode(), pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode3_rvmv2() {
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
        Locale locale = Locale.ENGLISH;
        BeanPointer pointer = new BeanPointer(null, bean, beanInfo, locale);
        assertEquals(0, pointer.hashCode());
    }
}