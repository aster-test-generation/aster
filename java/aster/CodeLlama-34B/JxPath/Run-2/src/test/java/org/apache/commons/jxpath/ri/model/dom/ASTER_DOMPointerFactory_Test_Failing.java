/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithNullFactory_iJrD2_fid1() {
        DOMPointerFactory factory = null;
        try {
            factory.getOrder();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("factory", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithQNameAndNode_QlhG0_EkhO0_2_fid1() {
        DOMPointerFactory factory = new DOMPointerFactory();
        QName name = new QName("test");
        Node node = Mockito.mock(Node.class);
        NodePointer pointer = factory.createNodePointer(name, node, Locale.ENGLISH);
        assertEquals(name, pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_XwfA0_FSzL0() {
        DOMPointerFactory factory = new DOMPointerFactory();
        int order = factory.getOrder();
        assertEquals(10, order);
    }
}