/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNullSession_igNC0() {
        HttpSessionAndServletContext handle = new HttpSessionAndServletContext(null, null);
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, handle);
        assertTrue(set.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNonNullSession_Tiga1_1() {
        HttpSession session = mock(HttpSession.class);
        when(session.getAttributeNames()).thenReturn(Collections.enumeration(Arrays.asList("attr1", "attr2")));
        HttpSessionAndServletContext handle = new HttpSessionAndServletContext(session, null);
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, handle);
        assertEquals(2, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNonNullSession_Tiga1_2() {
        HttpSession session = mock(HttpSession.class);
        when(session.getAttributeNames()).thenReturn(Collections.enumeration(Arrays.asList("attr1", "attr2")));
        HttpSessionAndServletContext handle = new HttpSessionAndServletContext(session, null);
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, handle);
        assertEquals(2, set.size());
        assertTrue(set.contains("attr1"));
        assertTrue(set.contains("attr2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNonNullSession_Tiga1_3() {
        HttpSession session = mock(HttpSession.class);
        when(session.getAttributeNames()).thenReturn(Collections.enumeration(Arrays.asList("attr1", "attr2")));
        HttpSessionAndServletContext handle = new HttpSessionAndServletContext(session, null);
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, handle);
        assertTrue(set.contains("attr1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNonNullSession_Tiga1_3_fid2() {
        HttpSession session = mock(HttpSession.class);
        when(session.getAttributeNames()).thenReturn(Collections.enumeration(Arrays.asList("attr1", "attr2")));
        HttpSessionAndServletContext handle = new HttpSessionAndServletContext(session, null);
        HttpSessionHandler handler = new HttpSessionHandler();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, handle);
        assertTrue(set.contains("attr2"));
    }
}