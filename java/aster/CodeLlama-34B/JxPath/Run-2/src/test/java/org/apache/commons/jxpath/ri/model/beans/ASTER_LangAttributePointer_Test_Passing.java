/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
    private LangAttributePointer langAttributePointer;
    LangAttributePointer langattributepointer;
    @Mock
    DOMNodePointer parent;
    @Mock
    Locale locale;
    @Mock
    KeywordVariables variables;
    @Mock
    QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersWithDifferentNodeTypes_yqdE5() {
        QName qname = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        langattributepointer = new LangAttributePointer(mock(DOMNodePointer.class));
        assertEquals(0, langattributepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNull_NvtM4() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(null);
        assertEquals(0, langAttributePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithVariablePointer_qTat6_1() {
        KeywordVariables keywordVariables = new KeywordVariables("xml", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("xml", "lang"));
        LangAttributePointer langAttributePointer = new LangAttributePointer(variablePointer);
        QName name = langAttributePointer.getName();
        assertEquals("xml", name.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithVariablePointer_qTat6_2() {
        KeywordVariables keywordVariables = new KeywordVariables("xml", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("xml", "lang"));
        LangAttributePointer langAttributePointer = new LangAttributePointer(variablePointer);
        QName name = langAttributePointer.getName();
        assertEquals("lang", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNull_uviv7() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(null);
        QName name = langAttributePointer.getName();
        assertNotNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertEquals(1, langattributepointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNullDOMNodePointer_mHJf3() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        DOMNodePointer domNodePointer = null;
        LangAttributePointer langAttributePointer = new LangAttributePointer(domNodePointer);
        int result = langAttributePointer.getLength();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_ZQFN0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyString_hBmp8_ZzSX0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
        QName name = langAttributePointer.getName();
        assertEquals(name, new QName("xml:lang"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithVariablePointer_qTat6() {
        KeywordVariables keywordVariables = new KeywordVariables("xml", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("xml", "lang"));
        LangAttributePointer langAttributePointer = new LangAttributePointer(variablePointer);
        QName name = langAttributePointer.getName();
        assertEquals("xml", name.getPrefix());
        assertEquals("lang", name.getName());
    }
}