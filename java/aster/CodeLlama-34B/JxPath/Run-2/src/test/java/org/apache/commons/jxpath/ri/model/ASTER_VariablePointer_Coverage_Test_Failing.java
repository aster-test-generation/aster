/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VariablePointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValue_phWY0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertTrue(variablePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_actual_index_lessThanZero_AxUK2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("qualifiedName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertThrows(JXPathInvalidAccessException.class, () -> pointer.remove());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_pgCC0_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertTrue(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_vMcj2_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        String expected = "$prefix:localName[1]";
        String actual = pointer.asPath();
        assertEquals(expected, actual);
    }
}