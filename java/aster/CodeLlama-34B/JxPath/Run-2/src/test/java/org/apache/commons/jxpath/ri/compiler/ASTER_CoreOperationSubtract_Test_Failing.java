/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNullContext_PBDH4_fid1() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant("5");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        Object result = operation.computeValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_True_uzos0_fid1() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("1");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertTrue(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Zero_kCWy5_fid1() {
        Constant arg1 = new Constant("0");
        Constant arg2 = new Constant("0");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertTrue(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Decimal_IjHN6_fid1() {
        Constant arg1 = new Constant("1.5");
        Constant arg2 = new Constant("1.5");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertTrue(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_ScientificNotation_nCUn7_fid1() {
        Constant arg1 = new Constant("1e10");
        Constant arg2 = new Constant("1e10");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertTrue(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithInvalidInput2_ywDX6_QURo1_fid1() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("abc");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        int result = operation.getPrecedence();
        assertEquals(10, result);
    }
}