/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    InfoSetUtil util = new InfoSetUtil();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_fsiR0() {
        Number number = new Double(10.5);
        double result = InfoSetUtil.doubleValue(number);
        assertEquals(10.5, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_XKQh1() {
        Boolean booleanValue = Boolean.TRUE;
        double result = InfoSetUtil.doubleValue(booleanValue);
        assertEquals(0.0, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_pcPI2() {
        String stringValue = "10.5";
        double result = InfoSetUtil.doubleValue(stringValue);
        assertEquals(10.5, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Null_hSbk5() {
        double result = InfoSetUtil.doubleValue(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_EmptyString_llbd6() {
        String stringValue = "";
        double result = InfoSetUtil.doubleValue(stringValue);
        assertEquals(0.0, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_InvalidString_ejZg7() {
        String stringValue = "invalid";
        double result = InfoSetUtil.doubleValue(stringValue);
        assertEquals(Double.NaN, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_InvalidObject_kjLm8() {
        Object object = new Object();
        double result = InfoSetUtil.doubleValue(object);
        assertEquals(Double.NaN, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_lhOs0() {
        Number number = new Double(1.0);
        assertTrue(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_Zero_YZnb1() {
        Number number = new Double(0.0);
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_NegativeZero_Hyga2() {
        Number number = new Double(-0.0);
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_NaN_AoxZ3() {
        Number number = new Double(Double.NaN);
        assertFalse(InfoSetUtil.booleanValue(number));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Boolean_XyJX4() {
        Boolean booleanValue = Boolean.TRUE;
        assertTrue(InfoSetUtil.booleanValue(booleanValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Boolean_False_LHjJ5() {
        Boolean booleanValue = Boolean.FALSE;
        assertFalse(InfoSetUtil.booleanValue(booleanValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_OZMR8() {
        String string = "hello";
        assertTrue(InfoSetUtil.booleanValue(string));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_Empty_gROd9() {
        String string = "";
        assertFalse(InfoSetUtil.booleanValue(string));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NodePointer_Null_LXaq11() {
        NodePointer pointer = null;
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Object_Ltfp12() {
        Object object = new Object();
        assertTrue(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Object_Null_ewAf13() {
        Object object = null;
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_czMh0() {
        util = new InfoSetUtil();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_MYaD1() {
        String input = "test";
        String expected = "test";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Number_PnNF2() {
        Number input = 123;
        String expected = "123";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Boolean_DbwG3() {
        Boolean input = true;
        String expected = "true";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_hwqS4() {
        Object input = null;
        String expected = "";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Double_sqPy8() {
        Double input = 123.456;
        String expected = "123.456";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Long_EWYQ9() {
        Long input = 1234567890L;
        String expected = "1234567890";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Integer_YAjy11() {
        Integer input = 123;
        String expected = "123";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Short_RINl12() {
        Short input = 123;
        String expected = "123";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Byte_rVbq13() {
        Byte input = 123;
        String expected = "123";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Character_KgDu14() {
        Character input = 'a';
        String expected = "a";
        String actual = util.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_Number_UPCu0_hMRJ0() {
        Number number = new Double(10);
        assertEquals(10, number.doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_MYaD1_Yhcy0() {
        String input = "test";
        String expected = "test";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Number_PnNF2_dPFF0() {
        Number input = 123;
        String expected = "123";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Boolean_DbwG3_NGjH0() {
        Boolean input = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_hwqS4_xYLl0() {
        Object input = null;
        String expected = "";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Double_sqPy8_iBRj0() {
        Double input = 123.456;
        String expected = "123.456";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Long_EWYQ9_hGDR0() {
        Long input = 1234567890L;
        String expected = "1234567890";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Float_dwnd10_dAZC0() {
        Float input = 123.456f;
        String expected = "123.456";
        String actual = InfoSetUtil.stringValue(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Integer_YAjy11_sAJv0() {
        Integer input = 123;
        String expected = "123";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Short_RINl12_hnHs0() {
        Short input = 123;
        String expected = "123";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Character_KgDu14_yqIm0() {
        Character input = 'a';
        String expected = "a";
        String actual = InfoSetUtil.stringValue(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Date_NgFZ15_PYBd0() {
        Date input = new Date();
        String expected = "2023-03-21";
        String actual = util.stringValue(input);
    }
}