/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Failing {
    private static Vector nodeFactories = new Vector();
    private static NodePointerFactory[] nodeFactoryArray = null;
    @Mock
    private JXPathContext parentContext;
    @Mock
    private Object contextBean;
    @Mock
    private NodePointer contextPointer;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private KeywordVariables variables;
    @Mock
    private NodePointerFactory factory;
    @InjectMocks
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private NodePointer rootPointer;
    @Mock
    private ExceptionHandler exceptionHandler;
    private static Compiler COMPILER = new TreeCompiler();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_1_dNpi0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[1]/title";
        Object value = "Harry Potter";
        Pointer pointer = context.createPathAndSetValue(xpath, value);
        assertEquals(pointer.toString(), "//book[1]/title");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_2_esdJ1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[1]/author";
        Object value = "J.K. Rowling";
        Pointer pointer = context.createPathAndSetValue(xpath, value);
        assertEquals(pointer.toString(), "//book[1]/author");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_3_tXPh2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[1]/price";
        Object value = 29.99;
        Pointer pointer = context.createPathAndSetValue(xpath, value);
        assertEquals(pointer.toString(), "//book[1]/price");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullContext_KBrv5() {
        JXPathContextReferenceImpl context = null;
        String xpath = "//book";
        try {
            context.iterate(xpath);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Context cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullParentContext_YHkI6() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        String xpath = "//book";
        try {
            context.iterate(xpath);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Parent context cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_cpyM0() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        Object result = JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
        assertNotNull(result);
        assertEquals(result.getClass().getName(), className);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionallyWithInvalidClassName_lCGV2() throws Exception {
        String className = "com.example.InvalidClassName";
        String existenceCheckClassName = "com.example.MyClass";
        try {
            JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot allocate com.example.InvalidClassName", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionallyWithInvalidExistenceCheckClassName_NZei3() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.InvalidClassName";
        try {
            JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot allocate com.example.MyClass", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerWithInvalidXPath_sbBJ1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[1]";
        Pointer pointer = context.getPointer(xpath);
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullExpression_TKzc6() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.createPath("//book", null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Expression cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompilePathWithInvalidXPath_cPxR4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[";
        try {
            context.compilePath(xpath);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertTrue(e.getMessage().contains("Invalid XPath expression"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompilePathWithInvalidContextBean_YfiZ5() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        String xpath = "//book";
        try {
            context.compilePath(xpath);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertTrue(e.getMessage().contains("Invalid context bean"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompilePathWithNullXPath_PQqT7() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.compilePath(null);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertTrue(e.getMessage().contains("XPath expression cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExceptionHandler() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, rootPointer);
        jxpathcontextreferenceimpl.setExceptionHandler(exceptionHandler);
        verify(rootPointer, times(1)).setExceptionHandler(exceptionHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        String xpath = "test";
        Expression expr = mock(Expression.class);
        Class requiredType = String.class;
        Object value = jxpathcontextreferenceimpl.getValue(xpath, expr, requiredType);
        assertEquals(value, "test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_1_lCEB0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = String.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_2_DpEB1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Integer.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_3_RfDk2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Boolean.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_4_Dajy3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Double.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_5_udGf4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Float.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 0.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_6_Leiy5() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Long.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 0L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_7_xuWq6() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Short.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, (short) 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_8_Revv7() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Byte.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, (byte) 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_9_SyvD8() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Character.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, '\0');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_10_XwQy9() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Object.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_QName_Object_Null_JXJA2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("namespace", "name");
        Object[] parameters = null;
        Function function = context.getFunction(functionName, parameters);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariablePointer_HFXr0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName name = new QName("test");
        NodePointer pointer = context.getVariablePointer(name);
        assertNotNull(pointer);
        assertEquals(name, pointer.getName());
        assertEquals(VariablePointerFactory.contextWrapper(context), pointer.getParent());
        assertEquals(context.getLocale(), pointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverWithParentContext_OdUZ1() {
        JXPathContextReferenceImpl parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, null);
        NamespaceResolver resolver = context.getNamespaceResolver();
        assertNotNull(resolver);
        assertTrue(resolver.isSealed());
        assertSame(parentContext.getNamespaceResolver(), resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_cpyM0_1() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        Object result = JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_cpyM0_2() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        Object result = JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
        assertEquals(result.getClass().getName(), className);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompilePathWithNullXPath_PQqT7_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.compilePath("");
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertTrue(e.getMessage().contains("XPath expression cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_2_DpEB1_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Integer.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_3_RfDk2_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Boolean.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_4_Dajy3_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Double.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_6_Leiy5_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Long.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, 1L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_7_xuWq6_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Short.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, (short) 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_8_Revv7_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Byte.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, (byte) 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_9_SyvD8_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Character.class;
        Object result = context.getValue(xpath, requiredType);
        assertEquals(result, '*');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_10_XwQy9_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//*";
        Class requiredType = Object.class;
        Object result = context.getValue(xpath, requiredType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_QName_Object_Null_JXJA2_fid1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("namespace", "name");
        Object[] parameters = null;
        Function function = context.getFunction(functionName, parameters);
        assertNotNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariablePointer_HFXr0_3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName name = new QName("test");
        NodePointer pointer = context.getVariablePointer(name);
        assertNull(VariablePointerFactory.contextWrapper(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariablePointer_HFXr0_3_fid3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName name = new QName("test");
        NodePointer pointer = context.getVariablePointer(name);
        assertEquals(VariablePointerFactory.contextWrapper(context), pointer.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariablePointer_HFXr0_4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName name = new QName("test");
        NodePointer pointer = context.getVariablePointer(name);
        assertEquals(context.getLocale(), pointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverWithParentContext_OdUZ1_3() {
        JXPathContextReferenceImpl parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, null);
        NamespaceResolver resolver = context.getNamespaceResolver();
        assertSame(parentContext.getNamespaceResolver(), resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithParentContext_slNw1_SZgc0_1() {
        JXPathContext parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, new Object());
        String prefix = context.getPrefix("http://www.example.com/namespace");
        assertNotNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithParentContext_slNw1_SZgc0_2() {
        JXPathContext parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, new Object());
        String prefix = context.getPrefix("http://www.example.com/namespace");
        assertEquals("ns0", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer1_jeUf0_Ffma0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book";
        Pointer pointer = context.getPointer(xpath, null);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer2_owWH1_heHO0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book";
        Pointer pointer = context.getPointer(xpath, null);
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSimpleVariable_VfSK0_TvPG0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        context.setValue("$var", "value");
        assertEquals("value", context.getNamespaceResolver().getPrefix("var"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverWithParentContextAndContextBean_WXEw4_BciN0_3() {
        JXPathContextReferenceImpl parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, null);
        Object contextBean = new Object();
        NamespaceResolver resolver = context.getNamespaceResolver();
        assertSame(parentContext.getNamespaceResolver(), resolver);
    }
}