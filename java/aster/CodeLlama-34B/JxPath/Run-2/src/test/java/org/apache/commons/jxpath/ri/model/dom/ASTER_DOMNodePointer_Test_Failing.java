/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    private Node node;
    DOMNodePointer domnodepointer;
    private String defaultNamespace;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullNode_pLcP7() {
        QName name = new QName("name");
        DOMNodePointer pointer = new DOMNodePointer(null, new Locale("en"), "id");
        NodeIterator iterator = pointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithNullNode_sQgs3() {
        Node node = null;
        String localName = DOMNodePointer.getLocalName(node);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullNode_VmEH3() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.ENGLISH, "null");
        Object value = pointer.getValue();
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullNode_SDpX7() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, new Locale("en-US"), null);
        String path = nodePointer.asPath();
        assertNull(path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNoPrefix_tJHn2_lgtJ0() {
        Node node = Mockito.mock(Node.class);
        String prefix = DOMNodePointer.getPrefix(node);
        assertEquals("", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_nodeIsNull_vLLT0_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(null, null, null);
        assertFalse(pointer.testNode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode2_fTFm1() {
        DOMNodePointer pointer = null;
        Object result = pointer.getImmediateNode();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullNode_hHIG1_fid1() {
        Node node = null;
        Locale locale = new Locale("en", "US");
        DOMNodePointer pointer = new DOMNodePointer(node, locale, "id");
        int expectedHashCode = 0;
        int actualHashCode = pointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullNode_VmEH3_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.ENGLISH, "null");
        Object value = pointer.getValue();
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullNode_SDpX7_fid1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, new Locale("en-US"), null);
        String path = nodePointer.asPath();
        assertEquals("", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNullNode_INkY8_fid1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, new Locale("en"), "id");
        assertEquals(null, nodePointer.getNamespaceURI("xml"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_nullNode_ePVg2_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(null, new Locale("en-US"), "id");
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameProcessingInstructionNode_nEXm1_ugqS0() {
        Node node = Mockito.mock(Node.class);
        Mockito.when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        Mockito.when(node.getNodeName()).thenReturn("target");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.ENGLISH, "id");
        QName name = domNodePointer.getName();
        assertEquals("target", name.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNoPrefix_tJHn2_lgtJ0_fid1() {
        Node node = Mockito.mock(Node.class);
        String prefix = DOMNodePointer.getPrefix(node);
        assertNull(prefix);
    }
}