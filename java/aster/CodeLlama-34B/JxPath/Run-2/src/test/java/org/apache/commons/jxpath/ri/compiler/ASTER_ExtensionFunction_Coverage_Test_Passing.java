/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_ExtensionFunction_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_oZNG0() {
        QName functionName = new QName("myFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        assertEquals("myFunction()", function.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPrefix_mxzT3() {
        QName functionName = new QName("myPrefix", "myFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        assertEquals("myPrefix:myFunction()", function.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithFunctionReturningNonNodeSetAndNonNull_OgbZ8_HhAy1_1() {
        ExtensionFunction function = new ExtensionFunction(new QName("test"), new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        Object result = function.computeValue(context);
        assertFalse(result instanceof NodeSetContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithFunctionReturningNonNodeSetAndNonNull_OgbZ8_HhAy1_2() {
        ExtensionFunction function = new ExtensionFunction(new QName("test"), new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        Object result = function.computeValue(context);
        assertNotNull(result);
    }
}