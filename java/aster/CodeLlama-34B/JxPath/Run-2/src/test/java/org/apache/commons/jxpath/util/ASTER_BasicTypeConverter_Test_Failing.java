/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.Pointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithUnsupportedType_dtVV9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNullObjectAndUnsupportedType_wbbM10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndUnsupportedType_nVqs11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert("", Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithBooleanAndUnsupportedType_PLSh12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(true, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNumberAndUnsupportedType_mRUm13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(1, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArrayAndUnsupportedType_Logu14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object[0], Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithCollectionAndUnsupportedType_coaK15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new ArrayList<Object>(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Interface_iIga4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Null_marv6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_AbstractClass_HZYx2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(AbstractList.class);
        assertTrue(collection instanceof AbstractList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_InvalidType_jrlb5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            Collection collection = converter.allocateCollection(String.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
            assertEquals("Cannot create collection of type: " + String.class, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToPrimitive_sDQT9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[10];
        Object result = converter.convert(array, int.class);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToPrimitive_QKSc11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        Object result = converter.convert(collection, int.class);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_NullType_ewqo11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(null, 10.0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertFalse(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertFalse(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Null_fFGp8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithPointer_XeAC8_XDfs0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Pointer.class, Pointer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToPrimitive_sDQT9_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[10];
        Object result = converter.convert(array, int.class);
        assertNull(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_NonExistentClass_Csnv5_vnBX0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertEquals(sortedSet, unmodifiableCollection);
        assertTrue(unmodifiableCollection instanceof SortedSet);
        assertTrue(unmodifiableCollection instanceof Collection);
        assertFalse(unmodifiableCollection instanceof List);
        assertFalse(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertEquals(collection, unmodifiableCollection);
        assertTrue(unmodifiableCollection instanceof Collection);
        assertFalse(unmodifiableCollection instanceof List);
        assertFalse(unmodifiableCollection instanceof SortedSet);
        assertFalse(unmodifiableCollection instanceof Set);
    }
}