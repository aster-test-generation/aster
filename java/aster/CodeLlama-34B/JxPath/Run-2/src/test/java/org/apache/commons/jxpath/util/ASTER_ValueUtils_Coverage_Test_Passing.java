/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    private interface TestInterface {
    }
    private ValueUtils valueUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_notInstanceOfContainer_OfXM1() {
        Object object = new Object();
        Object result = ValueUtils.getValue(object);
        assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_FanN0() {
        Object[] array = new Object[]{"a", "b", "c"};
        Object value = ValueUtils.getValue(array, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_rCmU1() {
        List<Object> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        Object value = ValueUtils.getValue(list, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_NlKm2() {
        Collection<Object> collection = new HashSet<>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object value = ValueUtils.getValue(collection, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NullCollection_QfSx3() {
        Collection<Object> collection = null;
        Object value = ValueUtils.getValue(collection, 1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyCollection_KcLW4() {
        Collection<Object> collection = new HashSet<>();
        Object value = ValueUtils.getValue(collection, 1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NegativeIndex_hBpE5() {
        Collection<Object> collection = new HashSet<>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object value = ValueUtils.getValue(collection, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_OutOfBoundsIndex_uEye6() {
        Collection<Object> collection = new HashSet<>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Object value = ValueUtils.getValue(collection, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintForInterface_xNTe0() {
        Class clazz = TestInterface.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_Fgnd0() {
        Object[] array = new Object[]{1, 2, 3};
        ValueUtils.setValue(array, 1, 4);
        assertEquals(4, array[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_CKRz1() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ValueUtils.setValue(list, 1, 4);
        assertEquals(4, list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ConvertibleValue_VMJu3() {
        Object[] array = new Object[]{1, 2, 3};
        ValueUtils.setValue(array, 1, "4");
        assertEquals("4", array[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullCollection_lRKC4() {
        Object[] array = null;
        ValueUtils.setValue(array, 1, 4);
        assertTrue(array == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullValue_gDsA5() {
        Object[] array = new Object[]{1, 2, 3};
        ValueUtils.setValue(array, 1, null);
        assertTrue(array[1] == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_1() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertTrue(result instanceof Object[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_2() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertEquals(4, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_3() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertEquals(1, ((Object[]) result)[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_4() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertEquals(2, ((Object[]) result)[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_5() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertEquals(4, ((Object[]) result)[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0_6() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertEquals(5, ((Object[]) result)[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexGreaterThanLength_lDZa2() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        try {
            ValueUtils.remove(array, 6);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 6", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_1() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertTrue(result instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_2() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, ((List) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_3() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(1, ((List) result).get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_4() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(2, ((List) result).get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_5() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(4, ((List) result).get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3_6() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(5, ((List) result).get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexGreaterThanSize_wDhe5() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        try {
            ValueUtils.remove(list, 6);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 6", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_nullMethod_qDJm0() {
        Method method = null;
        Method result = ValueUtils.getAccessibleMethod(method);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Array_IndexLessThanLength_hsEO0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertTrue(result instanceof Object[]);
        assertEquals(4, ((Object[]) result).length);
        assertEquals(1, ((Object[]) result)[0]);
        assertEquals(2, ((Object[]) result)[1]);
        assertEquals(4, ((Object[]) result)[2]);
        assertEquals(5, ((Object[]) result)[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_List_IndexLessThanSize_CkAD3() {
        List<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
        Object result = ValueUtils.remove(list, 2);
        assertTrue(result instanceof List);
        assertEquals(4, ((List) result).size());
        assertEquals(1, ((List) result).get(0));
        assertEquals(2, ((List) result).get(1));
        assertEquals(4, ((List) result).get(2));
        assertEquals(5, ((List) result).get(3));
    }
}