/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationGreaterThanOrEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_GreaterThanOrEqual_eHsr0() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("10"), new Constant("5"));
        assertTrue(op.evaluateCompare(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_LessThan_mHYv1() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("10"), new Constant("5"));
        assertFalse(op.evaluateCompare(-1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol1_tjDK0() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("1"), new Constant("2"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol2_qNpt1() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("3"), new Constant("4"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol3_NZya2() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("5"), new Constant("6"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol4_Hxgv3() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("7"), new Constant("8"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol5_LsrS4() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("9"), new Constant("10"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol6_GrTp5() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("11"), new Constant("12"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol7_pryD6() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("13"), new Constant("14"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol8_nXFE7() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("15"), new Constant("16"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol9_GSVG8() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("17"), new Constant("18"));
        assertEquals(">=", op.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol10_XMpl9() {
        CoreOperationGreaterThanOrEqual op = new CoreOperationGreaterThanOrEqual(new Constant("19"), new Constant("20"));
        assertEquals(">=", op.getSymbol());
    }
}