/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName1_kEDi0() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName, variableName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName2_PcfI1() {
        QName qName = new QName("qualifiedName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName, variableName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName3_NLoF2_1() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName.getPrefix(), variableName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName3_NLoF2_2() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName.getName(), variableName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName4_UHCE3() {
        QName qName = new QName("qualifiedName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName.getName(), variableName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_QName_nIXS0() {
        QName varName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(varName);
        assertFalse(variableReference.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_Null_gSdB2() {
        VariableReference variableReference = new VariableReference(null);
        assertFalse(variableReference.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithQualifiedName_hylW0() {
        QName qName = new QName("prefix", "localName");
        VariableReference varRef = new VariableReference(qName);
        assertEquals("$prefix:localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLocalNameOnly_HIoj1() {
        QName qName = new QName("localName");
        VariableReference varRef = new VariableReference(qName);
        assertEquals("$localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullQualifiedName_RseG2() {
        QName qName = new QName(null, "localName");
        VariableReference varRef = new VariableReference(qName);
        assertEquals("$localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullLocalName_StKb3() {
        QName qName = new QName("prefix", null);
        VariableReference varRef = new VariableReference(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyQualifiedName_uqQp4() {
        QName qName = new QName("", "localName");
        VariableReference varRef = new VariableReference(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLocalName_KnST5() {
        QName qName = new QName("prefix", "");
        VariableReference varRef = new VariableReference(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithWhitespaceQualifiedName_wDGG6() {
        QName qName = new QName("prefix ", "localName");
        VariableReference varRef = new VariableReference(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSpecialCharactersQualifiedName_ffHp8() {
        QName qName = new QName("prefix!", "localName");
        VariableReference varRef = new VariableReference(qName);
        assertEquals("$prefix!:localName", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSpecialCharactersLocalName_oSMI9() {
        QName qName = new QName("prefix", "localName!");
        VariableReference varRef = new VariableReference(qName);
        assertEquals("$prefix:localName!", varRef.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_Lsei0() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        assertFalse(variableReference.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithNullQName_jXnX1() {
        QName qName = null;
        VariableReference variableReference = new VariableReference(qName);
        assertFalse(variableReference.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_String_VORO1_qoWb0() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        assertFalse(variableReference.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableName3_NLoF2() {
        QName qName = new QName("prefix", "localName");
        VariableReference variableReference = new VariableReference(qName);
        QName variableName = variableReference.getVariableName();
        assertEquals(qName.getPrefix(), variableName.getPrefix());
        assertEquals(qName.getName(), variableName.getName());
    }
}