/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_iXrm0() {
        Object object = true;
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_AoAo3() {
        Object object = "1.0";
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_xACc4() {
        Object object = 1.0;
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_InvalidString_WAau6() {
        Object object = "invalid";
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Boolean_IKYj0() {
        Boolean bool = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(bool);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_YbAY3() {
        String expected = "";
        String actual = InfoSetUtil.stringValue(null);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Number_cyIa4() {
        Number number = 10;
        String expected = "10";
        String actual = InfoSetUtil.stringValue(number);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Object_jpfK5() {
        Object object = new Object();
        String expected = object.toString();
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_YvcT6() {
        String string = "test";
        String expected = "test";
        String actual = InfoSetUtil.stringValue(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_instanceofNumber_ykWC0() {
        Object object = new Integer(10);
        Number expected = new Integer(10);
        Number actual = InfoSetUtil.number(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_instanceofString_lMGU2() {
        Object object = "10.5";
        Number expected = new Double(10.5);
        Number actual = InfoSetUtil.number(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_eMLn0() {
        Object object = new Double(1.0);
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_Zero_jfAT1() {
        Object object = new Double(0.0);
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_NegativeZero_grtj2() {
        Object object = new Double(-0.0);
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_NaN_LJuX3() {
        Object object = new Double(Double.NaN);
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Boolean_gMus4() {
        Object object = Boolean.TRUE;
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_bxpr7() {
        Object object = "test";
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_Empty_herB8() {
        Object object = "";
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_null_WbDV6_fid1() {
        Object object = null;
        Number expected = null;
        Number actual = InfoSetUtil.number(object);
        assertNull(expected);
    }
}