/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Failing {
    private static int DEFAULT_PROPERTY_COUNT = 16;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_empty_NOWv0() {
        ServletContextHandler contextHandler = new ServletContextHandler();
        String[] propertyNames = contextHandler.getPropertyNames(new HashSet<String>());
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithNullContext_DIPG1() {
        ServletContextHandler contextHandler = new ServletContextHandler();
        ServletContext context = null;
        String property = "property";
        assertNull(contextHandler.getProperty(context, property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullContext_XYXg1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = null;
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_Rgvs0_xPkQ0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullProperty_Ybpr2_iORh0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = new MockServletContext();
        String property = null;
        Object value = new Object();
        handler.setProperty(context, property, value);
        assertNull(context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_UHhW3_xIYo0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = new MockServletContext();
        String property = "property";
        Object value = null;
        handler.setProperty(context, property, value);
        assertNull(context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentValue_cJRw4_aWDb0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value1 = new Object();
        Object value2 = new Object();
        handler.setProperty(context, property, value1);
        handler.setProperty(context, property, value2);
        assertNull(value1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_empty_NOWv0_fid1() {
        ServletContextHandler contextHandler = new ServletContextHandler();
        String[] propertyNames = contextHandler.getPropertyNames(null);
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_invalidContext_Kspp4() {
        ServletContextHandler contextHandler = new ServletContextHandler();
        String[] propertyNames = contextHandler.getPropertyNames(new Object());
        assertEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullContext_XYXg1_fid1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = null;
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        assertNull(context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNull_UyOG2() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        servletContextHandler.collectPropertyNames(set, null);
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_Rgvs0_xPkQ0_fid3() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        assertEquals(value, context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentValue_cJRw4_aWDb0_1_fid3() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value1 = new Object();
        Object value2 = new Object();
        handler.setProperty(context, property, value1);
        handler.setProperty(context, property, value2);
        assertEquals(value1, context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentValue_cJRw4_aWDb0_2() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value1 = new Object();
        Object value2 = new Object();
        handler.setProperty(context, property, value1);
        handler.setProperty(context, property, value2);
        assertEquals(value2, context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithSameValue_iPii5_wVRm0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = mock(ServletContext.class);
        String property = "property";
        Object value = new Object();
        handler.setProperty(context, property, value);
        handler.setProperty(context, property, value);
        assertEquals(value, context.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentProperty_tNrV6_Vmlj0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        MockServletContext context = new MockServletContext();
        String property1 = "property1";
        String property2 = "property2";
        Object value = new Object();
        handler.setProperty(context, property1, value);
        handler.setProperty(context, property2, value);
        assertEquals(value, context.getAttribute(property1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentProperty_tNrV6_Vmlj0_2() {
        ServletContextHandler handler = new ServletContextHandler();
        MockServletContext context = new MockServletContext();
        String property1 = "property1";
        String property2 = "property2";
        Object value = new Object();
        handler.setProperty(context, property1, value);
        handler.setProperty(context, property2, value);
        assertEquals(value, context.getAttribute(property2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentContext_ndoE8_QwJU0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context1 = new MockServletContext();
        ServletContext context2 = new MockServletContext();
        String property = "property";
        Object value = new Object();
        handler.setProperty(context1, property, value);
        handler.setProperty(context2, property, value);
        assertEquals(value, context1.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentContext_ndoE8_QwJU0_2() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context1 = new MockServletContext();
        ServletContext context2 = new MockServletContext();
        String property = "property";
        Object value = new Object();
        handler.setProperty(context1, property, value);
        handler.setProperty(context2, property, value);
        assertEquals(value, context2.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithSameContext_yHfk9_QWdj0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext context = new MockServletContext();
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, context);
        assertEquals(0, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithHttpSessionAndServletContext_EWUN0_dVVy0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(null, null);
        HashSet<String> set = new HashSet<>();
        servletContextHandler.collectPropertyNames(set, httpSessionAndServletContext);
        assertEquals(1, set.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithServletContext_CxEC1_JyzV0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        MockServletContext servletContext = new MockServletContext();
        HashSet<String> set = new HashSet<>();
        servletContextHandler.collectPropertyNames(set, servletContext);
        assertEquals(1, set.size());
    }
}