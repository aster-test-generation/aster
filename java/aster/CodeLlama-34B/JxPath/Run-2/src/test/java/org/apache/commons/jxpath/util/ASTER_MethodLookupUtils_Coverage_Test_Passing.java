/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatchingConstructor_IuzZ1() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"foo", "bar"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatchingConstructor_WithNullParameter_aHHZ5() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"foo", null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullParameters_yKBA0() throws Exception {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupMethod";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupMethod(targetClass, name, parameters);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoMatchingParameters_qcak1() throws Exception {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupMethod";
        Object[] parameters = new Object[]{"parameter1", "parameter2"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, name, parameters);
        assertNull(method);
    }
}