/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_NonNull_lISQ0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_Empty_ASHS1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertTrue(pointers.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_NonEmpty_QggH2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_Modifiable_PYNP3() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertTrue(pointers.getClass().getName().contains("Unmodifiable"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_Parameter_JbPX6() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertEquals(0, pointers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_emptyPointers_Ndsv0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<Object> values = basicNodeSet.getValues();
        assertTrue(values.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyPointers_pqyV0() {
        BasicNodeSet nodeSet = new BasicNodeSet();
        assertEquals("[]", nodeSet.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_NullPointer_cxpx1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        Pointer pointer = null;
        basicNodeSet.add(pointer);
        assertTrue(basicNodeSet.getPointers().contains(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_InvalidPointer_vpKT1_goyn0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        Pointer pointer = null;
        basicNodeSet.remove(pointer);
        assertFalse(basicNodeSet.getPointers().contains(pointer));
    }
}