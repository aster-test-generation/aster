/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CollectionPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_AtomicValue_rsLQ1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Integer(1), null);
        assertTrue(collectionPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NonAtomicValue_dIhO2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), null);
        assertFalse(collectionPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_cWQg0() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), Locale.ENGLISH);
        NodePointer nodePointer = collectionPointer.namespacePointer("namespace");
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator1_TVhd0_Nvqr0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ENGLISH);
        NodeTest nodeTest = null;
        boolean reverse = false;
        NodePointer startWith = null;
        NodeIterator iterator = collectionPointer.childIterator(nodeTest, reverse, startWith);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setValue(String expression, Object value) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNoParentAndIndex_kODJ2_OgGE0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ENGLISH);
        collectionPointer.setIndex(1);
        String path = collectionPointer.asPath();
        assertEquals("/.[2]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNoParentAndNoIndex_Umka3_khNE0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        String path = collectionPointer.asPath();
        assertEquals("/", path);
    }
}