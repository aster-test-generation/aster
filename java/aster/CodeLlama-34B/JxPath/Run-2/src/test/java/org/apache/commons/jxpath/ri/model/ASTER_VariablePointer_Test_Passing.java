/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    private NodePointer valuePointer;
    private boolean actual;
    private Variables variables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_hpdm0() {
        QName name = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithQName_TukM0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithKeywordVariables_FpNc1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullQName_pYID2() {
        VariablePointer variablePointer = new VariablePointer(null);
        assertNull(variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullQNameAndKeywordVariables_RbTX4() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        assertNull(variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyQName_oDQp5() {
        QName qName = new QName("", "");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyKeywordVariables_mlks6() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        QName qName = new QName("", "");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_actualTrue_CiRd0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        int length = pointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithEmptyName_RWTy3() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("", "");
        VariablePointer pointer = new VariablePointer(variables, name);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithInvalidName_cxit4() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("invalid", "name");
        VariablePointer pointer = new VariablePointer(variables, name);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_Jwtb0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithKeywordVariables_wcgI1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullName_QKYR1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer(null);
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithEmptyName_xxGn2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("");
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithInvalidName_mXcC3() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("invalidName");
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullValuePointer_alol4() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("name");
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithWholeCollection_dvfc0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        String path = pointer.asPath();
        assertEquals("$prefix:localName", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_dIUQ1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        pointer.setIndex(1);
        String path = pointer.asPath();
        assertEquals("$prefix:localName[2]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_actual_eSHk0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        Object actual = pointer.getBaseValue();
        assertEquals(variables.getVariable(name.toString()), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_notActual_cLFM1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        Object actual = pointer.getBaseValue();
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_True_bLfP0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertTrue(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonEmpty_eIXW4() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertNotEquals("", pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNullValue_VQSV4_WWiY0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(0);
        assertEquals(0, variablePointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_nonCollectionValue_WdhD1_naLs0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", new Object()), new QName(""));
        assertFalse(variablePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentVariables_ElIi4_zwyO0() {
        KeywordVariables variables1 = new KeywordVariables("keyword", new Object());
        KeywordVariables variables2 = new KeywordVariables("keyword", new Object());
        VariablePointer pointer1 = new VariablePointer(variables1, new QName("name"));
        VariablePointer pointer2 = new VariablePointer(variables2, new QName("name"));
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNodeTest_bZgV3_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNameAndNodeTest_ILLB4_fid1() {
        VariablePointer pointer = new VariablePointer(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_nullValue_zzid0_fid1() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullKeywordVariables_ffpn3_fid1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(null, qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_rsIm0_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        NodeIterator iterator = pointer.namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullPointer_QdXu5_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        pointer = null;
        NodeIterator iterator = null;
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullQName_qFzM2_fid1() {
        VariablePointer variablePointer = new VariablePointer(null);
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullKeywordVariables_Qtdf3_fid1() {
        VariablePointer variablePointer = new VariablePointer(null, new QName("prefix", "localName"));
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullQNameAndKeywordVariables_FhJI4_fid1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonKeyword_UPwC5_fid1() {
        KeywordVariables variables = new KeywordVariables("nonKeyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertTrue(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonLocalName_Pebe6_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "nonLocalName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertTrue(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonPrefix_HNRl7_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("nonPrefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
    }
}