/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    public void testGetAxis_NodeTypeTest_CJYa0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Step step = new Step(1, nodeTest, new Expression[0]);
        assertEquals(1, step.getAxis());
    }

    public void testGetAxis_NodeTypeTest_Null_xCwH1() {
        NodeTypeTest nodeTest = null;
        Step step = new Step(1, nodeTest, new Expression[0]);
        assertEquals(1, step.getAxis());
    }

    public void testGetAxis_Expression_Null_OXGX2() {
        Expression[] predicates = null;
        Step step = new Step(1, new NodeTypeTest(1), predicates);
        assertEquals(1, step.getAxis());
    }

    public void testGetAxis_Expression_Empty_OLxW3() {
        Expression[] predicates = new Expression[0];
        Step step = new Step(1, new NodeTypeTest(1), predicates);
        assertEquals(1, step.getAxis());
    }

    public void testGetAxis_Expression_NonEmpty_BZgO4() {
    }

    public void testGetAxis_Axis_Negative_ZiaY5() {
        Step step = new Step(-1, new NodeTypeTest(1), new Expression[0]);
        assertEquals(-1, step.getAxis());
    }

    public void testGetAxis_Axis_Zero_ZYyP6() {
        Step step = new Step(0, new NodeTypeTest(1), new Expression[0]);
        assertEquals(0, step.getAxis());
    }

    public void testGetAxis_Axis_Positive_HBDE7() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertEquals(1, step.getAxis());
    }

    public void testGetAxis_Axis_MaxInt_QYrp8() {
        Step step = new Step(Integer.MAX_VALUE, new NodeTypeTest(1), new Expression[0]);
        assertEquals(Integer.MAX_VALUE, step.getAxis());
    }

    public void testGetAxis_Axis_MinInt_PfhO9() {
        Step step = new Step(Integer.MIN_VALUE, new NodeTypeTest(1), new Expression[0]);
        assertEquals(Integer.MIN_VALUE, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_NoPredicates_AfCw0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_jpre1() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Expression[] predicates = new Expression[0];
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, predicates);
        String expected = ".";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_CBrg2() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Expression[] predicates = new Expression[0];
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, predicates);
        String expected = "..";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNullStep_DuMV4() {
        Step step = null;
        try {
            step.getPredicates();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSelf_Qikz0() {
        int axis = Compiler.AXIS_SELF;
        String expected = "self";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringChild_doCn1() {
        int axis = Compiler.AXIS_CHILD;
        String expected = "child";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringParent_kQxs2() {
        int axis = Compiler.AXIS_PARENT;
        String expected = "parent";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_BMNg3() {
        int axis = Compiler.AXIS_ANCESTOR;
        String expected = "ancestor";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_qVVd4() {
        int axis = Compiler.AXIS_ATTRIBUTE;
        String expected = "attribute";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_UFxN5() {
        int axis = Compiler.AXIS_NAMESPACE;
        String expected = "namespace";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_JmzK6() {
        int axis = Compiler.AXIS_PRECEDING;
        String expected = "preceding";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowing_rfnS7() {
        int axis = Compiler.AXIS_FOLLOWING;
        String expected = "following";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }
}