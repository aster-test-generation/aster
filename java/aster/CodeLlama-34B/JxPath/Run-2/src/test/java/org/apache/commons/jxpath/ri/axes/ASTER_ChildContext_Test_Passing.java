/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_oDlS0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        childContext.setPosition(1);
        assertEquals(1, childContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_dYAv1() {
        NodeTypeTest nodeTest = new NodeTypeTest(2);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        childContext.setPosition(2);
        assertEquals(2, childContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_Tgvg2() {
        NodeTypeTest nodeTest = new NodeTypeTest(3);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        childContext.setPosition(3);
        assertEquals(3, childContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_ZUdd3() {
        NodeTypeTest nodeTest = new NodeTypeTest(4);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        childContext.setPosition(4);
        assertEquals(4, childContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer2_tOpp1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        childContext.setPosition(1);
        NodePointer nodePointer = childContext.getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ValidPosition_bTVZ0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(selfContext, new NodeTypeTest(1), true, false);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_Reverse_LSgJ3() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(selfContext, new NodeTypeTest(1), true, true);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NoSelfContext_Vxic5() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(parentContext, new NodeTypeTest(1), true, false);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NoNodeTest_SKNy6() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(selfContext, null, true, false);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_InvalidNodeTest_QYvy7() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        SelfContext selfContext = new SelfContext(parentContext, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(selfContext, new NodeTypeTest(2), true, false);
        assertFalse(childContext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_positionNot0_jEQT1_Mmpk1() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), new NodeTypeTest(4), true, false);
        childContext.setPosition(1);
        Pointer pointer = childContext.getSingleNodePointer();
        assertNull(pointer);
    }
}