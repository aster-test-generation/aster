/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeanPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullBean_vAja1() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        String result = beanPointer.asPath();
        assertEquals("null()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_hWfm2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Integer(10), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        String result = beanPointer.asPath();
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_XdhX3() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Boolean(true), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        String result = beanPointer.asPath();
        assertEquals("true()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithStringBean_VGhE4() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), "hello", new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        String result = beanPointer.asPath();
        assertEquals("'hello'", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_LubF0() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertTrue(beanPointer.equals(beanPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_SZIN1() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertFalse(beanPointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBeanPointer_XRCQ2() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        BeanPointer otherBeanPointer = new BeanPointer(new QName("otherBean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertFalse(beanPointer.equals(otherBeanPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBeanPointer_uVMj3() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        BeanPointer otherBeanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertFalse(beanPointer.equals(otherBeanPointer));
    }
}