/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ExpressionPath_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_FeLy3() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        String result = expressionPath.toString();
        assertEquals("'test'['predicate1']['predicate2']", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_basicKnown_fBDT0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        expressionPath.isSimpleExpressionPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionIsContextDependent_CaiN0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextDependent"), null, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionAndPredicateAreNotContextDependent_ONNw2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("notContextDependent"), new Expression[]{new Constant("notContextDependent")}, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_predicateIsNull_sgqs4() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("notContextDependent"), null, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithExpressionPath_mMnZ1_gtpo0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), null, null);
        String result = expressionPath.toString();
        assertEquals("''", result);
    }
}