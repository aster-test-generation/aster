/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.Attribute;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.Text;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMNodePointer_Coverage_Test_Passing {
    private Namespace namespace;
    private JDOMNodePointer jdomNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_PHrM2() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixForNonElementAndNonAttribute_PQZJ2() {
        Text text = new Text("test");
        String prefix = JDOMNodePointer.getPrefix(text);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixForNull_EvjP3() {
        String prefix = JDOMNodePointer.getPrefix(null);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixForElementWithNullNamespacePrefix_pvFj4() {
        Element element = new Element("test");
        String prefix = JDOMNodePointer.getPrefix(element);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixForAttributeWithNullNamespacePrefix_nPVk5() {
        Attribute attribute = new Attribute("test", "value");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_bXVD0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Assertions.assertTrue(jdomNodePointer.equals(jdomNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_IiKi1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Assertions.assertFalse(jdomNodePointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_RqrX2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Assertions.assertFalse(jdomNodePointer.equals(new QName("test")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_kXAT3() {
        Object node = new Object();
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, new Locale("en", "US"));
        JDOMNodePointer otherJdomNodePointer = new JDOMNodePointer(node, new Locale("en", "US"));
        Assertions.assertTrue(jdomNodePointer.equals(otherJdomNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_YQmS4() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        JDOMNodePointer otherJdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        Assertions.assertFalse(jdomNodePointer.equals(otherJdomNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Null_gzua2() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.ENGLISH, "id");
        String localName = JDOMNodePointer.getLocalName(nodePointer);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver1_ompX0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver2_BpFI1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertEquals(namespaceResolver, jdomNodePointer.getNamespaceResolver());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver3_Eovf2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertNotSame(namespaceResolver, new NamespaceResolver(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver4_UZwI3() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertSame(namespaceResolver, jdomNodePointer.getNamespaceResolver());
    }

    @Test
    public void testGetNamespaceResolver_vQnQ0_2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NamespaceResolver namespaceResolver = jdomNodePointer.getNamespaceResolver();
        assertEquals(jdomNodePointer, namespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_Element_haxN0_YwwW0_fid2() {
        Element element = new Element("name", "value");
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.ENGLISH, "id");
        String localName = JDOMNodePointer.getLocalName(nodePointer);
        assertNull(localName);
    }
}