/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Passing {
    private BasicTypeConverter converter = new BasicTypeConverter();
    private BasicTypeConverter basicTypeConverter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNonAbstractClass_LWNc0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = String.class;
        assertTrue(converter.canCreateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithAbstractClass_CCNB1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = List.class;
        assertTrue(converter.canCreateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithInterface_YOxK2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = Collection.class;
        assertTrue(converter.canCreateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithException_rIHG3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = Exception.class;
        assertTrue(converter.canCreateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNoConstructor_lgmL4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = BasicTypeConverter.class;
        assertTrue(converter.canCreateCollection(type));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForList_jPSG0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForList_jPSG0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertEquals(ArrayList.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSet_sYbC1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSet_sYbC1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertEquals(HashSet.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_PfYi0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.5", Double.class);
        assertEquals(Double.valueOf(1.5), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_lVlw0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(2, unmodifiableCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_lVlw0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection.contains("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_lVlw0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_wcXH1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(2, unmodifiableCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_wcXH1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection.contains("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_wcXH1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndShort_YtWx14_QVmr0() {
        Object object = "123";
        Class toType = Short.class;
        Object result = new BasicTypeConverter().convertStringToPrimitive(object, toType);
        assertEquals(Short.valueOf((short) 123), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBoolean_zBct4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object converted = converter.convert(true, String.class);
        assertEquals("true", converted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumber_kEjr5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object converted = converter.convert(1, String.class);
        assertEquals("1", converted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertString_sHam6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object converted = converter.convert("test", String.class);
        assertEquals("test", converted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNull_dyUT8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object converted = converter.convert(null, String.class);
        assertNull(converted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithCollectionAndUseTypeIsArray_xxZU0_YZZe0() {
        Object object = new Object();
        Class toType = String[].class;
        assertTrue(converter.canConvert(object, toType));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_1() {
        assertEquals(true, converter.convertStringToPrimitive("true", Boolean.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_2() {
        assertEquals('a', converter.convertStringToPrimitive("a", Character.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_3() {
        assertEquals((byte) 1, converter.convertStringToPrimitive("1", Byte.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_4() {
        assertEquals((short) 2, converter.convertStringToPrimitive("2", Short.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_5() {
        assertEquals(3, converter.convertStringToPrimitive("3", Integer.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_6() {
        assertEquals(4L, converter.convertStringToPrimitive("4", Long.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_7() {
        assertEquals(5.0f, converter.convertStringToPrimitive("5.0", Float.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_8() {
        assertEquals(6.0, converter.convertStringToPrimitive("6.0", Double.class));
    }

    @Test
    public void testConvertStringToPrimitive_yIEN0_10() {
        assertNull(converter.convertStringToPrimitive(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForList_jPSG0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertNotNull(collection);
        assertEquals(ArrayList.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSet_sYbC1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertNotNull(collection);
        assertEquals(HashSet.class, collection.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_lVlw0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(2, unmodifiableCollection.size());
        assertTrue(unmodifiableCollection.contains("apple"));
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_wcXH1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(2, unmodifiableCollection.size());
        assertTrue(unmodifiableCollection.contains("apple"));
        assertTrue(unmodifiableCollection.contains("banana"));
    }
}