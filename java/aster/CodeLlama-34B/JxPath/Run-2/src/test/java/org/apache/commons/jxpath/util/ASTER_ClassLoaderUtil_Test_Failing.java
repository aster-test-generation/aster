/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassLoaderUtil_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNullClassName_uKKh1() {
        ClassLoader classLoader = ClassLoaderUtil.class.getClassLoader();
        String className = null;
        try {
            Class<?> clazz = ClassLoaderUtil.getClass(classLoader, className);
            assertNull(clazz);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithInvalidClassName_nsVb2() {
        ClassLoader classLoader = ClassLoaderUtil.class.getClassLoader();
        String className = "invalid.class.name";
        try {
            Class<?> clazz = ClassLoaderUtil.getClass(classLoader, className);
            assertNull(clazz);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNullClassLoaderAndInvalidClassName_kEvt7() {
        ClassLoader classLoader = null;
        String className = "invalid.class.name";
        try {
            Class<?> clazz = ClassLoaderUtil.getClass(classLoader, className);
            assertNull(clazz);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNullClassLoaderAndNullClassName_zfcA8() {
        ClassLoader classLoader = null;
        String className = null;
        try {
            Class<?> clazz = ClassLoaderUtil.getClass(classLoader, className);
            assertNull(clazz);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_DDMB0() throws ClassNotFoundException {
        String className = "java.lang.String";
        Class<?> clazz = ClassLoaderUtil.getClass(className);
        assertEquals(String.class, clazz);
        className = "invalid.class.name";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = null;
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
        className = "";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "not.a.class";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
        }
        className = "java.lang.String";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_DDMB0_fid2() throws ClassNotFoundException {
        String className = "java.lang.String";
        Class<?> clazz = ClassLoaderUtil.getClass(className);
        assertEquals(String.class, clazz);
        className = "invalid.class.name";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: invalid.class.name", e.getMessage());
        }
        className = null;
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("The class name cannot be null", e.getMessage());
        }
        className = "";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: ", e.getMessage());
        }
        className = "not.a.class";
        try {
            ClassLoaderUtil.getClass(className);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: not.a.class", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
        try {
            ClassLoaderUtil.getClass(className, false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            assertEquals("java.lang.ClassNotFoundException: java.lang.String", e.getMessage());
        }
        className = "java.lang.String";
    }
}