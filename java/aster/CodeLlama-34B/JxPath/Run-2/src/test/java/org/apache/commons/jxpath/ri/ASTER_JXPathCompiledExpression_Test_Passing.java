/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithString_mFzg0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithNumber_Xldc1() {
        Constant constant = new Constant(10);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithEmptyString_sToj3() {
        Constant constant = new Constant("");
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithInvalidString_cfoe4() {
        Constant constant = new Constant("invalid");
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithInvalidNumber_FOKt5() {
        Constant constant = new Constant(0);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression1_IQtr0() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant("1"));
        Expression expression = jxPathCompiledExpression.getExpression();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression2_gvDg1() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1));
        Expression expression = jxPathCompiledExpression.getExpression();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression3_GiOz2() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1.0));
        Expression expression = jxPathCompiledExpression.getExpression();
        assertEquals(expression.getClass(), Constant.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression4_jLKM3() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1.0f));
        Expression expression = jxPathCompiledExpression.getExpression();
        assertEquals(expression.getClass(), Constant.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression5_kpBt4() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1L));
        Expression expression = jxPathCompiledExpression.getExpression();
        assertEquals(expression.getClass(), Constant.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression6_wHKQ5() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1.0d));
        Expression expression = jxPathCompiledExpression.getExpression();
        assertEquals(expression.getClass(), Constant.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression7_ZFBn6() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1.0f));
        Expression expression = jxPathCompiledExpression.getExpression();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression8_ejqa7() {
        JXPathCompiledExpression jxPathCompiledExpression = new JXPathCompiledExpression("//book", new Constant(1.0d));
        Expression expression = jxPathCompiledExpression.getExpression();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerWithDifferentExpression_htUx8() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPathWithNull_TUqE2_DZBc0() {
        Constant constant = new Constant((String) null);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        String xpath = expression.getXPath();
        assertEquals("xpath", xpath);
    }
}