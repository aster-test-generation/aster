/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Failing {
    private static final int AXIS_FOLLOWING = 1;
    private static final int AXIS_NAMESPACE = 1;
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    private XPathParser parser;
    private SimpleCharStream stream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbsoluteLocationPath2_aOFP1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("/"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.AbsoluteLocationPath();
        assertEquals(compiler.locationPath(true, new ArrayList().toArray()), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgument_expression_Nxnm1() throws ParseException {
        Object ex = parser.Expression();
        Object result = parser.Argument();
        assertEquals(ex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_1_GOGR1() throws ParseException {
        Object ex = parser.VariableReference();
        assertNotNull(ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_2_ydZr2() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(1, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_3_XOmD3() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(2, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_4_SwUX4() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(3, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_5_MURk5() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(4, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_6_MhTQ6() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(5, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_7_dFxD7() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(6, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_8_dStF8() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(7, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_9_OGzq9() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(8, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_10_ryGZ10() throws ParseException {
        Object ex = parser.VariableReference();
        assertEquals(9, ex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExpr1_PmTK0_cShB0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.UnaryExpr();
        assertEquals(result, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubtractiveExpr_qwKh0_DRhy0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.SubtractiveExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifierWithAttribute_kLPU1_Ylhi0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int axis = parser.AbbreviatedAxisSpecifier();
        assertEquals(Compiler.AXIS_ATTRIBUTE, axis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExpr7_qXpE6_XKCU0() throws ParseException {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]))));
        Object result = parser.MultiplicativeExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExpr8_zteB7_FujL0() throws ParseException {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])), 1));
        Object result = parser.MultiplicativeExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExpr9_wAwh8_rdgU0() throws ParseException {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""))));
        Object result = parser.MultiplicativeExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExpr10_JvMZ9_hEfs0() throws ParseException {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 1));
        Object result = parser.MultiplicativeExpr();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath9_QTXJ8_VCcb0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.LocationPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbsoluteLocationPath2_aOFP1_fid2() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("/"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.AbsoluteLocationPath();
        assertEquals(compiler.locationPath(true, new ArrayList<String>().toArray()), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExpr1_PmTK0_cShB0_fid2() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.UnaryExpr();
        assertEquals(result, "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifierWithAttribute_kLPU1_Ylhi0_fid2() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int axis = parser.AbbreviatedAxisSpecifier();
        assertEquals(5, axis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath9_QTXJ8_VCcb0_fid2() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.LocationPath();
        assertEquals(result, "/");
    }
}