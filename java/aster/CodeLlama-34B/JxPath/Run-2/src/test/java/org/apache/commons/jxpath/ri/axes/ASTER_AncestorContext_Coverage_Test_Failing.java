/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AncestorContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_nextNodeReturnsFalse_FlNG0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), true, new NodeTypeTest(4));
        assertFalse(ancestorContext.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionGreaterThanCurrentPosition_Pirk1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), new NodeTypeTest(3)), true, new NodeTypeTest(4));
        assertTrue(ancestorContext.setPosition(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_positionIncrement_JAwk2_CSXg0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode();
        assertEquals(1, ancestorContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_parentPointerTestNode_xSlH6_Ltlb0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.getCurrentNodePointer().testNode(nodeTest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_parentPointerTestNodeFalse_DpBK7_BXSA0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode();
        assertFalse(ancestorContext.getCurrentNodePointer().testNode(new NodeTypeTest(2)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_parentPointerTestNode_xSlH6_Ltlb0_fid1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode();
        assertTrue(ancestorContext.getCurrentNodePointer() != null);
        assertTrue(ancestorContext.getCurrentNodePointer().testNode(nodeTest));
    }
}