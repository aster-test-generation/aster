/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_GYFe0_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_GYFe0_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(String.class, descriptor.getPropertyType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_GYFe0_3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_GYFe0_4() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_jten1_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_jten1_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(String.class, descriptor.getPropertyType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_jten1_3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_jten1_4() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IVLZ2_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IVLZ2_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(String.class, descriptor.getPropertyType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IVLZ2_3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IVLZ2_4() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_DynamicPropertyHandlerClass_qkRn2_fid2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, DynamicPropertyHandler.class);
        assertTrue(beanInfo.isAtomic());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor1_GYFe0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
        assertEquals(String.class, descriptor.getPropertyType());
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor2_jten1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, false);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
        assertEquals(String.class, descriptor.getPropertyType());
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor3_IVLZ2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertEquals("length", descriptor.getName());
        assertEquals(String.class, descriptor.getPropertyType());
        assertEquals(0, descriptor.getReadMethod().getParameterCount());
        assertEquals(0, descriptor.getWriteMethod().getParameterCount());
    }
}