/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
    CoreFunction corefunction;
    @Mock
    private EvalContext context;
    @Mock
    private Expression arg1;
    @Mock
    private Expression arg2;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private Pointer pointer;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private JXPathContext jxpathContext;
    @InjectMocks
    private CoreFunction coreFunction;
    private static final Double ZERO = Double.valueOf(0);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_NullArgs_PWbc2() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Expression arg1 = coreFunction.getArg1();
        assertNull(arg1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_EmptyArgs_PgwM3() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
        Expression arg1 = coreFunction.getArg1();
        assertNull(arg1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3WithNullArguments_vPTe3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Expression arg3 = coreFunction.getArg3();
        assertNull(arg3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg3WithEmptyArguments_cDhb4() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        Expression arg3 = coreFunction.getArg3();
        assertNull(arg3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionSubstringBefore() throws Exception {
        corefunction = new CoreFunction(0, new Expression[]{arg1, arg2});
        String s1 = "hello";
        String s2 = "world";
        when(arg1.computeValue(context)).thenReturn(s1);
        when(arg2.computeValue(context)).thenReturn(s2);
        assertEquals("", corefunction.functionSubstringBefore(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfunctionName() throws Exception {
        MockitoAnnotations.initMocks(this);
        coreFunction = new CoreFunction(1, new Expression[0]);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(new QName("test"));
        assertEquals("test", coreFunction.functionName(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_last_Wktr0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        assertEquals("last", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_position_MypE1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[0]);
        assertEquals("position", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_count_JaTC2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        assertEquals("count", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_id_zvKt3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, new Expression[0]);
        assertEquals("id", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_localName_YrAJ4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, new Expression[0]);
        assertEquals("local-name", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_namespaceUri_Celt5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, new Expression[0]);
        assertEquals("namespace-uri", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_name_bzCJ6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, new Expression[0]);
        assertEquals("name", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_string_qDDb7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, new Expression[0]);
        assertEquals("string", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_concat_tITZ8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, new Expression[0]);
        assertEquals("concat", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_startsWith_FNuW9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, new Expression[0]);
        assertEquals("starts-with", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_NullArgs_wEvZ0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        assertEquals(0, coreFunction.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_EmptyArgs_GKxq2() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        assertEquals(0, coreFunction.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_functionCode1_argsNull_nstR0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        String expected = "functionName(null)";
        String actual = coreFunction.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_functionCode2_argsEmpty_Xrmq1() {
        CoreFunction coreFunction = new CoreFunction(2, new Expression[0]);
        String expected = "functionName()";
        String actual = coreFunction.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionTrueWithNullEvalContext_UPIc1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Object result = coreFunction.functionTrue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_last_UHkU0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_position_NDLh1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_boolean_zpNx2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_localName_ZOMC3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_name_kmDH4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_namespaceUri_aHWq5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_string_sWZf6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_lang_fbxW7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_number_EFWL8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_formatNumber_bWOF9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_count_ckAi10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_id_ysju11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_concat_dKMY12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_startsWith_Qlpx13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_slBU0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        int functionCode = coreFunction.getFunctionCode();
        assertEquals(1, functionCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithDifferentFunctionCode_elKm1() {
        CoreFunction coreFunction = new CoreFunction(2, new Expression[0]);
        int functionCode = coreFunction.getFunctionCode();
        assertEquals(2, functionCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithValidFunctionCodeAndNullArgs_eqAE8() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        int functionCode = coreFunction.getFunctionCode();
        assertEquals(1, functionCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_eXUd0_pJDY1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, new Expression[0]);
        NamespaceContext context = new NamespaceContext(new SelfContext(new NamespaceContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        context.setPosition(1);
        Object result = coreFunction.computeValue(context);
        assertEquals("1.0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalNameWithOneArgument_atHv1_hhZN0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[1]);
        EvalContext context = mock(EvalContext.class);
        Object result = coreFunction.functionLocalName(context);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithNullFunctionCode_PZtg2_axkd0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        int functionCode = coreFunction.getFunctionCode();
        assertEquals(0, functionCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithValidFunctionCodeAndNonEmptyArgs_hwkK10_lQOV0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{new Constant(1)});
        int functionCode = coreFunction.getFunctionCode();
        assertEquals(1, functionCode);
    }
}