/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationGreaterThan_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_GreaterThan_kneF0() {
        CoreOperationGreaterThan greaterThan = new CoreOperationGreaterThan(new Constant("1"), new Constant("2"));
        assertTrue(greaterThan.evaluateCompare(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_Equal_XVAW2() {
        CoreOperationGreaterThan greaterThan = new CoreOperationGreaterThan(new Constant("1"), new Constant("1"));
        assertFalse(greaterThan.evaluateCompare(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantString_phbY0() {
        Constant constant = new Constant("string");
        CoreOperationGreaterThan operation = new CoreOperationGreaterThan(constant, constant);
        assertEquals(">", operation.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantNumber_mohk1() {
        Constant constant = new Constant(1);
        CoreOperationGreaterThan operation = new CoreOperationGreaterThan(constant, constant);
        assertEquals(">", operation.getSymbol());
    }
}