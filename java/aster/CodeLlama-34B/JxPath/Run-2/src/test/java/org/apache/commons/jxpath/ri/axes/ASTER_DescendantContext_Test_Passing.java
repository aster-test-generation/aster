/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
    private boolean setStarted = false;
    private NodePointer currentNodePointer = null;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionLessThanCurrentPosition_YqxA0() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), true, new NodeTypeTest(3));
        context.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionGreaterThanCurrentPosition_TBcj1() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), true, new NodeTypeTest(0));
        context.setPosition(0);
        assertEquals(0, context.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionEqualToCurrentPosition_pAJJ0() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(0)), true, new NodeTypeTest(3));
        context.setPosition(0);
        assertEquals(0, context.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionGreaterThanMaxPosition_DPkb0() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)), true, new NodeTypeTest(0));
        context.setPosition(4);
        assertEquals(0, context.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_position0_hwqp0() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), false, new NodeTypeTest(1));
        context.setPosition(0);
        NodePointer nodePointer = context.getCurrentNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_position1_SOaM1() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), false, new NodeTypeTest(1));
        context.setPosition(1);
        NodePointer nodePointer = context.getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_position2_VAAb2() {
        DescendantContext context = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), false, new NodeTypeTest(1));
        context.setPosition(2);
        NodePointer nodePointer = context.getCurrentNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired1_wykS0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        assertTrue(descendantContext.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired2_ulDF1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, false, nodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired3_IyNu2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        assertTrue(descendantContext.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset1_FckX0_fVZz0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext context = new DescendantContext(parentContext, true, new NodeTypeTest(1));
        context.reset();
        assertTrue(context.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset2_nBNl1_bRLn0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext context = new DescendantContext(parentContext, false, new NodeTypeTest(1));
        context.reset();
        assertTrue(context.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset3_yPzk2_CMYs0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext context = new DescendantContext(parentContext, true, new NodeTypeTest(2));
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset4_Lqhb3_MejD0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext context = new DescendantContext(parentContext, false, new NodeTypeTest(2));
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset5_EQWN4_qPWf0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(2));
        DescendantContext context = new DescendantContext(parentContext, true, new NodeTypeTest(1));
        context.reset();
        assertTrue(context.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset6_pfPj5_zNhT0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(2));
        DescendantContext context = new DescendantContext(parentContext, false, new NodeTypeTest(1));
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset7_rFxn6_NGeE0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(2));
        DescendantContext context = new DescendantContext(parentContext, true, new NodeTypeTest(2));
        context.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset8_UhVY7_JWwC0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(2));
        DescendantContext context = new DescendantContext(parentContext, false, new NodeTypeTest(2));
        context.reset();
        assertTrue(context.isChildOrderingRequired());
    }
}