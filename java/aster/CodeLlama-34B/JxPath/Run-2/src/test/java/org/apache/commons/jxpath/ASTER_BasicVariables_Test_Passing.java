/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicVariables_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_True_vvbx0() {
        BasicVariables basicVariables = new BasicVariables();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_False_yqeb1() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("invalidVarName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_Null_Mvlo2() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_EmptyString_URls3() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_InvalidVariableName_aWMn5() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("invalid_variable_name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7_1() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("varName1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7_2() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("varName2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_ValidNameAndValue_voWD0() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("myVar", "myValue");
        assertEquals("myValue", basicVariables.getVariable("myVar"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_DuplicateVariables_avar8_2() {
        BasicVariables basicVariables = new BasicVariables();
        assertFalse(basicVariables.isDeclaredVariable("varName"));
    }
}