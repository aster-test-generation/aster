/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ParseException_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes4_iMZF3() {
        ParseException pe = new ParseException();
        String str = "HelloWorld!";
        String expected = "Hello\\u0000World!";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage2_wkUr1() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage3_iBvX2() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        pe.specialConstructor = true;
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage4_iYKj3() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        pe.specialConstructor = true;
        pe.currentToken.next = new Token();
        pe.currentToken.next.beginLine = 1;
        pe.currentToken.next.beginColumn = 2;
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage5_cpgT4() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        pe.specialConstructor = true;
        pe.currentToken.next = new Token();
        pe.currentToken.next.beginLine = 1;
        pe.currentToken.next.beginColumn = 2;
        pe.expectedTokenSequences = new int[][]{{1, 2, 3}, {4, 5, 6}};
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage6_hHjq5() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        pe.specialConstructor = true;
        pe.currentToken.next = new Token();
        pe.currentToken.next.beginLine = 1;
        pe.currentToken.next.beginColumn = 2;
        pe.expectedTokenSequences = new int[][]{{1, 2, 3}, {4, 5, 6}};
        pe.tokenImage = new String[]{"token1", "token2", "token3", "token4", "token5", "token6"};
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage7_VgCH6() {
        ParseException pe = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"token1", "token2", "token3"});
        pe.specialConstructor = true;
        pe.currentToken.next = new Token();
        pe.currentToken.next.beginLine = 1;
        pe.currentToken.next.beginColumn = 2;
        pe.expectedTokenSequences = new int[][]{{1, 2, 3}, {4, 5, 6}};
        pe.tokenImage = new String[]{"token1", "token2", "token3", "token4", "token5", "token6"};
        pe.currentToken.next.kind = 1;
        String message = pe.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes4_iMZF3_fid1() {
        ParseException pe = new ParseException();
        String str = "Hello\u0000World!";
        String expected = "Hello\\u0000World!";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }
}