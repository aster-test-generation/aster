/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreFunction_Coverage_Test_Passing {
    CoreFunction coreFunction;
    EvalContext context;
    private InfoSetUtil infoSetUtil;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_NullArgs_cACB0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        int argumentCount = coreFunction.getArgumentCount();
        assertEquals(0, argumentCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_EmptyArgs_MDsm2() {
        Expression[] args = new Expression[0];
        CoreFunction coreFunction = new CoreFunction(1, args);
        int argumentCount = coreFunction.getArgumentCount();
        assertEquals(0, argumentCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_stringLength_gqCS0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, new Expression[0]);
        assertEquals("string-length", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_normalizeSpace_ufog1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, new Expression[0]);
        assertEquals("normalize-space", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_translate_HGPG2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, new Expression[0]);
        assertEquals("translate", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_boolean_vVfX3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, new Expression[0]);
        assertEquals("boolean", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_not_kTfp4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, new Expression[0]);
        assertEquals("not", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_true_zKhk5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, new Expression[0]);
        assertEquals("true", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_false_qlfb6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, new Expression[0]);
        assertEquals("false", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_lang_QUJI7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, new Expression[0]);
        assertEquals("lang", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_number_GEtQ8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, new Expression[0]);
        assertEquals("number", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_sum_awYI9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, new Expression[0]);
        assertEquals("sum", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_floor_cYwd10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, new Expression[0]);
        assertEquals("floor", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_ceiling_FOMr11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, new Expression[0]);
        assertEquals("ceiling", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_round_czbN12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, new Expression[0]);
        assertEquals("round", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_key_ROXm13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, new Expression[0]);
        assertEquals("key", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_formatNumber_YOvp14() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, new Expression[0]);
        assertEquals("format-number", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_unknownFunction_dufI15() {
        CoreFunction coreFunction = new CoreFunction(1000, new Expression[0]);
        assertEquals("unknownFunction1000()", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_superComputeContextDependent_FHVv0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_last_NZgg1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_position_onFa2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_boolean_kHGe3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_localName_WZcd4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_name_bgfF5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_namespaceUri_MIBB6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_string_bFuk7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_lang_XNPZ8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_number_WrqO9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        boolean result = coreFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLast_return_YHZQ7_mGqS1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = new NamespaceContext(null, null);
        context.setPosition(1);
        try {
            coreFunction.functionLast(context);
        } catch (Exception e) {
            Assertions.fail("return should not throw an exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_qvzt1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_formatNumber_SfzF10_fid1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        boolean result = coreFunction.computeContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_count_VESW11_fid1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        boolean result = coreFunction.computeContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_id_lZDC12_fid1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        boolean result = coreFunction.computeContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_concat_BAae13_fid1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
        boolean result = coreFunction.computeContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_startsWith_vvWF14_fid1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
        boolean result = coreFunction.computeContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_mrPP0() {
        coreFunction = new CoreFunction(1, new Expression[0]);
    }
}