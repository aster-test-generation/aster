/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    private Expression expression;
    private Expression[] predicates;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionAndPredicateAreNotContextDependent_xxnP2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), null, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_SimplePath_vPmj0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_BasicPredicates_DHYe2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[]{new Constant("string")}, new Step[0]);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathWithNodePointer_BSqi7() {
        Constant constant = new Constant(10);
        Expression[] predicates = new Expression[0];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithConstant_yxxu0_fid1() {
        Constant constant = new Constant("constant");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        String expected = "(constant)";
        String actual = expressionPath.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNumber_WqTz1_fid1() {
        Constant constant = new Constant(10);
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        String expected = "(10)";
        String actual = expressionPath.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_fsCg2_fid1() {
        Constant constant = new Constant("constant");
        Expression[] predicates = new Expression[]{new Constant("predicate1"), new Constant("predicate2")};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        String expected = "(constant)[predicate1][predicate2]";
        String actual = expressionPath.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullExpression_nJqU5_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(null, null, null);
        String expected = "";
        String actual = expressionPath.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullPredicates_tVRh6_fid1() {
        Constant constant = new Constant("constant");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        String expected = "'constant'";
        String actual = expressionPath.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_withNumber_HsUH1_1_fid1() {
        Constant constant = new Constant(10);
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
    }
}