/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_Step_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesNull_MazT0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesEmpty_HMGH1() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicateContextDependent_BVzw2() {
        Expression predicate = mock(Expression.class);
        when(predicate.isContextDependent()).thenReturn(true);
        Step step = new Step(1, new NodeTypeTest(1), new Expression[]{predicate});
        assertTrue(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicateNotContextDependent_wzWT3() {
        Expression predicate = mock(Expression.class);
        when(predicate.isContextDependent()).thenReturn(false);
        Step step = new Step(1, new NodeTypeTest(1), new Expression[]{predicate});
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_hPVD2() {
        Step step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals(".", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_tlQp3() {
        Step step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("..", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisSelf_gqPT0() {
        int axis = Compiler.AXIS_SELF;
        String result = Step.axisToString(axis);
        assertEquals("self", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisChild_ahgA1() {
        int axis = Compiler.AXIS_CHILD;
        String result = Step.axisToString(axis);
        assertEquals("child", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisParent_DtFt2() {
        int axis = Compiler.AXIS_PARENT;
        String result = Step.axisToString(axis);
        assertEquals("parent", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisAncestor_lcLU3() {
        int axis = Compiler.AXIS_ANCESTOR;
        String result = Step.axisToString(axis);
        assertEquals("ancestor", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisAttribute_IkLI4() {
        int axis = Compiler.AXIS_ATTRIBUTE;
        String result = Step.axisToString(axis);
        assertEquals("attribute", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisNamespace_IFkL5() {
        int axis = Compiler.AXIS_NAMESPACE;
        String result = Step.axisToString(axis);
        assertEquals("namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisPreceding_SbwE6() {
        int axis = Compiler.AXIS_PRECEDING;
        String result = Step.axisToString(axis);
        assertEquals("preceding", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_axisFollowing_siPw7() {
        int axis = Compiler.AXIS_FOLLOWING;
        String result = Step.axisToString(axis);
        assertEquals("following", result);
    }
}