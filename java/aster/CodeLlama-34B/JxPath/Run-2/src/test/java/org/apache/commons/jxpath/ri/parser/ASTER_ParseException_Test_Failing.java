/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ParseException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_specialCharacters_nGBh3() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\b\t\n\f\r\"\'\\");
        assertEquals("\b\t\n\f\r\"\'\\", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput_QVkz6() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\\\");
        assertEquals("\\\\", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput4_AgEf9() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\\u00000");
        assertEquals("\\\u00000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_specialCharacters_nGBh3_fid1() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\b\\t\\n\\f\\r\\\"\\\'\\\\");
        assertEquals("\\b\\t\\n\\f\\r\\\"\\\'\\\\", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_unicodeCharacters_EEvT4() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000a\\u000b\\u000c\\u000d\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f");
        assertEquals("\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000a\\u000b\\u000c\\u000d\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_null_rVks5_fid1() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput_QVkz6_fid1() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\");
        assertEquals("\\", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput2_JIqA7() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\u000");
        assertEquals("\\u000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput3_gJQE8() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\u000g");
        assertEquals("\\u000g", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes_invalidInput4_AgEf9_fid1() {
        ParseException parseException = new ParseException();
        String result = parseException.add_escapes("\\u00000");
        assertEquals("\\u00000", result);
    }
}