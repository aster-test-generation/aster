/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointerFactory_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_SoZA0() {
        QName name = new QName("bean");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointerFactory factory = new BeanPointerFactory();
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertNotNull(pointer);
        assertEquals(name, pointer.getName());
        assertEquals(bean, pointer.getNode());
        assertEquals(locale, pointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_SoZA0_1() {
        QName name = new QName("bean");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointerFactory factory = new BeanPointerFactory();
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_SoZA0_2() {
        QName name = new QName("bean");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointerFactory factory = new BeanPointerFactory();
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertEquals(name, pointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_SoZA0_3() {
        QName name = new QName("bean");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointerFactory factory = new BeanPointerFactory();
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertEquals(bean, pointer.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_SoZA0_4() {
        QName name = new QName("bean");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        BeanPointerFactory factory = new BeanPointerFactory();
        NodePointer pointer = factory.createNodePointer(name, bean, locale);
        assertEquals(locale, pointer.getLocale());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderWithNullObject_FWbe1_fid2() {
        BeanPointerFactory beanPointerFactory = null;
        int order = 0;
        assertEquals(order, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrder_HZEX0_iBFR0_fid2() {
        BeanPointerFactory beanPointerFactory = new BeanPointerFactory();
        int order = beanPointerFactory.getOrder();
    }
}