/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_dvWS0() {
        QName qname = new QName("prefix", "localName");
        assertTrue(qname.equals(qname));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_uiwn1() {
        QName qname1 = new QName("prefix", "localName");
        QName qname2 = new QName("prefix", "localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameQualifiedName_YsYa3() {
        QName qname1 = new QName("prefix", "localName");
        QName qname2 = new QName("prefix", "localName");
        assertTrue(qname1.equals(qname2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentQualifiedName_pYId4() {
        QName qname1 = new QName("prefix", "localName");
        QName qname2 = new QName("prefix", "differentLocalName");
        assertFalse(qname1.equals(qname2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SamePrefix_XwhY5() {
        QName qname1 = new QName("prefix", "localName");
        QName qname2 = new QName("prefix", "differentLocalName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentPrefix_TTAn6() {
        QName qname1 = new QName("prefix", "localName");
        QName qname2 = new QName("differentPrefix", "localName");
        assertFalse(qname1.equals(qname2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_MxFg0() {
        QName qName = new QName("prefix", "localName");
        String name = qName.getName();
        assertEquals("localName", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_AXTV1() {
        QName qName = new QName("qualifiedName");
        String name = qName.getName();
        assertEquals("qualifiedName", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName19_bSHz18() {
        QName qName = new QName("prefix", "localName");
        String name = qName.getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix1_fGUB0() {
        QName qName = new QName("prefix:localName");
        assertEquals("prefix", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix2_CmPf1() {
        QName qName = new QName("prefix", "localName");
        assertEquals("prefix", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix3_nULC2() {
        QName qName = new QName("localName");
        assertNull(qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithQualifiedName_kqoc0() {
        QName qName = new QName("qualifiedName");
        String expected = "qualifiedName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPrefixAndLocalName_XXcq1() {
        QName qName = new QName("prefix", "localName");
        String expected = "prefix:localName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullQualifiedName_kwMs2() {
        QName qName = new QName("");
        String expected = "";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_vdVz0() {
        QName qName = new QName("qualifiedName");
        int expected = "qualifiedName".hashCode();
        int actual = qName.hashCode();
        assertEquals(expected, actual);
    }
}