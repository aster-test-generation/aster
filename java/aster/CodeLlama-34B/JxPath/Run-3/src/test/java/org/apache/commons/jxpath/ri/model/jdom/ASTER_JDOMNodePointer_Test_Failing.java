/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    private Object node;
    JDOMNodePointer jdomnodepointer;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.ENGLISH);
        assertEquals(node.hashCode(), jdomnodepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullParent_almB3() {
        QName name = new QName("name");
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(null, new Object());
        NodeIterator iterator = jdomNodePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullNodeAndId_dWCL8() {
        QName name = new QName("name");
        DOMNodePointer parent = new DOMNodePointer(null, new Locale("en"));
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(parent, new Object());
        NodeIterator iterator = jdomNodePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNullContext_jWsJ5() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), new Locale("en"));
        QName name = new QName("name");
        NodePointer attributePointer = nodePointer.createAttribute(null, name);
        assertNull(attributePointer.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithJDOMNodePointer_ibjl3_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"), "id");
        assertEquals("id", jdomNodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNull_RUxj2() {
        String prefix = DOMNodePointer.getPrefix(null);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_Document_cqyE1_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        assertTrue(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_Other_sIfj2_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertFalse(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNullContext_jWsJ5_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), new Locale("en"));
        QName name = new QName("name");
        NodePointer attributePointer = nodePointer.createAttribute(null, name);
        assertNull(attributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullPointer_sPio6_fid1() {
        NodePointer pointer = null;
        Object node = new Element("test");
        NodeTest test = new NodeNameTest(new QName("test"));
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNonElementNonProcessingInstructionNode_suaF3_PLvf0_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Text("text"), Locale.ENGLISH);
        QName name = jdomNodePointer.getName();
        assertEquals(null, name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithEmptyString_hSoq5_tKTB0_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new QName("prefix", "localName"), new Locale("en-US"));
        assertEquals("prefix", jdomNodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNullName_CBNq4_UMmx0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), new Locale("en"));
        NodePointer attributePointer = nodePointer.createAttribute(null, null);
        assertNull(attributePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueElement_bumw0_YsJB1_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test"), new Locale("en_US"));
        String expected = "test";
        Object actual = nodePointer.getValue();
        assertEquals(expected, actual.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueProcessingInstruction_qRRh3_Zrxy0_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new ProcessingInstruction("test", ""), new Locale("en_US"));
        String expected = "test";
        String actual = (String) nodePointer.getValue();
        assertEquals(expected, actual);
    }
}