/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    private NodePointer valuePointer;
    private boolean actual;
    private Variables variables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_undefinedVariable_HWFm0() {
        KeywordVariables variables = new KeywordVariables("test", null);
        QName name = new QName("test");
        VariablePointer pointer = new VariablePointer(variables, name);
        Object value = new Object();
        try {
            pointer.setValue(value);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot set undefined variable: test", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_wholeCollection_fRqj1() {
        KeywordVariables variables = new KeywordVariables("test", null);
        QName name = new QName("test");
        VariablePointer pointer = new VariablePointer(variables, name);
        Object value = new Object();
        pointer.setValue(value);
        assertEquals(value, variables.getVariable("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNodeTest_bZgV3() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
        assertFalse(pointer.testNode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNameAndNodeTest_ILLB4() {
        VariablePointer pointer = new VariablePointer(null);
        assertFalse(pointer.testNode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_nullValue_zzid0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertFalse(variablePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withActual_WRlR0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        int expected = System.identityHashCode(variables) + name.hashCode() + 0;
        int actual = pointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withoutActual_eEWP1() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
        int expected = 0 + name.hashCode() + 0;
        int actual = pointer.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullName_SJmO1() {
        QName name = null;
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullVariables_Mmjf2() {
        QName name = new QName("prefix", "localName");
        KeywordVariables variables = null;
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullNameAndVariables_Katb3() {
        QName name = null;
        KeywordVariables variables = null;
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithEmptyName_yhPw4() {
        QName name = new QName("", "");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithEmptyNameAndVariables_KHZl5() {
        QName name = new QName("", "");
        KeywordVariables variables = null;
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodeIterator iterator = variablePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullKeywordVariables_ffpn3() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(null, qName);
        assertNull(variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithInvalidQName_rlXG8() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertNotEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithInvalidKeywordVariables_RoQr9() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertNotEquals(qName, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_actualFalse_ccRh1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        int length = pointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValue_zBka0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertTrue(variablePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_rsIm0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullVariables_ySJw1() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(null, name);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullName_xnPr2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, null);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullPointer_QdXu5() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        pointer = null;
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithInvalidPointer_hQjs6() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        pointer = new VariablePointer(null, null);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullQName_qFzM2() {
        VariablePointer variablePointer = new VariablePointer(null);
        assertFalse(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullKeywordVariables_Qtdf3() {
        VariablePointer variablePointer = new VariablePointer(null, new QName("prefix", "localName"));
        assertFalse(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullQNameAndKeywordVariables_FhJI4() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        assertFalse(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithNullNamespaceURI_FOSJ6() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("name");
        assertNull(nodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithEmptyNamespaceURI_NtcC7() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("name");
        assertEquals("", nodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerWithInvalidNamespaceURI_HaZQ8() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NodePointer nodePointer = variablePointer.namespacePointer("name");
        assertEquals("invalidNamespaceURI", nodePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_False_ZFrZ1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_Null_EMOK2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertNull(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_Empty_btQZ3() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertEquals("", pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonKeyword_UPwC5() {
        KeywordVariables variables = new KeywordVariables("nonKeyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonLocalName_Pebe6() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "nonLocalName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NonPrefix_HNRl7() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("nonPrefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullName_OUoM8() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = null;
        VariablePointer pointer = new VariablePointer(variables, name);
        assertNull(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullVariables_DEMH9() {
        KeywordVariables variables = null;
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertNull(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullVariablesAndName_Mvdi10() {
        KeywordVariables variables = null;
        QName name = null;
        VariablePointer pointer = new VariablePointer(variables, name);
        assertNull(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NullValue_zBka0_fid1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertFalse(variablePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullVariables_ySJw1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(null, name);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorWithNullName_xnPr2_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, null);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullName_OUoM8_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = null;
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullVariables_DEMH9_fid1() {
        KeywordVariables variables = null;
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_NullVariablesAndName_Mvdi10_fid1() {
        KeywordVariables variables = null;
        QName name = null;
        VariablePointer pointer = new VariablePointer(variables, name);
        assertFalse(pointer.isActual());
    }
}