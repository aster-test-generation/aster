/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleCharStream_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn7_lFNQ6_phPG0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("Hello World".getBytes()), 1, 1, 10);
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn1_FxGm0_VouC0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])), 1, 1);
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn2_lsTm1_mfIj0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn3_DzsD2_CXCv0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])), 1, 1, 10);
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn4_TBzt3_FBYV0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn5_mCZG4_EvkP0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn6_EyKx5_sqMb0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(2048, stream.bufsize);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(11, stream.available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(1, stream.tokenBegin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(11, stream.bufpos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(11, stream.maxNextCharInd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn7_lFNQ6_phPG0_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("Hello World".getBytes()), 1, 1, 10);
        stream.adjustBeginLineColumn(2, 2);
        assertEquals(2, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn1_FxGm0_VouC0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])), 1, 1);
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn2_lsTm1_mfIj0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn3_DzsD2_CXCv0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])), 1, 1, 10);
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn4_TBzt3_FBYV0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        int endColumn = scs.getEndColumn();
        assertEquals(1, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn5_mCZG4_EvkP0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEndColumn6_EyKx5_sqMb0_fid3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        int endColumn = scs.getEndColumn();
        assertEquals(0, endColumn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine1_qEpi0_MDBG0_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        int beginLine = stream.getBeginLine();
        assertEquals(1, beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine2_ySIc1_KtJl0_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        int beginLine = stream.getBeginLine();
        assertEquals(1, beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_2_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(2048, stream.available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithWrapAround_yUma0_wiBa0_3_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(true);
        assertEquals(0, stream.tokenBegin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(2048, stream.bufsize);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_2_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(2048, stream.available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_4_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(11, stream.bufpos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_5_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(11, stream.maxNextCharInd);
    }
}