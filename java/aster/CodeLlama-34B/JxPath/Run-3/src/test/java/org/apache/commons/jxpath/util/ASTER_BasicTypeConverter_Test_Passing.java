/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.Pointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNullObject_qLbC0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithAssignableFrom_WVkW1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithString_ECcr2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithBoolean_sGld3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNumber_HBWB4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArray_vYus5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object[0], Object[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithCollection_NMon6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new ArrayList<Object>(), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_List_Rmzb0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Collection_pSHa1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Set_Jvrf2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_AbstractClass_Jilo3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractList.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_List_VRld0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        assertTrue(collection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_Set_AYlQ1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        assertTrue(collection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_ConcreteClass_UtBE4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNull_exYB0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, Object.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_hYpV1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convert(null, int.class);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToObject_PRUV2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Object result = converter.convert(object, Object.class);
        assertSame(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToPrimitive_iGHC3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Object result = converter.convert(object, int.class);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToObject_gXUd8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[10];
        Object result = converter.convert(array, Object.class);
        assertSame(array, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToObject_OkiI10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        Object result = converter.convert(collection, Object.class);
        assertSame(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToObject_KCSP12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean booleanValue = Boolean.TRUE;
        Object result = converter.convert(booleanValue, Object.class);
        assertSame(booleanValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToPrimitive_Vxcg13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean booleanValue = Boolean.TRUE;
        Object result = converter.convert(booleanValue, int.class);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToObject_gUpT14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(10);
        Object result = converter.convert(number, Object.class);
        assertSame(number, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToPrimitive_Yrvf15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(10);
        Object result = converter.convert(number, int.class);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Byte_QjOL0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        assertEquals(Byte.valueOf((byte) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Short_gwLZ1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        assertEquals(Short.valueOf((short) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Integer_AdsT2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        assertEquals(Integer.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Long_MvJa3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        assertEquals(Long.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Float_Nhyi4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        assertEquals(Float.valueOf(10.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_Double_ojJN5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        assertEquals(Double.valueOf(10.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_BigInteger_qDVj6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        assertEquals(BigInteger.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_BigDecimal_Ypod7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.0);
        assertEquals(new BigDecimal(10.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_InvalidType_SdgS10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(String.class, 10.0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_boolean_lFEa0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertEquals(Boolean.FALSE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_char_lrPa1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals(Character.valueOf('\0'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_byte_LVaE2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertEquals(Byte.valueOf((byte) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_short_pSUb3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertEquals(Short.valueOf((short) 0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_int_reFC4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(Integer.valueOf(0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_long_VIer5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(Long.valueOf(0L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_float_SLgc6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(Float.valueOf(0.0f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_double_elBG7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(Double.valueOf(0.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_null_uyfk8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(list, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertFalse(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertFalse(unmodifiableCollection instanceof SortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertEquals(sortedSet, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertTrue(unmodifiableCollection instanceof SortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertFalse(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(set, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertFalse(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertFalse(unmodifiableCollection instanceof SortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertEquals(collection, unmodifiableCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertFalse(unmodifiableCollection instanceof SortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertFalse(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Boolean_kfhP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Character_uTgX1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertEquals(Character.valueOf('a'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Byte_VdLT2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", Byte.class);
        assertEquals(Byte.valueOf((byte) 123), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Short_ETsJ3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("12345", Short.class);
        assertEquals(Short.valueOf((short) 12345), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Integer_Risa4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123456789", Integer.class);
        assertEquals(Integer.valueOf(123456789), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Long_FUEq5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1234567890123456789", Long.class);
        assertEquals(Long.valueOf(1234567890123456789L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Float_FzRY6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.23456789", Float.class);
        assertEquals(Float.valueOf(1.23456789f), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_kfbz7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.234567890123456789", Double.class);
        assertEquals(Double.valueOf(1.234567890123456789), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNullObjectAndUnsupportedType_wbbM10_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithStringAndUnsupportedType_nVqs11_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("", Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithBooleanAndUnsupportedType_PLSh12_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithNumberAndUnsupportedType_mRUm13_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithArrayAndUnsupportedType_Logu14_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object[0], Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithCollectionAndUnsupportedType_coaK15_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new ArrayList<Object>(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollection_Interface_iIga4_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection_InvalidType_jrlb5_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            Collection collection = converter.allocateCollection(String.class);
            fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumber_NullType_ewqo11_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        assertNotNull(result);
        assertEquals(10.0, result.doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_FOzo1_5_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertTrue(unmodifiableCollection instanceof Set);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithOtherCollection_Lkdc3_3_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("apple");
        collection.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertTrue(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWithPointer_XeAC8_XDfs0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(Pointer.class, Pointer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_bzmJ0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(list, unmodifiableCollection);
        assertTrue(unmodifiableCollection instanceof List);
        assertTrue(unmodifiableCollection instanceof Collection);
        assertFalse(unmodifiableCollection instanceof Set);
        assertFalse(unmodifiableCollection instanceof SortedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_wyZt2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(set, unmodifiableCollection);
        assertTrue(unmodifiableCollection instanceof Set);
        assertTrue(unmodifiableCollection instanceof Collection);
        assertFalse(unmodifiableCollection instanceof List);
        assertFalse(unmodifiableCollection instanceof SortedSet);
    }
}