/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_Node_slTN0() {
        int nodeType = Compiler.NODE_TYPE_NODE;
        String expected = "node";
        String actual = NodeTypeTest.nodeTypeToString(nodeType);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_Text_AxuL1() {
        int nodeType = Compiler.NODE_TYPE_TEXT;
        String expected = "text";
        String actual = NodeTypeTest.nodeTypeToString(nodeType);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_Comment_IwJS2() {
        int nodeType = Compiler.NODE_TYPE_COMMENT;
        String expected = "comment";
        String actual = NodeTypeTest.nodeTypeToString(nodeType);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_PI_xmEY3() {
        int nodeType = Compiler.NODE_TYPE_PI;
        String expected = "processing-instruction";
        String actual = NodeTypeTest.nodeTypeToString(nodeType);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_Unknown_xlYs4() {
        int nodeType = -1;
        String expected = "UNKNOWN";
        String actual = NodeTypeTest.nodeTypeToString(nodeType);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_1_veez0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        assertEquals(1, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_2_bWyw1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        assertEquals(2, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_3_YfKR2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(3);
        assertEquals(3, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_4_DjRw3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(4);
        assertEquals(4, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_5_olyY4() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(5);
        assertEquals(5, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_6_izkE5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(6);
        assertEquals(6, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_7_Gztb6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(7);
        assertEquals(7, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_8_xoRF7() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(8);
        assertEquals(8, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_9_yWHA8() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(9);
        assertEquals(9, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_10_zHOt9() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(10);
        assertEquals(10, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_11_SgUD10() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(11);
        assertEquals(11, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_12_vsgp11() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(12);
        assertEquals(12, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_13_lEsK12() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(13);
        assertEquals(13, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_14_fjBP13() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(14);
        assertEquals(14, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_15_VPOk14() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(15);
        assertEquals(15, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_16_FpAN15() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(16);
        assertEquals(16, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_17_eYPW16() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(17);
        assertEquals(17, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_18_IXni17() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(18);
        assertEquals(18, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_19_iztC18() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(19);
        assertEquals(19, nodeTypeTest.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeType_20_VmAO19() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(20);
        assertEquals(20, nodeTypeTest.getNodeType());
    }
}