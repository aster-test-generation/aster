/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleCharStream_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn7_lFNQ6_phPG0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("Hello World".getBytes()), 1, 1, 10);
        stream.adjustBeginLineColumn(2, 2);
        assertEquals(2, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine1_qEpi0_MDBG0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        int beginLine = stream.getBeginLine();
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine2_ySIc1_KtJl0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 0, 0, 00);
        int beginLine = stream.getBeginLine();
        assertEquals(1, beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine3_BcHN2_XuiW0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        int beginLine = stream.getBeginLine();
        assertEquals(0, beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeginLine4_yMOd3_huvb0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        int beginLine = stream.getBeginLine();
        assertEquals(0, beginLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(6144, stream.bufsize);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(6144, stream.available);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(0, stream.tokenBegin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(-1, stream.bufpos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWithoutWrapAround_VGpp1_WSqk0_5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Hello World"), 1, 1);
        stream.ExpandBuff(false);
        assertEquals(-1, stream.maxNextCharInd);
    }
}