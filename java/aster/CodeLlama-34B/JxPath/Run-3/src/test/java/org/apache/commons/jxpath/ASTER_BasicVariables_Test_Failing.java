/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicVariables_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_True_vvbx0_fid2() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_ValidVariableName_diuJ6_fid2() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("valid_variable_name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName1"));
        assertTrue(basicVariables.isDeclaredVariable("varName2"));
        assertTrue(basicVariables.isDeclaredVariable("varName3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_DuplicateVariables_avar8() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName"));
        assertFalse(basicVariables.isDeclaredVariable("varName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_UPhG0() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=null]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithVars_UoCo1() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyVars_fGRp3() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVars_fxxu4() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDifferentTypesOfVars_SPoE5() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,4]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVarsAndNullVar_UGpj8() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,null]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVarsAndEmptyVar_Pzdk9() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVarsAndDifferentTypesOfVars_KqdJ10() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,4,5]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVarsAndNullVarAndEmptyVar_LNyc11() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,null,4]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleVarsAndEmptyVarAndNullVar_Plao12() {
        BasicVariables basicVariables = new BasicVariables();
        String expected = "BasicVariables[vars=1,2,3,,4]";
        String actual = basicVariables.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_InvalidName_mMGd1() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.declareVariable("", "myValue");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Variable name cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_InvalidValue_oHBK2() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.declareVariable("myVar", null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Variable value cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_DuplicateName_NWIJ3() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("myVar", "myValue");
        try {
            basicVariables.declareVariable("myVar", "myValue");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Variable with name 'myVar' already exists", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_DifferentValue_oqQF4() {
        BasicVariables basicVariables = new BasicVariables();
        basicVariables.declareVariable("myVar", "myValue");
        try {
            basicVariables.declareVariable("myVar", "myOtherValue");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Variable with name 'myVar' already exists with different value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_NullName_chyS5() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.declareVariable(null, "myValue");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Variable name cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_NullValue_rdvX6() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.declareVariable("myVar", null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Variable value cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeclareVariable_EmptyValue_Uoax8() {
        BasicVariables basicVariables = new BasicVariables();
        try {
            basicVariables.declareVariable("myVar", "");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Variable value cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariable_ValidVariableName_kHcE0() {
        BasicVariables basicVariables = new BasicVariables();
        Object result = basicVariables.getVariable("varName");
        assertEquals(result, "varValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariable_InvalidVariableName_AtLS1() {
        BasicVariables basicVariables = new BasicVariables();
        Object result = basicVariables.getVariable("invalidVarName");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7_1_fid3() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7_2_fid3() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeclaredVariable_MultipleVariables_AiTk7_3_fid3() {
        BasicVariables basicVariables = new BasicVariables();
        assertTrue(basicVariables.isDeclaredVariable("varName3"));
    }
}