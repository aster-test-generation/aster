/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.functions.ConstructorFunction;
import org.apache.commons.jxpath.functions.MethodFunction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassFunctions_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullNamespace_SdTE0() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction(null, "new", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNonNullName_Fmtw3() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("new", null, new Object[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullParameters_rSjf4() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("new", "new", null);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNonNullParameters_qxte5() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("new", "new", new Object[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithConstructor_wmxn6() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("new", "new", new Object[0]);
        assertFalse(function instanceof ConstructorFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithMethod_Yejo7() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("new", "new", new Object[0]);
        assertFalse(function instanceof MethodFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithInvalidName_EGdJ8() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, null);
        Function function = classFunctions.getFunction("invalid", "new", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_empty_bpfp0() {
        ClassFunctions classFunctions = new ClassFunctions(null, null);
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertFalse(usedNamespaces.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_singleNamespace_QrFs1_1() {
        ClassFunctions classFunctions = new ClassFunctions(null, "namespace1");
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertEquals(1, usedNamespaces.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_singleNamespace_QrFs1_2() {
        ClassFunctions classFunctions = new ClassFunctions(null, "namespace1");
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertTrue(usedNamespaces.contains("namespace1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_singleNamespace_QrFs1() {
        ClassFunctions classFunctions = new ClassFunctions(null, "namespace1");
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        assertEquals(1, usedNamespaces.size());
        assertTrue(usedNamespaces.contains("namespace1"));
    }
}