/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ServletRequestHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_ServletRequestAndContext_Null_yQHY0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = new ServletRequestAndContext(null, null);
        Object result = handler.getProperty(handle, "property");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_Property_Null_VpeV2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = new ServletRequestAndContext(null, null);
        Object result = handler.getProperty(handle, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_Property_Empty_sTyb3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = new ServletRequestAndContext(null, null);
        Object result = handler.getProperty(handle, "");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_Property_Valid_hqLI4() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = new ServletRequestAndContext(null, null);
        Object result = handler.getProperty(handle, "property");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullRequest_Vebs1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext request = null;
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertNull(request.getServletRequest().getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_Property_Empty_sTyb3_fid1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext handle = new ServletRequestAndContext(null, null);
        Object result = handler.getProperty(handle, "");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_ooMX0_dgJZ0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext request = new ServletRequestAndContext(null, null);
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertEquals(value, request.getServletRequest().getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_yXyg3_sODX0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext request = new ServletRequestAndContext(null, null);
        String property = "property";
        Object value = null;
        handler.setProperty(request, property, value);
        assertNull(request.getServletRequest().getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentValue_Ojmj5_XkJE0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        MockHttpServletRequest request = new MockHttpServletRequest();
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertNotNull(request.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentValue_Ojmj5_XkJE0_fid3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        MockHttpServletRequest request = new MockHttpServletRequest();
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertNull(request.getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithSamePropertyAndDifferentValue_USAe7_eHYe0_fid3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext request = new ServletRequestAndContext(null, null);
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertNotEquals(value, request.getServletRequest().getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDifferentPropertyAndSameValue_gsbT8_QyiH0_fid3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext request = new ServletRequestAndContext(null, null);
        String property = "property";
        Object value = new Object();
        handler.setProperty(request, property, value);
        assertNotEquals(value, request.getServletRequest().getAttribute("differentProperty"));
    }
}