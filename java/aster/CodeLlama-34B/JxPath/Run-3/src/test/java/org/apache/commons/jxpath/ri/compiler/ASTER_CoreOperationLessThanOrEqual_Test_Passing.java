/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationLessThanOrEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_LessThan_gWdS0() {
        CoreOperationLessThanOrEqual op = new CoreOperationLessThanOrEqual(new Constant("5"), new Constant("10"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_Equal_SLZD1() {
        CoreOperationLessThanOrEqual op = new CoreOperationLessThanOrEqual(new Constant("5"), new Constant("5"));
        assertFalse(op.evaluateCompare(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_GreaterThan_TuEa2() {
        CoreOperationLessThanOrEqual op = new CoreOperationLessThanOrEqual(new Constant("10"), new Constant("5"));
        assertFalse(op.evaluateCompare(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_NullArguments_QHtw3() {
        CoreOperationLessThanOrEqual op = new CoreOperationLessThanOrEqual(null, null);
        assertFalse(op.evaluateCompare(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEvaluateCompare_InvalidArguments_WDxW4() {
        CoreOperationLessThanOrEqual op = new CoreOperationLessThanOrEqual(new Constant("a"), new Constant("b"));
        assertFalse(op.evaluateCompare(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_CLIn0() {
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(new Constant("1"), new Constant("2"));
        assertEquals("<=", coreOperationLessThanOrEqual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithDifferentConstants_TOZO1() {
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual = new CoreOperationLessThanOrEqual(new Constant("3"), new Constant("4"));
        assertEquals("<=", coreOperationLessThanOrEqual.getSymbol());
    }
}