/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ProcessingInstructionTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Imxx0() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
        String expected = "processing-instruction('target')";
        String actual = processingInstructionTest.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_ValidTarget_ntLo0() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
        String target = processingInstructionTest.getTarget();
        assertEquals("target", target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_NullTarget_DyNM1() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest(null);
        String target = processingInstructionTest.getTarget();
        assertNull(target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_EmptyTarget_mewn2() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("");
        String target = processingInstructionTest.getTarget();
        assertEquals("", target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_InvalidTarget_WmYy4() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("invalid_target");
        String target = processingInstructionTest.getTarget();
        assertEquals("invalid_target", target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_NullObject_tKOZ5() {
        ProcessingInstructionTest processingInstructionTest = null;
        String target = null;
        assertNull(target);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTarget_InvalidObject_lZYm6() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("invalid_object");
        String target = processingInstructionTest.getTarget();
        assertEquals("invalid_object", target);
    }
}