/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Failing {
    private int position = 0;
    private boolean targetReady = false;
    private int startPropertyIndex;
    private boolean empty = false;
    private int startIndex = 0;
    private boolean includeStart = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer1_yEUD0() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer2_qEWd1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getImmediateNode(), "name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer3_kXGv2() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getNodeValue(), "bean");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer5_fMGS4() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getNamespaceURI(), "bean");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer6_SFbq5() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getLength(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPositionWithInvalidName_ElAn4_bIdo0() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "invalidName", false, domNodePointer);
        int position = propertyIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAllProperties_xTkJ0_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault()), null, false, null);
        assertTrue(propertyIterator.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionIndividualProperty_WEbO1_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault()), "property", false, null);
        assertTrue(propertyIterator.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_FREM0() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "property", false, null);
        NodePointer propertyNodePointer = propertyIterator.getPropertyPointer();
        assertNotNull(propertyNodePointer);
        assertEquals(propertyNodePointer.getName(), new QName("property"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer1_yEUD0_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer3_kXGv2_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getNodeValue(), "name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer4_gZsQ3() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getName(), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer5_fMGS4_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getNamespaceURI(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer6_SFbq5_fid1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "name", false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals(nodePointer.getLength(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_FREM0_2() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "property", false, null);
        NodePointer propertyNodePointer = propertyIterator.getPropertyPointer();
        assertEquals(propertyNodePointer.getName(), new QName("property"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPositionWithInvalidName_ElAn4_bIdo0_fid3() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "invalidName", false, domNodePointer);
        int position = propertyIterator.getPosition();
        assertEquals(-1, position);
    }
}