/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.functions.ConstructorFunction;
import org.apache.commons.jxpath.functions.MethodFunction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PackageFunctions_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_NullNamespace_XejN0() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction(null, "name", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_EmptyNamespace_YpLd1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("", "name", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_NullName_PiOa2() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", null, new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_EmptyName_yQva3() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_NullParameters_FQpT4() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", null);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_EmptyParameters_LTxr5() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[0]);
        assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_single_BHxm1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "namespace");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertEquals(1, usedNamespaces.size());
        assertTrue(usedNamespaces.contains("namespace"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_MethodFunction_KaFI8_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_ConstructorFunction_FRoE9_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[0]);
        assertFalse(function instanceof ConstructorFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_MethodFunctionWithParameters_jiBx10_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_MethodFunctionWithDifferentParameters_VWUu12_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[2]);
        assertFalse(function instanceof MethodFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_ConstructorFunctionWithDifferentParameters_iQcr13_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Function function = packageFunctions.getFunction("namespace", "name", new Object[2]);
        assertFalse(function instanceof ConstructorFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_empty_wTdA0_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_single_BHxm1_1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "namespace");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertEquals(1, usedNamespaces.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_single_BHxm1_2() {
        PackageFunctions packageFunctions = new PackageFunctions("", "namespace");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertTrue(usedNamespaces.contains("namespace"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_null_AVgZ3_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", null);
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_emptyString_NMrz4() {
        PackageFunctions packageFunctions = new PackageFunctions("", "");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertFalse(usedNamespaces.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_invalidInput_NifK6_fid1() {
        PackageFunctions packageFunctions = new PackageFunctions("", "invalid");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_multiple_CDny1_GnMc0_1() {
        PackageFunctions packageFunctions = new PackageFunctions("namespace1", "namespace1");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertEquals(1, usedNamespaces.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_multiple_CDny2_GnMc0_2() {
        PackageFunctions packageFunctions = new PackageFunctions("namespace1", "namespace2");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertFalse(usedNamespaces.contains("namespace1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_multiple_CDny2_GnMc0_3() {
        PackageFunctions packageFunctions = new PackageFunctions("namespace1", "namespace2");
        Set<String> usedNamespaces = packageFunctions.getUsedNamespaces();
        assertTrue(usedNamespaces.contains("namespace2"));
    }
}