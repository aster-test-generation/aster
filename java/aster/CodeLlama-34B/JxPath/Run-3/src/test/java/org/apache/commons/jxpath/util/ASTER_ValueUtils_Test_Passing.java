/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_Culu0() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 1);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_gIUb1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 1);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_ZrBJ2() {
        Collection<Object> collection = new HashSet<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 1);
        assertEquals(2, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_YuUf3() {
        Object value = ValueUtils.getValue(null, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexOutOfBounds_Hegx4() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexOutOfBounds_List_ZNOZ5() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexOutOfBounds_Collection_Oujg6() {
        Collection<Object> collection = new HashSet<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidIndex_ezEx7() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidIndex_List_kjKa8() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidIndex_Collection_FWvp9() {
        Collection<Object> collection = new HashSet<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyCollection_RShW10() {
        Collection<Object> collection = new HashSet<>();
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyList_vshH11() {
        List<Object> list = new ArrayList<>();
        Object value = ValueUtils.getValue(list, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EmptyArray_AjHK12() {
        Object[] array = new Object[]{};
        Object value = ValueUtils.getValue(array, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Null_vcKl0() {
        Object value = null;
        assertFalse(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Array_zSfi1() {
        Object value = new int[5];
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Collection_tKux2() {
        Object value = new ArrayList<>();
        assertTrue(ValueUtils.isCollection(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_JNAn1() {
        List<Object> list = new ArrayList<Object>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        assertEquals(new ArrayList<Object>(Arrays.asList(1, 2, 4, 5)), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_ajNt2() {
        Collection<Object> collection = new HashSet<Object>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 2);
        assertEquals(new HashSet<Object>(Arrays.asList(1, 2, 4, 5)), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNull_GQeH3() {
        Object result = ValueUtils.remove(null, 2);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NonContainer_RCQx1() {
        Object object = new Object();
        Object value = ValueUtils.getValue(object);
        assertEquals(object, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_NXvH0() {
        Iterator<Object> iterator = ValueUtils.iterate(null);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_SgvX1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertEquals("b", iterator.next());
        assertEquals("c", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_LaSA2() {
        Collection<Object> collection = new ArrayList<Object>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertEquals("b", iterator.next());
        assertEquals("c", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_HExS3() {
        Object object = "a";
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyList_gsbn4() {
        Iterator<Object> iterator = ValueUtils.iterate(Collections.EMPTY_LIST);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_GMAz5() {
        Object[] array = new Object[0];
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullArray_BFPk6() {
        Object[] array = null;
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullCollection_EVIB7() {
        Collection<Object> collection = null;
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullSingletonList_uDbw8() {
        Object object = null;
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertNotNull(iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Array_noWV0() {
        Class clazz = int[].class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Collection_Pftx1() {
        Class clazz = ArrayList.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Primitive_VQgX2() {
        Class clazz = int.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_FinalClass_SdZp4() {
        Class clazz = String.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_NonFinalClass_dwvu5() {
        Class clazz = Object.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_ArrayOfReferenceTypes_Vkdk7() {
        Class clazz = String[].class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, hint);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_nKHn0() {
        Object[] array = new Object[10];
        ValueUtils.setValue(array, 5, "test");
        assertEquals("test", array[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_RmnO1() {
        List<Object> list = new ArrayList<>();
        list.add("test");
        ValueUtils.setValue(list, 0, "test2");
        assertEquals("test2", list.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullCollection_jbwX3() {
        Collection<Object> collection = null;
        ValueUtils.setValue(collection, 0, "test");
        assertNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_nullMethod_aSwy0() {
        Method method = null;
        Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
        assertNull(accessibleMethod);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Null_dyGD0() {
        int result = ValueUtils.getLength(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Array_GioE1() {
        int[] array = new int[]{1, 2, 3};
        int result = ValueUtils.getLength(array);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Collection_eyvM2() {
        List<Integer> list = Arrays.asList(1, 2, 3);
        int result = ValueUtils.getLength(list);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Other_IduB3() {
        Object object = new Object();
        int result = ValueUtils.getLength(object);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithInvalidClass_EQSp2() {
        Class clazz = String.class;
        try {
            ValueUtils.getDynamicPropertyHandler(clazz);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithInvalidConstructor_DGZy5() {
        Class clazz = DynamicPropertyHandler.class;
        try {
            ValueUtils.getDynamicPropertyHandler(clazz);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Null_CoNm0() {
        Object result = ValueUtils.expandCollection(null, 10);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
        assertEquals(1, Array.get(result, 0));
        assertEquals(2, Array.get(result, 1));
        assertEquals(3, Array.get(result, 2));
        assertNull(Array.get(result, 3));
        assertNull(Array.get(result, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
        assertEquals(1, ((Collection) result).toArray()[0]);
        assertEquals(2, ((Collection) result).toArray()[1]);
        assertEquals(3, ((Collection) result).toArray()[2]);
        assertNull(((Collection) result).toArray()[3]);
        assertNull(((Collection) result).toArray()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_NXvH0_1() {
        Iterator<Object> iterator = ValueUtils.iterate(null);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_NXvH0_2() {
        Iterator<Object> iterator = ValueUtils.iterate(null);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_SgvX1_1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_SgvX1_2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateArray_SgvX1_3() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_LaSA2_1() {
        Collection<Object> collection = new ArrayList<Object>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_LaSA2_2() {
        Collection<Object> collection = new ArrayList<Object>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_LaSA2_3() {
        Collection<Object> collection = new ArrayList<Object>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_HExS3_1() {
        Object object = "a";
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_HExS3_2() {
        Object object = "a";
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_HExS3_3() {
        Object object = "a";
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyList_gsbn4_1() {
        Iterator<Object> iterator = ValueUtils.iterate(Collections.EMPTY_LIST);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyList_gsbn4_2() {
        Iterator<Object> iterator = ValueUtils.iterate(Collections.EMPTY_LIST);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_GMAz5_1() {
        Object[] array = new Object[0];
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_GMAz5_2() {
        Object[] array = new Object[0];
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullArray_BFPk6_1() {
        Object[] array = null;
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullArray_BFPk6_2() {
        Object[] array = null;
        Iterator<Object> iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullCollection_EVIB7_1() {
        Collection<Object> collection = null;
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullCollection_EVIB7_2() {
        Collection<Object> collection = null;
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullSingletonList_uDbw8_1() {
        Object object = null;
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNullSingletonList_uDbw8_2() {
        Object object = null;
        Iterator<Object> iterator = ValueUtils.iterate(object);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(5, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_2() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(1, Array.get(result, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_3() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(2, Array.get(result, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_4() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertEquals(3, Array.get(result, 2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_5() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertNull(Array.get(result, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Array_SsOU1_6() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 5);
        assertNull(Array.get(result, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(5, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(1, ((Collection) result).toArray()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_3() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(2, ((Collection) result).toArray()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_4() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertEquals(3, ((Collection) result).toArray()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_5() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertNull(((Collection) result).toArray()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Collection_ClMP2_6() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 5);
        assertNull(((Collection) result).toArray()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_hWyw0_uupv0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        assertArrayEquals(new Object[]{1, 2, 4, 5}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveSingleElementArray_fRdU13_Fdcg0() {
        Object[] array = new Object[]{1};
        Object result = ValueUtils.remove(array, 0);
        assertArrayEquals(new Object[]{}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Interface_zyvA3_fid2() {
        Class clazz = List.class;
        int hint = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, hint);
    }
}