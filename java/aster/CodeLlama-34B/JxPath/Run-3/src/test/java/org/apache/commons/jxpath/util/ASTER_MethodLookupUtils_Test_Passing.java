/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_fApd0() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_EmptyParameters_FxKy1() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameter_cmtr4() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_NoMatch_hnvo5() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{null, null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_NoMatch_MultipleConstructors_rdem6() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{null, null, null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_NoMatch_MultipleConstructors_DifferentTypes_ukIU7() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{null, null, "parameter"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_NoMatch_MultipleConstructors_DifferentTypes_Reversed_aRqJ8() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"parameter", null, null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_NoMatch_MultipleConstructors_DifferentTypes_Reversed_2_nkhr9() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{null, "parameter", null};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_mFjj2() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "methodName", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NoSuchMethod_mzhV3() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "methodName", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullTargetClass_ZFqx0() {
        Method method = MethodLookupUtils.lookupMethod(null, "methodName", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullName_oGiG1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, null, new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullParameters_yZTL2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "methodName", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_EmptyParameters_gSFC3() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "methodName", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NoMatchingMethod_svuG4() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "methodName", new Object[]{"arg1"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_MethodWithParameters_UrLE7_1() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{1, 2});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_MethodWithParameters_UrLE7_2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "substring", new Object[]{1, 2});
        assertEquals("substring", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_MethodWithArrayReturnType_rNfc14() {
    }
}