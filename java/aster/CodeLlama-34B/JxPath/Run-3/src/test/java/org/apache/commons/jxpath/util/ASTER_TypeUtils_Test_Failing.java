/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TypeUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_differentTypes_KnQq3_1() {
        assertTrue(TypeUtils.canConvert(1, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_differentTypes_KnQq3_2() {
        assertTrue(TypeUtils.canConvert(1.0, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_differentTypes_KnQq3_3() {
        assertTrue(TypeUtils.canConvert(true, Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_differentTypes_KnQq3_4() {
        assertTrue(TypeUtils.canConvert('a', Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleTypes_ggvX4_1() {
        assertFalse(TypeUtils.canConvert(1, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleTypes_ggvX4_2() {
        assertFalse(TypeUtils.canConvert(1.0, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleTypes_ggvX4_3() {
        assertFalse(TypeUtils.canConvert(true, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleTypes_ggvX4_4() {
        assertFalse(TypeUtils.canConvert('a', Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_spWd5_1() {
        assertTrue(TypeUtils.canConvert(new int[]{1, 2, 3}, int[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_spWd5_2() {
        assertTrue(TypeUtils.canConvert(new double[]{1.0, 2.0, 3.0}, double[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_spWd5_3() {
        assertTrue(TypeUtils.canConvert(new boolean[]{true, false, true}, boolean[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_spWd5_4() {
        assertTrue(TypeUtils.canConvert(new char[]{'a', 'b', 'c'}, char[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleArrayTypes_KIHy6_1() {
        assertFalse(TypeUtils.canConvert(new int[]{1, 2, 3}, double[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleArrayTypes_KIHy6_2() {
        assertFalse(TypeUtils.canConvert(new double[]{1.0, 2.0, 3.0}, int[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleArrayTypes_KIHy6_3() {
        assertFalse(TypeUtils.canConvert(new boolean[]{true, false, true}, char[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleArrayTypes_KIHy6_4() {
        assertFalse(TypeUtils.canConvert(new char[]{'a', 'b', 'c'}, boolean[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_1() {
        assertTrue(TypeUtils.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_2() {
        assertTrue(TypeUtils.canConvert(new String(), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_3() {
        assertTrue(TypeUtils.canConvert(new Integer(1), Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_4() {
        assertTrue(TypeUtils.canConvert(new Double(1.0), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_5() {
        assertTrue(TypeUtils.canConvert(new Boolean(true), Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7_6() {
        assertTrue(TypeUtils.canConvert(new Character('a'), Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_1() {
        assertFalse(TypeUtils.canConvert(new Object(), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_2() {
        assertFalse(TypeUtils.canConvert(new String(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_3() {
        assertFalse(TypeUtils.canConvert(new Integer(1), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_4() {
        assertFalse(TypeUtils.canConvert(new Double(1.0), Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_5() {
        assertFalse(TypeUtils.canConvert(new Boolean(true), Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8_6() {
        assertFalse(TypeUtils.canConvert(new Character('a'), Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeConverter_cKUK0() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertNotNull(typeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_NullObject_jWdS0() {
        Object result = TypeUtils.convert(null, String.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_NullType_YPDx1() {
        Object result = TypeUtils.convert("hello", String.class);
        assertEquals(String.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_StringToInteger_dSvm2() {
        Object result = TypeUtils.convert("123", Integer.class);
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_StringToCharacter_wljy5() {
        Object result = TypeUtils.convert("a", Character.class);
        assertEquals(Character.valueOf('a'), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_IntegerToDouble_TuIb6() {
        Object result = TypeUtils.convert(123, Double.class);
        assertEquals(123.0d, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_BooleanToInteger_ntRC8() {
        Object result = TypeUtils.convert(true, Integer.class);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_CharacterToInteger_Pggs9() {
        Object result = TypeUtils.convert('a', Integer.class);
        assertEquals(97, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_BooleanToCharacter_EhAa12() {
        Object result = TypeUtils.convert(true, Character.class);
        assertEquals('t', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_CharacterToBoolean_BuiT13() {
        Object result = TypeUtils.convert('a', Boolean.class);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_StringToObject_NRjD14() {
        Object result = TypeUtils.convert("hello", Object.class);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToDouble_dMLu17() {
        Object result = TypeUtils.convert(new Object(), Double.class);
        assertEquals(0.0, result);
        // Fix: Change the expected value to match the return type of the method under test
        assertEquals(0.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToBoolean_ZuGF18() {
        Object result = TypeUtils.convert(new Object(), Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToCharacter_GxrI19() {
        Object result = TypeUtils.convert(new Object(), Character.class);
        assertNotNull(result);
        assertEquals(Character.class, result.getClass());
        assertEquals('\0', ((Character) result).charValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToObject_DcYR20() {
        Object result = TypeUtils.convert(new Object(), Object.class);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToNull_QyvM21() {
        Object result = TypeUtils.convert(new Object(), null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitive_null_WHtt2() {
        Class<?> wrapped = TypeUtils.wrapPrimitive(null);
        assertNull(wrapped);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_zaPQ0_fid2() {
        assertFalse(TypeUtils.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullToType_yVFO1() {
        assertFalse(TypeUtils.canConvert("hello", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_sameType_UgYk2() {
        assertTrue(TypeUtils.canConvert("hello", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_differentTypes_KnQq3() {
        assertTrue(TypeUtils.canConvert(1, Integer.class));
        assertTrue(TypeUtils.canConvert(1.0, Double.class));
        assertTrue(TypeUtils.canConvert(true, Boolean.class));
        assertTrue(TypeUtils.canConvert('a', Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleTypes_ggvX4() {
        assertFalse(TypeUtils.canConvert(1, String.class));
        assertFalse(TypeUtils.canConvert(1.0, Integer.class));
        assertFalse(TypeUtils.canConvert(true, Double.class));
        assertFalse(TypeUtils.canConvert('a', Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_spWd5() {
        assertTrue(TypeUtils.canConvert(new int[]{1, 2, 3}, int[].class));
        assertTrue(TypeUtils.canConvert(new double[]{1.0, 2.0, 3.0}, double[].class));
        assertTrue(TypeUtils.canConvert(new boolean[]{true, false, true}, boolean[].class));
        assertTrue(TypeUtils.canConvert(new char[]{'a', 'b', 'c'}, char[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleArrayTypes_KIHy6() {
        assertFalse(TypeUtils.canConvert(new int[]{1, 2, 3}, double[].class));
        assertFalse(TypeUtils.canConvert(new double[]{1.0, 2.0, 3.0}, int[].class));
        assertFalse(TypeUtils.canConvert(new boolean[]{true, false, true}, char[].class));
        assertFalse(TypeUtils.canConvert(new char[]{'a', 'b', 'c'}, boolean[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_objectTypes_XXBv7() {
        assertTrue(TypeUtils.canConvert(new Object(), Object.class));
        assertTrue(TypeUtils.canConvert(new String(), String.class));
        assertTrue(TypeUtils.canConvert(new Integer(1), Integer.class));
        assertTrue(TypeUtils.canConvert(new Double(1.0), Double.class));
        assertTrue(TypeUtils.canConvert(new Boolean(true), Boolean.class));
        assertTrue(TypeUtils.canConvert(new Character('a'), Character.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_incompatibleObjectTypes_fExU8() {
        assertFalse(TypeUtils.canConvert(new Object(), String.class));
        assertFalse(TypeUtils.canConvert(new String(), Object.class));
        assertFalse(TypeUtils.canConvert(new Integer(1), Double.class));
        assertFalse(TypeUtils.canConvert(new Double(1.0), Integer.class));
        assertFalse(TypeUtils.canConvert(new Boolean(true), Character.class));
        assertFalse(TypeUtils.canConvert(new Character('a'), Boolean.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_NullType_YPDx1_fid2() {
        Object result = TypeUtils.convert("hello", null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_StringToBoolean_lwCW4() {
        Object result = TypeUtils.convert("true", Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_IntegerToDouble_TuIb6_fid2() {
        Object result = TypeUtils.convert(123, Double.class);
        assertEquals(123.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_CharacterToBoolean_BuiT13_fid2() {
        Object result = TypeUtils.convert('a', Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_StringToObject_NRjD14_fid2() {
        Object result = TypeUtils.convert("hello", Object.class);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToString_cKcj15() {
        Object result = TypeUtils.convert(new Object(), String.class);
        assertEquals("java.lang.Object", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToDouble_dMLu17_fid2() {
        Object result = TypeUtils.convert(new Object(), Double.class);
        assertEquals(0.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToBoolean_ZuGF18_fid2() {
        Object result = TypeUtils.convert(new Object(), Boolean.class);
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToCharacter_GxrI19_fid2() {
        Object result = TypeUtils.convert(new Object(), Character.class);
        assertEquals('\0', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ObjectToObject_DcYR20_fid2() {
        Object result = TypeUtils.convert(new Object(), Object.class);
        assertEquals(new Object(), result);
    }
}