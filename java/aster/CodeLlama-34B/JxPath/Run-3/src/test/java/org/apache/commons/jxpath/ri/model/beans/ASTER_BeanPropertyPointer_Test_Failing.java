/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.PropertyDescriptor;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Failing {
    private static Object UNINITIALIZED = new Object();
    private Object value = UNINITIALIZED;
    private transient PropertyDescriptor[] propertyDescriptors;
    private JXPathBeanInfo beanInfo;
    private String propertyName;
    private Object baseValue = UNINITIALIZED;
    private transient PropertyDescriptor propertyDescriptor;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_1() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_2() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(1, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_3() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(1, propertyDescriptors.length);
        assertEquals("name", propertyDescriptors[0].getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_4() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertEquals(null, propertyDescriptors[0].getPropertyType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NullPropertyDescriptor_axnH0_fid1() {
        BeanPropertyPointer pointer = new BeanPropertyPointer(null, null);
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_CollectionPropertyDescriptor_SpNb2_BLiF0_fid3() {
        BeanPropertyPointer pointer = new BeanPropertyPointer(new DOMNodePointer(null, null, null), new JXPathBasicBeanInfo(List.class));
        assertTrue(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithNullBeanInfo_icEo3_sfIc0_fid3() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, null);
        Assertions.assertFalse(beanPropertyPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_2_fid3() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertEquals(1, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors1_ZMXa0_rwAf0_3_fid3() {
        QName name = new QName("name");
        KeywordVariables variables = new KeywordVariables(name.toString(), null);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        PropertyDescriptor[] propertyDescriptors = beanPropertyPointer.getPropertyDescriptors();
        assertEquals("name", propertyDescriptors[0].getName());
    }
}