/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_WLqo0() {
        Constant constant1 = new Constant("1");
        Constant constant2 = new Constant("2");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithDifferentConstants_nSkK1() {
        Constant constant1 = new Constant("3");
        Constant constant2 = new Constant("4");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithSameConstants_JSjo2() {
        Constant constant1 = new Constant("5");
        Constant constant2 = new Constant("5");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNullConstants_RDpu3() {
        Constant constant1 = null;
        Constant constant2 = null;
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNullConstant_LEig4() {
        Constant constant1 = new Constant("6");
        Constant constant2 = null;
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNumberConstant_bGGy5() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant(2);
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneStringConstant_bkkj6() {
        Constant constant1 = new Constant("7");
        Constant constant2 = new Constant("8");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNumberAndOneStringConstant_Evea7() {
        Constant constant1 = new Constant(1);
        Constant constant2 = new Constant("9");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneStringAndOneNumberConstant_GLZo8() {
        Constant constant1 = new Constant("10");
        Constant constant2 = new Constant(2);
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNullAndOneNumberConstant_AOBN9() {
        Constant constant1 = null;
        Constant constant2 = new Constant(3);
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNumberAndOneNullConstant_rJJK10() {
        Constant constant1 = new Constant(4);
        Constant constant2 = null;
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithOneNullAndOneStringConstant_wZzz11() {
        Constant constant1 = null;
        Constant constant2 = new Constant("11");
        CoreOperationSubtract operation = new CoreOperationSubtract(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("-", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNullContext_PBDH4() {
        Constant arg1 = new Constant("10");
        Constant arg2 = new Constant("5");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        Object result = operation.computeValue(null);
        assertEquals(5.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_True_uzos0() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("1");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_False_qGAc1() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("2");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Null_nGKB2() {
        Constant arg1 = new Constant("1");
        Constant arg2 = null;
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Invalid_tgfC3() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("a");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Negative_FVxv4() {
        Constant arg1 = new Constant("-1");
        Constant arg2 = new Constant("1");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Zero_kCWy5() {
        Constant arg1 = new Constant("0");
        Constant arg2 = new Constant("0");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Decimal_IjHN6() {
        Constant arg1 = new Constant("1.5");
        Constant arg2 = new Constant("1.5");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_ScientificNotation_nCUn7() {
        Constant arg1 = new Constant("1e10");
        Constant arg2 = new Constant("1e10");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidScientificNotation_JNTo8() {
        Constant arg1 = new Constant("1e10");
        Constant arg2 = new Constant("1e11");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidDecimal_jPPZ9() {
        Constant arg1 = new Constant("1.5");
        Constant arg2 = new Constant("1.6");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        assertFalse(operation.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithInvalidInput6_OaGn10() {
        Constant arg1 = new Constant("1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedenceWithInvalidInput2_ywDX6_QURo1() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("abc");
        CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
        int result = operation.getPrecedence();
    }
}