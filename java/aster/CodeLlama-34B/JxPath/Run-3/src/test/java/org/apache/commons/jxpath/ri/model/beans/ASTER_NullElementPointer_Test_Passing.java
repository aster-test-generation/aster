/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName name;
    @InjectMocks
    private NullElementPointer nullelementpointer;
    @Mock
    private KeywordVariables variables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullParent_bzPp2() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        try {
            nullElementPointer.setValue(new Object());
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertEquals("Collection element does not exist: " + nullElementPointer, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullNode_mjlt3() {
        NullElementPointer nullElementPointer = new NullElementPointer(new DOMNodePointer(null, new Locale("en")), 0);
        try {
            nullElementPointer.setValue(new Object());
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertEquals("Collection element does not exist: " + nullElementPointer, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithVariablePointer_SiGY5() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("name");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        NullElementPointer nullElementPointer = new NullElementPointer(variablePointer, 0);
        assertTrue(nullElementPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_EEXp0() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("qualifiedName");
        VariablePointer pointer = new VariablePointer(variables, name);
        NullElementPointer element = new NullElementPointer(pointer, 0);
        assertEquals(null, element.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullelementpointer = new NullElementPointer(parent, 0);
        assertFalse(nullelementpointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue2_FlWd1_Hjkv0() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
        DOMNodePointer nodePointer = new DOMNodePointer(pointer, null);
        NullElementPointer elementPointer = new NullElementPointer(nodePointer, 0);
        Object baseValue = elementPointer.getBaseValue();
        assertNull(baseValue);
    }
}