/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    private Object collection;
    private NodePointer valuePointer;
    CollectionPointer collectionpointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithInvalidName_zOzJ3() {
        QName name = new QName("invalid");
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), Locale.ENGLISH);
        NodeIterator iterator = collectionPointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullName_buFQ4() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), Locale.ENGLISH);
        NodeIterator iterator = collectionPointer.attributeIterator(null);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullLocale_vnnh7() {
        QName name = new QName("name");
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), null);
        NodeIterator iterator = collectionPointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithInvalidLocale_iNWW8() {
        QName name = new QName("name");
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<>(), Locale.FRENCH);
        NodeIterator iterator = collectionPointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullNode_zMFd9() {
        QName name = new QName("name");
        DOMNodePointer parent = new DOMNodePointer(null, Locale.ENGLISH);
        CollectionPointer collectionPointer = new CollectionPointer(parent, new ArrayList<>());
        NodeIterator iterator = collectionPointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_oHYc0() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<String>(), Locale.ENGLISH);
        int index = 0;
        collectionPointer.setIndex(index);
        assertNull(collectionPointer.getValuePointer());
        index = -1;
        collectionPointer.setIndex(index);
        assertNull(collectionPointer.getValuePointer());
        index = 0;
        collectionPointer.setIndex(index);
        assertNotNull(collectionPointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        collectionpointer = new CollectionPointer(collection, Locale.ENGLISH);
        assertEquals(collectionpointer, collectionpointer);
        assertNotEquals(collectionpointer, new CollectionPointer(collection, Locale.FRENCH));
        assertNotEquals(collectionpointer, new CollectionPointer(new Object(), Locale.ENGLISH));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameCollectionAndIndex_DifferentLocale_XJzy7() {
        List<String> collection = new ArrayList<>();
        collection.add("item1");
        collection.add("item2");
        CollectionPointer pointer1 = new CollectionPointer(collection, Locale.ENGLISH);
        CollectionPointer pointer2 = new CollectionPointer(collection, Locale.FRENCH);
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_Index_ypmL1() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<Object>(), Locale.ENGLISH);
        NodePointer valuePointer = collectionPointer.getValuePointer();
        assertNotSame(collectionPointer, valuePointer);
        assertEquals(0, valuePointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_oHYc0_1() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<String>(), Locale.ENGLISH);
        int index = 0;
        collectionPointer.setIndex(index);
        index = -1;
        collectionPointer.setIndex(index);
        index = 0;
        collectionPointer.setIndex(index);
        assertNull(collectionPointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        collectionpointer = new CollectionPointer(collection, Locale.ENGLISH);
        assertNotEquals(collectionpointer, new CollectionPointer(collection, Locale.FRENCH));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_Index_ypmL1_1() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<Object>(), Locale.ENGLISH);
        NodePointer valuePointer = collectionPointer.getValuePointer();
        assertNotSame(collectionPointer, valuePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_Index_ypmL1_2() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<Object>(), Locale.ENGLISH);
        NodePointer valuePointer = collectionPointer.getValuePointer();
        assertEquals(0, valuePointer.getIndex());
    }
}