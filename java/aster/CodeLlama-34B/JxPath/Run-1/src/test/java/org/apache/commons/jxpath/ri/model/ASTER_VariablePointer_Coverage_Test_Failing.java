/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_VariablePointer_Coverage_Test_Failing {
    private KeywordVariables keywordVariables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_BaseValue_GqMe0() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object value = variablePointer.getBaseValue();
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WholeCollection_oGdO1() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object value = variablePointer.getBaseValue();
        assertEquals(ValueUtils.getValue(value), variablePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_Index_dNgw2() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        Object value = variablePointer.getBaseValue();
        int index = 0;
        assertEquals(ValueUtils.getValue(value, index), variablePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_fqgQ0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        variablePointer.setIndex(1);
        assertNull(variablePointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithKeywordVariables_ezad1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        variablePointer.setIndex(1);
        assertNull(variablePointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_nullValue_gyzL4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.setValue(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Value cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_invalidIndex_eepZ5() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.index = -1;
        try {
            variablePointer.setValue(new Object());
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Index: -1, Size: 0", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_invalidCollection_MDlY6() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.index = 1;
        try {
            variablePointer.setValue(new Object());
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
            assertEquals("java.lang.Object cannot be cast to java.util.Collection", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_invalidValue_NukF7() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.setValue(new Object());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid value for variable 'name'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_nullName_Bmmc8() {
        VariablePointer variablePointer = new VariablePointer(new QName(null));
        try {
            variablePointer.setValue(new Object());
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Name cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_GgNm0() {
        QName qName = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(qName);
        NodeIterator iterator = pointer.namespaceIterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_FBtw0_1() {
        VariablePointer vp = new VariablePointer(new QName("name"));
        NodePointer np = vp.namespacePointer("name");
        assertNotNull(np);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_FBtw0_2() {
        VariablePointer vp = new VariablePointer(new QName("name"));
        NodePointer np = vp.namespacePointer("name");
        assertEquals("name", np.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer1_jOHv0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.getImmediateValuePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Qist0_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Qist0_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getIndex(), index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Qist0_3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getName(), name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Qist0_4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getValue(), value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getIndex(), index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3_3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getName(), name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3_4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getValue(), value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3_5() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getLocale(), locale);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_indexedCollection_AFGF2_WywW0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.index = 1;
        variablePointer.setValue(new Object());
        assertNotNull(variablePointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_wholeCollection_GlyV1_JXln0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setValue(new Object());
        assertNull(variablePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_nullVariables_pOew9_jMGr0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.setValue(new Object());
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Variables cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_keywordVariables_indexLessThanZero_DPnG7_JTAU0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        variablePointer.setIndex(-1);
        variablePointer.remove();
        assertTrue(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_withValue_Zkdi0_fid1() {
        QName name = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, name);
        Object value = pointer.getBaseValue();
        assertTrue(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_myEt0_fid1() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariables_GSwu2_fid1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("name");
        VariablePointer pointer = new VariablePointer(variables, name);
        String path = pointer.asPath();
        assertEquals("$keyword:name", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_keywordVariables_indexLessThanZero_DPnG7_JTAU0_fid1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        variablePointer.setIndex(-1);
        variablePointer.remove();
        assertFalse(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_FBtw0() {
        VariablePointer vp = new VariablePointer(new QName("name"));
        NodePointer np = vp.namespacePointer("name");
        assertNotNull(np);
        assertEquals("name", np.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_Qist0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
        assertEquals(nodePointer.getIndex(), index);
        assertEquals(nodePointer.getName(), name);
        assertEquals(nodePointer.getValue(), value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
        assertEquals(nodePointer.getIndex(), index);
        assertEquals(nodePointer.getName(), name);
        assertEquals(nodePointer.getValue(), value);
        assertEquals(nodePointer, clone);
    }
}