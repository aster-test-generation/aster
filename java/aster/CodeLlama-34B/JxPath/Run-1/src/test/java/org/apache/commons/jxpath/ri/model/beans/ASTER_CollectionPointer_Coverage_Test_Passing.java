/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CollectionPointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_mdAj0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ENGLISH);
        assertTrue(collectionPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WholeCollection_rivw0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeTest test = null;
        assertTrue(collectionPointer.testNode(test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_YHcJ3() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(collectionPointer.testNode(test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_OtherTest_RAxg4() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertFalse(collectionPointer.testNode(test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicValue_mdBi1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Integer(1), Locale.ENGLISH);
        assertTrue(collectionPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_OfjA1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        int length = collectionPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithKeywordVariables_zJvF2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        CollectionPointer collectionPointer = new CollectionPointer(variablePointer, new Object());
        int length = collectionPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_roPC0() {
        CollectionPointer collectionPointer = new CollectionPointer(new ArrayList<String>(), Locale.ENGLISH);
        NodeIterator nodeIterator = collectionPointer.namespaceIterator();
        assertNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_Wbbx0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.ENGLISH);
        assertFalse(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_gYtc0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en", "US"));
        NodePointer nodePointer = collectionPointer.namespacePointer("test");
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_tVkv0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.ENGLISH);
        assertTrue(cp.equals(cp));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_zJov1() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.ENGLISH);
        assertFalse(cp.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameCollection_Qjsp3() {
        Object collection = new Object();
        CollectionPointer cp1 = new CollectionPointer(collection, Locale.ENGLISH);
        CollectionPointer cp2 = new CollectionPointer(collection, Locale.ENGLISH);
        assertTrue(cp1.equals(cp2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCollection_rWBP4() {
        CollectionPointer cp1 = new CollectionPointer(new Object(), Locale.ENGLISH);
        CollectionPointer cp2 = new CollectionPointer(new Object(), Locale.ENGLISH);
        assertFalse(cp1.equals(cp2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_JFOS2_VwJl0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        NodeTest test = new NodeNameTest(new QName("test"));
        assertFalse(collectionPointer.testNode(test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_xVyB0_lETx0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(1);
        assertNotNull(collectionPointer.getBaseValue());
    }
}