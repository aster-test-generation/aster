/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NamespaceResolver_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithExternallyRegisteredPrefix_PxYs0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String namespaceURI = "http://example.com/namespace";
        String prefix = resolver.getPrefix(namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NullPointerAndParent_CNvd0() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertEquals(parent.getNamespaceContextPointer(), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_1_IhGt0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "ns";
        String expectedUri = "http://example.com/ns";
        resolver.namespaceMap.put(prefix, expectedUri);
        String actualUri = resolver.getExternallyRegisteredNamespaceURI(prefix);
        assertEquals(expectedUri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_2_erTl1() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "ns";
        String expectedUri = null;
        String actualUri = resolver.getExternallyRegisteredNamespaceURI(prefix);
        assertEquals(expectedUri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_3_WyNN2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        String prefix = "ns";
        String expectedUri = "http://example.com/ns";
        parent.namespaceMap.put(prefix, expectedUri);
        String actualUri = resolver.getExternallyRegisteredNamespaceURI(prefix);
        assertEquals(expectedUri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withExternallyRegisteredNamespaceURI_hyRt0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "prefix";
        String uri = "http://example.com";
        resolver.registerNamespace(prefix, uri);
        String actualUri = resolver.getNamespaceURI(prefix);
        assertEquals(uri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withParentNamespaceURI_GyEx1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        String prefix = "prefix";
        String uri = "http://example.com";
        parentResolver.registerNamespace(prefix, uri);
        String actualUri = resolver.getNamespaceURI(prefix);
        assertEquals(uri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withNullPointer_ymjN2() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = "prefix";
        String actualUri = resolver.getNamespaceURI(prefix);
        assertNull(actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_sealed_EuIG0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.seal();
        try {
            resolver.registerNamespace("prefix", "namespaceURI");
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
            assertEquals("Cannot register namespaces on a sealed NamespaceResolver", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_namespaceMap_OhFz1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_reverseMap_tsXz2() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithNullParent_AAUr0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithNonNullParent_HSqT1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithNullNamespaceURI_HATl2() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = resolver.getExternallyRegisteredPrefix(null);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithEmptyNamespaceURI_IRam3() {
        NamespaceResolver resolver = new NamespaceResolver();
        String prefix = resolver.getExternallyRegisteredPrefix("");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURI_RvgG5() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParent_GgfA6() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParentWithSamePrefix_JeTJ7() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        parentResolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParentWithDifferentPrefix_SMfQ8() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        parentResolver.registerNamespace("http://example.com", "prefix2");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_wWHG0_1() {
        NamespaceResolver resolver = new NamespaceResolver();
        Object clone = resolver.clone();
        assertNotNull(clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_wWHG0_2() {
        NamespaceResolver resolver = new NamespaceResolver();
        Object clone = resolver.clone();
        assertTrue(clone instanceof NamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithParent_LrNt1_1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Object clone = resolver.clone();
        assertNotNull(clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithParent_LrNt1_2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Object clone = resolver.clone();
        assertTrue(clone instanceof NamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithParent_LrNt1_3() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Object clone = resolver.clone();
        assertNotSame(resolver, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNullPointer_OhBz6() {
        NodePointer pointer = null;
        String namespaceURI = "http://www.example.com";
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNullPointerAndNamespaceURI_lGqK9() {
        NodePointer pointer = null;
        String namespaceURI = null;
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNullPointerAndEmptyNamespaceURI_tKZq10() {
        NodePointer pointer = null;
        String namespaceURI = "";
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_wWHG0() {
        NamespaceResolver resolver = new NamespaceResolver();
        Object clone = resolver.clone();
        assertNotNull(clone);
        assertTrue(clone instanceof NamespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithParent_LrNt1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        Object clone = resolver.clone();
        assertNotNull(clone);
        assertTrue(clone instanceof NamespaceResolver);
        assertNotSame(resolver, clone);
    }
}