/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Failing {
    private Expression expression;
    private Expression[] predicates;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithConstantAndPredicates_LNjO0() {
        Constant constant = new Constant("constant");
        Expression[] predicates = new Expression[]{new Constant("predicate1"), new Constant("predicate2")};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        assertEquals("(constant)[predicate1][predicate2]", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_singlePredicate_rsGJ1_2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(new Constant(1), predicates[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_multiplePredicates_zgfS2_2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1), new Constant(2)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(new Constant(1), predicates[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_multiplePredicates_zgfS2_3() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1), new Constant(2)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(new Constant(2), predicates[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nullPredicates_mDML3() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), null, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(0, predicates.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nullSteps_swul5_2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1)}, null);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(new Constant(1), predicates[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nullExpression_bSXY7() {
        ExpressionPath expressionPath = new ExpressionPath(null, new Expression[]{new Constant(1)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(0, predicates.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nullExpressionAndPredicates_JnEQ9() {
        ExpressionPath expressionPath = new ExpressionPath(null, null, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(0, predicates.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ExpressionIsContextDependent_nvaV0() {
        Constant expression = new Constant("expression");
        ExpressionPath path = new ExpressionPath(expression, null, null);
        assertTrue(path.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_PredicatesIsContextDependent_BfPQ1() {
        Constant expression = new Constant("expression");
        Expression predicate1 = new Constant("predicate1");
        Expression predicate2 = new Constant("predicate2");
        Expression[] predicates = new Expression[]{predicate1, predicate2};
        ExpressionPath path = new ExpressionPath(expression, predicates, null);
        assertTrue(path.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_Constant_ahzC0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[0], new Step[0]);
        Expression expression = expressionPath.getExpression();
        assertEquals(new Constant("test"), expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_Number_Phhi1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(123), new Expression[0], new Step[0]);
        Expression expression = expressionPath.getExpression();
        assertEquals(new Constant(123), expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNumberAndPredicates_ODmp3_jeZg0() {
        Constant number = new Constant(123);
        Expression[] predicates = new Expression[]{new Constant("predicate1"), new Constant("predicate2")};
        ExpressionPath expressionPath = new ExpressionPath(number, predicates, null);
        assertEquals("123[predicate1][predicate2]", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ykoH0_RFWU0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        Object result = expressionPath.computeValue(context);
        assertEquals(result, context.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNextNode_jWGS2_XpNf0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        context.nextNode();
        Object result = expressionPath.computeValue(context);
        assertEquals(result, context.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNextSet_dfDs3_aUil0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        context.nextSet();
        Object result = expressionPath.computeValue(context);
        assertEquals(result, context.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithReset_Twtz5_WeUJ0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        context.reset();
        Object result = expressionPath.computeValue(context);
        assertEquals(result, context.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithGetNodeSet_vlBN6_lXLa0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        Object result = expressionPath.computeValue(context);
        assertTrue(result instanceof NodeSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithGetContextNodeList_JaTx7_IccJ0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        Object result = expressionPath.computeValue(context);
        assertTrue(result instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_Predicates_CSNc4_WQpP0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[]{new Constant("test")}, new Step[0]);
        Expression expression = expressionPath.getExpression();
        assertEquals(new Constant("test"), expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPathWithNodeSetContext_xhYk2_cWCX1() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        EvalContext evalContext = new SelfContext(new NamespaceContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        Object result = new ExpressionPath(expression, predicates, steps).expressionPath(evalContext, false);
        assertTrue(result instanceof NodeSetContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithGetNodeSet_vlBN6_lXLa0_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        NodeSet result = (NodeSet) expressionPath.computeValue(context);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_singlePredicate_rsGJ1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(1, predicates.length);
        assertEquals(new Constant(1), predicates[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_multiplePredicates_zgfS2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1), new Constant(2)}, new Step[0]);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(2, predicates.length);
        assertEquals(new Constant(1), predicates[0]);
        assertEquals(new Constant(2), predicates[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_nullSteps_swul5() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(""), new Expression[]{new Constant(1)}, null);
        Expression[] predicates = expressionPath.getPredicates();
        assertEquals(1, predicates.length);
        assertEquals(new Constant(1), predicates[0]);
    }
}