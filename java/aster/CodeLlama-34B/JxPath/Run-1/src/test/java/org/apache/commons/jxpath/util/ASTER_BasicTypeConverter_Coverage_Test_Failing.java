/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Failing {
    private BasicTypeConverter converter = new BasicTypeConverter();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Null_qNWy1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive(null, Double.class);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_1_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_2_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_3_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_4_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_5_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_1_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_2_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_3_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_4_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_5_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Object.class));
        assertFalse(converter.canConvert(new Object(), String.class));
        assertFalse(converter.canConvert(new Object(), Integer.class));
        assertFalse(converter.canConvert(new Object(), Long.class));
        assertFalse(converter.canConvert(new Object(), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(null, Object.class));
        assertFalse(converter.canConvert(null, String.class));
        assertFalse(converter.canConvert(null, Integer.class));
        assertFalse(converter.canConvert(null, Long.class));
        assertFalse(converter.canConvert(null, Double.class));
    }
}