/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationNotEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Lswi0() {
        CoreOperationNotEqual operation = new CoreOperationNotEqual(new Constant("a"), new Constant("b"));
        assertEquals("!=", operation.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNumbers_RUls1() {
        CoreOperationNotEqual operation = new CoreOperationNotEqual(new Constant(1), new Constant(2));
        assertEquals("!=", operation.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithMixedTypes_cFbf2() {
        CoreOperationNotEqual operation = new CoreOperationNotEqual(new Constant("a"), new Constant(1));
        assertEquals("!=", operation.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNull_LgMl3() {
        CoreOperationNotEqual operation = new CoreOperationNotEqual(null, null);
        assertEquals("!=", operation.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithEmptyString_ISOO4() {
        CoreOperationNotEqual operation = new CoreOperationNotEqual(new Constant(""), new Constant(""));
        assertEquals("!=", operation.getSymbol());
    }
}