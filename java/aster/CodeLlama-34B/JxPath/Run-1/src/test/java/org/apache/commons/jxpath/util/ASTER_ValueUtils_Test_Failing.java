/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType_IaMh9() {
        Object value = ValueUtils.getValue("hello", 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType2_vumq10() {
        Object value = ValueUtils.getValue(1, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType3_vdGf11() {
        Object value = ValueUtils.getValue(new Object(), 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType4_IjXV12() {
        Object value = ValueUtils.getValue(new Object[]{1, 2, 3}, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType7_ROsq15() {
        Object value = ValueUtils.getValue(new HashMap<Object, Object>(), 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullCollection_XjSm4() {
        try {
            ValueUtils.remove(null, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove null[0]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_qzIy0() {
        Iterator iterator = ValueUtils.iterate(null);
        assertTrue(iterator.hasNext());
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Interface_wROY3() {
        Class clazz = List.class;
        int expected = 0;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullPropertyDescriptor_NhIM1() {
        Object bean = new Object();
        Object value = "John Doe";
        try {
            ValueUtils.setValue(bean, null, value);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No write method", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullCollection_OpMw3() {
        try {
            ValueUtils.setValue(null, 1, "test");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("collection is null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_InvalidIndex_aSyE4() {
        Object[] array = new Object[5];
        try {
            ValueUtils.setValue(array, 10, "test");
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            assertEquals("Index: 10, Size: 5", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_InvalidValue_Bvhg5() {
        Object[] array = new Object[5];
        try {
            ValueUtils.setValue(array, 2, 10);
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
            assertEquals("Cannot cast java.lang.Integer to java.lang.Object", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_propertyDescriptorIsNull_Bdba1() {
        Object value = ValueUtils.getValue(new Object(), null);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_qzIy0_1() {
        Iterator iterator = ValueUtils.iterate(null);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2_3() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("b", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2_4() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2_5() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3_3() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("b", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3_4() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("c", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3_5() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_zNZj4_3() {
        Object object = "a";
        Iterator iterator = ValueUtils.iterate(object);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateInvalidType_qZOd5_3() {
        Object object = new Object();
        Iterator iterator = ValueUtils.iterate(object);
        assertFalse(iterator.hasNext());
    }
}