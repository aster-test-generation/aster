/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMNodePointer_Coverage_Test_Passing {
    JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Attribute("attr1", "value1"), null);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(null, null, null);
    JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Attribute("attr1", null), null);
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), null);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_uKSY0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertFalse(jdomNodePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_JUuv0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        int actual = jdomNodePointer.hashCode();
        assertEquals(jdomNodePointer.getNode().hashCode(), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_node1IsNotElementAndNode2IsElement_geyJ3() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text1"), null);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("elem1"), null);
        assertEquals(1, nodePointer1.compareChildNodePointers(nodePointer2, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_bothNodesAreElements_ACvj4_1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("elem1"), null);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("elem2"), null);
        List<Element> elements = new ArrayList<>();
        elements.add(new Element("elem1"));
        elements.add(new Element("elem2"));
        Element parentElement = new Element("parent");
        parentElement.addContent(elements);
        JDOMNodePointer nodePointer3 = new JDOMNodePointer(parentElement, null);
        assertEquals(-1, nodePointer1.compareChildNodePointers(nodePointer2, nodePointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_bothNodesAreElements_ACvj4_2() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("elem1"), null);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("elem2"), null);
        List<Element> elements = new ArrayList<>();
        elements.add(new Element("elem1"));
        elements.add(new Element("elem2"));
        Element parentElement = new Element("parent");
        parentElement.addContent(elements);
        JDOMNodePointer nodePointer3 = new JDOMNodePointer(parentElement, null);
        assertEquals(1, nodePointer2.compareChildNodePointers(nodePointer1, nodePointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_node1IsNotElementAndNode2IsNotElement_ecbf5() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text1"), null);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Text("text2"), null);
        assertEquals(0, nodePointer1.compareChildNodePointers(nodePointer2, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_VgjP0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodeIterator nodeIterator = jdomNodePointer.namespaceIterator();
        assertTrue(nodeIterator instanceof JDOMNamespaceIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Null_IzyS2() {
        Assertions.assertNull(JDOMNodePointer.getPrefix(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NonElementNonAttribute_LSdT3() {
        Assertions.assertNull(JDOMNodePointer.getPrefix(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithoutPrefix_RQNt4() {
        Element element = new Element("test", "http://www.example.com");
        Assertions.assertNull(JDOMNodePointer.getPrefix(element));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_AttributeWithoutPrefix_zNNX5() {
        Attribute attribute = new Attribute("test", "value");
        Assertions.assertNull(JDOMNodePointer.getPrefix(attribute));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_YNhw2() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_pwmj1_1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("ns", "ln"), null);
        QName qName = jdomNodePointer.getName();
        Assertions.assertEquals("ns", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_pwmj1_2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("ns", "ln"), null);
        QName qName = jdomNodePointer.getName();
        Assertions.assertEquals("ln", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_XTmQ0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertTrue(jdomNodePointer.equals(jdomNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_RyTO1() {
        JDOMNodePointer jdomNodePointer1 = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        JDOMNodePointer jdomNodePointer2 = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertFalse(jdomNodePointer1.equals(jdomNodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_kURh2() {
        Object node = new Object();
        JDOMNodePointer jdomNodePointer1 = new JDOMNodePointer(node, Locale.ENGLISH);
        JDOMNodePointer jdomNodePointer2 = new JDOMNodePointer(node, Locale.ENGLISH);
        assertTrue(jdomNodePointer1.equals(jdomNodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_PkTg0_1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodePointer namespacePointer = jdomNodePointer.namespacePointer("prefix");
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_PkTg0_2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodePointer namespacePointer = jdomNodePointer.namespacePointer("prefix");
        assertEquals(jdomNodePointer, namespacePointer.getParent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_PkTg0_3() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodePointer namespacePointer = jdomNodePointer.namespacePointer("prefix");
        assertEquals("prefix", namespacePointer.getName().getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage1_DKJE0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        String lang = "en";
        boolean result = jdomNodePointer.isLanguage(lang);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage2_rnwf1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.FRENCH);
        String lang = "fr";
        boolean result = jdomNodePointer.isLanguage(lang);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage3_xDfg2() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        String lang = "es";
        boolean result = jdomNodePointer.isLanguage(lang);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Document_ROEF0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        String namespaceURI = nodePointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_Element_Kwfk1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), Locale.ENGLISH);
        String namespaceURI = nodePointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode1_coji0() throws Exception {
        NodeTest test = null;
        Object node = new Object();
        boolean result = JDOMNodePointer.testNode(null, node, test);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode2_loCl1() throws Exception {
        NodeTest test = new NodeNameTest(new QName("test"));
        Object node = new Object();
        boolean result = JDOMNodePointer.testNode(null, node, test);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute5_IYVu4() {
        Element e = new Element("element", "http://www.example.com/ns");
        e.setAttribute("attr", "value");
        Object n = e;
        String attrName = "attr";
        Namespace ns = null;
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocumentNode_OEXS0_gjtt0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        assertTrue(jdomNodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Attribute_pfUQ1_lbwr0() {
        Attribute attribute = new Attribute("test", "value");
        Assertions.assertEquals("test", JDOMNodePointer.getPrefix(attribute));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode3_GCRK2_uxPM0() throws Exception {
        NodeTest test = new NodeNameTest(new QName("test"));
        Object node = new Element("test", "http://www.example.com");
        boolean result = JDOMNodePointer.testNode(null, node, test);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueElementWithChildrenAndTrim_yCPs5_YhlB0() {
        Element element = new Element("test");
        element.addContent(new Text("test "));
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(element, Locale.ENGLISH);
        String expected = "test";
        String actual = (String) jdomNodePointer.getValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueElementWithChildren_jPhV4_iKDK0() {
        Element element = new Element("test");
        element.addContent(new Text("test"));
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(element, Locale.ENGLISH);
        String expected = "testtest";
        Object actual = jdomNodePointer.getValue();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_fMDG0_dSrj0() {
        Object n = new Object();
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns", "http://www.example.com/ns");
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute2_tvpF1_lQQI0() {
        Element e = new Element("element", "http://www.example.com/ns");
        Object n = e;
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns", "http://www.example.com/ns");
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute3_AqHQ2_DGwW0() {
        Element e = new Element("element", "http://www.example.com/ns");
        e.setAttribute("attr", "");
        Object n = e;
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns", "http://www.example.com/ns");
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute4_qmWn3_EFVU0() {
        Element e = new Element("element", "http://www.example.com/ns");
        e.setAttribute("attr", "value");
        Object n = e;
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns", "http://www.example.com/ns");
        String result = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_bothNodesAreElements_ACvj4() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("elem1"), null);
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("elem2"), null);
        List<Element> elements = new ArrayList<>();
        elements.add(new Element("elem1"));
        elements.add(new Element("elem2"));
        Element parentElement = new Element("parent");
        parentElement.addContent(elements);
        JDOMNodePointer nodePointer3 = new JDOMNodePointer(parentElement, null);
        assertEquals(-1, nodePointer1.compareChildNodePointers(nodePointer2, nodePointer3));
        assertEquals(1, nodePointer2.compareChildNodePointers(nodePointer1, nodePointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_pwmj1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("ns", "ln"), null);
        QName qName = jdomNodePointer.getName();
        Assertions.assertEquals("ns", qName.getPrefix());
        Assertions.assertEquals("ln", qName.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_PkTg0() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), new Locale("en"));
        NodePointer namespacePointer = jdomNodePointer.namespacePointer("prefix");
        assertTrue(namespacePointer instanceof JDOMNamespacePointer);
        assertEquals(jdomNodePointer, namespacePointer.getParent());
        assertEquals("prefix", namespacePointer.getName().getPrefix());
    }
}