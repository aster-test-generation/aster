/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeTypeTest_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_node_SWDK0() {
        int code = Compiler.NODE_TYPE_NODE;
        String result = NodeTypeTest.nodeTypeToString(code);
        assertEquals("node", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_text_jVTA1() {
        int code = Compiler.NODE_TYPE_TEXT;
        String result = NodeTypeTest.nodeTypeToString(code);
        assertEquals("text", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_comment_NWnP2() {
        int code = Compiler.NODE_TYPE_COMMENT;
        String result = NodeTypeTest.nodeTypeToString(code);
        assertEquals("comment", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_pi_cFGt3() {
        int code = Compiler.NODE_TYPE_PI;
        String result = NodeTypeTest.nodeTypeToString(code);
        assertEquals("processing-instruction", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToString_unknown_imnw4() {
        int code = 100; // any value that is not defined in Compiler.NODE_TYPE_XXX
        String result = NodeTypeTest.nodeTypeToString(code);
        assertEquals("UNKNOWN", result);
    }
}