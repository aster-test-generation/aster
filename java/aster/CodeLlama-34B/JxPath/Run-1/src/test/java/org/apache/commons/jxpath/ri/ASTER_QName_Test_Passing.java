/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_VVnG0() {
        QName qName = new QName("qualifiedName");
        assertTrue(qName.equals(qName));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObjects_kHix1() {
        QName qName1 = new QName("qualifiedName");
        QName qName2 = new QName("qualifiedName");
        assertFalse(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_XmWn3() {
        QName qName = new QName("qualifiedName");
        assertFalse(qName.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentQualifiedName_Tzbg4() {
        QName qName1 = new QName("qualifiedName1");
        QName qName2 = new QName("qualifiedName2");
        assertFalse(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentPrefix_tRgK5() {
        QName qName1 = new QName("prefix1", "localName");
        QName qName2 = new QName("prefix2", "localName");
        assertFalse(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLocalName_MCZE6() {
        QName qName1 = new QName("prefix", "localName1");
        QName qName2 = new QName("prefix", "localName2");
        assertFalse(qName1.equals(qName2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_lEDJ0() {
        QName qName = new QName("qualifiedName");
        String name = qName.getName();
        assertEquals("qualifiedName", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_vTha1() {
        QName qName = new QName("prefix", "localName");
        String name = qName.getName();
        assertEquals("prefix:localName", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_qLXm2() {
        QName qName = new QName("prefix", null);
        String name = qName.getName();
        assertEquals("prefix", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix1_ltAf0() {
        QName qName = new QName("prefix:localName");
        assertEquals("prefix", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix2_WSgg1() {
        QName qName = new QName("prefix", "localName");
        assertEquals("prefix", qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix3_lRSE2() {
        QName qName = new QName("localName");
        assertNull(qName.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithQualifiedName_bXAh0() {
        QName qName = new QName("prefix:localName");
        String expected = "prefix:localName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPrefixAndLocalName_nrxN1() {
        QName qName = new QName("prefix", "localName");
        String expected = "prefix:localName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullQualifiedName_gwcO2() {
        QName qName = new QName(null);
        String expected = null;
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyQualifiedName_jaky3() {
        QName qName = new QName("");
        String expected = "";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullPrefix_ehAM5() {
        QName qName = new QName(null, "localName");
        String expected = "localName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyPrefix_zrWp6() {
        QName qName = new QName("", "localName");
        String expected = "localName";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullLocalName_zJrH8() {
        QName qName = new QName("prefix", null);
        String expected = "prefix";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLocalName_bWjE9() {
        QName qName = new QName("prefix", "");
        String expected = "prefix";
        String actual = qName.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_VQNB0() {
        QName qName = new QName("prefix", "localName");
        int expectedHashCode = "prefix:localName".hashCode();
        int actualHashCode = qName.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullPrefix_mZHX1() {
        QName qName = new QName(null, "localName");
        int expectedHashCode = "localName".hashCode();
        int actualHashCode = qName.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullLocalName_rHtg2() {
        QName qName = new QName("prefix", null);
        int expectedHashCode = "prefix".hashCode();
        int actualHashCode = qName.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullPrefixAndLocalName_QTwu3() {
        QName qName = new QName(null, null);
        int expectedHashCode = 0;
        int actualHashCode = qName.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithEmptyPrefixAndLocalName_dUJD4() {
        QName qName = new QName("", "");
        int expectedHashCode = 0;
        int actualHashCode = qName.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
}