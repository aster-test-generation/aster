/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    private TreeCompiler treeCompiler;
    private TreeCompiler compiler = new TreeCompiler();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMod_bothAreNull_HEry2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.mod(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_nullArgument_CLNN0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.minus(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_nonExpressionArgument_aTQD1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.minus(new Object());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_BothAreNull_yCTO2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.multiply(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQnameWithNullPrefix_frWu0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.qname(null, "name");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQnameWithEmptyPrefix_OqbP1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.qname("", "name");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQnameWithNullName_IHLg2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.qname("prefix", null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQnameWithEmptyName_gvAn3() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.qname("prefix", "");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_nullArgumentAndInvalidArgument_qqch12() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteralWithNull_TasE1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteralWithInvalidValue_knae4() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.literal("invalid");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNotEqual_nullBoth_uCLA4() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.notEqual(null, null);
        assertEquals(new CoreOperationNotEqual(null, null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_1_Zkjx0() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2};
        Object result = compiler.sum(arguments);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_2_Rjae1() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = compiler.sum(arguments);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_3_tmAa2() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4};
        Object result = compiler.sum(arguments);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_4_ILwo3() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5};
        Object result = compiler.sum(arguments);
        assertEquals(15, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_5_PGCd4() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6};
        Object result = compiler.sum(arguments);
        assertEquals(21, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_6_KSkq5() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7};
        Object result = compiler.sum(arguments);
        assertEquals(28, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_7_khIy6() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8};
        Object result = compiler.sum(arguments);
        assertEquals(36, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_8_mRtn7() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        Object result = compiler.sum(arguments);
        assertEquals(45, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_9_eAOy8() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Object result = compiler.sum(arguments);
        assertEquals(55, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_10_VhwM9() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        Object result = compiler.sum(arguments);
        assertEquals(66, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_11_kOck10() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        Object result = compiler.sum(arguments);
        assertEquals(78, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_12_GEBR11() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        Object result = compiler.sum(arguments);
        assertEquals(91, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDivide_Null_Null_UXRE9() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.divide(null, null);
        assertEquals(new CoreOperationDivide(null, null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_GLcN0() {
        treeCompiler = new TreeCompiler();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_QName_Null_jaPa2() {
        QName qName = null;
        Object result = treeCompiler.variableReference(qName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_QName_Invalid_mQEi4() {
        QName qName = new QName("invalid");
        Object result = treeCompiler.variableReference(qName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThan_bothAreNull_aDBf2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.lessThan(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_leftIsNull_rightIsNull_nSNh0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.greaterThan(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_leftIsNotExpression_rightIsNotExpression_RurJ5() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.greaterThan(new Object(), new Object());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_validInput_tpKv0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("123");
        assertEquals(new Constant(123.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_invalidInput_QeSz1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("abc");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_nullInput_KPoR2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_emptyInput_fgSc3() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_negativeInput_SHpU5() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("-123");
        assertEquals(new Constant(-123.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_decimalInput_LqyG6() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("123.456");
        assertEquals(new Constant(123.456), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_scientificNotationInput_aiPI7() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("1.23e4");
        assertEquals(new Constant(12300.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_hexadecimalInput_zIcy8() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("0x123");
        assertEquals(new Constant(291.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_octalInput_vmAU9() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.number("0123");
        assertEquals(new Constant(83.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestWithNullInstruction_mpKs1() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.processingInstructionTest(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestWithEmptyInstruction_eWXA2() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.processingInstructionTest("");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTestWithInvalidInstruction_qtPw3() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.processingInstructionTest("invalid_instruction");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeNameTestWithNullQName_vqFz1_ZuUC0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        NodeNameTest nodeNameTest = (NodeNameTest) treeCompiler.nodeNameTest(null);
        assertNull(nodeNameTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_BothAreNotNull_xwPD5_yyBg0() {
        TreeCompiler compiler = new TreeCompiler();
        Object result = compiler.processingInstructionTest("instruction");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_1_gcGC0_uRFH0() {
        TreeCompiler compiler = new TreeCompiler();
        NodeTypeTest test = (NodeTypeTest) compiler.nodeTypeTest(1);
        assertEquals(1, test.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_2_mCvh1_LvUK0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(2);
        assertEquals(2, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_4_dcAU3_bIjq0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(4);
        assertEquals(4, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_5_mJBI4_ZTMh0() {
        TreeCompiler compiler = new TreeCompiler();
        NodeTypeTest test = (NodeTypeTest) compiler.nodeTypeTest(5);
        assertEquals(5, test.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_6_eqYJ5_nDPh0() {
        TreeCompiler compiler = new TreeCompiler();
        NodeTypeTest test = (NodeTypeTest) compiler.nodeTypeTest(6);
        assertEquals(6, test.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_7_IKCZ6_ZugE0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(7);
        assertEquals(7, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_8_FJKq7_pbgh0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(8);
        assertEquals(8, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_9_QJEu8_OGdY0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(9);
        assertEquals(9, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_10_kORX9_pERu0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(10);
        assertEquals(10, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_12_voWe11_zvSz0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(12);
        assertEquals(12, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_13_Lnbz12_dhDt0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(13);
        assertEquals(13, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_14_AgNa13_ZJro0() {
        TreeCompiler compiler = new TreeCompiler();
        NodeTypeTest test = (NodeTypeTest) compiler.nodeTypeTest(14);
        assertEquals(14, test.getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_15_TIGc14_TwSm0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(15);
        assertEquals(15, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_16_dxXn15_DUQp0() {
        TreeCompiler compiler = new TreeCompiler();
        Object test = compiler.nodeTypeTest(16);
        assertEquals(16, ((NodeTypeTest) test).getNodeType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_HHBa0() {
        TreeCompiler compiler = new TreeCompiler();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_emptyArguments_kfyV0_pLAq0() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = compiler.union(arguments);
        assertEquals(0, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_nullArguments_uIjz4_igOB0() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{null, null};
        Object result = compiler.union(arguments);
        assertEquals(0, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_nullArgument_LROq6_btCk0() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{null};
        Object result = compiler.union(arguments);
        assertEquals(0, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_steps_empty_OCmo2_EytL0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[0];
        LocationPath locationPath = (LocationPath) treeCompiler.locationPath(true, steps);
        assertTrue(locationPath.isAbsolute());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_steps_empty_OCmo2_EytL0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[0];
        LocationPath locationPath = (LocationPath) treeCompiler.locationPath(true, steps);
        assertEquals(0, locationPath.getSteps().length);
    }
}