/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    DynamicPointer dynamicpointer;
    private Object bean;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported() throws Exception {
        dynamicpointer = new DynamicPointer(Mockito.mock(QName.class), Mockito.mock(Object.class), Mockito.mock(PageContextHandler.class), Mockito.mock(Locale.class));
        assertTrue(dynamicpointer.isDynamicPropertyDeclarationSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported1_DpPb0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_sxlo0() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertTrue(pointer.equals(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentObject_eOQo1() {
        DynamicPointer pointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        DynamicPointer pointer2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_YzKK2() {
        DynamicPointer pointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertFalse(pointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_KESI3() {
        DynamicPointer pointer1 = new DynamicPointer(new QName("name1"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        DynamicPointer pointer2 = new DynamicPointer(new QName("name2"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLocale_ZnTF6() {
        DynamicPointer pointer1 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.ENGLISH);
        DynamicPointer pointer2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.FRENCH);
        assertFalse(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_HStL0() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer pointer = new DynamicPointer(name, bean, handler, locale);
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_UhRo0() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer pointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + (name == null ? 0 : name.hashCode());
        assertEquals(expectedHashCode, pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_GZeM1() {
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer pointer = new DynamicPointer(null, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + 0;
        assertEquals(expectedHashCode, pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullNameAndNullBean_aPYY2() {
        QName name = new QName("name");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer pointer = new DynamicPointer(name, null, handler, locale);
        int expectedHashCode = System.identityHashCode(null) + (name == null ? 0 : name.hashCode());
        assertEquals(expectedHashCode, pointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_XSok0() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator iterator = dynamicPointer.attributeIterator(name);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIteratorWithNullProperty_tevo1() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        NodeIterator nodeIterator = dynamicPointer.createNodeIterator(null, true, null);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_Tygw0() {
        QName name = new QName("prefix", "localName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertEquals(name, dynamicPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_aTdM1() {
        QName name = new QName("qualifiedName");
        DynamicPointer dynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.ENGLISH);
        assertEquals(name, dynamicPointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_mGYD1() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        String path = dynamicPointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_DFyO0() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(name, bean, handler, locale);
        int length = pointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue1_rtEl0() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer pointer = new DynamicPointer(name, bean, handler, locale);
        Object baseValue = pointer.getBaseValue();
        assertEquals(bean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_atomicValue_patC1() {
        QName name = new QName("name");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_nullValue_edLT0_RcRe0() {
        QName qName = new QName("test");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, null, null, null);
        assertTrue(dynamicPointer.isLeaf());
    }
}