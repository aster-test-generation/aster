/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis1_jPze0() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertEquals(1, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis2_Olck1() {
        Step step = new Step(2, new NodeTypeTest(2), new Expression[0]);
        assertEquals(2, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis3_QoPc2() {
        Step step = new Step(3, new NodeTypeTest(3), new Expression[0]);
        assertEquals(3, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis4_sGxu3() {
        Step step = new Step(4, new NodeTypeTest(4), new Expression[0]);
        assertEquals(4, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis5_cIWa4() {
        Step step = new Step(5, new NodeTypeTest(5), new Expression[0]);
        assertEquals(5, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis6_PXFA5() {
        Step step = new Step(6, new NodeTypeTest(6), new Expression[0]);
        assertEquals(6, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis7_LqYd6() {
        Step step = new Step(7, new NodeTypeTest(7), new Expression[0]);
        assertEquals(7, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis8_TYvG7() {
        Step step = new Step(8, new NodeTypeTest(8), new Expression[0]);
        assertEquals(8, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis9_pdxJ8() {
        Step step = new Step(9, new NodeTypeTest(9), new Expression[0]);
        assertEquals(9, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis10_nrHX9() {
        Step step = new Step(10, new NodeTypeTest(10), new Expression[0]);
        assertEquals(10, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis11_hzSu10() {
        Step step = new Step(11, new NodeTypeTest(11), new Expression[0]);
        assertEquals(11, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis12_WGmb11() {
        Step step = new Step(12, new NodeTypeTest(12), new Expression[0]);
        assertEquals(12, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis13_Jmot12() {
        Step step = new Step(13, new NodeTypeTest(13), new Expression[0]);
        assertEquals(13, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis14_sYPh13() {
        Step step = new Step(14, new NodeTypeTest(14), new Expression[0]);
        assertEquals(14, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis15_cogp14() {
        Step step = new Step(15, new NodeTypeTest(15), new Expression[0]);
        assertEquals(15, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis16_XNcS15() {
        Step step = new Step(16, new NodeTypeTest(16), new Expression[0]);
        assertEquals(16, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis17_JmOo16() {
        Step step = new Step(17, new NodeTypeTest(17), new Expression[0]);
        assertEquals(17, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis18_BdAt17() {
        Step step = new Step(18, new NodeTypeTest(18), new Expression[0]);
        assertEquals(18, step.getAxis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAxis_Axis19_nslw18() {
        Step step = new Step(19, new NodeTypeTest(19), new Expression[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesNull_MdOx0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesEmpty_JYKT1() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_hBeG0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Step step = new Step(1, nodeTest, null);
        String expected = ".";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_qGiy1() {
        NodeTypeTest nodeTest = new NodeTypeTest(2);
        Step step = new Step(2, nodeTest, null);
        String expected = "@nodeTest";
        String actual = step.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_EgJJ2() {
        NodeTypeTest nodeTest = new NodeTypeTest(3);
        Step step = new Step(3, nodeTest, null);
        String expected = "parent::comment()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_bpmH4() {
        NodeTypeTest nodeTest = new NodeTypeTest(5);
        Step step = new Step(5, nodeTest, null);
        String expected = "@UNKNOWN()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_eYMX5() {
        NodeTypeTest nodeTest = new NodeTypeTest(6);
        Step step = new Step(6, nodeTest, null);
        String expected = "axisToString(6)::nodeTest";
        String actual = step.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_yyzI6() {
        NodeTypeTest nodeTest = new NodeTypeTest(7);
        Step step = new Step(7, nodeTest, null);
        String expected = "preceding::UNKNOWN()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString8_aMZJ7() {
        NodeTypeTest nodeTest = new NodeTypeTest(8);
        Step step = new Step(8, nodeTest, null);
        String expected = "axisToString(8)::nodeTest";
        String actual = step.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString9_SofH8() {
        NodeTypeTest nodeTest = new NodeTypeTest(9);
        Step step = new Step(9, nodeTest, null);
        String expected = "descendant::UNKNOWN()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString10_vMJM9() {
        NodeTypeTest nodeTest = new NodeTypeTest(10);
        Step step = new Step(10, nodeTest, null);
        String expected = "axisToString(10)::nodeTest";
        String actual = step.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString11_szWf10() {
        NodeTypeTest nodeTest = new NodeTypeTest(11);
        Step step = new Step(11, nodeTest, null);
        String expected = "following-sibling::UNKNOWN()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString12_FHgj11() {
        NodeTypeTest nodeTest = new NodeTypeTest(12);
        Step step = new Step(12, nodeTest, null);
        String expected = "axisToString(12)::nodeTest";
        String actual = step.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString13_RHrI12() {
        NodeTypeTest nodeTest = new NodeTypeTest(13);
        Step step = new Step(13, nodeTest, null);
        String expected = "descendant-or-self::UNKNOWN()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_dkRn0() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        Expression[] predicates = step.getPredicates();
        assertEquals(0, predicates.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicatesWithNullPredicates_nfbT3() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        Expression[] predicates = step.getPredicates();
        assertNull(predicates);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTest_hdaE0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(1, nodeTypeTest, predicates);
        NodeTest nodeTest = step.getNodeTest();
        assertEquals(nodeTypeTest, nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTestWithDifferentNodeType_Pard2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        Expression[] predicates = new Expression[0];
        Step step = new Step(1, nodeTypeTest, predicates);
        NodeTest nodeTest = step.getNodeTest();
        assertEquals(nodeTypeTest, nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSelf_btsJ0() {
        int axis = Compiler.AXIS_SELF;
        String expected = "self";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringChild_QoQt1() {
        int axis = Compiler.AXIS_CHILD;
        String expected = "child";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringParent_ltru2() {
        int axis = Compiler.AXIS_PARENT;
        String expected = "parent";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_ZKwY3() {
        int axis = Compiler.AXIS_ANCESTOR;
        String expected = "ancestor";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_jkBs4() {
        int axis = Compiler.AXIS_ATTRIBUTE;
        String expected = "attribute";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_qTJT5() {
        int axis = Compiler.AXIS_NAMESPACE;
        String expected = "namespace";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_psxi6() {
        int axis = Compiler.AXIS_PRECEDING;
        String expected = "preceding";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowing_lVUy7() {
        int axis = Compiler.AXIS_FOLLOWING;
        String expected = "following";
        String actual = Step.axisToString(axis);
        assertEquals(expected, actual);
    }
}