/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Coverage_Test_Passing {
    private Step step;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesNull_zwNy0() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_predicatesEmpty_LWRt1() {
        Step step = new Step(1, new NodeTypeTest(1), new Expression[0]);
        assertFalse(step.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_UnknownAxis_dTyM0() {
        int axis = -1;
        String result = Step.axisToString(axis);
        assertEquals("UNKNOWN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToString_ValidAxis_lKPi1() {
        int axis = Compiler.AXIS_CHILD;
        String result = Step.axisToString(axis);
        assertEquals("child", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_ValidNodeType_fZdD2() {
        int nodeType = 1;
        NodeTypeTest nodeTypeTest = new NodeTypeTest(nodeType);
        assertNotNull(nodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep_ValidAxisAndNodeTypeTest_kiGZ4() {
        int axis = Compiler.AXIS_CHILD;
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(axis, nodeTypeTest, predicates);
        assertNotNull(step);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_ITfX0() {
        step = new Step(Compiler.AXIS_CHILD, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_HMkL2() {
        step = new Step(Compiler.AXIS_ATTRIBUTE, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        String expected = "@node()";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_yMwB3() {
        step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        String expected = ".";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_xekT4() {
        step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        String expected = "..";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_xekT4_hHQn0() {
        step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), new Expression[0]);
        String expected = "parent";
        String actual = step.axisToString(Compiler.AXIS_PARENT);
        assertEquals(expected, actual);
    }
}