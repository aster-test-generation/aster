/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Array_eAqp0() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 0);
        assertEquals(1, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_List_lajq1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 0);
        assertEquals(1, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Collection_coYr2() {
        Collection<Object> collection = new HashSet<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 0);
        assertEquals(1, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Null_vbGu3() {
        Object value = ValueUtils.getValue(null, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexOutOfBounds_DXkU4() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, 5);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidIndex_fdQV5() {
        Object[] array = new Object[]{1, 2, 3};
        Object value = ValueUtils.getValue(array, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidCollection_QZhB6() {
        Collection<Object> collection = new HashSet<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Object value = ValueUtils.getValue(collection, 5);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidList_pTyr7() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object value = ValueUtils.getValue(list, 5);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType5_WeSA13() {
        Object value = ValueUtils.getValue(new ArrayList<Object>(), 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType6_QpDQ14() {
        Object value = ValueUtils.getValue(new HashSet<Object>(), 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Null_EqCz0() {
        assertFalse(ValueUtils.isCollection(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Array_QwAI1() {
        Object[] array = new Object[0];
        assertTrue(ValueUtils.isCollection(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidIndex_ahBR3() {
        Object[] array = new Object[]{1, 2, 3};
        try {
            ValueUtils.remove(array, 3);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("No such element at index 3", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidCollection_wMkl5() {
        Object collection = new Object();
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot remove " + collection.getClass().getName() + "[0]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotContainer_UyrL1() {
        Object object = new Object();
        Object value = ValueUtils.getValue(object);
        assertEquals(object, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_aSRq1() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertEquals("b", iterator.next());
        assertEquals("c", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertEquals("b", iterator.next());
        assertEquals("c", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_zNZj4() {
        Object object = "a";
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
        assertEquals("a", iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateInvalidType_qZOd5() {
        Object object = new Object();
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
        assertEquals(object, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Array_rimi0() {
        Class clazz = int[].class;
        int expected = 1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Collection_AgGn1() {
        Class clazz = ArrayList.class;
        int expected = 1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_Primitive_RMZb2() {
        Class clazz = int.class;
        int expected = -1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_FinalClass_CWkk4() {
        Class clazz = String.class;
        int expected = -1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_NonFinalClass_CGVG5() {
        Class clazz = Object.class;
        int expected = 0;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Array_DTTB0() {
        Object[] array = new Object[5];
        ValueUtils.setValue(array, 2, "test");
        assertEquals("test", array[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_List_tBIa1() {
        List<Object> list = new ArrayList<>();
        list.add("test1");
        list.add("test2");
        ValueUtils.setValue(list, 1, "test3");
        assertEquals("test3", list.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_Collection_MDYo2() {
        Collection<Object> collection = new HashSet<>();
        collection.add("test1");
        collection.add("test2");
        try {
            ValueUtils.setValue(collection, 1, "test3");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot set value of an element of a " + collection.getClass().getName(), e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodNull_FRKh0() {
        Method method = null;
        Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
        assertNull(accessibleMethod);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethodNonPublic_MisQ1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_qzIy0_2() {
        Iterator iterator = ValueUtils.iterate(null);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_aSRq1_1() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateEmptyArray_aSRq1_2() {
        Object[] array = new Object[0];
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(Collections.EMPTY_LIST.iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2_1() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNonEmptyArray_fWSU2_2() {
        Object[] array = new Object[]{"a", "b", "c"};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3_1() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateCollection_ENvg3_2() {
        Collection collection = new ArrayList();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_zNZj4_1() {
        Object object = "a";
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateSingletonList_zNZj4_2() {
        Object object = "a";
        Iterator iterator = ValueUtils.iterate(object);
        assertEquals("a", iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateInvalidType_qZOd5_1() {
        Object object = new Object();
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateInvalidType_qZOd5_2() {
        Object object = new Object();
        Iterator iterator = ValueUtils.iterate(object);
        assertEquals(object, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType_IaMh9_fid2() {
        Object value = ValueUtils.getValue("hello", 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType2_vumq10_fid2() {
        Object value = ValueUtils.getValue(1, 0);
        assertEquals(1, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType3_vdGf11_fid2() {
        Object value = ValueUtils.getValue(new Object(), 0);
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType4_IjXV12_fid2() {
        Object value = ValueUtils.getValue(new Object[]{1, 2, 3}, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_InvalidType7_ROsq15_fid2() {
        Object value = ValueUtils.getValue(new HashMap<Object, Object>(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateNull_qzIy0_1_fid2() {
        Iterator iterator = ValueUtils.iterate(null);
    }
}