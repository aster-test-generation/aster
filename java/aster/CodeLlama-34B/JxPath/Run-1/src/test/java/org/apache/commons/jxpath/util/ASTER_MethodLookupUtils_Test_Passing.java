/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_FLgH0() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_EmptyParameters_jAVJ1() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NoMatchingConstructor_UcrI7() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"parameter"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_AmbiguousConstructor_XDgx8() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"parameter1", "parameter2"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_pLUY0_1() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_pLUY0_2() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(0, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_EmptyParameters_ZMiS1_1() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_EmptyParameters_ZMiS1_2() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(0, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_OneParameter_VNUv2_1() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"hello"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_OneParameter_VNUv2_2() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"hello"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(1, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_OneParameter_VNUv2_3() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"hello"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_twFC2() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "methodName", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_EmptyParameters_mcRw3() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "methodName", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NonExistentMethod_rhWy4() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "nonExistentMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_AmbiguousMethod_SSUt6() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "lookupStaticMethod", new Object[]{"param1", "param2"});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_PrivateMethod_sqou7() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "privateMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ProtectedMethod_GFKU8() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "protectedMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_PackagePrivateMethod_kBAo9() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "packagePrivateMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_AbstractMethod_qizz15() {
        Method method = MethodLookupUtils.lookupStaticMethod(MethodLookupUtils.class, "abstractMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod6_LKOS5_uaKE0() {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupMethod";
        Object[] parameters = new Object[]{targetClass, name, new Object[]{targetClass, name, new Object[0]}};
        Method method = MethodLookupUtils.lookupMethod(targetClass, name, parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_OneParameter_DYTd2_fid1() {
        Class targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"parameter"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_NullParameters_pLUY0() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
        assertEquals(0, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_EmptyParameters_ZMiS1() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[0];
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
        assertEquals(0, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructor_OneParameter_VNUv2() throws Exception {
        Class targetClass = String.class;
        Object[] parameters = new Object[]{"hello"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
        assertEquals(1, constructor.getParameterTypes().length);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }
}