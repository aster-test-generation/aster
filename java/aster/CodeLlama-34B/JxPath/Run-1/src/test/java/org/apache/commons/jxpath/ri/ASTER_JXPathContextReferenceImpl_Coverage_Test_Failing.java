/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ExceptionHandler;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathContextReferenceImpl_Coverage_Test_Failing {
    private JXPathContextReferenceImpl contextReference;
    private ExceptionHandler exceptionHandler;
    private NamespaceResolver namespaceResolver;
    private JXPathContext context;
    private JXPathCompiledExpression jxpathCompiledExpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_NullReturn_DZyL1() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        ClassLoaderUtil.getClass(existenceCheckClassName, true);
        Object result = JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_Exception_KkFG2() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        ClassLoaderUtil.getClass(existenceCheckClassName, true);
        try {
            JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
            fail("Expected Exception");
        } catch (Exception ex) {
            assertEquals("Cannot allocate " + className, ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_JXPathException_FqkG3() throws Exception {
        String className = "com.example.MyClass";
        String existenceCheckClassName = "com.example.MyClass";
        ClassLoaderUtil.getClass(existenceCheckClassName, true);
        try {
            JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Cannot allocate " + className, ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_mJnr0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.removePath("xpath", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_Hkmp0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.createPathAndSetValue("xpath", null, null);
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Exception trying to create xpath xpath", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValueWithValue_JJQO2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.createPathAndSetValue("xpath", null, "value");
            fail("Expected JXPathException");
        } catch (JXPathException ex) {
            assertEquals("Exception trying to create xpath xpath", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutExpression_NcuA1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[@id='1']";
        Object value = context.getValue(xpath);
        assertNotNull(value);
        assertEquals("book", value.getClass().getSimpleName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_ehxU0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, null);
        Assertions.assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValue_VLFQ1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, String.class);
        Assertions.assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithRequiredType_khPD2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, String.class);
        Assertions.assertTrue(value instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonConvertibleType_oZJU3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, Integer.class);
        Assertions.assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithConvertibleType_Ivki4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, String.class);
        Assertions.assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNamespace_GtNT0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("ns", "name");
        Object[] parameters = new Object[0];
        Function func = context.getFunction(functionName, parameters);
        Assertions.assertNull(func);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithName_PfrM1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("name");
        Object[] parameters = new Object[0];
        Function func = context.getFunction(functionName, parameters);
        Assertions.assertNull(func);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithParentContext_NJWS2() {
        JXPathContextReferenceImpl parentContext = new JXPathContextReferenceImpl(null, null);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, null);
        QName functionName = new QName("name");
        Object[] parameters = new Object[0];
        Function func = context.getFunction(functionName, parameters);
        Assertions.assertNull(func);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll1_VEGC0() {
        JXPathContextReferenceImpl jxPathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxPathContextReferenceImpl.removeAll("", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutExpression_NcuA1_1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[@id='1']";
        Object value = context.getValue(xpath);
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutExpression_NcuA1_2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        String xpath = "//book[@id='1']";
        Object value = context.getValue(xpath);
        assertEquals("book", value.getClass().getSimpleName());
    }
}