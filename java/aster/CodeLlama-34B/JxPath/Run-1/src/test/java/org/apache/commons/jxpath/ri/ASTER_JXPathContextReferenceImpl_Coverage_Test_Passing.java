/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathContextReferenceImpl_Coverage_Test_Passing {
    private JXPathContextReferenceImpl contextReference;
    private ExceptionHandler exceptionHandler;
    private NamespaceResolver namespaceResolver;
    private JXPathContext context;
    private JXPathCompiledExpression jxpathCompiledExpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveAll_bHHM2() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePathWithNullExpression_tZhx3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        try {
            context.removePath("xpath", null);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException ex) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_NullPointer_OwUb2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.setNamespaceContextPointer(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWhenNamespaceResolverIsSealed_NWdC0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        context.registerNamespace("prefix", "namespaceURI");
        assertTrue(context.getNamespaceResolver().isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithFunctionNotFoundException_Ebqn5() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("name");
        Object[] parameters = new Object[0];
        try {
            context.getFunction(functionName, parameters);
            Assertions.fail("Expected JXPathFunctionNotFoundException");
        } catch (JXPathFunctionNotFoundException e) {
            Assertions.assertEquals("Undefined function: name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithFunctionNotFoundException2_vxNj6() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("ns", "name");
        Object[] parameters = new Object[0];
        try {
            context.getFunction(functionName, parameters);
            Assertions.fail("Expected JXPathFunctionNotFoundException");
        } catch (JXPathFunctionNotFoundException e) {
            Assertions.assertEquals("Undefined function: ns:name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
        this.exceptionHandler = exceptionHandler;
    }

    @Test
    public void testSetNamespaceContextPointer_NotSealed_UqpO0_ICmZ0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = new DOMNodePointer(null, null, null);
        context.setNamespaceContextPointer(pointer);
    }
}