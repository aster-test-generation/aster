/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_VariablePointer_Coverage_Test_Passing {
    private KeywordVariables keywordVariables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_withValue_Zkdi0() {
        QName name = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, name);
        Object value = pointer.getBaseValue();
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_withoutValue_BzZo1() {
        QName name = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, name);
        Object value = null;
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_vykj0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodeIterator nodeIterator = variablePointer.attributeIterator(new QName("name"));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_wfrf0() {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        assertEquals(name, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithKeywordVariables_qebb1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        assertEquals(name, variablePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_undefinedVariable_NBFh0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.setValue(new Object());
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Cannot set undefined variable: name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_cwEG0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_myEt0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_actualIsFalse_oYIQ0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        try {
            variablePointer.getBaseValue();
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Undefined variable: name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getIndex(), index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2_3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getName(), name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2_4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer.getValue(), value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithClone_mpYa2_5() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        NodePointer clone = mock(NodePointer.class);
        when(variablePointer.clone()).thenReturn(clone);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertEquals(nodePointer, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithQualifiedName_QGxi0() {
        QName name = new QName("qualifiedName");
        VariablePointer pointer = new VariablePointer(name);
        String path = pointer.asPath();
        assertEquals("$qualifiedName", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithPrefixAndLocalName_uEBn1() {
        QName name = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(name);
        String path = pointer.asPath();
        assertEquals("$prefix:localName", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariables_GSwu2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("name");
        VariablePointer pointer = new VariablePointer(variables, name);
        String path = pointer.asPath();
        assertEquals("$name", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_cuud3() {
        QName name = new QName("name");
        VariablePointer pointer = new VariablePointer(name);
        pointer.setIndex(1);
        String path = pointer.asPath();
        assertEquals("$name[2]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_actual_indexNotWholeCollection_Ipbc1_yGMc0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(0);
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer5_haHx4_EKGN0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodePointer nodePointer = variablePointer.getImmediateValuePointer();
        assertEquals(new NullPointer(variablePointer, variablePointer.getName()), nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_notActual_HPFz2_PexV1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_indexLessThanZero_NzjQ3_xMDw0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(-1);
        variablePointer.remove();
        assertFalse(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_indexGreaterThanLength_xvcu5_xjKX0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(10);
        variablePointer.remove();
        assertFalse(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_actual_indexWholeCollection_fOAS0_XHco1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_keywordVariables_Bsgu6_Dadh0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        variablePointer.setIndex(0);
        variablePointer.remove();
        assertTrue(variablePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithActualAndCollectionAndNullNode_XoJf8_eNgD1() {
        QName name = new QName("name");
        VariablePointer pointer = new VariablePointer(name);
        String path = pointer.asPath();
        assertEquals("$name", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithLocale_nilz3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("name");
        int index = 0;
        Object value = new Object();
        Locale locale = Locale.getDefault();
        when(context.getLocale()).thenReturn(locale);
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
        assertEquals(nodePointer.getIndex(), index);
        assertEquals(nodePointer.getName(), name);
        assertEquals(nodePointer.getValue(), value);
        assertEquals(nodePointer.getLocale(), locale);
    }
}