/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
    private static final Double ZERO = Double.valueOf(0);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_last_OAry0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("last", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_position_UPyc1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("position", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_count_UFyn2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("count", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_id_muKF3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("id", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_localName_eEQW4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("local-name", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_namespaceUri_EXQy5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("namespace-uri", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_name_XPsd6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("name", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_string_pPEo7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("string", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_concat_FeMP8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("concat", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_startsWith_OgXn9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, new Expression[0]);
        String functionName = coreFunction.getFunctionName();
        assertEquals("starts-with", functionName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_NullArgs_URhT0() {
        CoreFunction function = new CoreFunction(1, null);
        assertEquals(0, function.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_EmptyArgs_VnLu2() {
        Expression[] args = new Expression[0];
        CoreFunction function = new CoreFunction(1, args);
        assertEquals(0, function.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_last_iDPG0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_position_Airg1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_boolean_ewuw2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_localName_yGhp3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_name_Dczc4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_namespaceUri_HrPc5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_string_jgxU6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_lang_hOCT7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_number_mler8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCode_xQhH0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
        assertEquals(1, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithArgs_EMdF1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{new Constant(1)});
        assertEquals(1, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithMultipleArgs_sBYj2() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{new Constant(1), new Constant(2)});
        assertEquals(1, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithDifferentFunctionCode_ubix3() {
        CoreFunction coreFunction = new CoreFunction(2, new Expression[]{new Constant(1)});
        assertEquals(2, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionCodeWithNullArgs_UJid4() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        assertEquals(1, coreFunction.getFunctionCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_EmptyArgs_SkND2_fid1() {
    }
}