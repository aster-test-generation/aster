/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Failing {
    private NodeNameTest mockNodeNameTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_jzLa0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        arguments[0] = new Object();
        arguments[1] = new Object();
        Object result = treeCompiler.and(arguments);
        assertTrue(result instanceof CoreOperationAnd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_GBmX0() {
        TreeCompiler compiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[0];
        Object[] steps = new Object[0];
        Object result = compiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanOrEqual_BUbV0() {
        TreeCompiler compiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = compiler.lessThanOrEqual(left, right);
        assertTrue(result instanceof CoreOperationLessThanOrEqual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_UqsK0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        arguments[0] = 1;
        arguments[1] = 2;
        Object result = treeCompiler.sum(arguments);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrWithNullArgument_Yxso5() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{null};
        Object result = compiler.or(arguments);
        assertEquals(new CoreOperationOr(new Expression[]{null}), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_VhXM0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object name = new Object();
        Object[] args = new Object[0];
        Object result = treeCompiler.function(name, args);
        assertTrue(result instanceof ExtensionFunction);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrWithNonStringArgument_AMSG8_PTBs0() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[]{1};
        Object result = compiler.or(arguments);
        assertEquals(new CoreOperationOr(new Expression[]{new Constant(1)}), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_NullExpression3_QXYH5_fid2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.equal(null, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrWithNullArguments_xpQr0_fid2() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = compiler.or(arguments);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrWithEmptyArguments_mfgx1_fid2() {
        TreeCompiler compiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = compiler.or(arguments);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqual_NullExpression_jARy3_LujC0_fid3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest(null);
        assertEquals(null, result);
    }
}