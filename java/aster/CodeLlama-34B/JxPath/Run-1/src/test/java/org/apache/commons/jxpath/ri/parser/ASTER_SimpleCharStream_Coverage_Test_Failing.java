/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SimpleCharStream_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage2_tqjE1_lrZG0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 0, 0);
        String image = scs.GetImage();
        assertEquals("", image);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage3_PPDU2_nzto0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 0, 0, 10);
        String image = scs.GetImage();
        assertEquals("", image);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage5_MzBE4_WKse0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 0, 0);
        String image = scs.GetImage();
        assertEquals("", image);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImage7_wehD6_IVee0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
        String image = scs.GetImage();
        assertEquals("", image);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn6_xpsE5_cjCy0() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 0, 0, 0);
        simpleCharStream.adjustBeginLineColumn(0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_DUXF0_Hebs0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_DUXF0_Hebs0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_HTWX1_GJFu0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_HTWX1_GJFu0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_cIsLF_kIlI2_enBZ0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_cIsLF_kIlI2_enBZ0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_cIsNotLF_lTxs3_ayfV0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsCR_cIsNotLF_lTxs3_ayfV0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\r');
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_cIsNotLF_lxTt4_yoan0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_cIsNotLF_lxTt4_yoan0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsLF_PPaP5_kABI0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsLF_PPaP5_kABI0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\n');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsCR_WrKe6_hNKv0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\r');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsCR_WrKe6_hNKv0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\r');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsTab_phQT8_pbnW0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\t');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsTab_phQT8_pbnW0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\t');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsNotLFOrCR_hUKs7_ClRG0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('b');
        assertEquals(1, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsNotLFOrCR_hUKs7_ClRG0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('b');
        assertEquals(1, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn6_xpsE5_cjCy0_fid1() {
        SimpleCharStream simpleCharStream = new SimpleCharStream(new java.io.StringReader(""), 0, 0, 0);
        simpleCharStream.adjustBeginLineColumn(0, 0);
        assertEquals(0, simpleCharStream.getBeginLine());
        assertEquals(0, simpleCharStream.getBeginColumn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_DUXF0_Hebs0_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        assertEquals(2, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsLF_DUXF0_Hebs0_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        assertEquals(0, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsLF_PPaP5_kABI0_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('\n');
        assertEquals(2, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsLF_PPaP5_kABI0_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('\n');
        assertEquals(2, stream.column);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsNotLFOrCR_hUKs7_ClRG0_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('b');
        assertEquals(2, stream.line);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumn_prevCharIsNotLFOrCR_cIsNotLFOrCR_hUKs7_ClRG0_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(new java.io.ByteArrayInputStream(new byte[0])));
        stream.UpdateLineColumn('a');
        stream.UpdateLineColumn('b');
        assertEquals(2, stream.column);
    }
}