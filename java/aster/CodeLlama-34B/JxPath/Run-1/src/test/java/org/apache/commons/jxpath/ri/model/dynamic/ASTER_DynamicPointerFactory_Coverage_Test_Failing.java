/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_DynamicPointerFactory_Coverage_Test_Failing {
    NodePointer parent = new DOMNodePointer(null, null, null);
    private ValueUtils valueUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_returnDynamicPointer_Xbjw5_gcfi0() {
        DynamicPointerFactory factory = new DynamicPointerFactory();
        NodePointer parent = null;
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
        when(bi.isDynamic()).thenReturn(true);
        Class<?> handlerClass = DynamicPropertyHandler.class;
        when(bi.getDynamicPropertyHandlerClass()).thenReturn(handlerClass);
        NodePointer result = factory.createNodePointer(parent, name, bean);
        assertTrue(result instanceof DynamicPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_isDynamic_GwGO0_apkk0_1() {
        QName name = new QName("name");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
        when(bi.isDynamic()).thenReturn(true);
        NodePointer nodePointer = new DynamicPointerFactory().createNodePointer(name, bean, locale);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_isDynamic_GwGO0_apkk0_2() {
        QName name = new QName("name");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
        when(bi.isDynamic()).thenReturn(true);
        NodePointer nodePointer = new DynamicPointerFactory().createNodePointer(name, bean, locale);
        assertTrue(nodePointer instanceof DynamicPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_notDynamic_wVvM1_WxtI0() {
        QName name = new QName("name");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
        when(bi.isDynamic()).thenReturn(false);
        NodePointer nodePointer = new DynamicPointerFactory().createNodePointer(name, bean, locale);
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_beanIsNotNull_ceTX1_fLFb0_fid2() {
        DynamicPointerFactory factory = new DynamicPointerFactory();
        NodePointer parent = new DOMNodePointer(null, null, null);
        QName name = new QName("test");
        Object bean = new Object();
        NodePointer result = factory.createNodePointer(parent, name, bean);
        assertNotNull(result);
    }
}