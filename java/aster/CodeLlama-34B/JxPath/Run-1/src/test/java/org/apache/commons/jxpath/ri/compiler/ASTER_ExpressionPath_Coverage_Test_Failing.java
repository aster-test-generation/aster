/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ExpressionPath_Coverage_Test_Failing {
    private Object expressionPath(EvalContext context, boolean b) {
        return null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionAndPredicateAreNull_tpLu3() {
        ExpressionPath expressionPath = new ExpressionPath(null, null, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_IpZu0_QrDI0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        EvalContext context = new SelfContext(null, new NodeTypeTest(1));
        context.setPosition(1);
        Object result = expressionPath.computeValue(context);
        assertEquals(result, expressionPath(context, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath2_lykP1_qVdW0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(1), new Expression[0], new Step[0]);
        EvalContext evalContext = new SelfContext(null, new NodeTypeTest(1));
        Object result = expressionPath.expressionPath(evalContext, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionIsContextDependent_beBS0_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextDependent"), null, null);
        assertTrue(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_predicateIsContextDependent_wwTt1_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextIndependent"), new Expression[]{new Constant("contextDependent")}, null);
        assertTrue(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_pMhh3_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("expression"), new Expression[]{new Constant("predicate")}, null);
        String expected = "expression[predicate]";
        String actual = expressionPath.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultiplePredicates_YZis6_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("expression"), new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        String expected = "expression[predicate1][predicate2]";
        String actual = expressionPath.toString();
        assertEquals(expected, actual);
    }
}