/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_hBeG0_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Step step = new Step(1, nodeTest, null);
        String expected = "child::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_qGiy1_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(2);
        Step step = new Step(2, nodeTest, null);
        String expected = "@nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_EgJJ2_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(3);
        Step step = new Step(3, nodeTest, null);
        String expected = "..";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_Seda3() {
        NodeTypeTest nodeTest = new NodeTypeTest(4);
        Step step = new Step(4, nodeTest, null);
        String expected = "";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_bpmH4_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(5);
        Step step = new Step(5, nodeTest, null);
        String expected = "axisToString(5)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_eYMX5_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(6);
        Step step = new Step(6, nodeTest, null);
        String expected = "axisToString(6)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_yyzI6_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(7);
        Step step = new Step(7, nodeTest, null);
        String expected = "axisToString(7)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString8_aMZJ7_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(8);
        Step step = new Step(8, nodeTest, null);
        String expected = "axisToString(8)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString9_SofH8_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(9);
        Step step = new Step(9, nodeTest, null);
        String expected = "axisToString(9)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString10_vMJM9_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(10);
        Step step = new Step(10, nodeTest, null);
        String expected = "axisToString(10)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString11_szWf10_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(11);
        Step step = new Step(11, nodeTest, null);
        String expected = "axisToString(11)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString12_FHgj11_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(12);
        Step step = new Step(12, nodeTest, null);
        String expected = "axisToString(12)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString13_RHrI12_fid2() {
        NodeTypeTest nodeTest = new NodeTypeTest(13);
        Step step = new Step(13, nodeTest, null);
        String expected = "axisToString(13)::nodeTest";
        String actual = step.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeTestWithDifferentNodeType_Pard2_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(2);
        Expression[] predicates = new Expression[0];
        Step step = new Step(1, nodeTypeTest, predicates);
        NodeTest nodeTest = step.getNodeTest();
        assertNotEquals(nodeTypeTest, nodeTest);
    }
}