/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Failing {
    private static final Double ZERO = Double.valueOf(0);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_NullArgs_jxSx1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Expression arg1 = coreFunction.getArg1();
        assertNull(arg1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArg1_EmptyArgs_SkND2() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
        Expression arg1 = coreFunction.getArg1();
        assertNull(arg1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionPositionWithNullContext_YtZU3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = null;
        Object result = coreFunction.functionPosition(context);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLast_NullContext_HpWx3() {
        CoreFunction function = new CoreFunction(0, new Expression[0]);
        assertEquals(0.0, function.functionLast(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_noArgs_PWvF0() {
        CoreFunction function = new CoreFunction(1, new Expression[0]);
        String expected = "functionName()";
        String actual = function.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_oneArg_ezDp1() {
        CoreFunction function = new CoreFunction(1, new Expression[]{new Constant(1)});
        String expected = "functionName(1)";
        String actual = function.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_multipleArgs_QgYA2() {
        CoreFunction function = new CoreFunction(1, new Expression[]{new Constant(1), new Constant(2)});
        String expected = "functionName(1, 2)";
        String actual = function.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_nullArgs_lxWi3() {
        CoreFunction function = new CoreFunction(1, null);
        String expected = "functionName()";
        String actual = function.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_formatNumber_rbGI9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_count_eVxz10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_id_VOIg11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_concat_UWMq12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_functionCode_startsWith_EcAb13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRound_2_YJVF1_rNKx1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        Object result = coreFunction.functionRound(null);
        assertEquals(2.0, result);
    }
}