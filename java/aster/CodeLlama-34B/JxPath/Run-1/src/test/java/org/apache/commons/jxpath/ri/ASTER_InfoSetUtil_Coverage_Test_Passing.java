/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Coverage_Test_Passing {
    private EvalContext evalContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_kMrU0() {
        Object object = true;
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_gZNA3() {
        Object object = "1.0";
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_XziX4() {
        Object object = 1.0;
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Null_LCiO5() {
        Object object = null;
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_InvalidString_HRAh6() {
        Object object = "abc";
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_InvalidObject_ZTZM7() {
        Object object = new Object();
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithBoolean_nFiU0() {
        Boolean bool = true;
        Number result = InfoSetUtil.number(bool);
        assertNotNull(result);
        assertEquals(1, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithString_BEQT1() {
        String str = "123";
        Number result = InfoSetUtil.number(str);
        assertNotNull(result);
        assertEquals(123, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithOtherObject_Sqsl4() {
        Object obj = new Object();
        Number result = InfoSetUtil.number(obj);
        assertNotNull(result);
        assertEquals(0, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNull_UnsI5() {
        Number result = InfoSetUtil.number(null);
        assertNotNull(result);
        assertEquals(0, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithInvalidString_cDnA6() {
        String str = "abc";
        Number result = InfoSetUtil.number(str);
        assertNotNull(result);
        assertEquals(0, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNumber_ZVea0() {
        Object object = new Double(1.0);
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeZero_vpub1() {
        Object object = new Double(-0.0);
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_Zluf2() {
        Object object = new Double(Double.NaN);
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithBoolean_NphQ3() {
        Object object = Boolean.TRUE;
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithString_Fund5() {
        Object object = "test";
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNull_prqZ8() {
        Object object = null;
        boolean result = InfoSetUtil.booleanValue(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithOtherObject_YOag9() {
        Object object = new Object();
        boolean result = InfoSetUtil.booleanValue(object);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Boolean_dAXq0() {
        Boolean booleanObject = true;
        String expected = "true";
        String actual = InfoSetUtil.stringValue(booleanObject);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Number_JMwf3() {
        Number number = 10;
        String expected = "10";
        String actual = InfoSetUtil.stringValue(number);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_CDYU4() {
        Object object = null;
        String expected = "";
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Object_TdAZ5() {
        Object object = new Object();
        String expected = object.toString();
        String actual = InfoSetUtil.stringValue(object);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithBoolean_nFiU0_1() {
        Boolean bool = true;
        Number result = InfoSetUtil.number(bool);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithBoolean_nFiU0_2() {
        Boolean bool = true;
        Number result = InfoSetUtil.number(bool);
        assertEquals(1, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithString_BEQT1_1() {
        String str = "123";
        Number result = InfoSetUtil.number(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithString_BEQT1_2() {
        String str = "123";
        Number result = InfoSetUtil.number(str);
        assertEquals(123, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithOtherObject_Sqsl4_1() {
        Object obj = new Object();
        Number result = InfoSetUtil.number(obj);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithOtherObject_Sqsl4_2() {
        Object obj = new Object();
        Number result = InfoSetUtil.number(obj);
        assertEquals(0, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNull_UnsI5_1() {
        Number result = InfoSetUtil.number(null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNull_UnsI5_2() {
        Number result = InfoSetUtil.number(null);
        assertEquals(0, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithInvalidString_cDnA6_1() {
        String str = "abc";
        Number result = InfoSetUtil.number(str);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithInvalidString_cDnA6_2() {
        String str = "abc";
        Number result = InfoSetUtil.number(str);
        assertEquals(0, result.intValue());
    }
}