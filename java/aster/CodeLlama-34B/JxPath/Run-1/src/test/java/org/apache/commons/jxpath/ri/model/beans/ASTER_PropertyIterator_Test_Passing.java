/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
    private String name;
    private int position = 0;
    @Mock
    private BeanPointer beanPointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathBasicBeanInfo jxpathBasicBeanInfo;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private VariablePointer variablePointer;
    @InjectMocks
    private PropertyIterator propertyIterator;
    private boolean targetReady = false;
    private PropertyPointer propertyNodePointer;
    PropertyIterator propertyiterator;
    private int startPropertyIndex;
    private boolean empty = false;
    private int startIndex = 0;
    private boolean includeStart = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_Arhb0() {
        QName qName = new QName("name");
        BeanPointer beanPointer = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "name", false, null);
        int position = propertyIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPositionWithReverse_IrlJ1() {
        QName qName = new QName("name");
        BeanPointer beanPointer = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "name", true, null);
        int position = propertyIterator.getPosition();
        assertEquals(1, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionIndividualProperty_xgvQ1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault()), "property", false, null);
        boolean result = propertyIterator.setPosition(1);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyPointer() throws Exception {
        propertyiterator = new PropertyIterator(Mockito.mock(BeanPointer.class), "name", true, Mockito.mock(DOMNodePointer.class));
        assertNotNull(propertyiterator.getPropertyPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer1_GzxM0() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), null, false, null);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer3_xOIK2() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), null, false, null);
        propertyIterator.setPosition(1);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer5_xExq4() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), null, false, null);
        propertyIterator.setPosition(2);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer4_gCiw3_snMS1_1() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "propertyName", false, null);
        propertyIterator.setPosition(1);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer4_gCiw3_snMS1_2() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH), "propertyName", false, null);
        propertyIterator.setPosition(1);
        NodePointer nodePointer = propertyIterator.getNodePointer();
        assertEquals("propertyName", nodePointer.getName().toString());
    }
}