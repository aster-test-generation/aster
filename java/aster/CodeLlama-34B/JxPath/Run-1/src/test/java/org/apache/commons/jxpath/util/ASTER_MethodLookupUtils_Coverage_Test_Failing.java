/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ExpressionContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_qoOt0_1() {
        Object[] parameters = new Object[]{null, "test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_qoOt0_2() {
        Object[] parameters = new Object[]{null, "test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertEquals(2, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_qoOt0_3() {
        Object[] parameters = new Object[]{null, "test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertEquals(ExpressionContext.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_qoOt0_4() {
        Object[] parameters = new Object[]{null, "test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertEquals(String.class, constructor.getParameterTypes()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutExpressionContext_yomy1_1() {
        Object[] parameters = new Object[]{"test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutExpressionContext_yomy1_2() {
        Object[] parameters = new Object[]{"test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertEquals(1, constructor.getParameterTypes().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutExpressionContext_yomy1_3() {
        Object[] parameters = new Object[]{"test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithNullParameters_WKKO2() {
        Object[] parameters = null;
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1_1() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1_2() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(targetClass, constructor.getDeclaringClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1_3() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(2, constructor.getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1_4() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1_5() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(Integer.class, constructor.getParameterTypes()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2_1() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2_2() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(targetClass, constructor.getDeclaringClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2_3() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(2, constructor.getParameterCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2_4() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2_5() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertEquals(Long.class, constructor.getParameterTypes()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_YWhr0() {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupStaticMethod";
        Object[] parameters = null;
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NonNullParameters_pcyJ1() {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupStaticMethod";
        Object[] parameters = new Object[0];
        Method method = MethodLookupUtils.lookupStaticMethod(targetClass, name, parameters);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_tryExactTrue_KIhB4() {
        Class targetClass = MethodLookupUtils.class;
        String name = "lookupMethod";
        Object[] parameters = new Object[]{"test"};
        Method method = MethodLookupUtils.lookupMethod(targetClass, name, parameters);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExpressionContext_qoOt0() {
        Object[] parameters = new Object[]{null, "test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertNotNull(constructor);
        assertEquals(2, constructor.getParameterTypes().length);
        assertEquals(ExpressionContext.class, constructor.getParameterTypes()[0]);
        assertEquals(String.class, constructor.getParameterTypes()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithoutExpressionContext_yomy1() {
        Object[] parameters = new Object[]{"test"};
        Constructor constructor = MethodLookupUtils.lookupConstructor(MethodLookupUtils.class, parameters);
        assertNotNull(constructor);
        assertEquals(1, constructor.getParameterTypes().length);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithExactMatch_DbUE1() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
        assertEquals(targetClass, constructor.getDeclaringClass());
        assertEquals(2, constructor.getParameterCount());
        assertEquals(String.class, constructor.getParameterTypes()[0]);
        assertEquals(Integer.class, constructor.getParameterTypes()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorWithApproximateMatch_hSPQ2() throws NoSuchMethodException, SecurityException {
        Class<?> targetClass = MethodLookupUtils.class;
        Object[] parameters = new Object[]{"hello", 123L};
        Constructor<?> constructor = MethodLookupUtils.lookupConstructor(targetClass, parameters);
        assertNotNull(constructor);
        assertEquals(targetClass, constructor.getDeclaringClass());
        assertEquals(2, constructor.getParameterCount());
        assertEquals(String.class, constructor.getParameterTypes()[0]);
        assertEquals(Long.class, constructor.getParameterTypes()[1]);
    }
}