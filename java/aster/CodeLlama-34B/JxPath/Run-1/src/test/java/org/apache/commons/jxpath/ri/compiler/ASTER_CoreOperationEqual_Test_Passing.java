/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationEqual_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantString_tqar0() {
        Constant constant = new Constant("string");
        CoreOperationEqual operation = new CoreOperationEqual(constant, constant);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantNumber_jSwB1() {
        Constant constant = new Constant(123);
        CoreOperationEqual operation = new CoreOperationEqual(constant, constant);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_DifferentConstants_mish2() {
        Constant constant1 = new Constant("string");
        Constant constant2 = new Constant(123);
        CoreOperationEqual operation = new CoreOperationEqual(constant1, constant2);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_NullConstants_aulw3() {
        CoreOperationEqual operation = new CoreOperationEqual(null, null);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_InvalidArguments_DPsl4() {
        Constant constant = new Constant("string");
        CoreOperationEqual operation = new CoreOperationEqual(constant, null);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_InvalidArguments2_iViW5() {
        Constant constant = new Constant(123);
        CoreOperationEqual operation = new CoreOperationEqual(null, constant);
        String symbol = operation.getSymbol();
        assertEquals("=", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_InvalidArguments12_fkpd15() {
        Constant constant = new Constant(123);
    }
}