/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_InfoSetUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_Boolean_fcrn1() {
        Boolean bool = new Boolean(true);
        assertEquals(1, InfoSetUtil.number(bool));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_String_qtKG2() {
        String str = "10";
        assertEquals(10, InfoSetUtil.number(str));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_Null_nVjR6() {
        assertEquals(0, InfoSetUtil.number(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_InvalidType_xCZd7() {
        Object obj = new Object();
        assertEquals(0, InfoSetUtil.number(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Number_FKEN0() {
        Number number = new Double(1.0);
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(number);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Boolean_zWjj1() {
        Boolean bool = true;
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(bool);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_yenL2() {
        String str = "1.0";
        double expected = 1.0;
        double actual = InfoSetUtil.doubleValue(str);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_Empty_LaQY5() {
        String str = "";
        double expected = 0.0;
        double actual = InfoSetUtil.doubleValue(str);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_String_Invalid_PgIJ6() {
        String str = "abc";
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(str);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValue_Null_QySr7() {
        Object object = null;
        double expected = Double.NaN;
        double actual = InfoSetUtil.doubleValue(object);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Number_CGJY0() {
        Object object = new Double(1.0);
        assertTrue(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Boolean_gihc1() {
        Object object = Boolean.TRUE;
        assertTrue(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_String_ABBv3() {
        Object object = "test";
        assertTrue(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Null_VYNB6() {
        Object object = null;
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_Zero_nloN7() {
        Object object = new Double(0.0);
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NegativeZero_tQVM8() {
        Object object = new Double(-0.0);
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NaN_coLw9() {
        Object object = new Double(Double.NaN);
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_EmptyString_bFqS10() {
        Object object = "";
        assertFalse(InfoSetUtil.booleanValue(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullPointer_Xxqm11() {
        NodePointer pointer = null;
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_NullEvalContext_itJD12() {
        EvalContext ctx = null;
        assertFalse(InfoSetUtil.booleanValue(ctx));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_String_mTbx0() {
        String str = "test";
        String result = InfoSetUtil.stringValue(str);
        assertEquals(str, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Number_MfgY1() {
        Number num = 10;
        String result = InfoSetUtil.stringValue(num);
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Boolean_BYYn2() {
        Boolean bool = true;
        String result = InfoSetUtil.stringValue(bool);
        assertEquals("true", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Null_ZwlH3() {
        String result = InfoSetUtil.stringValue(null);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Object_XfwD6() {
        Object obj = new Object();
        String result = InfoSetUtil.stringValue(obj);
        assertEquals(obj.toString(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Double_OIpV7() {
        Double d = 10.5;
        String result = InfoSetUtil.stringValue(d);
        assertEquals("10.5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Long_gwkt8() {
        Long l = 10L;
        String result = InfoSetUtil.stringValue(l);
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Float_EKpD9() {
        Float f = 10.5f;
        String result = InfoSetUtil.stringValue(f);
        assertEquals("10.5", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Integer_oLpY10() {
        Integer i = 10;
        String result = InfoSetUtil.stringValue(i);
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Short_XMrc11() {
        Short s = 10;
        String result = InfoSetUtil.stringValue(s);
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Byte_TJzO12() {
        Byte b = 10;
        String result = InfoSetUtil.stringValue(b);
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Character_ZDTe13() {
        Character c = 'a';
        String result = InfoSetUtil.stringValue(c);
        assertEquals("a", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Date_tVDd14() {
        Date date = new Date();
        String result = InfoSetUtil.stringValue(date);
        assertEquals(date.toString(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_Calendar_ikxs15() {
        Calendar calendar = Calendar.getInstance();
        String result = InfoSetUtil.stringValue(calendar);
        assertEquals(calendar.toString(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_Number_KSUB0_fjCx0() {
        Number num = new Double(10);
        assertEquals(10, InfoSetUtil.number(num));
    }
}