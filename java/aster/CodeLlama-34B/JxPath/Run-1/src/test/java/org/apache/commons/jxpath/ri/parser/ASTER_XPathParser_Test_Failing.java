/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Failing {
    private int jj_endpos;
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    static private int[] jj_la1_0;
    private int[] jj_expentry;
    private final java.util.Vector jj_expentries = new java.util.Vector();
    private int jj_kind = -1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_1;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionName() throws Exception {
        xpathparser = new XPathParser(Mockito.mock(XPathParserTokenManager.class));
        Object qname = Mockito.mock(Object.class);
        Mockito.when(xpathparser.QName_Without_CoreFunctions()).thenReturn(qname);
        Assertions.assertEquals(qname, xpathparser.FunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_lmsG7_hoJo0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_NmZP9_XbSt0() {
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 1));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_xIML1_HCKn0() {
        ParseException exception = new ParseException();
        assertNotNull(exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_avCs3_jouK0() {
        ParseException exception = new ParseException();
        assertNotNull(exception.expectedTokenSequences);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_bfKA4_oGuA0() {
        ParseException exception = new ParseException();
        assertNotNull(exception.tokenImage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_MxRP8_xryk0() {
        ParseException exception = new ParseException();
        assertNotNull(exception.currentToken);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetToken1_AnNr0_vpLO0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        assertEquals(tokenManager.getNextToken(), null);
    }
}