/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Passing {
    private BasicTypeConverter converter = new BasicTypeConverter();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithConcreteType_AwCz0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        Assertions.assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithConcreteType_AwCz0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithInterfaceType_EguM1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        Assertions.assertNotNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithInterfaceType_EguM1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_Double_HSJS0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1.5", Double.class);
        assertEquals(Double.valueOf(1.5), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_JfvZ0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(2, unmodifiableCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_JfvZ0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection.contains("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_JfvZ0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_pVPS1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(2, unmodifiableCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_pVPS1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection.contains("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_pVPS1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_dyPG2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertEquals(2, unmodifiableCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_dyPG2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertTrue(unmodifiableCollection.contains("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_dyPG2_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_GzAP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_assignableTypes_WmMo1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("string", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_assignableTypes_WmMo1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_assignableTypes_WmMo1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1L, Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_assignableTypes_WmMo1_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1.0, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_KswY2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[]{"a", "b"}, String[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_KswY2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Integer[]{1, 2}, Integer[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_KswY2_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Long[]{1L, 2L}, Long[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_KswY2_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Double[]{1.0, 2.0}, Double[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_collectionTypes_mbYx3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("a", "b"), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_collectionTypes_mbYx3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList(1, 2), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_collectionTypes_mbYx3_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList(1L, 2L), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_collectionTypes_mbYx3_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList(1.0, 2.0), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_unsupportedTypes_IhZz6_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new Object(), Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Object.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Integer.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Long.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_nullObject_unsupportedTypes_TTQQ7_5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToType_kxCE0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Class toType = Object.class;
        Object result = converter.convert(object, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToType_kxCE0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Class toType = Object.class;
        Object result = converter.convert(object, toType);
        assertTrue(result instanceof Object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_egys1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = null;
        Class toType = int.class;
        Object result = converter.convert(object, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_egys1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = null;
        Class toType = int.class;
        Object result = converter.convert(object, toType);
        assertTrue(result instanceof Integer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_egys1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = null;
        Class toType = int.class;
        Object result = converter.convert(object, toType);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToType_rsvX4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[]{new Object()};
        Class toType = Object.class;
        Object result = converter.convert(array, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToType_rsvX4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[]{new Object()};
        Class toType = Object.class;
        Object result = converter.convert(array, toType);
        assertTrue(result instanceof Object[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToType_rsvX4_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[]{new Object()};
        Class toType = Object.class;
        Object result = converter.convert(array, toType);
        assertEquals(1, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToType_hxfh5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(new Object());
        Class toType = Object.class;
        Object result = converter.convert(collection, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToType_hxfh5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(new Object());
        Class toType = Object.class;
        Object result = converter.convert(collection, toType);
        assertTrue(result instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToType_hxfh5_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(new Object());
        Class toType = Object.class;
        Object result = converter.convert(collection, toType);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToType_akWX6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean bool = Boolean.TRUE;
        Class toType = Object.class;
        Object result = converter.convert(bool, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToType_akWX6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean bool = Boolean.TRUE;
        Class toType = Object.class;
        Object result = converter.convert(bool, toType);
        assertTrue(result instanceof Boolean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToType_akWX6_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean bool = Boolean.TRUE;
        Class toType = Object.class;
        Object result = converter.convert(bool, toType);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToType_VqQf7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(1);
        Class toType = Object.class;
        Object result = converter.convert(number, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToType_VqQf7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(1);
        Class toType = Object.class;
        Object result = converter.convert(number, toType);
        assertTrue(result instanceof Number);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToType_VqQf7_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(1);
        Class toType = Object.class;
        Object result = converter.convert(number, toType);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToType_nfPC8_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String string = "test";
        Class toType = Object.class;
        Object result = converter.convert(string, toType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToType_nfPC8_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String string = "test";
        Class toType = Object.class;
        Object result = converter.convert(string, toType);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToType_nfPC8_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String string = "test";
        Class toType = Object.class;
        Object result = converter.convert(string, toType);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_BiAh0_1() {
        Class type = Byte.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_Gani1_1() {
        Class type = Short.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_Gani1_2() {
        Class type = Short.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof Short);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_Gani1_3() {
        Class type = Short.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(Short.valueOf((short) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_UHml2_1() {
        Class type = Integer.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_UHml2_2() {
        Class type = Integer.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof Integer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_UHml2_3() {
        Class type = Integer.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(Integer.valueOf((int) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_Trdo3_1() {
        Class type = Long.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_Trdo3_2() {
        Class type = Long.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof Long);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_Trdo3_3() {
        Class type = Long.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(Long.valueOf((long) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_bffE4_1() {
        Class type = Float.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_bffE4_2() {
        Class type = Float.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof Float);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_bffE4_3() {
        Class type = Float.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(Float.valueOf((float) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_fiRH5_1() {
        Class type = Double.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_fiRH5_2() {
        Class type = Double.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof Double);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_fiRH5_3() {
        Class type = Double.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(Double.valueOf(value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_XDEQ6_1() {
        Class type = BigInteger.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_XDEQ6_2() {
        Class type = BigInteger.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof BigInteger);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_XDEQ6_3() {
        Class type = BigInteger.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(BigInteger.valueOf((long) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_gAWo7_1() {
        Class type = BigDecimal.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_gAWo7_2() {
        Class type = BigDecimal.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertTrue(result instanceof BigDecimal);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_gAWo7_3() {
        Class type = BigDecimal.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertEquals(new BigDecimal(value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithConcreteType_AwCz0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        Assertions.assertNotNull(collection);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithInterfaceType_EguM1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        Assertions.assertNotNull(collection);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_JfvZ0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(set);
        assertEquals(2, unmodifiableCollection.size());
        assertTrue(unmodifiableCollection.contains("apple"));
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_pVPS1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(list);
        assertEquals(2, unmodifiableCollection.size());
        assertTrue(unmodifiableCollection.contains("apple"));
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_dyPG2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> sortedSet = new TreeSet<>();
        sortedSet.add("apple");
        sortedSet.add("banana");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(sortedSet);
        assertEquals(2, unmodifiableCollection.size());
        assertTrue(unmodifiableCollection.contains("apple"));
        assertTrue(unmodifiableCollection.contains("banana"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_assignableTypes_WmMo1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("string", String.class));
        assertTrue(converter.canConvert(1, Integer.class));
        assertTrue(converter.canConvert(1L, Long.class));
        assertTrue(converter.canConvert(1.0, Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_arrayTypes_KswY2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new String[]{"a", "b"}, String[].class));
        assertTrue(converter.canConvert(new Integer[]{1, 2}, Integer[].class));
        assertTrue(converter.canConvert(new Long[]{1L, 2L}, Long[].class));
        assertTrue(converter.canConvert(new Double[]{1.0, 2.0}, Double[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_collectionTypes_mbYx3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(Arrays.asList("a", "b"), List.class));
        assertTrue(converter.canConvert(Arrays.asList(1, 2), List.class));
        assertTrue(converter.canConvert(Arrays.asList(1L, 2L), List.class));
        assertTrue(converter.canConvert(Arrays.asList(1.0, 2.0), List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToType_kxCE0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = new Object();
        Class toType = Object.class;
        Object result = converter.convert(object, toType);
        assertNotNull(result);
        assertTrue(result instanceof Object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitive_egys1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = null;
        Class toType = int.class;
        Object result = converter.convert(object, toType);
        assertNotNull(result);
        assertTrue(result instanceof Integer);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToType_rsvX4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object[] array = new Object[]{new Object()};
        Class toType = Object.class;
        Object result = converter.convert(array, toType);
        assertNotNull(result);
        assertTrue(result instanceof Object[]);
        assertEquals(1, ((Object[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToType_hxfh5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = new ArrayList();
        collection.add(new Object());
        Class toType = Object.class;
        Object result = converter.convert(collection, toType);
        assertNotNull(result);
        assertTrue(result instanceof Collection);
        assertEquals(1, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToType_akWX6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Boolean bool = Boolean.TRUE;
        Class toType = Object.class;
        Object result = converter.convert(bool, toType);
        assertNotNull(result);
        assertTrue(result instanceof Boolean);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToType_VqQf7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number number = new Integer(1);
        Class toType = Object.class;
        Object result = converter.convert(number, toType);
        assertNotNull(result);
        assertTrue(result instanceof Number);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToType_nfPC8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String string = "test";
        Class toType = Object.class;
        Object result = converter.convert(string, toType);
        assertNotNull(result);
        assertTrue(result instanceof String);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_BiAh0() {
        Class type = Byte.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Byte);
        assertEquals(Byte.valueOf((byte) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_Gani1() {
        Class type = Short.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Short);
        assertEquals(Short.valueOf((short) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_UHml2() {
        Class type = Integer.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Integer);
        assertEquals(Integer.valueOf((int) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_Trdo3() {
        Class type = Long.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Long);
        assertEquals(Long.valueOf((long) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_bffE4() {
        Class type = Float.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Float);
        assertEquals(Float.valueOf((float) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_fiRH5() {
        Class type = Double.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof Double);
        assertEquals(Double.valueOf(value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_XDEQ6() {
        Class type = BigInteger.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof BigInteger);
        assertEquals(BigInteger.valueOf((long) value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_gAWo7() {
        Class type = BigDecimal.class;
        double value = 10.0;
        Number result = converter.allocateNumber(type, value);
        assertNotNull(result);
        assertTrue(result instanceof BigDecimal);
        assertEquals(new BigDecimal(value), result);
    }
}