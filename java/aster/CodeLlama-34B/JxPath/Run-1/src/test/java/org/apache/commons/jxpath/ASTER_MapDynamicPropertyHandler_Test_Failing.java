/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MapDynamicPropertyHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInputAndNullKey_NTbT11() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty(null, "key");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInputAndEmptyKey_LfXs12() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty("key", "");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullPropertyName_DhjO2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = null;
        Object value = "John";
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("propertyName", e.getMessage());
        }
        // Fix the assertion
        assertNull(propertyName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInputAndNonStringKey_ifZc13_jtTP0() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty("key", "1");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NullInput_tDpR2_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        map.put("key", "value");
        Object result = handler.getProperty(null, "key");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInput_SRzZ6_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty("key", "value");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInputAndNullKey_NTbT11_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty("key", null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_NonMapInputAndEmptyKey_LfXs12_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Object result = handler.getProperty("key", "");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullMap_devF1_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = null;
        String propertyName = "name";
        Object value = "John";
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("map", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullPropertyName_DhjO2_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = null;
        Object value = "John";
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("propertyName", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_RbOh3_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = "name";
        Object value = null;
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("value", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithInvalidPropertyName_dVZt4_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = "invalid";
        Object value = "John";
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid property name: " + propertyName, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithInvalidValue_YBsl5_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = "name";
        Object value = new Object();
        try {
            handler.setProperty(map, propertyName, value);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid value for property " + propertyName + ": " + value, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithDuplicatePropertyName_ZgnW6_fid2() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        String propertyName = "name";
        Object value1 = "John";
        Object value2 = "Jane";
        handler.setProperty(map, propertyName, value1);
        try {
            handler.setProperty(map, propertyName, value2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate property name: " + propertyName, e.getMessage());
        }
    }
}