/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeanPointer_Coverage_Test_Passing {
    private Object mockObject;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_bWae0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        int length = beanPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_BdTA0() {
        BeanPointer beanPointer = new BeanPointer(new QName("bean"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.ENGLISH);
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_XoAL2() {
        BeanPointer beanPointer = new BeanPointer(null, 10, null, null);
        String result = beanPointer.asPath();
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBeanEndingWithZero_DVjc3() {
        BeanPointer beanPointer = new BeanPointer(null, 10.0, null, null);
        String result = beanPointer.asPath();
        assertEquals("10", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_NWXB4() {
        BeanPointer beanPointer = new BeanPointer(null, true, null, null);
        String result = beanPointer.asPath();
        assertEquals("true()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithStringBean_mWGj5() {
        BeanPointer beanPointer = new BeanPointer(null, "hello", null, null);
        String result = beanPointer.asPath();
        assertEquals("'hello'", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithOtherBean_ttgN6() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), null, null);
        String result = beanPointer.asPath();
        assertEquals("/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_AoLZ2() {
        DOMNodePointer parent1 = new DOMNodePointer(null, null, null);
        DOMNodePointer parent2 = new DOMNodePointer(null, null, null);
        BeanPointer beanPointer1 = new BeanPointer(parent1, null, null, null);
        BeanPointer beanPointer2 = new BeanPointer(parent2, null, null, null);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_cCnQ4() {
        BeanPointer beanPointer1 = new BeanPointer(null, null, 0, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, 1, null);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBean_nHnT5() {
        Object bean = new Object();
        BeanPointer beanPointer1 = new BeanPointer(null, null, bean, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, bean, null);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_tOSk6() {
        Object bean1 = new Object();
        Object bean2 = new Object();
        BeanPointer beanPointer1 = new BeanPointer(null, null, bean1, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, bean2, null);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NumberBean_cDSW7() {
        Object bean1 = new Integer(1);
        Object bean2 = new Integer(1);
        BeanPointer beanPointer1 = new BeanPointer(null, null, bean1, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, bean2, null);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_StringBean_znzy8() {
        Object bean1 = "string1";
        Object bean2 = "string1";
        BeanPointer beanPointer1 = new BeanPointer(null, null, bean1, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, bean2, null);
        assertTrue(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ORBP3_YjPO0() {
        QName name1 = new QName("name1");
        QName name2 = new QName("name2");
        BeanPointer beanPointer1 = new BeanPointer(name1, null, null, null);
        BeanPointer beanPointer2 = new BeanPointer(name2, null, null, null);
        assertFalse(beanPointer1.equals(beanPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BooleanBean_AXjT9() {
        Object bean1 = Boolean.TRUE;
        Object bean2 = Boolean.TRUE;
        BeanPointer beanPointer1 = new BeanPointer(null, null, bean1, null);
        BeanPointer beanPointer2 = new BeanPointer(null, null, bean2, null);
        assertTrue(beanPointer1.equals(beanPointer2));
    }
}