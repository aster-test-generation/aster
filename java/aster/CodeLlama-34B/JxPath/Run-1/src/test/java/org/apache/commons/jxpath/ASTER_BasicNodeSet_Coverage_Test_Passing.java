/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicNodeSet_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_readOnlyPointersIsNull_qQRf0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertNotNull(pointers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_readOnlyPointersIsNotNull_cnOT1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertEquals(pointers, Collections.unmodifiableList(pointers));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointers_returnReadOnlyPointers_jbGz2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<String> pointers = basicNodeSet.getPointers();
        assertSame(pointers, basicNodeSet.getPointers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FYoi0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        String actual = basicNodeSet.toString();
        String expected = "[]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_NonNullValues_zjOx1() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<Object> values = basicNodeSet.getValues();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_EmptyValues_Hxof2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<Object> values = basicNodeSet.getValues();
        assertTrue(values.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_ReturnValues_lUBJ6() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List<Object> values = basicNodeSet.getValues();
        assertEquals(values, basicNodeSet.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NullPointer_Haur2() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        basicNodeSet.remove(null);
    }
}