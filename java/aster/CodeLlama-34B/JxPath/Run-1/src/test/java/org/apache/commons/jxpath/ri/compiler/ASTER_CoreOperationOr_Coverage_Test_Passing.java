/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationOr_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_TeMe0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        assertTrue(coreOperationOr.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_egbM0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[0]);
        assertEquals("or", coreOperationOr.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_XBNm0_mxnC0() {
        CoreOperationOr or = new CoreOperationOr(new Expression[0]);
        int actual = or.getPrecedence();
        int expected = CoreOperationOr.OR_PRECEDENCE;
        assertEquals(expected, actual);
    }
}