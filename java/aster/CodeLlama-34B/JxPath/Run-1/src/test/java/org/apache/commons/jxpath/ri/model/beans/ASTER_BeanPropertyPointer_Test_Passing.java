/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    private Object value = UNINITIALIZED;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private PropertyDescriptor pd;
    @Mock
    private IndexedPropertyDescriptor indexedPropertyDescriptor;
    @Mock
    private ValueUtils valueUtils;
    @InjectMocks
    private BeanPropertyPointer beanPropertyPointer;
    private static Object UNINITIALIZED = new Object();
    private String propertyName;
    private Object baseValue = UNINITIALIZED;
    private transient PropertyDescriptor[] propertyDescriptors;
    private transient String[] names;
    private transient PropertyDescriptor propertyDescriptor;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptor(anyString())).thenReturn(pd);
        when(pd.getPropertyType()).thenReturn(null);
        when(valueUtils.getCollectionHint(any())).thenReturn(0);
        when(valueUtils.isCollection(any())).thenReturn(false);
        assertFalse(beanPropertyPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NullPropertyDescriptor_UTWI0() {
        BeanPropertyPointer pointer = new BeanPropertyPointer(null, null);
        assertFalse(pointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_NullBean_GeyB0() {
        BeanPropertyPointer bpp = new BeanPropertyPointer(null, null);
        assertNull(bpp.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_NullPropertyDescriptor_cFxb1() {
        BeanPropertyPointer bpp = new BeanPropertyPointer(new DOMNodePointer(null, null, null), null);
        assertNull(bpp.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NonCollectionPropertyDescriptor_FKCq1_uLdx0() {
        BeanPropertyPointer pointer = new BeanPropertyPointer(new DOMNodePointer(null, null, null), new JXPathBasicBeanInfo(String.class));
        assertFalse(pointer.isCollection());
    }
}