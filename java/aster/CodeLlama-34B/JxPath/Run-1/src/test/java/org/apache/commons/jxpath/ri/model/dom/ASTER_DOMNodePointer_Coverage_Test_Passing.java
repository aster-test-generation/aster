/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DOMNodePointer_Coverage_Test_Passing {
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_Gdkt0_1() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, null, null);
        NodeTest test = null;
        boolean reverse = false;
        NodePointer startWith = null;
        NodeIterator result = nodePointer.childIterator(test, reverse, startWith);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_Gdkt0_2() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, null, null);
        NodeTest test = null;
        boolean reverse = false;
        NodePointer startWith = null;
        NodeIterator result = nodePointer.childIterator(test, reverse, startWith);
        assertEquals(DOMNodeIterator.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_YBUB0() {
        Node n = null;
        String attrName = "attr";
        String expected = null;
        String actual = DOMNodePointer.findEnclosingAttribute(n, attrName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute6_Mata5() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithUnknownPrefix_iStf4() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = nodePointer.getNamespaceURI("unknown");
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_prefixNull_nameIsEmpty_jleE5_ONId0() {
        Node node = mock(Node.class);
        when(node.getNodeName()).thenReturn("");
        String prefix = node.getPrefix();
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_Gdkt0() {
        DOMNodePointer nodePointer = new DOMNodePointer(null, null, null);
        NodeTest test = null;
        boolean reverse = false;
        NodePointer startWith = null;
        NodeIterator result = nodePointer.childIterator(test, reverse, startWith);
        assertNotNull(result);
        assertEquals(DOMNodeIterator.class, result.getClass());
    }
}