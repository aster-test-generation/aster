/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    private DynamicPropertyHandler dynamicPropertyHandler;
    private ValueUtils valueUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeIndex_gjJR0() {
        Object collection = new Object[10];
        Object value = ValueUtils.getValue(collection, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanSize_euKb1() {
        Object collection = new Object[10];
        Object value = ValueUtils.getValue(collection, 10);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithList_oWhC3() {
        List<Object> list = new ArrayList<>();
        list.add(new Object());
        Object value = ValueUtils.getValue(list, 0);
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCollection_GQPJ4() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(new Object());
        Object value = ValueUtils.getValue(collection, 0);
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotContainer_COUl1() {
        Object object = new Object();
        Object value = ValueUtils.getValue(object);
        assertEquals(object, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintForInterface_oMeb0() {
        Class clazz = List.class;
        int expected = 1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintForFinalClass_eUfV1() {
        Class clazz = String.class;
        int expected = -1;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_NullCollection_FNTq0() {
        Object collection = null;
        int result = ValueUtils.getLength(collection);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Array_BwrC1() {
        Object collection = new String[]{"a", "b", "c"};
        int result = ValueUtils.getLength(collection);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Collection_huIR2() {
        Object collection = new ArrayList<String>();
        ((ArrayList<String>) collection).add("a");
        ((ArrayList<String>) collection).add("b");
        ((ArrayList<String>) collection).add("c");
        int result = ValueUtils.getLength(collection);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_OtherObject_Gppp3() {
        Object collection = new Object();
        int result = ValueUtils.getLength(collection);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_DkPT1_1() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        Assertions.assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_DkPT1_2() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        Assertions.assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_wejX2_1() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 2);
        Assertions.assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_wejX2_2() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 2);
        Assertions.assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNull_Jhai6() {
        Object result = ValueUtils.remove(null, 2);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_Null_CNOT0() {
        Object collection = null;
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_methodIsNull_aQxH0() {
        Method method = null;
        Method accessibleMethod = ValueUtils.getAccessibleMethod(method);
        assertNull(accessibleMethod);
    }

    @Test
    public void testExpandCollection_Null_zHSU0() {
        Object result = ValueUtils.expandCollection(null, 10);
        assertNull(result);
    }

    @Test
    public void testExpandCollection_Array_FNMv1_1() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertNotNull(result);
    }

    @Test
    public void testExpandCollection_Array_FNMv1_2() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertTrue(result.getClass().isArray());
    }

    @Test
    public void testExpandCollection_Array_FNMv1_3() {
        Object[] array = new Object[]{1, 2, 3};
        Object result = ValueUtils.expandCollection(array, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertEquals(10, Array.getLength(result));
    }

    @Test
    public void testExpandCollection_Collection_WFue2_1() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertNotNull(result);
    }

    @Test
    public void testExpandCollection_Collection_WFue2_2() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertTrue(result instanceof Collection);
    }

    @Test
    public void testExpandCollection_Collection_WFue2_3() {
        List<Object> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Object result = ValueUtils.expandCollection(list, 10);
        for (int i = 0;i < 3;i++) {
        }
        assertEquals(10, ((Collection) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_CkoH0_ZdEQ0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 2);
        Assertions.assertArrayEquals(new Object[]{1, 2, 4, 5}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_DkPT1() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 2);
        Assertions.assertEquals(list, result);
        Assertions.assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_wejX2() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 2);
        Assertions.assertEquals(collection, result);
        Assertions.assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_NotCollection_EKIa4() {
        Object collection = new Object();
        int size = 10;
        try {
            ValueUtils.expandCollection(collection, size);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException e) {
            Assertions.assertEquals("Cannot turn java.lang.Object into a collection of size 10", e.getMessage());
        }
    }
}