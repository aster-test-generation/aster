/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMod_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantString_FmFM0() {
        Constant arg1 = new Constant("string");
        Constant arg2 = new Constant(10);
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertEquals("mod", mod.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ConstantNumber_qRNt1() {
        Constant arg1 = new Constant(10);
        Constant arg2 = new Constant("string");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertEquals("mod", mod.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Null_MUXX2() {
        CoreOperationMod mod = new CoreOperationMod(null, null);
        assertEquals("mod", mod.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_True_cQAc0() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("1");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_False_ADbj1() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("2");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Null_ARpj2() {
        Constant arg1 = new Constant("1");
        Constant arg2 = null;
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Invalid_Rucp3() {
        Constant arg1 = new Constant("1");
        Constant arg2 = new Constant("invalid");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Zero_TWye4() {
        Constant arg1 = new Constant("0");
        Constant arg2 = new Constant("0");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Negative_FOPN5() {
        Constant arg1 = new Constant("-1");
        Constant arg2 = new Constant("-1");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Decimal_Crfl6() {
        Constant arg1 = new Constant("1.5");
        Constant arg2 = new Constant("1.5");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Scientific_kLZr7() {
        Constant arg1 = new Constant("1e5");
        Constant arg2 = new Constant("1e5");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Complex_vQtX8() {
        Constant arg1 = new Constant("1+2i");
        Constant arg2 = new Constant("1+2i");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertTrue(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidComplex_xVkf9() {
        Constant arg1 = new Constant("1+2i");
        Constant arg2 = new Constant("invalid");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidScientific_IjpP10() {
        Constant arg1 = new Constant("1e5");
        Constant arg2 = new Constant("invalid");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidDecimal_JiXh11() {
        Constant arg1 = new Constant("1.5");
        Constant arg2 = new Constant("invalid");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_InvalidNegative_zTXX12() {
        Constant arg1 = new Constant("-1");
        Constant arg2 = new Constant("invalid");
        CoreOperationMod mod = new CoreOperationMod(arg1, arg2);
        assertFalse(mod.isSymmetric());
    }
}