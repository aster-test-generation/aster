/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NamespaceResolver_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_nullPrefix_MAgD3() {
        NamespaceResolver resolver = new NamespaceResolver();
        try {
            resolver.registerNamespace(null, "namespaceURI");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Prefix cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_nullNamespaceURI_mXUu4() {
        NamespaceResolver resolver = new NamespaceResolver();
        try {
            resolver.registerNamespace("prefix", null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("Namespace URI cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_duplicatePrefix_rrTQ5() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        try {
            resolver.registerNamespace("prefix", "namespaceURI");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Prefix already registered", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_duplicateNamespaceURI_rxAB6() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        try {
            resolver.registerNamespace("prefix2", "namespaceURI");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Namespace URI already registered", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithExternallyRegisteredPrefix_PxYs0_fid1() {
        NamespaceResolver resolver = new NamespaceResolver();
        String namespaceURI = "http://example.com/namespace";
        String prefix = resolver.getPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithNonNullParent_HSqT1_fid1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURI_RvgG5_fid1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParent_GgfA6_fid1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParentWithSamePrefix_JeTJ7_fid1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        parentResolver.registerNamespace("http://example.com", "prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixWithExistingNamespaceURIAndParentWithDifferentPrefix_SMfQ8_fid1() {
        NamespaceResolver parentResolver = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parentResolver);
        resolver.registerNamespace("http://example.com", "prefix");
        parentResolver.registerNamespace("http://example.com", "prefix2");
        String prefix = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("prefix", prefix);
    }
}