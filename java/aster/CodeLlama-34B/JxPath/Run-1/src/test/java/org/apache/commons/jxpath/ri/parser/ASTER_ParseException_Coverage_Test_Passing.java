/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ParseException_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes1_AAqJ0() {
        ParseException pe = new ParseException();
        String str = "test";
        String expected = "test";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes2_BpfJ1() {
        ParseException pe = new ParseException();
        String str = "test\b";
        String expected = "test\\b";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes3_oISI2() {
        ParseException pe = new ParseException();
        String str = "test\t";
        String expected = "test\\t";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes4_fSwc3() {
        ParseException pe = new ParseException();
        String str = "test\n";
        String expected = "test\\n";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes5_FjQJ4() {
        ParseException pe = new ParseException();
        String str = "test\f";
        String expected = "test\\f";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes6_qbUo5() {
        ParseException pe = new ParseException();
        String str = "test\r";
        String expected = "test\\r";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes7_DitH6() {
        ParseException pe = new ParseException();
        String str = "test\"";
        String expected = "test\\\"";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes8_tMSk7() {
        ParseException pe = new ParseException();
        String str = "test\'";
        String expected = "test\\\'";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes9_WiMm8() {
        ParseException pe = new ParseException();
        String str = "test\\";
        String expected = "test\\\\";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes11_xLBW10() {
        ParseException pe = new ParseException();
        String str = "test\u001f";
        String expected = "test\\u001f";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes12_kmuR11() {
        ParseException pe = new ParseException();
        String str = "test\u007f";
        String expected = "test\\u007f";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapes13_xasI12() {
        ParseException pe = new ParseException();
        String str = "test\u0080";
        String expected = "test\\u0080";
        String actual = pe.add_escapes(str);
        assertEquals(expected, actual);
    }
}