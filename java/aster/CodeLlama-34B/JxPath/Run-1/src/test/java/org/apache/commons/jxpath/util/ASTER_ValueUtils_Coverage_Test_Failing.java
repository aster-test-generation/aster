/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Failing {
    private DynamicPropertyHandler dynamicPropertyHandler;
    private ValueUtils valueUtils;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArray_glRG2() {
        Object[] array = new Object[10];
        Object value = ValueUtils.getValue(array, 5);
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithValidClass_zKOj0() {
        Class clazz = DynamicPropertyHandler.class;
        dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(dynamicPropertyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithInvalidClass_EAFP1() {
        Class clazz = Object.class;
        dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNull(dynamicPropertyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithNullClass_tRMb3() {
        Class clazz = null;
        dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNull(dynamicPropertyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexOutOfBounds_pmeo4_1() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 5);
        Assertions.assertEquals(list, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexOutOfBounds_pmeo4_2() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 5);
        Assertions.assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexOutOfBounds_hhWj5_1() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 5);
        Assertions.assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexOutOfBounds_hhWj5_2() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 5);
        Assertions.assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidType_yAzd7() {
        Object result = ValueUtils.remove("hello", 2);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_SizeLessThanCollectionLength_xJMf1() {
        Object collection = new int[]{1, 2, 3};
        int size = 2;
        try {
            ValueUtils.expandCollection(collection, size);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException e) {
            Assertions.assertEquals("adjustment of [I@253cbe6d to size 2 is not an expansion", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueException2_kNpc2_BmCD0() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = new PropertyDescriptor("dummy", bean.getClass());
        int index = 0;
        Object value = new Object();
        try {
            ValueUtils.setValue(bean, propertyDescriptor, index, value);
        } catch (Exception ex) {
            assertTrue(ex instanceof IllegalArgumentException);
            assertEquals("Not a collection: dummy", ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArrayIndexOutOfBounds_fEXa3_LztC0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, 5);
        Assertions.assertArrayEquals(new Object[]{1, 2, 3, 4}, (Object[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidIndex_MIpp8_Najp0() {
        Object[] array = new Object[]{1, 2, 3, 4, 5};
        Object result = ValueUtils.remove(array, -1);
        Assertions.assertArrayEquals(new Object[]{1, 2, 3, 4, 5}, (Object[]) result);
    }

    @Test
    public void testExpandCollection_Ksiz0_1() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = new Object[5];
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        assertEquals(size, Array.getLength(result));
    }

    @Test
    public void testExpandCollection_Ksiz0_2() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = new Object[5];
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        assertEquals(collection.getClass().getComponentType(), result.getClass().getComponentType());
    }

    @Test
    public void testExpandCollection_Ksiz0_3() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = new Object[5];
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        assertEquals(size, ((Collection) result).size());
    }

    @Test
    public void testExpandCollection_Ksiz0_4() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = new Object[5];
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        assertEquals(collection.getClass(), result.getClass());
    }

    @Test
    public void testExpandCollection_Ksiz0_5() {
        Object collection = new Object[5];
        int size = 10;
        Object result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 10;
        result = ValueUtils.expandCollection(collection, size);
        collection = new Object[5];
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = new ArrayList<>();
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        collection = null;
        size = 3;
        result = ValueUtils.expandCollection(collection, size);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintForInterface_oMeb0_fid2() {
        Class clazz = List.class;
        int expected = 0;
        int actual = ValueUtils.getCollectionHint(clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveListIndexOutOfBounds_pmeo4() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, 5);
        Assertions.assertEquals(list, result);
        Assertions.assertEquals(4, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollectionIndexOutOfBounds_hhWj5() {
        Collection<Integer> collection = new HashSet<Integer>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        collection.add(4);
        collection.add(5);
        Object result = ValueUtils.remove(collection, 5);
        Assertions.assertEquals(collection, result);
        Assertions.assertEquals(4, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidIndexList_etWy9() {
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Object result = ValueUtils.remove(list, -1);
        Assertions.assertEquals(list, result);
        Assertions.assertEquals(5, list.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_SizeLessThanCollectionLength_xJMf1_fid2() {
        Object collection = new int[]{1, 2, 3};
        int size = 2;
        try {
            ValueUtils.expandCollection(collection, size);
            Assertions.fail("Expected JXPathException");
        } catch (JXPathException e) {
            Assertions.assertEquals("adjustment of [1, 2, 3] to size 2 is not an expansion", e.getMessage());
        }
    }
}