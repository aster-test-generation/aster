/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptor_lszi0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertNotNull(descriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorWithDynamicPropertyHandlerClass_SYQD2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, Integer.class);
        PropertyDescriptor descriptor = beanInfo.getPropertyDescriptor("length");
        assertNotNull(descriptor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_muWB1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(String.class.getName()));
        assertTrue(result.contains(", dynamic"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_muWB1_2_fid3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic"));
    }
}