/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
    private Attr attr;
    DOMAttributePointer domattributepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_1() throws Exception {
        domattributepointer = new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        assertTrue(domattributepointer.equals(domattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals_2() throws Exception {
        domattributepointer = new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        assertFalse(domattributepointer.equals(new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attr.class))));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAttributeNodeWithNoOwnerElementAndAttributeNodeWithNoOwnerElementAndNullAttributeNode_xeXT5() {
        QName qName = new QName("prefix", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        domattributepointer = new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attr.class));
        assertEquals(System.identityHashCode(attr), domattributepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        domattributepointer = new DOMAttributePointer(mock(DOMNodePointer.class), mock(Attr.class));
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        when(DOMNodePointer.getPrefix(attr)).thenReturn(prefix);
        when(domattributepointer.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        assertEquals(namespaceURI, domattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        domattributepointer = new DOMAttributePointer(mock(DOMNodePointer.class), mock(Attr.class));
        assertTrue(domattributepointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        domattributepointer = new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        assertTrue(domattributepointer.equals(domattributepointer));
        assertFalse(domattributepointer.equals(new DOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attr.class))));
    }
}