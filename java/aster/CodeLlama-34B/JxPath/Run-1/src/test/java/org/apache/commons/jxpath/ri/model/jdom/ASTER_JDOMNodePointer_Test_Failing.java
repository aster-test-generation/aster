/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    private Object node;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JDOMNodePointer jdomNodePointer;
    JDOMNodePointer jdomnodepointer;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_TextAndElement_syYP7() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("root"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_TextAndText_VNVF8() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text1"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Text("text2"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithNullNode_MCBC8() {
        QName name = new QName("name");
        JDOMNodePointer nodePointer = new JDOMNodePointer(null, new Locale("en"), "id");
        NodeIterator iterator = nodePointer.attributeIterator(name);
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNonXMLPrefix_BFMT1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        String namespaceURI = nodePointer.getNamespaceURI("ns");
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNullPrefix_UXSf2() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        String namespaceURI = nodePointer.getNamespaceURI(null);
        assertNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes_ucBV1_fid1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("root"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("root"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_TextAndElement_syYP7_fid1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Element("root"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_TextAndText_VNVF8_fid1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Text("text1"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Text("text2"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNull_uNvF2_fid1() {
        String prefix = DOMNodePointer.getPrefix(null);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_Document_Rwon1_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Document(), Locale.ENGLISH);
        assertTrue(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_Other_kqmG2_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertFalse(nodePointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameNodeAndLocale_uYQX6_fid1() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.ENGLISH);
        assertTrue(pointer1.equals(pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameNull_KBER2() {
        String localName = DOMNodePointer.getLocalName(null);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguageWithoutParent_lixH2_fid1() {
        JDOMNodePointer node = new JDOMNodePointer(new Object(), new Locale("en"));
        String language = node.getLanguage();
        assertEquals("en", language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullId_LbYc0_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("test"), new Locale("en-US"), null);
        String actual = jdomNodePointer.asPath();
        String expected = "/test";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNamespaceURI_spxI7_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("test", "http://www.example.com"), new Locale("en-US"), null);
        String actual = jdomNodePointer.asPath();
        String expected = "/test";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithRelativePositionByQName_wzAh9_fid1() {
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Element("test"), new Locale("en-US"), null);
        String actual = jdomNodePointer.asPath();
        String expected = "/test[1]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElement_lCGg2_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test"), new Locale("en"), "id");
        String path = nodePointer.asPath();
        Assertions.assertEquals("test[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithText_byFm3_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Text("test"), new Locale("en"), "id");
        String path = nodePointer.asPath();
        Assertions.assertEquals("/text()[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNamespace_vlvu5_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test", "http://www.example.com"), new Locale("en"), "id");
        String path = nodePointer.asPath();
        Assertions.assertEquals("test[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNamespaceAndNoPrefix_pdfA7_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("test", "http://www.example.com"), new Locale("en"), "id");
        String path = nodePointer.asPath();
        Assertions.assertEquals("node()[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParent_KBZc1_fid1() {
        JDOMNodePointer parent = new JDOMNodePointer(null, null, null);
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, null, null);
        String path = nodePointer.asPath();
        assertEquals("/", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParentAndId_VLSC7_fid1() {
        JDOMNodePointer parent = new JDOMNodePointer(null, null, null);
        JDOMNodePointer nodePointer = new JDOMNodePointer(parent, null, "id");
        String path = nodePointer.asPath();
        assertEquals("/id('id')", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullId_DlIq0_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/root", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithText_DIMI4_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Text("text"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/text()", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithCDATA_WGGP5_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new CDATA("cdata"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/cdata()", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNamespace_XRbr7_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root", "http://www.example.com"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/root", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithRelativePositionByQName_Nfpy8_fid1() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("root"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/root[1]", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeAndElement_RYel2_awnd0_fid1() {
        JDOMNodePointer nodePointer1 = new JDOMNodePointer(new Element("root"), new Locale("en"));
        JDOMNodePointer nodePointer2 = new JDOMNodePointer(new Attribute("attr", "value"), new Locale("en"));
        int result = nodePointer1.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParent_LnHC2_fTvP1_fid1() {
        JDOMNodePointer parent = new JDOMNodePointer(new Element("parent"), null, null);
        JDOMNodePointer nodePointer = new JDOMNodePointer(new Element("child"), null, null);
        String path = nodePointer.asPath();
        assertEquals("/parent/child", path);
    }
}