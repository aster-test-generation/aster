/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    private NodePointer currentNodePointer;
    private NodeTest nodeTest;
    private boolean setStarted = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_ParentContext_GuRw0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(2));
        ParentContext parentContext = new ParentContext(namespaceContext, new NodeTypeTest(3));
        int actual = parentContext.getDocumentOrder();
        assertEquals(1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_NamespaceContext_DjqU1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(2));
        int actual = namespaceContext.getDocumentOrder();
        assertEquals(2, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTestIsNull_inGf1() {
        NamespaceContext parentContext = new NamespaceContext(null, null);
        NodeTypeTest nodeTest = null;
        ParentContext context = new ParentContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_SelfContext_orpr0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(namespaceContext, new NodeTypeTest(1));
        int currentPosition = parentContext.getCurrentPosition();
        assertEquals(1, currentPosition);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_NamespaceContext_CcgW1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        ParentContext parentContext = new ParentContext(namespaceContext, new NodeTypeTest(1));
        int currentPosition = parentContext.getCurrentPosition();
        assertEquals(1, currentPosition);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_NodeTypeTest_vVYD2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        ParentContext parentContext = new ParentContext(null, nodeTypeTest);
        int currentPosition = parentContext.getCurrentPosition();
        assertEquals(1, currentPosition);
    }
}