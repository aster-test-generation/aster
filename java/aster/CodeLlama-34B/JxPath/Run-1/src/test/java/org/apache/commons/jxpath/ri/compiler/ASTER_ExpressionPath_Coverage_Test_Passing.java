/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ExpressionPath_Coverage_Test_Passing {
    private Object expressionPath(EvalContext context, boolean b) {
        return null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionIsContextDependent_beBS0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextDependent"), null, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_predicateIsContextDependent_wwTt1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextIndependent"), new Expression[]{new Constant("contextDependent")}, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_expressionAndPredicateAreContextIndependent_HImh2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("contextIndependent"), new Expression[]{new Constant("contextIndependent")}, null);
        assertFalse(expressionPath.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_basicKnown_UTCP0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("test"), new Expression[0], new Step[0]);
        expressionPath.isSimpleExpressionPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_pMhh3() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("expression"), new Expression[]{new Constant("predicate")}, null);
        String expected = "'expression'['predicate']";
        String actual = expressionPath.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultiplePredicates_YZis6() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("expression"), new Expression[]{new Constant("predicate1"), new Constant("predicate2")}, null);
        String expected = "'expression'['predicate1']['predicate2']";
        String actual = expressionPath.toString();
        assertEquals(expected, actual);
    }
}