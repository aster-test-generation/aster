/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DescendantContext_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionGreaterThanCurrentPosition_bezv1_fid2() {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.setPosition(1);
        descendantContext.setPosition(2);
        assertEquals(2, descendantContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionGreaterThanMaxPosition_RyMN3_fid2() {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.setPosition(1);
        descendantContext.setPosition(100);
        assertEquals(100, descendantContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_positionLessThanMinPosition_WLrO4_fid2() {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.setPosition(1);
        descendantContext.setPosition(-1);
        assertEquals(-1, descendantContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_positionNot0_SEDo2_CtQy0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        descendantContext.setPosition(1);
        assertNotNull(descendantContext.getCurrentNodePointer());
    }
}