/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_NoMatch_NWPa2() {
    String regexString = "some regex";
    String compareString = "some string";
    boolean result = SegmentConstantPool.regexMatches(regexString, compareString);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InvalidTag_Gkpu9() {
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(new CpBands(new Segment()));
    try {
        segmentConstantPool.getValue(100, 1);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Tried to get a value I don't know about: 100", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_primaryArrayNull_IFjt0() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", "a", 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexNegative_VkPb4() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", "a", -1);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexOutOfBounds_UShF5() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", "a", 3);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_secondaryArrayEmpty_Ifgu7() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {}, "a", "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_MatchInit_ZxDl1_vwGE0() {
    String regexString = "init";
    String compareString = "init";
    boolean result = SegmentConstantPool.regexMatches(regexString, compareString);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_InvalidName_mLrx1_grIb0() {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    String name = "invalid.class.name";
    ConstantPoolEntry entry = pool.getClassPoolEntry(name);
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatches_NoMatch_NWPa2_fid1() {
    String regexString = "some regex";
    String compareString = "some string";
    boolean result = SegmentConstantPool.regexMatches(regexString, compareString);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_primaryArrayNull_IFjt0_fid1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(null, new String[] {"a", "b", "c"}, "a", "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_secondaryArrayNull_SNqR1_fid1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, null, "a", "a", 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_secondaryCompareRegexNull_BZHC3_fid1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", null, 0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexNegative_VkPb4_fid1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", "a", -1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchSpecificPoolEntryIndex_desiredIndexOutOfBounds_UShF5_fid1() {
    SegmentConstantPool pool = new SegmentConstantPool(new CpBands(new Segment()));
    int result = pool.matchSpecificPoolEntryIndex(new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, "a", "a", 3);
    assertEquals(-1, result);
}
}