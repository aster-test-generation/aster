/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_BigInteger_cusr0() {
    BigInteger value = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(value, zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_rSzl0() {
    ZipEightByteInteger obj = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertTrue(obj.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_UIXX2() {
    ZipEightByteInteger obj = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertFalse(obj.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithByteArray_TklC3() {
    byte[] bytes = new byte[8];
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    byte[] actualBytes = zipEightByteInteger.getBytes();
    assertArrayEquals(bytes, actualBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_BigInteger_mlDg0() {
    BigInteger bigInteger = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bigInteger);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_Long_Daag1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(1234567890L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_BigInteger_yCNk0() {
    BigInteger value = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    int expected = value.hashCode();
    int actual = zipEightByteInteger.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Long_TeSw1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    int expected = (int) value;
    int actual = zipEightByteInteger.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_BigInteger_cjJa0() {
    BigInteger value = new BigInteger("1234567890");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    String expected = "ZipEightByteInteger value: 1234567890";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Long_zVYZ1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    String expected = "ZipEightByteInteger value: 1234567890";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_IhjG2() {
    byte[] bytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    int offset = 0;
    BigInteger expected = BigInteger.valueOf(0L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_4_ojvd3() {
    byte[] bytes = new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
    int offset = 0;
    BigInteger expected = BigInteger.valueOf(0x0101010101010101L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_NullInput_KpsJ2_fid1() {
    byte[] bytes = null;
    int offset = 0;
    long expected = 0;
    long actual = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_EmptyInput_cxjA3_fid1() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_Long_qHoe1_fid1() {
    long value = 1234567890L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    assertEquals(BigInteger.valueOf(value), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArrayOffset_yoZg3_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 2;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_sVYf1_fid1() {
    ZipEightByteInteger obj1 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    ZipEightByteInteger obj2 = new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0);
    assertTrue(obj1.equals(obj2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_ByteArray_TSZs2_fid1() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    assertEquals(578437695752307201L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Empty_pEYb5_fid1() {
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8]);
    String expected = "ZipEightByteInteger value: 0";
    String actual = zipEightByteInteger.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_byteArray_offset0_ewmY0_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    BigInteger expected = new BigInteger("578437695752307201", 10);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_ajqB0_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    BigInteger expected = BigInteger.valueOf(0x0102030405060708L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_WithLong_QkSI1_TvfT0() {
    long expected = 1234567890L;
    byte[] bytes = new byte[8];
    bytes[0] = (byte) (expected & 0xFF);
    bytes[1] = (byte) ((expected >> 8) & 0xFF);
    bytes[2] = (byte) ((expected >> 16) & 0xFF);
    bytes[3] = (byte) ((expected >> 24) & 0xFF);
    bytes[4] = (byte) ((expected >> 32) & 0xFF);
    bytes[5] = (byte) ((expected >> 40) & 0xFF);
    bytes[6] = (byte) ((expected >> 48) & 0xFF);
    bytes[7] = (byte) ((expected >> 56) & 0xFF);
    long actual = ZipEightByteInteger.getLongValue(bytes, 0);
    assertEquals(expected, actual);
}
}