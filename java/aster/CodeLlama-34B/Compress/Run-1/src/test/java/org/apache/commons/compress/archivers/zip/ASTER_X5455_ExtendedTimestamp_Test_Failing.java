/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Failing {
private long dateToZipLong(Date date) {
    return date.getTime() / 1000;
}
    private X5455_ExtendedTimestamp timestamp;
    private X5455_ExtendedTimestamp extendedTimestamp;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);
    assertEquals(0, modifyTime.getValue());
    assertEquals(0, modifyTime.getIntValue());
    assertEquals(0, modifyTime.hashCode());
    assertArrayEquals(new byte[0], modifyTime.getBytes());
    assertArrayEquals(new byte[0], modifyTime.getBytes(0));
    assertEquals(0, modifyTime.getValue(new byte[0]));
    assertEquals(0, modifyTime.getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_DEfz0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    extendedTimestamp.setAccessFileTime(time);
    assertEquals(time, extendedTimestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_YYCt0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    timestamp.setAccessFileTime(time);
    assertEquals(new ZipLong(1000000000000L), timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_nonUnixTime_Ccnb2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000001L);
    timestamp.setAccessFileTime(time);
    assertEquals(new ZipLong(1000000000001L), timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_WGTr0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    timestamp.setCreateJavaTime(date);
    assertEquals(dateToZipLong(date), timestamp.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_mjjS1() {
    X5455_ExtendedTimestamp x1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp x2 = new X5455_ExtendedTimestamp();
    assertFalse(x1.equals(x2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_tnLO0() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    extendedTimestamp.setCreateFileTime(time);
    assertEquals(1000000000000L, extendedTimestamp.getCreateTime().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_NkbL0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNotNull(fileTime);
    assertEquals(fileTime.toInstant().getEpochSecond(), timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_MPOL0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    timestamp.setModifyJavaTime(date);
    assertEquals(dateToZipLong(date), timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithNullDate_diop1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyJavaTime(null);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithDateBeforeEpoch_hNcH2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(0);
    timestamp.setModifyJavaTime(date);
    assertEquals(0, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTime_XAyb1() {
        Date expected = new Date(1234567890L);
        Date actual = extendedTimestamp.getCreateJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTimeWithNull_WrHN2() {
        Date expected = null;
        Date actual = extendedTimestamp.getCreateJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateJavaTimeWithInvalidValue_KyhM3() {
        Date expected = new Date(0L);
        Date actual = extendedTimestamp.getCreateJavaTime();
        assertNotEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_noBitsPresent_opKD4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = timestamp.getLocalFileDataData();
    assertEquals(0, data.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateFileTimeWithNullCreateTime_LCvo6() {
        extendedTimestamp.setCreateTime(null);
        FileTime fileTime = extendedTimestamp.getCreateFileTime();
        assertNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_DMTV0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_VLTM0() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    x5455.setCreateFileTime(time);
    assertEquals(new ZipLong(1000000000000L), x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_invalid_bLDD2() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
    x5455.setCreateFileTime(time);
    assertEquals(new ZipLong(Long.MAX_VALUE), x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit2_createTimePresent_lQye0() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertTrue(timestamp.isBit2_createTimePresent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NoFlags_KHGT0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    String expected = "0x5455 Zip Extra Field: Flags=0";
    assertEquals(expected, timestamp.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_FxRh0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    timestamp.setModifyFileTime(time);
    assertEquals(new ZipLong(1000000000000L), timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithInvalidBuffer_uvtF1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = null;
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception should be thrown");
    } catch (ZipException e) {
        assertEquals("Invalid buffer", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithInvalidOffset_nMWo2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    int offset = -1;
    int length = 10;
    try {
        timestamp.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception should be thrown");
    } catch (ZipException e) {
        assertEquals("Invalid offset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);
    assertEquals(0, accessTime.getValue());
    assertEquals(0, accessTime.getIntValue());
    assertEquals(0, accessTime.hashCode());
    assertEquals(0, accessTime.getBytes().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_nUWW0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setModifyFileTime(time);
    assertEquals(time, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithInvalidTime_gVey2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() + 1000000000000L);
    timestamp.setModifyFileTime(time);
    assertNotEquals(time, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_xyUE1() {
        Date date = new Date();
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(dateToZipLong(date), extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithNull_gCif2() {
        extendedTimestamp.setAccessJavaTime(null);
        assertEquals(0, extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithInvalidDate_VAhw3() {
        Date date = new Date(0);
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(0, extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithMaxDate_RyuI4() {
        Date date = new Date(Long.MAX_VALUE);
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(Long.MAX_VALUE, extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithMinDate_LfCm5() {
        Date date = new Date(Long.MIN_VALUE);
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(Long.MIN_VALUE, extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithFutureDate_jzfW7() {
        Date date = new Date(System.currentTimeMillis() + 10000);
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(dateToZipLong(date), extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTimeWithPastDate_tzIs8() {
        Date date = new Date(System.currentTimeMillis() - 10000);
        extendedTimestamp.setAccessJavaTime(date);
        assertEquals(dateToZipLong(date), extendedTimestamp.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_3() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_4() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_5() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertArrayEquals(new byte[0], modifyTime.getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_6() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertArrayEquals(new byte[0], modifyTime.getBytes(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_7() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_HWOZ0_8() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_NkbL0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_NkbL0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getModifyFileTime();
    assertEquals(fileTime.toInstant().getEpochSecond(), timestamp.getModifyTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithNullDate_diop1_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyJavaTime(null);
    assertNull(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTimeWithDateAfterMaxDate_mYul3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date(Long.MAX_VALUE);
    timestamp.setModifyJavaTime(date);
    assertEquals(Long.MAX_VALUE, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithInvalidBuffer_uvtF1_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception should be thrown");
    } catch (ZipException e) {
        assertEquals("Invalid buffer", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithInvalidOffset_nMWo2_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromCentralDirectoryData(buffer, offset, length);
        fail("Exception should be thrown");
    } catch (ZipException e) {
        assertEquals("Invalid offset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0_4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_wCMk0_5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = timestamp.getAccessTime();
    assertEquals(0, accessTime.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_accessTime_PsKF2_egUC0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    int expected = 991416208;
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithFlag_NHRE1_kDIl0() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    byte flags = timestamp.getFlags();
    assertEquals(1, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithTooLargeModifyTime_clpb4_cYQU0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(Long.MAX_VALUE));
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNotNull(fileTime);
    assertEquals(fileTime, FileTime.fromMillis(Long.MAX_VALUE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_LTVE0_ePHu0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    timestamp.setAccessJavaTime(expected);
    Date actual = timestamp.getAccessJavaTime();
    assertEquals(expected.getTime(), actual.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_ZNjN0_TiYY0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getAccessFileTime();
    assertEquals(fileTime.toMillis(), 1234567890L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_accessTime_PsKF2_egUC0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    int expected = -123 * (0x07 & 0x07) ^ Integer.rotateLeft(timestamp.getAccessTime().hashCode(), 11);
    int actual = timestamp.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithZeroFlag_mbDV6_fHVc0() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(0));
    byte flags = timestamp.getFlags();
    assertEquals(0, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithMaxFlag_cXaJ7_ydeJ0_fid3() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(15));
    byte flags = timestamp.getFlags();
    assertEquals(15, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithMaxValue_GEyv9_rTXO0_fid3() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(Byte.MAX_VALUE));
    byte flags = timestamp.getFlags();
    assertEquals(Byte.MAX_VALUE, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithEmptyString_QdDS12_xabv0() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    byte flags = timestamp.getFlags();
    assertEquals(0, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithTooLargeModifyTime_clpb4_cYQU0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(Long.MAX_VALUE));
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithNegativeModifyTime_QzJl3_peWT0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(-1));
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_lineCoverage_aJfV1_mCWE0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    assertTrue(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_Null_TOeF2_Gndu0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(null);
    assertNull(timestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_AccessTimePresent_brcp2_wipR0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    String expected = "0x5455 Zip Extra Field: Flags=0 Access:[";
    assertTrue(timestamp.toString().startsWith(expected));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_LTVE0_ePHu0_fid3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expected = new Date(1234567890);
    timestamp.setAccessJavaTime(expected);
    Date actual = timestamp.getAccessJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentValues_pahc1_kota0_fid3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date());
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertNotEquals(original, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentHashCodes_KWFD4_BLKR0_fid3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date(100));
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertNotEquals(original.hashCode(), clone.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentToString_ufxM5_nrsn0_fid3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date(100));
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertNotEquals(original.toString(), clone.toString());
}
}