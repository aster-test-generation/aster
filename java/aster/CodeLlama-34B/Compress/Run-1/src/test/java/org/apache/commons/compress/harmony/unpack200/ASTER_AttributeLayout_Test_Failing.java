/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AttributeLayout_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_1_cKUl0() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_2_vlwM1() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCallables_4_eogI5() throws Pack200Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, false);
    int result = attributeLayout.numBackwardsCallables();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_CvgE0() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
    ClassFileEntry entry = layout.getValue(0, pool);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithContext_Vrmr1() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 1, "layout", 0);
    ClassFileEntry entry = layout.getValue(0, pool);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithDefault_jUeW2() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0, true);
    ClassFileEntry entry = layout.getValue(0, pool);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInvalidLayout_ajer3() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "invalid_layout", 0);
    try {
        layout.getValue(0, pool);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Invalid layout: invalid_layout", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInvalidIndex_HcuQ4() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
    try {
        layout.getValue(-1, pool);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Invalid index: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInvalidValue_wKRp5() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
    try {
        layout.getValue(Long.MAX_VALUE, pool);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Invalid value: " + Long.MAX_VALUE, e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNullPool_hjIf6() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0);
    try {
        layout.getValue(0, null);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Null pool", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KS_zXdb1_pvRM0() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("KS", 0, "KS", 0);
    ClassFileEntry entry = layout.getValue(0, "Ljava/lang/String;", pool);
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_K_toqR2_KMxh1() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("K", 0, "K", 0);
    ClassFileEntry entry = layout.getValue(0, "Ljava/lang/String;", pool);
    assertEquals(entry.getClass(), ConstantPoolEntry.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutWithInvalidIndex_cKoc6_BYMV0() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", -1);
        assertEquals(null, attributeLayout.getLayout());
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContext_OFDv3_IDdw0() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0);
        assertEquals(0, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContextAndDefault_bwxM4_WfIG0() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0, true);
        assertEquals(0, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContextAndNonDefault_PnTO5_oqaA0() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0, false);
        assertEquals(0, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndNonDefault_qvuv8_XxVq0() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", 1, false);
        assertEquals(1, layout.getIndex());
    } catch (Pack200Exception e) {
        assertEquals("Exception should not be thrown", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndInvalidIndex_mzCV9_uxAV0() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", -1);
        assertEquals(1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndInvalidIndexAndNonDefault_UzlR11_dqPv0() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", -1, false);
        assertEquals(1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_KS_zXdb1_pvRM0_fid2() throws Pack200Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool pool = new SegmentConstantPool(bands);
    AttributeLayout layout = new AttributeLayout("KS", 0, "KS", 0);
    ClassFileEntry entry = layout.getValue(0, "Ljava/lang/String;", pool);
    assertEquals(entry.getClass(), ConstantPoolEntry.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAll_htYk6_gtKc0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("1: name", layout.toString());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDefault_bFIW1_soZo0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0, true);
        assertEquals("0: name", layout.toString());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithLayout_sNiS4_wOcZ0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 0, "layout", 1);
        assertEquals("0: name", layout.toString());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyLayout_ofhM10_JZmn0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 0, "", 0);
        assertEquals("0: name", layout.toString());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNonDefault_Uvhe2_SGZv0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 0, "layout", 0, false);
        assertEquals("0: name", layout.toString());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithEmptyLayout_JtLE9_Xwzh0() {
    try {
        AttributeLayout layout = new AttributeLayout("name", 1, "", 0);
        assertEquals("", layout.getName());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutWithInvalidIndex_cKoc6_BYMV0_fid2() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", -1);
        assertNull(attributeLayout.getLayout());
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutWithInvalidIndexAndIsDefault_gmeY12_EQzX0_fid2() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", -1, true);
        assertNull(attributeLayout.getLayout());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutWithValidContextAndIndexAndIsDefaultAndInvalidLayout_cwoF17_xtVV0_fid2() {
    try {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 0, true);
        assertNull(attributeLayout.getLayout());
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContext_OFDv3_IDdw0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0);
        assertEquals(-1, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContextAndDefault_bwxM4_WfIG0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0, true);
        assertEquals(-1, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContextWithInvalidContextAndNonDefault_PnTO5_oqaA0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout("name", -1, "layout", 0, false);
        assertEquals(-1, layout.getContext());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndNonDefault_qvuv8_XxVq0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", 1, false);
        assertEquals(1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndDefault_KjOJ7_KUHK0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", 1, true);
        assertEquals(1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndInvalidIndex_mzCV9_uxAV0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", -1);
        assertEquals(-1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexWithNullNameAndInvalidIndexAndNonDefault_UzlR11_dqPv0_fid2() {
    try {
        AttributeLayout layout = new AttributeLayout(null, 1, "layout", -1, false);
        assertEquals(-1, layout.getIndex());
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
}