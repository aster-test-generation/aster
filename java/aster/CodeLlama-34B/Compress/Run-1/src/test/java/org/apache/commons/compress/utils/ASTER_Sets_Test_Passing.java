/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_empty_hdSG0() {
    HashSet<Object> set = Sets.newHashSet();
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_yMQv1_1() {
    HashSet<String> set = Sets.newHashSet("apple");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_singleElement_yMQv1_2() {
    HashSet<String> set = Sets.newHashSet("apple");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_kpKR2_1() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "orange");
    assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_kpKR2_2() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "orange");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_kpKR2_3() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "orange");
    assertTrue(set.contains("banana"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_multipleElements_kpKR2_4() {
    HashSet<String> set = Sets.newHashSet("apple", "banana", "orange");
    assertTrue(set.contains("orange"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_jmNM3_1() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElement_jmNM3_2() {
    HashSet<String> set = Sets.newHashSet((String) null);
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_WaEr4_1() {
    HashSet<String> set = Sets.newHashSet("apple", "apple");
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_duplicateElements_WaEr4_2() {
    HashSet<String> set = Sets.newHashSet("apple", "apple");
    assertTrue(set.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_nullElements_yYEL5() {
    HashSet<String> set = Sets.newHashSet();
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_emptyArray_QYMs6() {
    HashSet<String> set = Sets.newHashSet(new String[0]);
    assertEquals(0, set.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_arrayWithNullElements_MhOY8_1() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, null, null });
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_arrayWithNullElements_MhOY8_2() {
    HashSet<String> set = Sets.newHashSet(new String[] { null, null, null });
    assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_arrayWithDuplicateElements_TetY9_1() {
    HashSet<String> set = Sets.newHashSet(new String[] { "apple", "apple", "apple" });
    assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSet_arrayWithDuplicateElements_TetY9_2() {
    HashSet<String> set = Sets.newHashSet(new String[] { "apple", "apple", "apple" });
    assertTrue(set.contains("apple"));}
}