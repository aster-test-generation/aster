/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_Yxex0() {
    byte[] bytes = new byte[] {1, 2, 3, 4};
    ZipLong zipLong = new ZipLong(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_OczF1() {
    int value = 1234;
    ZipLong zipLong = new ZipLong(value);
    assertEquals(1234, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_nwEl2() {
    long value = 1234;
    ZipLong zipLong = new ZipLong(value);
    assertEquals(1234, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_JmZe3() {
    byte[] bytes = new byte[] {1, 2, 3, 4};
    ZipLong zipLong = new ZipLong(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_wFoe0() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    assertTrue(zipLong.equals(zipLong));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_vopx1() {
    ZipLong zipLong1 = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    ZipLong zipLong2 = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    assertTrue(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentValue_JcBp2() {
    ZipLong zipLong1 = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    ZipLong zipLong2 = new ZipLong(new byte[] {5, 6, 7, 8}, 0);
    assertFalse(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_SMDR3() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    assertFalse(zipLong.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_AnoQ4() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    assertFalse(zipLong.equals("not a ZipLong"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_1_AOVQ0() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4}, 0);
    assertEquals(67305985, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_2_JCEt1() {
    ZipLong zipLong = new ZipLong(1234567890L);
    assertEquals(1234567890, zipLong.getIntValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_3_FydP2() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithByteArrayAndOffset_UvjP0() {
    byte[] bytes = new byte[4];
    int offset = 0;
    ZipLong zipLong = new ZipLong(bytes, offset);
    byte[] result = zipLong.getBytes();
    assertArrayEquals(bytes, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_Opxo0() {
    ZipLong zipLong = new ZipLong(new byte[] { 1, 2, 3, 4 }, 0);
    ZipLong clone = (ZipLong) zipLong.clone();
    assertEquals(zipLong.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithIntValue_dXRR1() {
    ZipLong zipLong = new ZipLong(123456789);
    ZipLong clone = (ZipLong) zipLong.clone();
    assertEquals(zipLong.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithLongValue_Zrzr2() {
    ZipLong zipLong = new ZipLong(123456789L);
    ZipLong clone = (ZipLong) zipLong.clone();
    assertEquals(zipLong.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithByteArray_khZd3() {
    ZipLong zipLong = new ZipLong(new byte[] { 1, 2, 3, 4 });
    ZipLong clone = (ZipLong) zipLong.clone();
    assertEquals(zipLong.getValue(), clone.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLongPositive_Ectj0() {
    ZipLong zl = new ZipLong(1234567890L);
    byte[] buf = new byte[8];
    int offset = 0;
    zl.putLong(buf, offset);
    assertEquals(1234567890L, zl.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLongNegative_VlCR1() {
    ZipLong zl = new ZipLong(-1234567890L);
    byte[] buf = new byte[8];
    int offset = 0;
    zl.putLong(buf, offset);
    assertEquals(-1234567890L, zl.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLongZero_Pszr2() {
    ZipLong zl = new ZipLong(0L);
    byte[] buf = new byte[8];
    int offset = 0;
    zl.putLong(buf, offset);
    assertEquals(0L, zl.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLongLarge_AfYa3() {
    ZipLong zl = new ZipLong(Long.MAX_VALUE);
    byte[] buf = new byte[8];
    int offset = 0;
    zl.putLong(buf, offset);
    assertEquals(Long.MAX_VALUE, zl.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_ozLr0() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 0;
    long expected = 67305985;
    long actual = ZipLong.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_int_Vedo1() {
    int value = 1234;
    ZipLong zipLong = new ZipLong(value);
    String expected = "ZipLong value: 1234";
    String actual = zipLong.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_long_WGjd2() {
    long value = 1234567890L;
    ZipLong zipLong = new ZipLong(value);
    String expected = "ZipLong value: 1234567890";
    String actual = zipLong.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_byteArray_IELI3() {
    byte[] bytes = new byte[] {1, 2, 3, 4};
    ZipLong zipLong = new ZipLong(bytes);
    String expected = "ZipLong value: 67305985";
    String actual = zipLong.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_invalid_GHbP6() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4});
    String expected = "ZipLong value: 67305985";
    String actual = zipLong.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_invalid2_fISA7() {
    ZipLong zipLong = new ZipLong(new byte[] {1, 2, 3, 4});
    String expected = "ZipLong value: 1";
    String actual = zipLong.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_int_emcB0() {
    ZipLong zipLong = new ZipLong(123456789);
    assertEquals(123456789, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_long_tTEA1() {
    ZipLong zipLong = new ZipLong(123456789L);
    assertEquals(123456789L, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_llWS2() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    ZipLong zipLong = new ZipLong(bytes);
    assertEquals(67305985, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArrayOffset_RAJG3() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    ZipLong zipLong = new ZipLong(bytes, 0);
    assertEquals(67305985, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ByteArray_Offset0_HwBB0() {
    byte[] bytes = new byte[] { 1, 2, 3, 4, 5 };
    long expected = 0x0102030405L;
    long actual = ZipLong.getValue(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValue_4_ciAx3_taIm0() {
    ZipLong zipLong = new ZipLong(2112454933L);
    assertEquals(2112454933L, zipLong.getIntValue());
}
}