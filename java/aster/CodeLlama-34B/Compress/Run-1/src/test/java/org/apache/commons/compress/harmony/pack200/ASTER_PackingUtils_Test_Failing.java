/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.util.List;
import java.util.jar.JarFile;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(10, packingFileList.size());
    assertEquals("META-INF/MANIFEST.MF", packingFileList.get(0).getName());
    assertEquals("META-INF/", packingFileList.get(1).getName());
    assertEquals("com/", packingFileList.get(2).getName());
    assertEquals("com/example/", packingFileList.get(3).getName());
    assertEquals("com/example/Test.class", packingFileList.get(4).getName());
    assertEquals("com/example/Test2.class", packingFileList.get(5).getName());
    assertEquals("com/example/Test3.class", packingFileList.get(6).getName());
    assertEquals("com/example/Test4.class", packingFileList.get(7).getName());
    assertEquals("com/example/Test5.class", packingFileList.get(8).getName());
    assertEquals("com/example/Test6.class", packingFileList.get(9).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(10, packingFileList.size());
    assertEquals("META-INF/MANIFEST.MF", packingFileList.get(0).getName());
    assertEquals("com/", packingFileList.get(1).getName());
    assertEquals("com/example/", packingFileList.get(2).getName());
    assertEquals("com/example/Test.class", packingFileList.get(3).getName());
    assertEquals("com/example/Test2.class", packingFileList.get(4).getName());
    assertEquals("com/example/Test3.class", packingFileList.get(5).getName());
    assertEquals("com/example/Test4.class", packingFileList.get(6).getName());
    assertEquals("com/example/Test5.class", packingFileList.get(7).getName());
    assertEquals("com/example/Test6.class", packingFileList.get(8).getName());
    assertEquals("META-INF/", packingFileList.get(9).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_emptyJarFile_FtQm2() throws IOException {
    JarFile jarFile = new JarFile("empty.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(0, packingFileList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_nullJarFile_MKqi3() throws IOException {
    JarFile jarFile = null;
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(0, packingFileList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(10, packingFileList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/MANIFEST.MF", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_3() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_4() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/", packingFileList.get(2).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_5() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/", packingFileList.get(3).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_6() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test.class", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_7() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test2.class", packingFileList.get(5).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_8() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test3.class", packingFileList.get(6).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_9() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test4.class", packingFileList.get(7).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_10() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test5.class", packingFileList.get(8).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_11() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test6.class", packingFileList.get(9).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_1() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals(10, packingFileList.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/MANIFEST.MF", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_3() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_4() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_5() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test.class", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_6() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test2.class", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_7() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test3.class", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_8() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test4.class", packingFileList.get(6).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_9() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test5.class", packingFileList.get(7).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_10() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test6.class", packingFileList.get(8).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_11() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/", packingFileList.get(0).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_nullJarFile_MKqi3_fid1() throws IOException {
    JarFile jarFile = null;
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertNull(packingFileList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_3_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/", packingFileList.get(1).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_keepFileOrder_QeEo0_6_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = true;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test.class", packingFileList.get(4).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_3_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/", packingFileList.get(1).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_4_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/", packingFileList.get(2).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_5_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test.class", packingFileList.get(3).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_6_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test2.class", packingFileList.get(4).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_7_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("com/example/Test3.class", packingFileList.get(5).getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPackingFileListFromJar_reorderPackingFiles_SGRF1_11_fid2() throws IOException {
    JarFile jarFile = new JarFile("test.jar");
    boolean keepFileOrder = false;
    List<PackingFile> packingFileList = PackingUtils.getPackingFileListFromJar(jarFile, keepFileOrder);
    assertEquals("META-INF/", packingFileList.get(9).getName());}
}