/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ARJ"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("DUMP"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithInvalidEncoding_qYdp2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid_encoding");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(0, archiveNames.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_defaultEncoding_PFPF0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    String encoding = factory.getEntryEncoding();
    assertEquals("UTF-8", encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());
    assertTrue(archiveNames.contains("AR"));
    assertTrue(archiveNames.contains("ZIP"));
    assertTrue(archiveNames.contains("TAR"));
    assertTrue(archiveNames.contains("JAR"));
    assertTrue(archiveNames.contains("CPIO"));
    assertTrue(archiveNames.contains("SEVEN_Z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_encoding_DZnE0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
    assertEquals(1, providers.size());
    assertTrue(providers.containsKey("UTF-8"));
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-8").getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_findAvailableArchiveInputStreamProvidersEmpty_ZSln4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);
    assertEquals(0, providers.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_nullInputStream_qsoW2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = null;
    try {
        factory.createArchiveInputStream(in);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("InputStream cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_invalidEncoding_ePbk3() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    InputStream in = new ByteArrayInputStream("test".getBytes());
    try {
        factory.createArchiveInputStream(in);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid encoding: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_invalidInputStream_QohC4() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream("test".getBytes());
    try {
        factory.createArchiveInputStream(in);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertEquals("Invalid input stream", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_nullFactory_RNva5() throws ArchiveException {
    ArchiveStreamFactory factory = null;
    InputStream in = new ByteArrayInputStream("test".getBytes());
    try {
        factory.createArchiveInputStream(in);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Factory cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("zip"));
    assertTrue(map.containsKey("jar"));
    assertTrue(map.containsKey("tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_EWtr0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(archiveOutputStreamProviders);
    assertEquals(1, archiveOutputStreamProviders.size());
    assertTrue(archiveOutputStreamProviders.containsKey("zip"));
    assertEquals(ZipArchiveOutputStream.class, archiveOutputStreamProviders.get("zip").getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersEmpty_arjV2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(archiveOutputStreamProviders);
    assertEquals(0, archiveOutputStreamProviders.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersMultiple_ptwT3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(archiveOutputStreamProviders);
    assertEquals(2, archiveOutputStreamProviders.size());
    assertTrue(archiveOutputStreamProviders.containsKey("zip"));
    assertTrue(archiveOutputStreamProviders.containsKey("tar"));
    assertEquals(ZipArchiveOutputStream.class, archiveOutputStreamProviders.get("zip").getClass());
    assertEquals(TarArchiveOutputStream.class, archiveOutputStreamProviders.get("tar").getClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(2, map.size());
    assertTrue(map.containsKey("name1"));
    assertTrue(map.containsKey("name2"));
    assertNull(map.get("name1"));
    assertNull(map.get("name2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_2_fid3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_8() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ARJ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_8() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("DUMP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_9() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("AR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("ZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("TAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("JAR"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("CPIO"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_7() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertTrue(archiveNames.contains("SEVEN_Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_encoding_DZnE0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_encoding_DZnE0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(1, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_encoding_DZnE0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("UTF-8"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_encoding_DZnE0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-8").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_findAvailableArchiveInputStreamProvidersEmpty_ZSln4_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(0, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_CDXa0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEncoding_OvAf1_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithEmptyEncoding_aLTi2_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithNullEncoding_Roxs3_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithInvalidEncoding_dSZB4_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("invalid");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProvidersWithCustomEncoding_ivna6_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("custom");
    SortedMap<String, ArchiveStreamProvider> map = factory.findAvailableArchiveInputStreamProviders();
    assertTrue(map.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_EWtr0_1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(archiveOutputStreamProviders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_EWtr0_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(1, archiveOutputStreamProviders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_EWtr0_3() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertTrue(archiveOutputStreamProviders.containsKey("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProviders_EWtr0_4() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(ZipArchiveOutputStream.class, archiveOutputStreamProviders.get("zip").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersEmpty_arjV2_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(0, archiveOutputStreamProviders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersMultiple_ptwT3_2() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(2, archiveOutputStreamProviders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersMultiple_ptwT3_4() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertTrue(archiveOutputStreamProviders.containsKey("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersMultiple_ptwT3_6() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertEquals(TarArchiveOutputStream.class, archiveOutputStreamProviders.get("tar").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3_2() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3_3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_encoding_wJli0_JawS0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertNotNull(archiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_noEncoding_adXm1_FmRM0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream("test".getBytes());
    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(in);
    assertNotNull(archiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(2, providers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_3() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("UTF-8"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_4() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertTrue(providers.containsKey("UTF-16"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_5() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-8").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProviders_multipleEncodings_FwJv2_fHgq0_6() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
    assertEquals(ArchiveStreamProvider.class, providers.get("UTF-16").getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullMap_mikI4_VtrG0() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = null;
    ArchiveStreamFactory.putAll(names, provider, map);
    assertNull(map);
}
}