/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_zGOt0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_False_tnwb1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_Null_AbDd2() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 10, 1, 1, 1, 1);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_Empty_KySl3() {
    ArArchiveEntry entry = new ArArchiveEntry("", 10, 1, 1, 1, 1);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithValidLength_BmkH0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithInvalidLength_jkWL1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 0L);
    assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_HRov0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNonZeroUserId_MigO1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 0, 0, 0);
    assertEquals(1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNegativeUserId_RGeR2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, -1, 0, 0, 0);
    assertEquals(-1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithMaxIntUserId_UHkY3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, Integer.MAX_VALUE, 0, 0, 0);
    assertEquals(Integer.MAX_VALUE, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_bRGj0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameName_WRel1() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test", 10);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentName_eHAd2() {
    ArArchiveEntry entry1 = new ArArchiveEntry("test", 10);
    ArArchiveEntry entry2 = new ArArchiveEntry("test2", 10);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_Yqzr3() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_BdFC4() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithValidName_BvrD0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithNullName_Pxtf2() {
    ArArchiveEntry entry = new ArArchiveEntry(null, 100);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithEmptyName_AUUD3() {
    ArArchiveEntry entry = new ArArchiveEntry("", 100);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithValidGroupId_foAk0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1000, 0755, 123456789);
    int actualGroupId = entry.getGroupId();
    assertEquals(1000, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithZeroGroupId_QFSA2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 0, 1000, 0755, 123456789);
    int actualGroupId = entry.getGroupId();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_DefaultConstructor_MMuW0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertEquals(10, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_NameLengthConstructor_vVHA2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 0, 0);
    assertEquals(10, entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_FileConstructor_mpBA3() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
    assertEquals(inputFile.length(), entry.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithMode_SOcy3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 0, 0, 0777, 0);
    assertEquals(0777, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_name_ljGw0() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertEquals(Objects.hash("test"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_length_fzgS1() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFile_zVvQ7() {
    File inputFile = new File("test");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified3_DdZz2() {
    File inputFile = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test.txt");
    assertEquals(inputFile.lastModified(), entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified4_CaCc3() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 1, 1, 100);
    assertEquals(100, entry.getLastModified());
}
}