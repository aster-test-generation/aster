/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnrecognizedExtraField_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_nGXP0_1() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = data.length;
    unrecognizedExtraField.parseFromCentralDirectoryData(data, offset, length);
    assertEquals(data, unrecognizedExtraField.getCentralDirectoryData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_nGXP0_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = data.length;
    unrecognizedExtraField.parseFromCentralDirectoryData(data, offset, length);
    assertEquals(data, unrecognizedExtraField.getLocalFileDataData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_fkmm0_1() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_fkmm0_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertEquals(0, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNonZeroValue_FYTL1_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertEquals(1, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNegativeValue_wizx2_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertEquals(-1, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithMaxValue_GMat3_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertEquals(Integer.MAX_VALUE, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithMinValue_nDfn4_2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertEquals(Integer.MIN_VALUE, headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_nullData_WREI2() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = null;
    int offset = 0;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertNull(field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_emptyData_moMR3() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {};
    int offset = 0;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_offsetOutOfBounds_YwCf4() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 11;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_lengthOutOfBounds_snMd5() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 0;
    int length = 11;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_offsetAndLengthOutOfBounds_cFzq6() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 11;
    int length = 11;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalFileDataData_vxSJ1() {
        UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
        byte[] data = new byte[10];
        unrecognizedExtraField.setLocalFileDataData(data);
        assertEquals(data, unrecognizedExtraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalFileDataDataEmpty_kYbe3() {
        UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
        byte[] data = new byte[0];
        unrecognizedExtraField.setLocalFileDataData(data);
        assertEquals(data, unrecognizedExtraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalFileDataDataLength1_MNTK5() {
        UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
        byte[] data = new byte[1];
        unrecognizedExtraField.setLocalFileDataData(data);
        assertEquals(data, unrecognizedExtraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHeaderIdWithDifferentValue_fNaC1_fid2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort zipShort = new ZipShort(new byte[]{5, 6, 7, 8}, 0);
    unrecognizedExtraField.setHeaderId(zipShort);
    assertNotEquals(zipShort, unrecognizedExtraField.getHeaderId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_invalidData_KXEK1_fid2() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 0;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_nullData_WREI2_fid2() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = null;
    int offset = 0;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_offsetOutOfBounds_YwCf4_fid2() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 11;
    int length = 10;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_lengthOutOfBounds_snMd5_fid2() {
    UnrecognizedExtraField field = new UnrecognizedExtraField();
    byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int offset = 0;
    int length = 11;
    field.parseFromLocalFileData(data, offset, length);
    assertArrayEquals(new byte[] {}, field.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_nGXP0() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int offset = 0;
    int length = data.length;
    unrecognizedExtraField.parseFromCentralDirectoryData(data, offset, length);
    assertEquals(data, unrecognizedExtraField.getCentralDirectoryData());
    assertEquals(data, unrecognizedExtraField.getLocalFileDataData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_fkmm0() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);
    assertEquals(0, headerId.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNonZeroValue_FYTL1() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);
    assertEquals(1, headerId.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithNegativeValue_wizx2() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);
    assertEquals(-1, headerId.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithMaxValue_GMat3() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);
    assertEquals(Integer.MAX_VALUE, headerId.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderIdWithMinValue_nDfn4() {
    UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
    ZipShort headerId = unrecognizedExtraField.getHeaderId();
    assertNotNull(headerId);
    assertEquals(Integer.MIN_VALUE, headerId.getValue());
}
}