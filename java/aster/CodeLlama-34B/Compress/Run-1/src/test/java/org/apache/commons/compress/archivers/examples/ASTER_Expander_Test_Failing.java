/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarFile;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Expander_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_validTargetDirectory_LYqv0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/archive.zip");
    File targetDirectory = new File("path/to/target/directory");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());
    assertTrue(targetDirectory.isDirectory());
    assertEquals(1, targetDirectory.listFiles().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_invalidTargetDirectory_EjEk1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/archive.zip");
    File targetDirectory = new File("path/to/invalid/directory");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected ArchiveException");
    } catch (ArchiveException e) {
        assertTrue(e.getMessage().contains("Invalid target directory"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidArchive_validTargetDirectory_XPHz2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/invalid/archive.zip");
    File targetDirectory = new File("path/to/target/directory");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Invalid archive file"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_nullArchive_validTargetDirectory_MHzt3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = null;
    File targetDirectory = new File("path/to/target/directory");
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("Archive file cannot be null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_nullTargetDirectory_xddi4() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/archive.zip");
    File targetDirectory = null;
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("Target directory cannot be null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_targetDirectoryDoesNotExist_bHxX5() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/archive.zip");
    File targetDirectory = new File("path/to/target/directory");
    targetDirectory.delete();
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Target directory does not exist"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validArchive_targetDirectoryIsNotDirectory_ihYT6() throws IOException, ArchiveException {
    Expander expander = new Expander();
    File archive = new File("path/to/archive.zip");
    File targetDirectory = new File("path/to/target/directory");
    targetDirectory.createNewFile();
    try {
        expander.expand(archive, targetDirectory);
        fail("Expected IOException");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Target directory is not a directory"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_ZOcd0_3_fid3() throws IOException {
    Expander expander = new Expander();
    TarFile tarFile = new TarFile(new File("test.tar"), "UTF-8");
    File targetDirectory = new File("target");
    expander.expand(tarFile, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_mEtf1_3() throws IOException {
    Expander expander = new Expander();
    TarFile tarFile = new TarFile(new File("test.tar"), "UTF-8");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(tarFile, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithExistingTargetDirectory_jSwJ2_3() throws IOException {
    Expander expander = new Expander();
    TarFile tarFile = new TarFile(new File("test.tar"), "UTF-8");
    File targetDirectory = new File("target");
    targetDirectory.mkdirs();
    expander.expand(tarFile, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_HRoP0_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_HRoP0_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_validTargetDirectory_HRoP0_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_invalidTargetDirectory_KHyO1_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_invalidTargetDirectory_KHyO1_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_validArchive_invalidTargetDirectory_KHyO1_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_validTargetDirectory_dvFB2_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_validTargetDirectory_dvFB2_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_validTargetDirectory_dvFB2_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_invalidTargetDirectory_pPuo3_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_invalidTargetDirectory_pPuo3_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_validFormat_invalidArchive_invalidTargetDirectory_pPuo3_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_validTargetDirectory_kEBX4_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_validTargetDirectory_kEBX4_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_validTargetDirectory_kEBX4_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_invalidTargetDirectory_RLDV5_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_invalidTargetDirectory_RLDV5_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_validArchive_invalidTargetDirectory_RLDV5_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    File targetDirectory = new File("target");
    targetDirectory.delete();
    expander.expand(format, archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_invalidArchive_validTargetDirectory_Mqel6_1() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_invalidArchive_validTargetDirectory_Mqel6_2() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertTrue(targetDirectory.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_invalidFormat_invalidArchive_validTargetDirectory_Mqel6_3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "invalid";
    File archive = new File("test.zip");
    archive.delete();
    File targetDirectory = new File("target");
    expander.expand(format, archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_archiveIsNull_orkg0() throws IOException {
    Expander expander = new Expander();
    ArchiveInputStream<?> archive = null;
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullArchive_idNT3() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    SeekableByteChannel archive = null;
    File targetDirectory = new File("target/");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Archive cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_zTNb1_hNKg0_1() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("archive.7z"));
    File targetDirectory = new File("non-existent-target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNonExistentTargetDirectory_zTNb1_hNKg0_2() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("archive.7z"));
    File targetDirectory = new File("non-existent-target");
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_OBzu3_OzIZ0_1() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("empty-archive.7z"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithEmptyArchive_OBzu3_OzIZ0_2() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("empty-archive.7z"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(0, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_SkZr0_YwPA0_1() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("archive.7z"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertTrue(targetDirectory.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpand_SkZr0_YwPA0_2() throws IOException {
    Expander expander = new Expander();
    SevenZFile archive = new SevenZFile(new File("archive.7z"));
    File targetDirectory = new File("target");
    expander.expand(archive, targetDirectory);
    assertEquals(1, targetDirectory.listFiles().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullFormat_CGxc2_rWjI0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = null;
    InputStream archive = null;
    File targetDirectory = new File("target/");
    try {
        expander.expand(format, archive, targetDirectory);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Format cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandWithNullTargetDirectory_rRGb5_VKPd0() throws IOException, ArchiveException {
    Expander expander = new Expander();
    String format = "zip";
    SeekableByteChannel archive = null;
    File targetDirectory = null;
    CloseableConsumer closeableConsumer = null;
    try {
        expander.expand(format, archive, targetDirectory, closeableConsumer);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Target directory cannot be null", e.getMessage());
    }
}
}