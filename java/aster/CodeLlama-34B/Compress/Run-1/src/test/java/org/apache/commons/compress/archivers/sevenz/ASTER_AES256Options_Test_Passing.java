/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import javax.crypto.spec.SecretKeySpec;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256Options_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_MESS0_jzJm0_1() {
    byte[] keyBytes = new byte[16];
    new Random().nextBytes(keyBytes);
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(keyBytes);
    assertEquals("AES", secretKeySpec.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_MESS0_jzJm0_2() {
    byte[] keyBytes = new byte[16];
    new Random().nextBytes(keyBytes);
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(keyBytes);
    assertArrayEquals(keyBytes, secretKeySpec.getEncoded());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSaltWithEmptySalt_gBkH4_DGPK0_fid1() {
    AES256Options options = new AES256Options(new char[0]);
    byte[] salt = options.getSalt();
    assertArrayEquals(new byte[0], salt);
}
}