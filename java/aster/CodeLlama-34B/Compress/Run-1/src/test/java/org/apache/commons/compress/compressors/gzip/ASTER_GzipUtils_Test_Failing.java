/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_null_XQXA1() {
    assertFalse(GzipUtils.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalidExtension_ariM8() {
    assertFalse(GzipUtils.isCompressedFilename("file.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_Null_OfqI0() {
    assertFalse(GzipUtils.isCompressedFileName(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDots_RoAy6() {
    assertTrue(GzipUtils.isCompressedFileName("file.tar.gz.bz2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithEmptyString_RKZR4() {
    String fileName = "";
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithNull_XTYL5() {
    String fileName = null;
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals(null, compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithMultipleExtensions_QJkh2() {
    String fileName = "test.txt.gz.zip";
    String expected = "test.txt.gz";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithInvalidExtension_eTqJ3() {
    String fileName = "test.txt.invalid";
    String expected = "test.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithNull_lwKG5() {
    String fileName = null;
    String expected = null;
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithInvalidExtension_ZPuC3() {
    String fileName = "test.txt.invalid";
    String expectedCompressedFileName = "test.txt.gz";
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithEmptyString_mHbU4() {
    String fileName = "";
    String expectedCompressedFileName = "";
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithNull_OGfV5() {
    String fileName = null;
    String expectedCompressedFileName = null;
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithMultipleExtensions_nuoz2() {
        String fileName = "test.txt.gz.bz2";
        String expectedUncompressedFilename = "test.txt.bz2";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithInvalidExtension_DLWc3() {
        String fileName = "test.txt.invalid";
        String expectedUncompressedFilename = "test.txt";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithNull_DerO5() {
        String fileName = null;
        String expectedUncompressedFilename = null;
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithInvalidExtension_DLWc3_fid1() {
        String fileName = "test.txt.invalid.invalid";
        String expectedUncompressedFilename = "test.txt.invalid";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
}