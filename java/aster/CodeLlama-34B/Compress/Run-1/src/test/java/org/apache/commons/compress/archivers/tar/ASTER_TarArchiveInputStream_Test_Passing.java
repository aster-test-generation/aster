/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveInputStream_Test_Passing {
public void testSetAtEOF_true_ohNn0() {
}
public void testSetAtEOF_false_BPPk1() {
}
public void testSetAtEOF_null_RAOZ2() {
}
public void testSetAtEOF_empty_nujd3() {
}
public void testSetAtEOF_nonEmpty_cCnq4() {
}
public void testSetAtEOF_nonEmpty_false_uzHU5() {
}
public void testSetAtEOF_nonEmpty_null_lhdT6() {
}
public void testSetAtEOF_nonEmpty_empty_hJiI7() {
}
public void testSetAtEOF_nonEmpty_nonEmpty_hCem8() {
}
public void testSetAtEOF_nonEmpty_nonEmpty_false_uBTh9() {
}
public void testGetRecordSize_DefaultConstructor_okmh0() {
}
public void testGetRecordSize_BlockSizeConstructor_qvFc1() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeConstructor_RhDy2() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndEncodingConstructor_RARP3() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndEncodingAndLenientConstructor_EQfP4() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndLenientConstructor_qLkv5() {
}
public void testGetRecordSize_BlockSizeAndEncodingConstructor_pVRT6() {
}
public void testGetRecordSize_BlockSizeAndEncodingAndLenientConstructor_fyel7() {
}
public void testGetRecordSize_BlockSizeAndLenientConstructor_VkHx8() {
}
public void testGetRecordSize_EncodingConstructor_avTV9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setSparse(boolean sparse) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_posix_invalidMagic_cEhZ6_uVpB0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    signature[TarConstants.MAGIC_OFFSET] = (byte) 0x00;
    signature[TarConstants.VERSION_OFFSET] = (byte) TarConstants.VERSION_POSIX.charAt(0);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ant_invalidMagic_sPBI8_wqCQ0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    signature[TarConstants.MAGIC_OFFSET] = (byte) 0x00;
    signature[TarConstants.VERSION_OFFSET] = (byte) TarConstants.VERSION_ANT.charAt(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_gnu_invalidMagic_irnK7_RChd0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    signature[TarConstants.MAGIC_OFFSET] = (byte) 0x00;
    signature[TarConstants.VERSION_OFFSET] = (byte) TarConstants.VERSION_GNU_SPACE.charAt(0);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullInputStream_cDBr0_fid2() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
    TarArchiveEntry tarArchiveEntry = null;
    assertNull(tarArchiveEntry);
}
}