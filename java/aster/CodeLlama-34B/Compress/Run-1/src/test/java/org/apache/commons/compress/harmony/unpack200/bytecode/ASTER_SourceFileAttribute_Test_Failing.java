/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_mNth1() {
    CPUTF8 utf8 = new CPUTF8("UTF-8:SourceFile");
    String result = utf8.toString();
    assertEquals("UTF-8:SourceFile", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_differentName_uZFX3() {
    CPUTF8 name1 = new CPUTF8("test1");
    CPUTF8 name2 = new CPUTF8("test2");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name1);
    int expected = 31 * 1 + name2.hashCode();
    int actual = sourceFileAttribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNullName_megK2_fid1() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    int length = sourceFileAttribute.getLength();
    assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_GpvV0_fid1() {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String result = sourceFileAttribute.toString();
    assertEquals("SourceFile: SourceFile", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_mNth1_fid1() {
    CPUTF8 utf8 = new CPUTF8("SourceFile");
    String result = utf8.toString();
    assertEquals("SourceFile", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_GtBS0_fid1() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    int expected = 1;
    int actual = sourceFileAttribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_differentName_uZFX3_fid1() {
    CPUTF8 name1 = new CPUTF8("test1");
    CPUTF8 name2 = new CPUTF8("test2");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name1);
    int expected = 31 * 1 + name1.hashCode();
    int actual = sourceFileAttribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_jDrm2_yJxx0_fid1() {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    assertEquals("SourceFile", sourceFileAttribute.getAttributeName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nonCPUTF8Name_RbHJ2_ejFF0_fid1() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("dummy"));
    int expected = 1;
    int actual = sourceFileAttribute.hashCode();
    assertEquals(expected, actual);
}
}