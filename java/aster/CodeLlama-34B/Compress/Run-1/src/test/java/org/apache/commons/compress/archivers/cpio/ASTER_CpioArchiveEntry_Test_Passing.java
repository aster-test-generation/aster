/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
public void testGetAlignmentBoundary_gnqq0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithName_sdOh1() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithSize_Isak2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithInputPath_ewsn3() throws IOException {
}
public void testGetAlignmentBoundaryWithFormatAndInputPath_qBjb4() throws IOException {
}
public void testGetAlignmentBoundaryWithFormatAndName_HYku5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithFormatAndFile_NZQq6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithNameAndSize_CGly7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithFileAndName_VbQR8() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithAllParams_WUre9() {
}
public void testGetRemoteDeviceMaj_FlvR0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithName_hArr1() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithPath_RawZ2() throws IOException {
}
public void testGetRemoteDeviceMajWithFile_pnZf3() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithSize_Bftd4() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormat_IyFX5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndName_lama6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndPath_Zuii7() throws IOException {
}
public void testGetRemoteDeviceMajWithFormatAndFile_lxMp8() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndSize_ssCO9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testSetInode_igEq0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(10);
assertEquals(10, entry.getInode());
}
public void testSetInodeWithNegativeValue_vfXB1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(-10);
assertEquals(-10, entry.getInode());
}
public void testSetInodeWithZeroValue_zaxY2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(0);
assertEquals(0, entry.getInode());
}
public void testSetInodeWithMaxValue_nASW3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getInode());
}
public void testSetInodeWithMinValue_hfRQ4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getInode());
}
public void testSetInodeWithNull_xclQ5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertNull(entry.getInode());
}
public void testSetInodeWithEmptyString_enGm6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals("", entry.getInode());
}
public void testSetInodeWithInvalidString_jqIR7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals("invalid", entry.getInode());
}
public void testSetInodeWithValidString_GNdw8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(10, entry.getInode());
}
public void testSetInodeWithValidStringAndNegativeValue_Mnmv9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(-10, entry.getInode());
}
public void testGetRemoteDeviceMin_qzfl0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFormat_CISV1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithName_xxTA2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithInputPath_Bqgn3() throws IOException {
}
public void testGetRemoteDeviceMinWithFormatAndInputPath_IJQi4() throws IOException {
}
public void testGetRemoteDeviceMinWithFormatAndName_vRzt5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFile_UNcy6() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFormatAndFile_lCzd7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithNameAndSize_bAYV8() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFileAndSize_cLll9() {
}
public void testGetUID_shortFormat_AVYG0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(1, entry.getUID());
}
public void testGetUID_shortFormat_name_aglA1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
assertEquals(1, entry.getUID());
}
public void testGetUID_shortFormat_name_size_ECtc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
assertEquals(1, entry.getUID());
}
public void testGetUID_name_Zhav3() {
CpioArchiveEntry entry = new CpioArchiveEntry("name");
assertEquals(0, entry.getUID());
}
public void testGetUID_name_size_OSuX4() {
CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
assertEquals(0, entry.getUID());
}
public void testGetUID_path_name_hYTQ5() throws IOException {
}
public void testGetUID_path_name_options_wsLt6() throws IOException {
}
public void testGetUID_file_name_DlHC7() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
assertEquals(0, entry.getUID());
}
public void testGetUID_file_name_size_mkKl8() {
}
public void testGetUID_invalidFormat_gLFk9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
assertEquals(0, entry.getUID());
}
public void testSetRemoteDeviceMaj_PcuL0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(200L);
assertEquals(200L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithNegativeValue_LxUo1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(-200L);
assertEquals(-200L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithZeroValue_rjeX2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(0L);
assertEquals(0L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithMaxValue_RynO3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithMinValue_lhiF4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithInvalidValue_mzEn5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected NullPointerException");
} catch (NullPointerException e) {
assertEquals("Remote device major number cannot be null", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue2_CGCt6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: invalid", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue3_isPu7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: java.lang.Object", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue4_ACfs8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: [I", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue5_fCKU9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: [Ljava.lang.Object;", e.getMessage());
}
}
public void testGetDeviceMin_NPLQ0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithFormat_WwCj1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
assertEquals(2, entry.getDeviceMin());
}
public void testGetDeviceMinWithName_QWFg2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithInputPath_wqFN3() throws IOException {
}
public void testGetDeviceMinWithFormatAndInputPath_ptkO4() throws IOException {
}
public void testGetDeviceMinWithFormatAndName_Wgyc5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithFile_ofaS6() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithFormatAndFile_RhZs7() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithNameAndSize_sBge8() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithFileAndSize_xXWT9() {
File inputFile = new File("test");
}
public void testGetHeaderSizeWithDefaultConstructor_rCsU0() {
}
public void testGetHeaderSizeWithShortFormatConstructor_oLfz1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithShortFormatNameConstructor_skPC2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithShortFormatNameSizeConstructor_uBMB3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithPathConstructor_kqpe4() throws IOException {
}
public void testGetHeaderSizeWithShortFormatPathConstructor_YrNa5() throws IOException {
}
public void testGetHeaderSizeWithShortFormatFileConstructor_cayD6() {
File inputFile = new File("test.txt");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithNameSizeConstructor_rdhK7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithFileConstructor_IweU8() {
File inputFile = new File("test.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithNullConstructor_OcAy9() {
CpioArchiveEntry entry = new CpioArchiveEntry(null);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testSetTime_HZcD0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt", 100L);
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFormat_HnFI1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt", 100L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithName_WidY2() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithInputPath_pYZn3() throws IOException {
}
public void testSetTimeWithFormatAndInputPath_MHdH4() throws IOException {
}
public void testSetTimeWithFormatAndName_OnbQ5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFile_aSkZ6() {
File inputFile = new File("file.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithNameAndSize_wXTm7() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt", 100L);
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFileAndName_utZd8() {
File inputFile = new File("file.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithInvalidTime_LLuR9() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
entry.setTime(-1L);
assertEquals(-1L, entry.getTime());
}
public void testSetRemoteDevice_pqXS0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithOldFormat_YuxB1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNewFormat_nrBJ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNameOnly_zrZr3() {
CpioArchiveEntry entry = new CpioArchiveEntry("name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithPathAndName_nDkR4() {
}
public void testSetRemoteDeviceWithFormatPathAndName_PQJA5() {
}
public void testSetRemoteDeviceWithFormatNameAndSize_efnj6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithFileAndName_FnNd7() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithFormatFileAndName_zIfv8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNameAndSize_DoIc9() {
CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testGetSize_shortFormat_ismu0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(0, entry.getSize());
}
public void testGetSize_shortFormat_name_Odcd1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0, entry.getSize());
}
public void testGetSize_shortFormat_name_size_aHsa2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(10, entry.getSize());
}
public void testGetSize_name_xXrY3() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getSize());
}
public void testGetSize_name_size_gppC4() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
assertEquals(10, entry.getSize());
}
public void testGetSize_inputPath_UmNx5() throws IOException {
}
public void testGetSize_inputPath_entryName_UCoC6() throws IOException {
}
public void testGetSize_inputPath_entryName_options_KkUk7() throws IOException {
}
public void testGetSize_inputFile_YpWk8() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entry");
assertEquals(0, entry.getSize());
}
public void testGetSize_inputFile_entryName_apBW9() {
File inputFile = new File("test");
}
public void testSetUID_gJnE0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(100L);
assertEquals(100L, entry.getUID());
}
public void testSetUIDWithNegativeValue_onwH1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(-100L);
assertEquals(-100L, entry.getUID());
}
public void testSetUIDWithZeroValue_PXOs2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(0L);
assertEquals(0L, entry.getUID());
}
public void testSetUIDWithMaxValue_hTxE3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getUID());
}
public void testSetUIDWithMinValue_LHNb4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getUID());
}
public void testSetUIDWithNull_aFQU5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertNull(entry.getUID());
}
public void testSetUIDWithEmptyString_dZnQ6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals("", entry.getUID());
}
public void testSetUIDWithInvalidString_Vtqo7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals("invalid", entry.getUID());
}
public void testSetUIDWithValidString_zZYB8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals(100L, entry.getUID());
}
public void testSetUIDWithInvalidFormat_BWYs9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals(100L, entry.getUID());
}
public void testGetGID_shortFormat_pakY0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_umvd1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_size_VIjc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(0, entry.getGID());
}
public void testGetGID_name_xwid3() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getGID());
}
public void testGetGID_inputPath_entryName_fIsp4() {
}
public void testGetGID_shortFormat_inputPath_entryName_Nlqk5() {
}
public void testGetGID_shortFormat_name_inputFile_entryName_HUnM6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_name_size_oqVB7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
assertEquals(0, entry.getGID());
}
public void testGetGID_inputFile_entryName_VbVI8() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_size_inputFile_entryName_pgob9() {
}
public void testSetDeviceMaj_oVOL0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(10L);
assertEquals(10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithNegativeValue_lcIp1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(-10L);
assertEquals(-10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithZeroValue_HyuZ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(0L);
assertEquals(0L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithMaxValue_XkxC3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getDeviceMaj());
}
public void testSetDeviceMajWithMinValue_SpBh4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getDeviceMaj());
}
public void testSetDeviceMajWithNull_VQcI5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getDeviceMaj());
}
public void testSetDeviceMajWithEmptyString_TwgZ6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("", entry.getDeviceMaj());
}
public void testSetDeviceMajWithNonNumericString_kbXG7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("abc", entry.getDeviceMaj());
}
public void testSetDeviceMajWithNumericString_AbJM8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithInvalidFormat_jJso9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(10.0, entry.getDeviceMaj());
}
public void testSetMode_C_ISDIR_ruxe0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISLNK_ZjnG1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISREG_jFXc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISFIFO_htgf3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISCHR_QOkg4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISBLK_WfJw5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISSOCK_QPFu6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISNWK_TGsH7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_UnknownMode_UjcL8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
try {
entry.setMode(1000);
fail("IllegalArgumentException should be thrown");
} catch (IllegalArgumentException e) {
assertEquals("Unknown mode. Full: 1000 Masked: 1000", e.getMessage());
}
}
public void testSetMode_NullMode_yabT9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
try {
fail("NullPointerException should be thrown");
} catch (NullPointerException e) {
assertEquals("Mode cannot be null", e.getMessage());
}
}
public void testSetNumberOfLinks_vqpj0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNegativeValue_MVdC1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(-1);
assertEquals(0, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithZeroValue_extP2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(0);
assertEquals(0, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithLargeValue_cWnx3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(1000);
assertEquals(1000, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNullName_rgQD4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithEmptyName_NKeW5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithInvalidName_HIuD6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNullInputPath_YRgg7() {
}
public void testSetNumberOfLinksWithEmptyInputPath_UjVr8() {
}
public void testSetNumberOfLinksWithInvalidInputPath_bucN9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetRemoteDeviceMin_ZGcl0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNegativeValue_oDtc1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(-10L);
assertEquals(-10L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithZeroValue_ivcQ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(0L);
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithMaxValue_DoZK3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithMinValue_aQEq4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNull_ESFh5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithInvalidValue_ozuq6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("invalid", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithEmptyString_bdCj7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithBlankString_dcbf8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(" ", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNullFormat_XNvX9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_WithName_FgJf2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_FormatName_guju2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test");
    assertEquals(CpioConstants.FORMAT_NEW, entry.getFormat());
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithName_HNno2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFormatAndName_TYow5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormatAndName_OSgl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormatAndNameAndSize_XgBA3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_name_cmNf4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_nameAndSize_rxkg9() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_shortFormat_oLon0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_shortFormat_name_GeZC1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_shortFormat_size_mpKF2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_name_KqNL3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_name_size_ntMa8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_false_aJKS1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "regular_file", 0);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_nullMode_WqdB2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "symbolic_link", 0);
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_File_yrrR1() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_CpioArchiveEntry_NotC_ISDIR_GmtC2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Ocmn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_bUwy2() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_VIWr3() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry.equals("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_VOLt4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test1", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test2", 100);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_newFormat_vEFi0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_withName_CaZD2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_withSize_dmUO5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_withFormatAndName_SNNl6() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test");
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormat_NFIE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatAndName_UblX1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt");
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_shortFormatAndSize_dTQH2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt", 100L);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_aCit0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    entry.setSize(100L);
    assertEquals(100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_InvalidSize_oLOQ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    try {
        entry.setSize(-1L);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size <-1>", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_longFormat_Riog1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_shortFormat_mode0_ppKm2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNull_ORPb1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    entry.setTime(null);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nullName_DKJc0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(null);
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_shortFormat_umTZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_stringName_PQlE1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_shortFormatAndSize_MHRl2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormat_ayWd0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_stringName_NOdC1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormatStringName_wjtB4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_fileInputFile_ZFJq5() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormatFileInputFile_dCcN6() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, inputFile, "test");
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_stringNameSize_neEe7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_shortFormatStringNameSize_JEsm9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "test", 100L);
    entry.setChksum(1234567890L);
    assertEquals(1234567890L, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMin_hsIw0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    entry.setDeviceMin(10);
    assertEquals(10, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithNegativeValue_SBlT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    entry.setDeviceMin(-10);
    assertEquals(-10, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithZeroValue_IHXE2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    entry.setDeviceMin(0);
    assertEquals(0, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithMaxValue_MYzr3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    entry.setDeviceMin(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithMinValue_njYP4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    entry.setDeviceMin(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithName_pFPY1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithSize_yRBO7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatAndName_Yasc1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
    assertEquals(Objects.hash("name"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_name_PeEa3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(Objects.hash("name"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsMultipleOfAlignmentBoundary_DdfT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 100L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsEqualToAlignmentBoundary_hsln5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 4L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_shortFormat_ZmiS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_shortFormat_longName_kGOy1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setName("test_long_name");
    assertEquals("test_long_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_shortFormat_nullName_dXes2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_shortFormat_emptyName_EnDS3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_stringFormat_SvmM4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_stringFormat_longName_CkRO5() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setName("test_long_name");
    assertEquals("test_long_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_stringFormat_nullName_uZmf6() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_stringFormat_emptyName_KtkI7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_stringName_LIAP1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_file_rMIF1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "file", 10);
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_4_DPYu3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_PmBb0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_CpioArchiveEntry_JMmK0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFile_OJfC6_fid1() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test.txt");
    assertEquals(1719093829L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFormatAndFile_TiGv7_fid1() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test.txt");
    assertEquals(1719093829L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormat_cisA0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_Eazm0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "symbolic_link", 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_CpioArchiveEntry_KlCy0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ImWe1_fid1() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withName_kUNk2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withNameAndSize_zMFz3_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_kKln1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringFormat_ALhd6_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
    assertEquals((short)1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringFormatAndSize_zKkE7_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("file.txt", 100L);
    assertEquals((short)1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_MstZ0_fid1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
Date lastModifiedDate = entry.getLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_CpioArchiveEntry_xDmP0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_shortFormat_MUid0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nonNullName_Xpwl1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(1, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nonNullNameAndCharset_OCsV2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_emptyName_epaM4_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidValue_hxnR5_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    try {
        entry.setDeviceMin(Long.MAX_VALUE + 1);
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid device number", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithNullEntry_skuy6_fid1() {
    CpioArchiveEntry entry = null;
    try {
        entry.setDeviceMin(10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidFormat_oeFA7_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 10);
    try {
        entry.setDeviceMin(10);
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid format", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidName_uDrl8_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 10);
    try {
        entry.setDeviceMin(10);
        assertEquals(10, entry.getDeviceMin());
    } catch (IllegalArgumentException e) {
        fail("Expected IllegalArgumentException");
    }
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_tHBn0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)0, "test",000);
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormatAndName_Jhdt4_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)0, "test");
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice_cZNR0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setRemoteDeviceMin(10);
    assertEquals(10, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithNewFormat_GGOH2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    entry.setRemoteDeviceMin(10);
    assertEquals(10, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithZeroSize_GDrG7_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    entry.setRemoteDeviceMin(10);
    assertEquals(10, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_alignmentBoundaryIsZero_UAhB0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsNegative_lhfP4_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 0L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_shortFormat_IZyQ0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_longSize_kSXq2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_directory_quxQ0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "directory", 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_5_vLcX4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(11);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_1_hclB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 11L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_2_CnOE1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 11L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_8_DPpS7_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 8, "test.txt", 11L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_WithFormat_khug1_mYay0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_newFormat_dZdG0_XzQh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setRemoteDeviceMin(100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_invalidSize_Nxsm11_cgyQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    assertEquals(0, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_emptyName_OOrt4_xtEp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 100);
    entry.setRemoteDeviceMin(100);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatAndSize_XOWt2_FXkS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(3556529, entry.hashCode());
}
}