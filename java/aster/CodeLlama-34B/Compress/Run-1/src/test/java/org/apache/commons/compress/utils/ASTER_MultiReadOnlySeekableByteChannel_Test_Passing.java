/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithEmptyArray_LYCq0() throws IOException {
    File[] files = new File[0];
    SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(files);
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_EmptyChannels_ipYX0() throws IOException {
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_ClosedChannel_YEeS3() throws IOException {
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
    channel.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithNoChannels_wXYE9_koqb0() throws IOException {
    List<SeekableByteChannel> channels = new ArrayList<>();
    MultiReadOnlySeekableByteChannel multiChannel = new MultiReadOnlySeekableByteChannel(channels);
    multiChannel.close();
    assertEquals(0, channels.size());
}
}