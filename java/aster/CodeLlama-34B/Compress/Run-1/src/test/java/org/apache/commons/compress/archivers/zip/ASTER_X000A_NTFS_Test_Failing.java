/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);
    assertEquals(10, centralDirectoryData.length);
    assertEquals(0, centralDirectoryData[0]);
    assertEquals(1, centralDirectoryData[1]);
    assertEquals(2, centralDirectoryData[2]);
    assertEquals(3, centralDirectoryData[3]);
    assertEquals(4, centralDirectoryData[4]);
    assertEquals(5, centralDirectoryData[5]);
    assertEquals(6, centralDirectoryData[6]);
    assertEquals(7, centralDirectoryData[7]);
    assertEquals(8, centralDirectoryData[8]);
    assertEquals(9, centralDirectoryData[9]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthCoverage_XmBe1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, zipShort.getValue());
    assertEquals(4 + 2 + 2 + 3 * 8, zipShort.getBytes().length);
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(zipShort.getBytes()));
    assertEquals(4 + 2 + 2 + 3 * 8, ZipShort.getValue(zipShort.getBytes(), 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GiNr1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(), x000A_NTFS.getLocalFileDataLength().getValue());
    assertEquals(centralDirectoryLength.getBytes(), x000A_NTFS.getLocalFileDataLength().getBytes());
    assertEquals(centralDirectoryLength.hashCode(), x000A_NTFS.getLocalFileDataLength().hashCode());
    assertEquals(centralDirectoryLength.getValue(new byte[0]), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0]));
    assertEquals(centralDirectoryLength.getBytes(0), x000A_NTFS.getLocalFileDataLength().getBytes(0));
    assertEquals(centralDirectoryLength.getValue(new byte[0], 0), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0], 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_MGnt1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessFileTime(null);
    assertNull(x000A_NTFS.getAccessTime());
    FileTime fileTime = FileTime.fromMillis(1000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(fileTime)), x000A_NTFS.getAccessTime());
    fileTime = FileTime.fromMillis(-1000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(fileTime)), x000A_NTFS.getAccessTime());
    fileTime = FileTime.fromMillis(2000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    assertEquals(new ZipEightByteInteger(FileTimes.toNtfsTime(fileTime)), x000A_NTFS.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ahmA1() {
    X000A_NTFS x = new X000A_NTFS();
    X000A_NTFS y = new X000A_NTFS();
    assertFalse(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_Empty_rTrU1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] data = x000A_NTFS.getLocalFileDataData();
    assertEquals(0, data.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTimeWithNull_EqFi1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setCreateFileTime(null);
    assertNull(x000A_NTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_uAGs0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_lLtS0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = new Date(1000000000000L);
    Date actual = x000A_NTFS.getCreateJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_kRxz0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date expected = new Date(1234567890);
    Date actual = x000A_NTFS.getModifyJavaTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_2_fid2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(10, centralDirectoryData.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_5_fid2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(2, centralDirectoryData[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_6() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(3, centralDirectoryData[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_7() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(4, centralDirectoryData[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_8() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(5, centralDirectoryData[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_9() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(6, centralDirectoryData[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_10() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(7, centralDirectoryData[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_11() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(8, centralDirectoryData[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_oUFb0_12() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    byte[] centralDirectoryData = x000A_NTFS.getCentralDirectoryData();
    assertEquals(9, centralDirectoryData[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthCoverage_XmBe1_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort zipShort = x000A_NTFS.getLocalFileDataLength();
    assertEquals(4 + 2 + 2 + 3 * 8, zipShort.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GiNr1_2() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getBytes(), x000A_NTFS.getLocalFileDataLength().getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GiNr1_4() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(new byte[0]), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GiNr1_5() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getBytes(0), x000A_NTFS.getLocalFileDataLength().getBytes(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GiNr1_6() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    ZipShort centralDirectoryLength = x000A_NTFS.getCentralDirectoryLength();
    assertEquals(centralDirectoryLength.getValue(new byte[0], 0), x000A_NTFS.getLocalFileDataLength().getValue(new byte[0], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_MGnt1_1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessFileTime(null);
    FileTime fileTime = FileTime.fromMillis(1000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    fileTime = FileTime.fromMillis(-1000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    fileTime = FileTime.fromMillis(2000000000000L);
    x000A_NTFS.setAccessFileTime(fileTime);
    assertNull(x000A_NTFS.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithModifyTime_ynEG1_HkDy0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setModifyFileTime(FileTime.fromMillis(1234567890));
    String expected = "0x000A Zip Extra Field: Modify:[1234567890] Access:[null] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAccessTime_uUJk2_APIN0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setAccessFileTime(FileTime.fromMillis(1234567890));
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[1234567890] Create:[null] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithCreateTime_pxaD3_FmUp0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    x000A_NTFS.setCreateFileTime(FileTime.fromMillis(1234567890));
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[1234567890] ";
    String actual = x000A_NTFS.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_Long_SurG4_agam0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    long l = 1234567890L;
    ntfs.setModifyTime(new ZipEightByteInteger(l));
    assertEquals(l, ntfs.getModifyTime().getValue());
}
}