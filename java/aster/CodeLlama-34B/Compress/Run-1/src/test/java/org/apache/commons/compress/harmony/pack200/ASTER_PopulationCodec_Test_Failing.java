/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TFAq0_1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    byte[] encoded = populationCodec.encode(10);
    for (int i = 0; i < 10; i++) {
    }
    assertNotNull(encoded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TFAq0_2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    byte[] encoded = populationCodec.encode(10);
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, encoded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnfavouredCodec_2_bRWn1_IWUy0() throws Pack200Exception {
    RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(1, 2), new BHSDCodec(3, 4));
    RunCodec tokenCodec = new RunCodec(5, new BHSDCodec(6, 7), new BHSDCodec(8, 9));
    RunCodec unfavouredCodec = new RunCodec(10, new BHSDCodec(11, 12), new BHSDCodec(13, 14));
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec);
    Codec actualUnfavouredCodec = populationCodec.getUnfavouredCodec();
    assertEquals(unfavouredCodec, actualUnfavouredCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TFAq0_1_fid1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    byte[] encoded = populationCodec.encode(10);
    for (int i = 0; i < 10; i++) {
    }
    assertNotNull(encoded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TFAq0_2_fid1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    byte[] encoded = populationCodec.encode(10);
    for (int i = 0; i < 10; i++) {
    }
    assertEquals(10, encoded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TFAq0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(runCodec, 6, runCodec);
    byte[] encoded = populationCodec.encode(10);
    assertNotNull(encoded);
    assertEquals(10, encoded.length);
    for (int i = 0; i < 10; i++) {
        assertEquals(i, encoded[i]);
    }
}
}