/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_3() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(100, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_4() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(100, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_5() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(100, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_PYwK1() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 9;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_VCSF2() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 10;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary4_BLJj3() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 11;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_CQLK0() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
    int offset = 0;
    int length = 10;
    long expected = 0x0102030405060708L;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary2_nhzz1() {
    byte[] buffer = new byte[] { (byte) 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int offset = 0;
    int length = 10;
    long expected = -0x0102030405060708L;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary3_RtCI2() {
    byte[] buffer = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a };
    int offset = 0;
    int length = 9;
    long expected = 0x0102030405060708L;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary4_QKoa3() {
    byte[] buffer = new byte[] { (byte) 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };
    int offset = 0;
    int length = 9;
    long expected = -0x0102030405060708L;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_Nusp0() throws IOException {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    int expected = 4;
    int actual = TarUtils.formatNameBytes(name, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytesWithNullBuf_QHgl5() throws IOException {
    String name = "test";
    byte[] buf = null;
    int offset = 0;
    int length = 10;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("buf"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytesWithNegativeOffset_YejX6() throws IOException {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = -1;
    int length = 10;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertTrue(e.getMessage().contains("offset"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytesWithNegativeLength_NVKj7() throws IOException {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertTrue(e.getMessage().contains("length"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_wBCl0() {
    long value = 1234567890L;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 8;
    int expected = 10;
    int actual = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_emptyString_tTJh0() {
    List<TarArchiveStructSparse> result = TarUtils.parsePAX01SparseHeaders("");
    assertEquals(0, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_invalidSparseHeader_DuhM3() {
    String sparseMap = "1000,1000,1000,2000,2000";
    try {
        TarUtils.parsePAX01SparseHeaders(sparseMap);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid sparse header: 1000,1000,1000,2000,2000", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_invalidSparseHeader2_GIDh4() {
    String sparseMap = "1000,1000,1000,2000,2000,3000";
    try {
        TarUtils.parsePAX01SparseHeaders(sparseMap);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid sparse header: 1000,1000,1000,2000,2000,3000", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_invalidSparseHeader3_AGfM5() {
    String sparseMap = "1000,1000,1000,2000,2000,3000,4000";
    try {
        TarUtils.parsePAX01SparseHeaders(sparseMap);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid sparse header: 1000,1000,1000,2000,2000,3000,4000", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_BRrG0() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 0;
    int length = buffer.length;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_WithSpaces_edEB1() {
    byte[] buffer = new byte[] { '1', '2', ' ', '3', '4', '5', ' ', '6', '7', '8', '9', '0' };
    int offset = 0;
    int length = buffer.length;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_WithTrailingSpaces_gDoA2() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ' };
    int offset = 0;
    int length = buffer.length;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_WithLeadingSpaces_CxGw3() {
    byte[] buffer = new byte[] { ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' };
    int offset = 1;
    int length = buffer.length - 1;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_ValidInput_WithLeadingAndTrailingSpaces_MVQM4() {
    byte[] buffer = new byte[] { ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ' };
    int offset = 1;
    int length = buffer.length - 2;
    long result = TarUtils.parseOctal(buffer, offset, length);
    assertEquals(1234567890L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_NonOctalCharacter_chqK5() {
    byte[] buffer = new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a' };
    int offset = 0;
    int length = buffer.length;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte 'a' at offset 9 in '123456789a' len=10", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_NullBuffer_lYdK7() {
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("buffer is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithOffset_yGwc1_1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNumbytes_AkFn2_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(100, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithOffsetAndNumbytes_ecQh3_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(90, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_nzRe4_1() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_nzRe4_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_RzXk5_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-100, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_FFct6_2() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-90, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeOffset_memZ7_1() {
    byte[] buffer = new byte[100];
    int offset = 1000;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(1000, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeOffset_memZ7_2() {
    byte[] buffer = new byte[100];
    int offset = 1000;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeNumbytes_xQIl8_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(1000, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeOffsetAndNumbytes_hDsv9_2() {
    byte[] buffer = new byte[100];
    int offset = 1000;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(1000, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithEmptyBuffer_Eeaf10_1() {
    byte[] buffer = new byte[0];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithEmptyBuffer_Eeaf10_2() {
    byte[] buffer = new byte[0];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10_offset0_length2_NIyH2_2() {
    byte[] buffer = new byte[2];
    int offset = 0;
    int length = 2;
    TarUtils.formatUnsignedOctalString(10, buffer, offset, length);
    assertEquals('0', buffer[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100_offset0_length3_ujQz3_2() {
    byte[] buffer = new byte[3];
    int offset = 0;
    int length = 3;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals('0', buffer[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100_offset0_length3_ujQz3_3() {
    byte[] buffer = new byte[3];
    int offset = 0;
    int length = 3;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals('0', buffer[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_offset0_length4_zCrA4_2() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int length = 4;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals('0', buffer[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_offset0_length4_zCrA4_3() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int length = 4;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals('0', buffer[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5_1() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('1', buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5_2() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('0', buffer[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5_3() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('0', buffer[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5_4() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('0', buffer[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_invalidInput_Lpew1() throws IOException {
    String sparseMap = "0,100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalOrBinaryBytes_valueNegative100_length3_negativeTrue_GFDo6() {
    byte[] buf = new byte[3];
    int offset = 0;
    int length = 3;
    boolean negative = true;
    int expected = -100;
    int actual = TarUtils.formatLongOctalOrBinaryBytes(-100, buf, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_1() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_2() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0x80, buf[offset]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_3() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_4() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_5() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_6() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_7() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_8() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_9() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_10() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0_11() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_2() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0x80, buf[offset]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_4() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_5() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_6() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_7() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_8() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_9() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_10() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_11() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_2() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0xff, buf[offset]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_3() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_4() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_5() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_6() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_7() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_8() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_9() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_10() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_11() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_ValidInput_Success_VEuI0() {
    byte[] buffer = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A};
    int offset = 0;
    int length = 10;
    String expected = "0102030405060708090A";
    String actual = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_MPTp0_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_MPTp0_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals((byte) ' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNegative_KtaS1_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = -1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNegative_KtaS1_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = -1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals((byte) ' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesShortLength_xJJJ2_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 1234567890L;
    int expected = 5;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesShortLength_xJJJ2_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 1234567890L;
    int expected = 5;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals((byte) ' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNonZeroOffset_GQWc3_1() {
    byte[] buf = new byte[10];
    int offset = 2;
    int length = 10;
    long value = 1234567890L;
    int expected = 12;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNonZeroOffset_GQWc3_2() {
    byte[] buf = new byte[10];
    int offset = 2;
    int length = 10;
    long value = 1234567890L;
    int expected = 12;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals((byte) ' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(2, sparseHeaders.size());
    assertEquals(0, sparseHeaders.get(0).getOffset());
    assertEquals(100, sparseHeaders.get(0).getNumbytes());
    assertEquals(100, sparseHeaders.get(1).getOffset());
    assertEquals(100, sparseHeaders.get(1).getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithOffset_yGwc1() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNumbytes_AkFn2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(100, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithOffsetAndNumbytes_ecQh3() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(10, sparse.getOffset());
    assertEquals(90, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffset_nzRe4() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeNumbytes_RzXk5() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(-100, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithNegativeOffsetAndNumbytes_FFct6() {
    byte[] buffer = new byte[100];
    int offset = -10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(-10, sparse.getOffset());
    assertEquals(-90, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeOffset_memZ7() {
    byte[] buffer = new byte[100];
    int offset = 1000;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(1000, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeNumbytes_xQIl8() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(1000, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithLargeOffsetAndNumbytes_hDsv9() {
    byte[] buffer = new byte[100];
    int offset = 1000;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(1000, sparse.getOffset());
    assertEquals(1000, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithEmptyBuffer_Eeaf10() {
    byte[] buffer = new byte[0];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10_offset0_length2_NIyH2() {
    byte[] buffer = new byte[2];
    int offset = 0;
    int length = 2;
    TarUtils.formatUnsignedOctalString(10, buffer, offset, length);
    assertEquals('1', buffer[0]);
    assertEquals('0', buffer[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100_offset0_length3_ujQz3() {
    byte[] buffer = new byte[3];
    int offset = 0;
    int length = 3;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals('1', buffer[0]);
    assertEquals('0', buffer[1]);
    assertEquals('0', buffer[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_offset0_length4_zCrA4() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int length = 4;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals('1', buffer[0]);
    assertEquals('0', buffer[1]);
    assertEquals('0', buffer[2]);
    assertEquals('0', buffer[3]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('1', buffer[0]);
    assertEquals('0', buffer[1]);
    assertEquals('0', buffer[2]);
    assertEquals('0', buffer[3]);
    assertEquals('0', buffer[4]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueLessThanMaxAsOctalChar_FfjB0() {
		long value = 1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);
		assertEquals(0x80, buf[offset]);
		assertEquals(0, buf[offset + 1]);
		assertEquals(0, buf[offset + 2]);
		assertEquals(0, buf[offset + 3]);
		assertEquals(0, buf[offset + 4]);
		assertEquals(0, buf[offset + 5]);
		assertEquals(0, buf[offset + 6]);
		assertEquals(0, buf[offset + 7]);
		assertEquals(0, buf[offset + 8]);
		assertEquals(0, buf[offset + 9]);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);
		assertEquals(0x80, buf[offset]);
		assertEquals(0, buf[offset + 1]);
		assertEquals(0, buf[offset + 2]);
		assertEquals(0, buf[offset + 3]);
		assertEquals(0, buf[offset + 4]);
		assertEquals(0, buf[offset + 5]);
		assertEquals(0, buf[offset + 6]);
		assertEquals(0, buf[offset + 7]);
		assertEquals(0, buf[offset + 8]);
		assertEquals(0, buf[offset + 9]);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);
		assertEquals(0xff, buf[offset]);
		assertEquals(0, buf[offset + 1]);
		assertEquals(0, buf[offset + 2]);
		assertEquals(0, buf[offset + 3]);
		assertEquals(0, buf[offset + 4]);
		assertEquals(0, buf[offset + 5]);
		assertEquals(0, buf[offset + 6]);
		assertEquals(0, buf[offset + 7]);
		assertEquals(0, buf[offset + 8]);
		assertEquals(0, buf[offset + 9]);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_MPTp0() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
    assertEquals((byte) ' ', buf[offset + length - 1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNegative_KtaS1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = -1234567890L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
    assertEquals((byte) ' ', buf[offset + length - 1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesShortLength_xJJJ2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 5;
    long value = 1234567890L;
    int expected = 5;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
    assertEquals((byte) ' ', buf[offset + length - 1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesNonZeroOffset_GQWc3() {
    byte[] buf = new byte[10];
    int offset = 2;
    int length = 10;
    long value = 1234567890L;
    int expected = 12;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
    assertEquals((byte) ' ', buf[offset + length - 1]);
}
}