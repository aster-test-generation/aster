/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_XTKD1() {
    byte[] signature = new byte[] { (byte) 0xff, (byte) 0xff };
    int length = 1;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_emptySignature_uflZ3() {
    byte[] signature = new byte[0];
    int length = 0;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EmptyBuffer_eNiG0_LKqN0() throws IOException {
    try {
        ArjArchiveInputStream inputStream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] b = new byte[0];
        int off = 0;
        int len = 0;
        int result = inputStream.read(b, off, len);
        assertEquals(0, result);
    } catch (ArchiveException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_uSKy0_fid1() {
    byte[] signature = new byte[] { (byte) 0xff, (byte) 0xff };
    int length = 2;
    assertFalse(ArjArchiveInputStream.matches(signature, length));
}
}