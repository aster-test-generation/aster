/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_empty_QQCe0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
    ClassFileEntry[] nestedEntries = attribute.getNestedClassFileEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_EZsO0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3"), new CPUTF8("signature4"), new CPUTF8("signature5"), new CPUTF8("signature6"), new CPUTF8("signature7"), new CPUTF8("signature8"), new CPUTF8("signature9"), new CPUTF8("signature10") }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    assertEquals(102, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithZeroLength_IXLV1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[] {}, new int[] {}, new CPUTF8[] {}, new CPUTF8[] {}, new int[] {});
    assertEquals(2, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithOneElement_Fgpp2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 0 }, new int[] { 10 }, new CPUTF8[] { new CPUTF8("name1") }, new CPUTF8[] { new CPUTF8("signature1") }, new int[] { 0 });
    assertEquals(12, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithMultipleElements_kiAI3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new int[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3"), new CPUTF8("signature4"), new CPUTF8("signature5"), new CPUTF8("signature6"), new CPUTF8("signature7"), new CPUTF8("signature8"), new CPUTF8("signature9"), new CPUTF8("signature10") }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_NonConsecutiveStartPCs_hUAi2_UCOY0_1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[] { 1, 3 }, new int[] { 1, 1 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2") }, new int[] { 1, 2 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(2, startPcs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_NonConsecutiveStartPCs_hUAi2_UCOY0_2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[] { 1, 3 }, new int[] { 1, 1 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2") }, new int[] { 1, 2 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(1, startPcs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_NonConsecutiveStartPCs_hUAi2_UCOY0_3() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(2, new int[] { 1, 3 }, new int[] { 1, 1 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2") }, new int[] { 1, 2 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(3, startPcs[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_hczJ0_NjqH0_1() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 1 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 1 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(1, startPcs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_hczJ0_NjqH0_2() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(1, new int[] { 1 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("signature") }, new int[] { 1 });
    int[] startPcs = attribute.getStartPCs();
    assertEquals(1, startPcs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroVariables_vdRX1_WZAX0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(0, new int[] {}, new int[] {}, new CPUTF8[] {}, new CPUTF8[] {}, new int[] {});
    String expected = "LocalVariableTypeTable: 0 variables";
    String actual = attribute.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_xViz0_FVVJ0() {
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(10, new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3") }, new CPUTF8[] { new CPUTF8("signature1"), new CPUTF8("signature2"), new CPUTF8("signature3") }, new int[] { 6, 7, 8 });
    String expected = "LocalVariableTypeTable: 10 varaibles";
    String actual = attribute.toString();
    assertEquals(expected, actual);
}
}