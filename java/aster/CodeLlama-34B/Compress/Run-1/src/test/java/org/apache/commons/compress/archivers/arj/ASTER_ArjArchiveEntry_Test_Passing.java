/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_LkDz0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_MuEd2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_mtZV3() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_Ywjs0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int actual = entry.hashCode();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_iOdx0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_hostOsUnix_FyLG0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int mode = entry.getUnixMode();
    assertEquals(0, mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_oQKX1_fid1() {
    ArjArchiveEntry entry1 = new ArjArchiveEntry();
    ArjArchiveEntry entry2 = new ArjArchiveEntry();
    assertTrue(entry1.equals(entry2));
}
}