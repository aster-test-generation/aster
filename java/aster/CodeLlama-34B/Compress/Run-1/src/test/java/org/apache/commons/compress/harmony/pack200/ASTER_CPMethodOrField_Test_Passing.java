/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMethodOrField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDescWithNullNameAndTypeAndClassName_jAVo3() {
    CPMethodOrField methodOrField = new CPMethodOrField(null, null);
    CPNameAndType result = methodOrField.getDesc();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullClassNameAndNameAndType_QwFj3() {
        CPMethodOrField methodOrField = new CPMethodOrField(null, null);
        String expected = "null: null";
        String actual = methodOrField.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDescIndex7_pzZs6_QOMn0() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("test");
    CPSignature signature = new CPSignature("test", utf8, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(utf8, signature);
    CPClass className = new CPClass(utf8);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    int actual = methodOrField.getDescIndex();
    int expected =-1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClass_ValidIndex_dtTa0_zBhs0() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("test");
    CPSignature signature = new CPSignature("test", utf8, new ArrayList<CPClass>());
    CPNameAndType nameAndType = new CPNameAndType(utf8, signature);
    CPClass className = new CPClass(utf8);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClass(1);
    assertEquals(1, methodOrField.getIndexInClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_lGvp0_PkTK0() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("TestClass");
    org.apache.commons.compress.harmony.pack200.CPUTF8 name = new org.apache.commons.compress.harmony.pack200.CPUTF8("testMethod");
    org.apache.commons.compress.harmony.pack200.CPUTF8 signatureForm = new org.apache.commons.compress.harmony.pack200.CPUTF8("()V");
    List<CPClass> classes = new ArrayList<>();
    classes.add(new CPClass(utf8));
    CPSignature signature = new CPSignature(signatureForm.toString(), signatureForm, classes);
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(new CPClass(utf8), nameAndType);
    String expected = "TestClass: testMethod:()V";
    String actual = methodOrField.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClass_MaxIndex_EJii4_oQBb1() {
    org.apache.commons.compress.harmony.pack200.CPUTF8 utf8 = new org.apache.commons.compress.harmony.pack200.CPUTF8("test");
    CPSignature signature = new CPSignature("test", utf8, new ArrayList<CPClass>());
    CPNameAndType nameAndType = new CPNameAndType(utf8, signature);
    CPClass className = new CPClass(utf8);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClass(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, methodOrField.getIndexInClass());
}
}