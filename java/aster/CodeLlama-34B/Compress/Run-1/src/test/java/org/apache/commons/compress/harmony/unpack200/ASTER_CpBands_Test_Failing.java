/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptor_PezS0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(1, cpDescriptor.length);
    assertEquals("CP1", cpDescriptor[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithNullSegment_JlhK1() {
    Segment segment = null;
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNull(cpDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithEmptySegment_ibnZ2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(0, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_lToW3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);
    assertEquals(2, cpDescriptor.length);
    assertEquals("CP1", cpDescriptor[0]);
    assertEquals("CP2", cpDescriptor[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_YoXq0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);
        assertEquals(1, cpFieldClass.length);
        assertEquals("cpFieldClass", cpFieldClass[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_RQBv0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertNotNull(cpUTF8);
        assertEquals(10, cpUTF8.length);
        for (int i = 0; i < 10; i++) {
            assertEquals("UTF-8", cpUTF8[i]);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_string_IatZ0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    CPClass cpClass = cpBands.cpClassValue(string);
    assertEquals(cpClass.getName(), string);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_index_aDym1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 1;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertEquals(cpClass.getName(), "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValue_null_ePWZ2() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    CPClass cpClass = cpBands.cpClassValue(string);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_jvnZ0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertNotNull(cpClass);
    assertEquals(1, cpClass.length);
    assertEquals("CP", cpClass[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassWithMultipleCpClasses_gnlk1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertNotNull(cpClass);
    assertEquals(2, cpClass.length);
    assertEquals("CP", cpClass[0]);
    assertEquals("CP", cpClass[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassWithNoCpClasses_ZcQi2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertNotNull(cpClass);
    assertEquals(0, cpClass.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_PxeY0() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value("test", true);
    assertEquals(cpUTF8.hashCode(), 1234);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNullString_zfsn1() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(null, true);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithEmptyString_UuoE2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value("", true);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNonUTF8String_tTRI3() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value("test", false);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNonUTF8StringAndNullSegment_llYa4() {
    CpBands cpBands = new CpBands(null);
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value("test", false);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNonUTF8StringAndNullSegmentAndNullString_ajxN5() {
    CpBands cpBands = new CpBands(null);
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value(null, false);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8ValueWithNonUTF8StringAndNullSegmentAndEmptyString_rAtd6() {
    CpBands cpBands = new CpBands(null);
    CPUTF8 cpUTF8 = cpBands.cpUTF8Value("", false);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValue_InvalidIndex_vCOo1() {
    CpBands cpBands = new CpBands(new Segment());
    CPLong cpLong = cpBands.cpLongValue(-1);
    assertNull(cpLong);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpFloatValue_InvalidIndex_PNbc1() {
    CpBands cpBands = new CpBands(new Segment());
    CPFloat cpFloat = cpBands.cpFloatValue(-1);
    assertNull(cpFloat);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegment_segu1() {
        CpBands cpBands = new CpBands(null);
        cpBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullCpBands_QwLA6() {
        CpBands cpBands = null;
        cpBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegmentAndNullCpBands_xyRs11() {
        Segment segment = null;
        CpBands cpBands = null;
        cpBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_QyZo0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    assertNotNull(cpLong);
    assertEquals(10, cpLong.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    assertNotNull(cpLong);
    assertEquals(10, cpLong.length);
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertNotNull(cpLong2);
    assertEquals(10, cpLong2.length);
    assertNotEquals(cpLong, cpLong2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpSignatureValue_null_UgXU2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPUTF8 cpUTF8 = cpBands.cpSignatureValue(index);
    assertNull(cpUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_YpcH0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpInt = cpBands.getCpInt();
        assertNotNull(cpInt);
        assertEquals(10, cpInt.length);
        for (int i = 0; i < 10; i++) {
            assertEquals(i, cpInt[i]);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_String_True_bexc0() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertEquals(string, cputf8.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_String_False_FnCa1() {
    CpBands cpBands = new CpBands(new Segment());
    String string = "test";
    boolean searchForIndex = false;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertEquals(string, cputf8.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_Null_True_MxCE4() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_Null_False_jjAp5() {
    CpBands cpBands = new CpBands(new Segment());
    String string = null;
    boolean searchForIndex = false;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(string, searchForIndex);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_KjMc0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertEquals(1, cpDescriptorTypeInts.length);
        assertEquals(0, cpDescriptorTypeInts[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_QafX0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNotNull(cpDescriptorNameInts);
    assertEquals(0, cpDescriptorNameInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithData_JrNe1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNotNull(cpDescriptorNameInts);
    assertEquals(1, cpDescriptorNameInts.length);
    assertEquals(1, cpDescriptorNameInts[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithMultipleData_HaSx2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNotNull(cpDescriptorNameInts);
    assertEquals(2, cpDescriptorNameInts.length);
    assertEquals(1, cpDescriptorNameInts[0]);
    assertEquals(2, cpDescriptorNameInts[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithNullSegment_dofB3() {
    CpBands cpBands = new CpBands(null);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNull(cpDescriptorNameInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_QAVI0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertNotNull(cpIMethodClass);
    assertEquals(1, cpIMethodClass.length);
    assertEquals("CP_I_METHOD_CLASS", cpIMethodClass[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithNullSegment_XbNa1() {
    CpBands cpBands = new CpBands(null);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertNull(cpIMethodClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithEmptySegment_obfc2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertNotNull(cpIMethodClass);
    assertEquals(0, cpIMethodClass.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpMethodValueWithInvalidIndex_CuKp1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPMethodRef cpMethodRef = cpBands.cpMethodValue(index);
    assertNull(cpMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_JLcc0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        assertNotNull(cpSignature);
        assertEquals(10, cpSignature.length);
        for (int i = 0; i < cpSignature.length; i++) {
            assertEquals("CP" + i, cpSignature[i]);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpStringValue_InvalidIndex_NOnz1() {
    CpBands cpBands = new CpBands(new Segment());
    int index = -1;
    CPString cpString = cpBands.cpStringValue(index);
    assertNull(cpString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithInvalidIndex_OFwG1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpClassValueWithNullCpUTF8Value_pkTt2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    cpBands.cpUTF8Value(index);
    CPClass cpClass = cpBands.cpClassValue(index);
    assertNull(cpClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_nullString_nwKU2() {
    CpBands cpBands = new CpBands(new Segment());
    CPUTF8 cputf8 = cpBands.cpUTF8Value(null);
    assertNull(cputf8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValue_xoEG0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPInterfaceMethodRef cpInterfaceMethodRef = cpBands.cpIMethodValue(index);
    assertEquals(cpInterfaceMethodRef.getClass(), CPInterfaceMethodRef.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValueWithInvalidIndex_yWtO1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = -1;
    CPInterfaceMethodRef cpInterfaceMethodRef = cpBands.cpIMethodValue(index);
    assertNull(cpInterfaceMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValueWithValidIndex_LgTo2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPInterfaceMethodRef cpInterfaceMethodRef = cpBands.cpIMethodValue(index);
    assertNotNull(cpInterfaceMethodRef);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValueWithDifferentIndex_JyQW3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 1;
    CPInterfaceMethodRef cpInterfaceMethodRef = cpBands.cpIMethodValue(index);
    assertNotEquals(cpInterfaceMethodRef.getClass(), CPInterfaceMethodRef.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIMethodValueWithDifferentSegment_ANIs5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPInterfaceMethodRef cpInterfaceMethodRef = cpBands.cpIMethodValue(index);
    assertNotEquals(cpInterfaceMethodRef.getClass(), CPInterfaceMethodRef.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithEmptySegment_ibnZ2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertNotNull(cpDescriptor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithEmptySegment_ibnZ2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals(0, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_lToW3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals(2, cpDescriptor.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_lToW3_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals("CP1", cpDescriptor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorWithMultipleCp_lToW3_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpDescriptor = cpBands.getCpDescriptor();
    assertEquals("CP2", cpDescriptor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_YoXq0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_YoXq0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertEquals(1, cpFieldClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_YoXq0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertEquals("cpFieldClass", cpFieldClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_RQBv0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        for (int i = 0; i < 10; i++) {
        }
        assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_RQBv0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpUTF8 = cpBands.getCpUTF8();
        for (int i = 0; i < 10; i++) {
        }
        assertEquals(10, cpUTF8.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_jvnZ0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertNotNull(cpClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_jvnZ0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertEquals(1, cpClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClass_jvnZ0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertEquals("CP", cpClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassWithMultipleCpClasses_gnlk1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertEquals(2, cpClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassWithMultipleCpClasses_gnlk1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertEquals("CP", cpClass[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassWithNoCpClasses_ZcQi2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpClass = cpBands.getCpClass();
    assertEquals(0, cpClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_QyZo0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    assertNotNull(cpLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLong_QyZo0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    assertEquals(10, cpLong.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertNotNull(cpLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertEquals(10, cpLong.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertNotNull(cpLong2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertEquals(10, cpLong2.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongWithDifferentSegment_Zuqm1_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] cpLong = cpBands.getCpLong();
    Segment segment2 = new Segment();
    CpBands cpBands2 = new CpBands(segment2);
    long[] cpLong2 = cpBands2.getCpLong();
    assertNotEquals(cpLong, cpLong2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_YpcH0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpInt = cpBands.getCpInt();
        for (int i = 0; i < 10; i++) {
        }
        assertNotNull(cpInt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_YpcH0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpInt = cpBands.getCpInt();
        for (int i = 0; i < 10; i++) {
        }
        assertEquals(10, cpInt.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_KjMc0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertEquals(1, cpDescriptorTypeInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_KjMc0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertEquals(0, cpDescriptorTypeInts[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_QafX0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertNotNull(cpDescriptorNameInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_QafX0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertEquals(0, cpDescriptorNameInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithData_JrNe1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertEquals(1, cpDescriptorNameInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithData_JrNe1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertEquals(1, cpDescriptorNameInts[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithMultipleData_HaSx2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertEquals(2, cpDescriptorNameInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameIntsWithMultipleData_HaSx2_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
    assertEquals(2, cpDescriptorNameInts[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_QAVI0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertNotNull(cpIMethodClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_QAVI0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertEquals(1, cpIMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClass_QAVI0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertEquals("CP_I_METHOD_CLASS", cpIMethodClass[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpIMethodClassWithEmptySegment_obfc2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] cpIMethodClass = cpBands.getCpIMethodClass();
    assertEquals(0, cpIMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_JLcc0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        for (int i = 0; i < cpSignature.length; i++) {
        }
        assertNotNull(cpSignature);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_JLcc0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpSignature = cpBands.getCpSignature();
        for (int i = 0; i < cpSignature.length; i++) {
        }
        assertEquals(10, cpSignature.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpIntegerValue_invalidIndex_iNrG1_VLqS0() {
    CpBands cpBands = new CpBands(new Segment());
    CPInteger cpInteger = cpBands.cpIntegerValue(-1);
    assertNull(cpInteger);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassWithNull_JVan2_HuEH0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[]{"CP_METHOD_CLASS"};
    String[] actual = cpBands.getCpMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassWithMultiple_CZXd6_SPQi0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[]{"CP_METHOD_CLASS", "CP_METHOD_CLASS"};
    String[] actual = cpBands.getCpMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodClassWithDifferent_zkse7_iqPB0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[]{"CP_METHOD_CLASS", "CP_METHOD_CLASS_2"};
    String[] actual = cpBands.getCpMethodClass();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpUTF8Value_Int_True_HFST2_RbWw0() {
    CpBands cpBands = new CpBands(new Segment());
    int index = 1;
    boolean searchForIndex = true;
    CPUTF8 cputf8 = cpBands.cpUTF8Value(String.valueOf(index), searchForIndex);
    assertEquals(index, cputf8.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpNameAndTypeValue_5_yuXI4_Youo0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int index = 0;
    CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(index);
    assertNull(cpNameAndType);
}
}