/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_Gshb0() {
    String expected = "Z";
    String actual = CompressorStreamFactory.getZ();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDefaultConstructor_hjAw0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDecompressUntilEOFConstructor_cSxk1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipWithDecompressUntilEOFAndMemoryLimitInKbConstructor_GzVh2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String gzip = factory.getGzip();
    assertEquals("gzip", gzip);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_Default_gsQb2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_IfCB0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithMemoryLimit_ulfp1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithoutDecompressUntilEOF_YgDM2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithInvalidMemoryLimit_Wldm3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithInvalidDecompressUntilEOF_Qnrc5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());
    assertTrue(compressorNames.contains("GZIP"));
    assertTrue(compressorNames.contains("BROTLI"));
    assertTrue(compressorNames.contains("BZIP2"));
    assertTrue(compressorNames.contains("XZ"));
    assertTrue(compressorNames.contains("LZMA"));
    assertTrue(compressorNames.contains("PACK200"));
    assertTrue(compressorNames.contains("DEFLATE"));
    assertTrue(compressorNames.contains("SNAPPY_RAW"));
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(compressorNames.contains("Z"));
    assertTrue(compressorNames.contains("LZ4_BLOCK"));
    assertTrue(compressorNames.contains("LZ4_FRAMED"));
    assertTrue(compressorNames.contains("ZSTANDARD"));
    assertTrue(compressorNames.contains("DEFLATE64"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_MVhq0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzmaWithMemoryLimit_VdCq1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String lzma = factory.getLzma();
    assertEquals("LZMA", lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);
    assertEquals(3, map.size());
    assertTrue(map.containsKey("gzip"));
    assertTrue(map.containsKey("deflate"));
    assertTrue(map.containsKey("bzip2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_BiiM0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String snappyRaw = factory.getSnappyRaw();
    assertEquals("snappy", snappyRaw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_decompressUntilEOF_false_UZHV2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String snappyRaw = factory.getSnappyRaw();
    assertEquals("snappy", snappyRaw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_memoryLimitInKb_1024_JvSX3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String snappyRaw = factory.getSnappyRaw();
    assertEquals("snappy", snappyRaw);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_vgNh3() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_JaUe4() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_AAsT7() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_BaRu0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String snappyFramed = factory.getSnappyFramed();
    assertEquals("snappy", snappyFramed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramedWithMemoryLimit_vtms1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String snappyFramed = factory.getSnappyFramed();
    assertEquals("snappy", snappyFramed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramedWithoutDecompressUntilEOF_hMhP2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String snappyFramed = factory.getSnappyFramed();
    assertEquals("snappy", snappyFramed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_cnXd0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200WithMemoryLimit_uGRv1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200WithoutDecompressUntilEOF_rQPH2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200WithInvalidMemoryLimit_TKYb3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    String pack200 = factory.getPack200();
    assertEquals("PACK200", pack200);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_1_jcMb0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
        assertNotNull(entry.getKey());
        assertNotNull(entry.getValue());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_4_eRBk3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
        assertNotNull(entry.getKey());
        assertNotNull(entry.getValue());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_GKkC0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotliWithMemoryLimit_ohNI1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotliWithoutDecompressUntilEOF_xBas2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    String brotli = factory.getBrotli();
    assertEquals("BROTLI", brotli);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(9, outputStreamCompressorNames.size());
    assertTrue(outputStreamCompressorNames.contains("GZIP"));
    assertTrue(outputStreamCompressorNames.contains("BZIP2"));
    assertTrue(outputStreamCompressorNames.contains("XZ"));
    assertTrue(outputStreamCompressorNames.contains("LZMA"));
    assertTrue(outputStreamCompressorNames.contains("PACK200"));
    assertTrue(outputStreamCompressorNames.contains("DEFLATE"));
    assertTrue(outputStreamCompressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(outputStreamCompressorNames.contains("LZ4_BLOCK"));
    assertTrue(outputStreamCompressorNames.contains("LZ4_FRAMED"));
    assertTrue(outputStreamCompressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(9, outputStreamCompressorNames.size());
    assertTrue(outputStreamCompressorNames.contains("GZIP"));
    assertTrue(outputStreamCompressorNames.contains("BZIP2"));
    assertTrue(outputStreamCompressorNames.contains("XZ"));
    assertTrue(outputStreamCompressorNames.contains("LZMA"));
    assertTrue(outputStreamCompressorNames.contains("PACK200"));
    assertTrue(outputStreamCompressorNames.contains("DEFLATE"));
    assertTrue(outputStreamCompressorNames.contains("SNAPPY_FRAMED"));
    assertTrue(outputStreamCompressorNames.contains("LZ4_BLOCK"));
    assertTrue(outputStreamCompressorNames.contains("LZ4_FRAMED"));
    assertTrue(outputStreamCompressorNames.contains("ZSTANDARD"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithNullInputStream_hqGd3() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    InputStream in = null;
    Set<String> compressorNames = new HashSet<>();
    try {
        factory.createCompressorInputStream(in, compressorNames);
        fail("Expected CompressorException");
    } catch (CompressorException e) {
        assertEquals("InputStream cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_pbkA0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    factory.setDecompressConcatenated(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenatedWithMemoryLimit_BQKv1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    factory.setDecompressConcatenated(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_ktRn4() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    CompressorStreamProvider provider = null;
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertTrue(map.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_Default_gsQb2_fid1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(4, map.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));
    assertFalse(map.containsKey("TestCompressorStreamProvider"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(4, map.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(4, map.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("gzip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));
    assertFalse(map.containsKey("TestCompressorStreamProvider"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_vgNh3_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertTrue(providers.containsKey("TestCompressorStreamProvider"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_JaUe4_2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertTrue(providers.containsKey("TestCompressorStreamProvider"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_AAsT7_fid1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_1_jcMb0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
        assertNotNull(entry.getValue());
    }
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_1_jcMb0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
        assertNotNull(entry.getValue());
    }
    assertFalse(providers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_3_SZyj2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
    }
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_3_SZyj2_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
    }
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_4_eRBk3_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
    }
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_1_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_2_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_3_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_4_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_5_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_6_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_7_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_8_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_9_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_10_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_11_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_12_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_13_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_14_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_wyhS0_15_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_1_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertEquals(13, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_2_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_3_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BROTLI"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_4_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_5_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_6_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_7_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_8_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_9_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_RAW"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_10_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_11_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_12_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_13_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_14_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNamesWith100PercentCoverage_HMYp1_15_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    assertTrue(compressorNames.contains("DEFLATE64"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_2_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_wzru0_5_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithDecompressUntilEOF_JQui1_2_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_2_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_4_fid2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProvidersWithMemoryLimitInKb_TrDt2_5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    SortedMap<String, CompressorStreamProvider> map = factory.findAvailableCompressorOutputStreamProviders();
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_vgNh3_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_vgNh3_2_fid2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_JaUe4_1() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_JaUe4_2_fid2() {
    CompressorStreamFactory factory = CompressorStreamFactory.getSingleton();
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_4_eRBk3_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
    for (Map.Entry<String, CompressorStreamProvider> entry : providers.entrySet()) {
    }
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(9, outputStreamCompressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_3() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_4() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_5() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_6() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_7() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_8() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_9() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_10() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_qHEh0_11() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_1() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertEquals(9, outputStreamCompressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_2() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("GZIP"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_3() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("BZIP2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_4() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("XZ"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_5() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZMA"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_6() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("PACK200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_7() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("DEFLATE"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_8() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("SNAPPY_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_9() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZ4_BLOCK"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_10() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("LZ4_FRAMED"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNamesWith100PercentCoverage_XNzY1_11() {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
    Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
    assertTrue(outputStreamCompressorNames.contains("ZSTANDARD"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4FramedWithNullMemoryLimit_uAtb4_NArh0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
    String lz4Framed = factory.getLZ4Framed();
    assertEquals("LZ4", lz4Framed);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenatedWithNullMemoryLimit_xYir4_sObT0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
    factory.setDecompressConcatenated(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullSet_Vxew3_pkgh0() {
    Set<String> names = null;
    CompressorStreamProvider provider = null;
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertTrue(map.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_multipleEntries_NcCz2_fEFm0_2() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, factory, map);
    assertEquals(factory, map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_multipleEntries_NcCz2_fEFm0_3() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, factory, map);
    assertEquals(factory, map.get("name2"));}
}