/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Failing {
    private boolean languageEncodingFlag;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_MaxValue_TPDx4_XhNL2147483647() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertEquals(Integer.MAX_VALUE, gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagTrue_languageEncodingFlagTrue_dataDescriptorFlagTrue_gNmq0_TSZp0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    int expectedHashCode = 4938;
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagFalse_languageEncodingFlagTrue_dataDescriptorFlagFalse_kIFq2_yHFK0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    int expectedHashCode = 4662;
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEmptyArray_axYT6_KbyW0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = new byte[0];
    gpb.encode(result, 0);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_PXUt1_fid1() {
    GeneralPurposeBit g1 = new GeneralPurposeBit();
    GeneralPurposeBit g2 = new GeneralPurposeBit();
    assertFalse(g1.equals(g2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithSlidingDictionarySizeFlag_rQBe4_fid1() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithNumberOfShannonFanoTreesFlag_mlUu5_fid1() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(3, b.getNumberOfShannonFanoTrees());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_2_mthy1_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 1;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_3_NiDy2_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 2;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_4_vPSE3_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 3;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_5_UMdO4_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 4;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_6_apga5_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 5;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_7_Qhxq6_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 6;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_8_Izyn7_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 7;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_9_oclS8_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 8;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_10_PnEb9_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 9;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_11_JubK10_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 10;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_12_RSmW11_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 11;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_13_Sgya12_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 12;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_NonDefault_zQxt1_lKjQ0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertEquals(10, gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_MinValue_PVIB5_XZfo0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertEquals(Integer.MIN_VALUE, gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_True_GAYp0_idQn0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertTrue(gpb.usesStrongEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_true_jBKV0_SEVr0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertTrue(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_null_zMue2_Truo0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertNull(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_True_npZT0_kjzp0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertTrue(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagTrue_languageEncodingFlagTrue_dataDescriptorFlagTrue_gNmq0_TSZp0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 1) + 1) + 1);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagTrue_strongEncryptionFlagFalse_languageEncodingFlagTrue_dataDescriptorFlagFalse_kIFq2_yHFK0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    int expectedHashCode = 3 * (7 * (13 * (17 * 1 + 0) + 1) + 0);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithEmptyArray_axYT6_KbyW0_fid1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = new byte[0];
    gpb.encode(result, 1);
    assertEquals(0, result.length);
}
}