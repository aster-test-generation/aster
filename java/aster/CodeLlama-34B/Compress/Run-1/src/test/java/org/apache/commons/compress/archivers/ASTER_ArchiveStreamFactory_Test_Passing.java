/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.util.Set;
import java.util.TreeMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncoding_nREf0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEntryEncodingWithNull_CFqK1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        factory.setEntryEncoding(null);
        assertEquals(null, factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_ddnR0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_customEncoding_LhjV1() {
    String encoding = "ISO-8859-1";
    ArchiveStreamFactory factory = new ArchiveStreamFactory(encoding);
    String actualEncoding = factory.getEntryEncoding();
    assertEquals(encoding, actualEncoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_nullEncoding_OvVT2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
    String encoding = factory.getEntryEncoding();
    assertNull(encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNamesWithEncoding_MZWd1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getInputStreamArchiveNames();
    assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_qbee0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNamesWithEncoding_JleX1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
    Set<String> archiveNames = factory.getOutputStreamArchiveNames();
    assertEquals(6, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3_1() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(2, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3_4() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertNull(map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_nullProvider_OemP3_5() {
    Set<String> names = new HashSet<>();
    names.add("name1");
    names.add("name2");
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertNull(map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_emptySet_UHha0_dcLJ0() {
    Set<String> names = new HashSet<>();
    ArchiveStreamProvider provider = null;
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_nullStream_CqVG0_Sceg0() {
    try {
        ArchiveStreamFactory.detect(null);
        fail("Should throw IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Stream must not be null.", e.getMessage());
    } catch (ArchiveException e) {
        fail("Should not throw ArchiveException");
    }
}
}