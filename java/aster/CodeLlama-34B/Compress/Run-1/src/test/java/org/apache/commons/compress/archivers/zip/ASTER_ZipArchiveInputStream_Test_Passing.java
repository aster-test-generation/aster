/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SINGLE_SEGMENT_SPLIT_MARKER_SLPW3() {
    byte[] signature = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes();
    int length = signature.length;
    assertTrue(ZipArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_GBCq4() {
    byte[] signature = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int length = signature.length;
    assertFalse(ZipArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_eTpm0() throws IOException {
ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
ZipArchiveEntry entry = zipInputStream.getNextEntry();
assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithValidEntry_kwVR9() throws IOException {
ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[1]));
ZipArchiveEntry entry = zipInputStream.getNextEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCount_jlrr0() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    long uncompressedCount = zipInputStream.getUncompressedCount();
    assertEquals(0, uncompressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithEncoding_TMMo1() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    long uncompressedCount = zipInputStream.getUncompressedCount();
    assertEquals(0, uncompressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithEncodingAndUseUnicodeExtraFields_kGMO2() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    long uncompressedCount = zipInputStream.getUncompressedCount();
    assertEquals(0, uncompressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedCountWithEncodingAndAllowStoredEntriesWithDataDescriptor_Rzna3() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    long uncompressedCount = zipInputStream.getUncompressedCount();
    assertEquals(0, uncompressedCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_OOmz3() throws IOException {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipPositiveValue_ZgxF0() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    long skipped = zis.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipNegativeValue_JZfU1() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    try {
        zis.skip(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithEncoding_AqzE2() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, true);
    long skipped = zis.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutUnicodeExtraFields_zMFG0() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", false, true, true);
    long skipped = zis.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutAllowStoredEntriesWithDataDescriptor_oPXA7() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, false, true);
    long skipped = zis.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithoutSkipSplitSig_oYmt9() throws IOException {
    ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]), "UTF-8", true, true, false);
    long skipped = zis.skip(0);
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry_hYSc0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry2_fnaK1() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry3_gDPy2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry4_NdCI3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_WSiU4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry11_GfFq10() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInputAndLength_ytSd2() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 5;
    int read = zipArchiveInputStream.read(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead9_Ijyh8() throws IOException {
    ZipArchiveInputStream zip = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryData_NotZipArchiveEntry_hdzu1_OvzN0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry archiveEntry = new ZipArchiveEntry("test.txt");
    assertFalse(zipArchiveInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextZipEntry5_kZCs4_Puuu0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.read(new byte[0], 0, 0);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataWithInvalidZipArchiveEntryAndStoredEntriesWithDataDescriptor_MrCZ5_dxXF0() {
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8", true, true, true);
    ZipArchiveEntry zipEntry = new ZipArchiveEntry("test.txt");
    zipEntry.setCompressedSize(10);
    zipEntry.setMethod(ZipEntry.STORED);
    zipEntry.setGeneralPurposeBit(new GeneralPurposeBit());
    assertTrue(zipInputStream.canReadEntryData(zipEntry));
}
}