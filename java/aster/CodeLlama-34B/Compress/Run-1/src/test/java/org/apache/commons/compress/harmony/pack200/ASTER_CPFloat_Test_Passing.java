/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPFloat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_InvalidFloat_IgOj1_DGaK0() {
    CPFloat cpf = new CPFloat(Float.NaN);
    float result = cpf.getFloat();
    assertEquals(Float.NaN, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Equal_XWiv0_zVEZ0() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(1.0f);
    int result = float1.compareTo(float2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_NegativeFloat_OfjR2_fVSD0() {
    CPFloat cpf = new CPFloat(Float.valueOf(-1.0f));
    float result = cpf.getFloat();
    assertEquals(-1.0f, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_NotEqual_qkHP1_Hjdn0() {
    CPFloat float1 = new CPFloat(1.0f);
    CPFloat float2 = new CPFloat(2.0f);
    int result = float1.compareTo(float2);
    assertNotEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_ValidFloat_DbDZ0_KgoT0() {
    CPFloat cpf = new CPFloat(1.0f);
    float result = cpf.getFloat();
    assertEquals(1.0f, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_MaxFloat_weyO4_bEbd0() {
    CPFloat cpf = new CPFloat(Float.MAX_VALUE);
    float result = cpf.getFloat();
    assertEquals(Float.MAX_VALUE, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_MinFloat_tVck5_nRul0() {
    CPFloat cpf = new CPFloat(Float.MIN_VALUE);
    float result = cpf.getFloat();
    assertEquals(Float.MIN_VALUE, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_Infinity_EUgk6_mBwO0() {
    CPFloat cpf = new CPFloat(Float.POSITIVE_INFINITY);
    float result = cpf.getFloat();
    assertEquals(Float.POSITIVE_INFINITY, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_NegativeInfinity_zPgA7_TKLc0() {
    CPFloat cpf = new CPFloat(Float.NEGATIVE_INFINITY);
    float result = cpf.getFloat();
    assertEquals(Float.NEGATIVE_INFINITY, result, 0.0f);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFloat_EmptyString_ikaC10_GyEr0() {
    CPFloat cpf = new CPFloat(0.0f);
    float result = cpf.getFloat();
    assertEquals(0.0f, result, 0.0f);
}
}