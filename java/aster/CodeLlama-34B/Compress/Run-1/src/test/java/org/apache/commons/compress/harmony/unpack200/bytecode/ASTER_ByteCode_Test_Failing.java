/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteCode_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_ywJt0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.nestedMustStartClassPool());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidOperands_wlVh1() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = new int[] {1, 2, 3, 4};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytes_InvalidByteCodeFormLength_LZfo2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] operands = new int[] {1, 2, 3};
    try {
        byteCode.setOperandBytes(operands);
        fail("Expected Error");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with 3 but bytecode has length 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteWithNegativePosition_mFMf1() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(1, -1);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode that has no rewrite", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandByteWithPositionOutOfBounds_nEhV2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setOperandByte(1, 2);
        fail("Expected Error to be thrown");
    } catch (Error e) {
        assertEquals("Trying to rewrite ByteCode with an byte at position 2 but this won't fit in the rewrite array", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_RgZD0() {
    ByteCode byteCode = new ByteCode(1);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_lUYp1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    String expected = "ByteCode";
    String actual = byteCode.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_ULRJ1_2() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = {1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = null;
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[0];
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1, 2, 3, 4, 5};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertNull(byteCode.getByteCodeTargets());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_ULRJ1_3() {
    ByteCode byteCode = new ByteCode(1);
    int[] byteCodeTargets = {1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = null;
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[0];
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1, 2, 3};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1};
    byteCode.setByteCodeTargets(byteCodeTargets);
    byteCodeTargets = new int[] {1, 2, 3, 4, 5};
    byteCode.setByteCodeTargets(byteCodeTargets);
    assertEquals(0, byteCode.getByteCodeTargets().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex1_jYCh0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex2_FURA1() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    assertEquals(1, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcode_Yokh0() {
    ByteCode byteCode = new ByteCode(1);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_jibK1() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(1, nested);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_nestedNull_Ifbn4() {
    ByteCode byteCode = new ByteCode(1, null);
    assertEquals(1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_opcodeNegative_eKOt5() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(-1, nested);
    assertEquals(-1, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_opcodeZero_GKWe6() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(0, nested);
    assertEquals(0, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_opcodeMaxValue_eGrL7() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(Integer.MAX_VALUE, nested);
    assertEquals(Integer.MAX_VALUE, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_opcodeMinValue_QAIg8() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(Integer.MIN_VALUE, nested);
    assertEquals(Integer.MIN_VALUE, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_opcodeAndNested_opcodeRandom_yNJR9() {
    ClassFileEntry[] nested = new ClassFileEntry[0];
    ByteCode byteCode = new ByteCode(12345, nested);
    assertEquals(12345, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_ENOK0() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[0]);
    int[] expected = { 1, 2, 3 };
    int[] actual = byteCode.getRewrite();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeIndexWithInvalidValue_GsxR2() {
    ByteCode byteCode = new ByteCode(1);
    try {
        byteCode.setByteCodeIndex(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid byte code offset: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_EkFj0_1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_EkFj0_2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_EkFj0_3() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_BwlB0() {
    ByteCode byteCode = new ByteCode(1);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_SKJq1() {
    ByteCode byteCode = new ByteCode(2);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName3_FYbD2() {
    ByteCode byteCode = new ByteCode(3);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName4_mAXe3() {
    ByteCode byteCode = new ByteCode(4);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName5_bPbQ4() {
    ByteCode byteCode = new ByteCode(5);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName6_mjCi5() {
    ByteCode byteCode = new ByteCode(6);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName7_XFNX6() {
    ByteCode byteCode = new ByteCode(7);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName8_hpTM7() {
    ByteCode byteCode = new ByteCode(8);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName9_ZwJR8() {
    ByteCode byteCode = new ByteCode(9);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName10_DzEj9() {
    ByteCode byteCode = new ByteCode(10);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName11_zJXW10() {
    ByteCode byteCode = new ByteCode(11);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName12_XYIT11() {
    ByteCode byteCode = new ByteCode(12);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName13_CVLX12() {
    ByteCode byteCode = new ByteCode(13);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName14_hhVU13() {
    ByteCode byteCode = new ByteCode(14);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName15_FBBJ14() {
    ByteCode byteCode = new ByteCode(15);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName16_LVwj15() {
    ByteCode byteCode = new ByteCode(16);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName17_xmrF16() {
    ByteCode byteCode = new ByteCode(17);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName18_pYyQ17() {
    ByteCode byteCode = new ByteCode(18);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName19_RluT18() {
    ByteCode byteCode = new ByteCode(19);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName20_PLbm19() {
    ByteCode byteCode = new ByteCode(20);
    String name = byteCode.getName();
    assertEquals("ByteCode", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1_1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    byteCode.setNestedPositions(null);
    byteCode.setNestedPositions(new int[0][0]);
    byteCode.setNestedPositions(new int[][] {{1}});
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertEquals(nestedPositions, byteCode.getNestedPositions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1_2() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    byteCode.setNestedPositions(null);
    byteCode.setNestedPositions(new int[0][0]);
    byteCode.setNestedPositions(new int[][] {{1}});
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertNull(byteCode.getNestedPositions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1_3() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    byteCode.setNestedPositions(null);
    byteCode.setNestedPositions(new int[0][0]);
    byteCode.setNestedPositions(new int[][] {{1}});
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertEquals(new int[0][0], byteCode.getNestedPositions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1_4() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    byteCode.setNestedPositions(null);
    byteCode.setNestedPositions(new int[0][0]);
    byteCode.setNestedPositions(new int[][] {{1}});
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertEquals(new int[][] {{1}}, byteCode.getNestedPositions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1_5() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    byteCode.setNestedPositions(null);
    byteCode.setNestedPositions(new int[0][0]);
    byteCode.setNestedPositions(new int[][] {{1}});
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertEquals(new int[][] {{1, 2}, {3, 4}, {5, 6}}, byteCode.getNestedPositions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_EmptyRewrite_gZzq0() {
    ByteCode byteCode = new ByteCode(0);
    assertEquals(0, byteCode.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_opcode_oggt0() {
    ByteCode byteCode = new ByteCode(1);
    int[] expected = new int[] { 1 };
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_opcodeAndNested_empty_tHNb2() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[] {});
    int[] expected = new int[] {};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_opcodeAndNested_null_ksNJ3() {
    ByteCode byteCode = new ByteCode(1, null);
    int[] expected = new int[] {};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_opcodeAndNested_nullNested_tHtO4() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[] { null });
    int[] expected = new int[] {};
    int[] actual = byteCode.getByteCodeTargets();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithInvalidOpcode_HtcW2() {
    ByteCode byteCode = new ByteCode(0);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertNull(byteCodeForm);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithNoOperand_QEeo4() {
    ByteCode byteCode = new ByteCode(1);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertTrue(byteCodeForm.hasNoOperand());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithMultipleByteCodesAndNoOperand_mPTv5() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertTrue(byteCodeForm.hasNoOperand());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeFormWithHasMultipleByteCodes_pdvH11() {
    ByteCode byteCode = new ByteCode(1, new ClassFileEntry[1]);
    ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    assertTrue(byteCodeForm.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_nullByteCode_Lkvl6_gXrD0() {
    ByteCode byteCode = null;
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertNull(nestedPositions);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_nullNestedPositions_xBMS7_byud1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertNull(nestedPositions[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_EkFj0() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = byteCode.getNestedPositions();
    assertEquals(1, nestedPositions.length);
    assertEquals(1, nestedPositions[0].length);
    assertEquals(1, nestedPositions[0][0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_KGsG1() {
    ByteCode byteCode = new ByteCode(1);
    int[][] nestedPositions = new int[][] {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(nestedPositions);
    assertEquals(nestedPositions, byteCode.getNestedPositions());
    byteCode.setNestedPositions(null);
    assertNull(byteCode.getNestedPositions());
    byteCode.setNestedPositions(new int[0][0]);
    assertEquals(new int[0][0], byteCode.getNestedPositions());
    byteCode.setNestedPositions(new int[][] {{1}});
    assertEquals(new int[][] {{1}}, byteCode.getNestedPositions());
    byteCode.setNestedPositions(new int[][] {{1, 2}, {3, 4}, {5, 6}});
    assertEquals(new int[][] {{1, 2}, {3, 4}, {5, 6}}, byteCode.getNestedPositions());
}
}