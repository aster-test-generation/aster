/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.security.NoSuchAlgorithmException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_1_CkZc0() throws NoSuchAlgorithmException {
    byte[] password = "password".getBytes();
    int numCyclesPower = 1;
    byte[] salt = "salt".getBytes();
    byte[] expected = "8c6976e5b5410415bde908bd4dee15dfb".getBytes();
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_2_YYFl1() throws NoSuchAlgorithmException {
    byte[] password = "password".getBytes();
    int numCyclesPower = 2;
    byte[] salt = "salt".getBytes();
    byte[] expected = "e5b5410415bde908bd4dee15dfb8c6976".getBytes();
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_3_yKIa2() throws NoSuchAlgorithmException {
    byte[] password = "password".getBytes();
    int numCyclesPower = 3;
    byte[] salt = "salt".getBytes();
    byte[] expected = "bde908bd4dee15dfb8c6976e5b5410415".getBytes();
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_4_yQeJ3() throws NoSuchAlgorithmException {
    byte[] password = "password".getBytes();
    int numCyclesPower = 4;
    byte[] salt = "salt".getBytes();
    byte[] expected = "8c6976e5b5410415bde908bd4dee15dfb".getBytes();
    byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256PasswordWithNullSalt_NziR5() {
    char[] password = "password".toCharArray();
    int numCyclesPower = 10;
    assertThrows(NullPointerException.class, () ->AES256SHA256Decoder.sha256Password(password, numCyclesPower, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_nullChars_xOQl0() {
    char[] chars = null;
    byte[] expected = null;
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_emptyChars_yVZb1() {
    char[] chars = new char[0];
    byte[] expected = new byte[0];
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16Decode_validChars_bbIT2() {
    char[] chars = new char[] {'a', 'b', 'c'};
    byte[] expected = new byte[] {97, 98, 99};
    byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
}
}