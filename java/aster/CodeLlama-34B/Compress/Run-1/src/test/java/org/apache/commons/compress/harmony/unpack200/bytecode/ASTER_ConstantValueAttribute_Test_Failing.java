/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryIsNull_EvJF0() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(null);
    int actual = constantValueAttribute.hashCode();
    int expected = 1;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryIsNotNull_GawO1() {
    ByteCode entry = new ByteCode(1);
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(entry);
    int actual = constantValueAttribute.hashCode();
    int expected = 31 * 1 + entry.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithInvalidOpcode_xzhF2() {
    ByteCode entry = new ByteCode(0);
    ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
    assertEquals(0, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullByteCode_UxOl1() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(null);
    String expected = "Constant:null";
    String actual = attribute.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValue_OwmU1() {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_EntryIsNull_sZpo5() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(null);
    assertFalse(attribute.equals(new ConstantValueAttribute(new ByteCode(1))));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_entryIsNull_EvJF0_fid2() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
    int actual = constantValueAttribute.hashCode();
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullByteCode_UxOl1_fid2() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(0));
    String expected = "Constant:0";
    String actual = attribute.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_EntryIsNull_sZpo5_fid2() {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(new ConstantValueAttribute(null)));
}
}