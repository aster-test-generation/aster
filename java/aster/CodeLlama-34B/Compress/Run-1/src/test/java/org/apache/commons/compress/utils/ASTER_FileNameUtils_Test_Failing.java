/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_EmptyFileName_OuTa1() {
    String fileName = "";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_NoExtension_gJQp2() {
    String fileName = "file";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_ExtensionWithMultipleDotsAndNoDotAndNoExtension_NoLG9() {
    String fileName = "file.txt.gz.bz2";
    String extension = FileNameUtils.getExtension(fileName);
    assertNull(extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_emptyPath_AMVS1() {
    assertNull(FileNameUtils.getExtension(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_invalidPath_LAxQ3() {
    assertNull(FileNameUtils.getExtension("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithoutExtension_qVEX4() {
    assertNull(FileNameUtils.getExtension("file."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithMultipleExtensions_kBRc5() {
    assertEquals("txt", FileNameUtils.getExtension("file.txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithInvalidExtension_EynI6() {
    assertNull(FileNameUtils.getExtension("file.txt."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithWhitespace_rtKr8() {
    assertNull(FileNameUtils.getExtension("file .txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithSpecialCharacters_jHjZ9() {
    assertNull(FileNameUtils.getExtension("file$txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheBeginning_HpUs12() {
    assertNull(FileNameUtils.getExtension(".file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotInTheMiddle_oEpC13() {
    assertNull(FileNameUtils.getExtension("file.txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheEndAndSpecialCharacters_inKi17() {
    assertNull(FileNameUtils.getExtension("file.!"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheBeginningAndSpecialCharacters_wWGP18() {
    assertNull(FileNameUtils.getExtension(".!file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotInTheMiddleAndSpecialCharacters_rIOJ19() {
    assertNull(FileNameUtils.getExtension("file.!txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheEndAndWhitespaceAndSpecialCharactersAndMultipleDots_yDxY23() {
    assertNull(FileNameUtils.getExtension("file. !.txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheBeginningAndWhitespaceAndSpecialCharactersAndMultipleDots_FOwO24() {
    assertNull(FileNameUtils.getExtension(". !.file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_EmptyFileName_OuTa1_fid1() {
    String fileName = "";
    String extension = FileNameUtils.getExtension(fileName);
    assertEquals(null, extension);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_emptyPath_AMVS1_fid1() {
    assertEquals(null, FileNameUtils.getExtension(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_invalidPath_LAxQ3_fid1() {
    assertEquals(null, FileNameUtils.getExtension("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithSpecialCharacters_jHjZ9_fid1() {
    assertEquals("txt", FileNameUtils.getExtension("file$txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheEnd_dxau11_fid1() {
    assertEquals(null, FileNameUtils.getExtension("file."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheBeginningAndWhitespace_hExs15_fid1() {
    assertEquals("file", FileNameUtils.getExtension(". file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotInTheMiddleAndWhitespace_fZts16_fid1() {
    assertEquals("txt.pdf", FileNameUtils.getExtension("file. txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotInTheMiddleAndSpecialCharacters_rIOJ19_fid1() {
    assertEquals("txt.pdf", FileNameUtils.getExtension("file.!txt.pdf"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtension_pathWithDotAtTheEndAndWhitespaceAndSpecialCharacters_HpBr20_fid1() {
    assertEquals("!", FileNameUtils.getExtension("file. !"));
}
}