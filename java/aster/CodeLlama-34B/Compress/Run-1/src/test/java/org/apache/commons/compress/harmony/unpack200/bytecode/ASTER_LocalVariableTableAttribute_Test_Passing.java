/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FOiO0_1() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
    String result = localVariableTableAttribute.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FOiO0_2() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
    String result = localVariableTableAttribute.toString();
    assertTrue(result instanceof String);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FOiO0_3() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
    String result = localVariableTableAttribute.toString();
    assertTrue(result.contains("LocalVariableTable: 10 variables"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries1_hZWr0_Iekt0_1() {
    LocalVariableTableAttribute attr = new LocalVariableTableAttribute(1, new int[] { 0 }, new int[] { 1 }, new CPUTF8[] { new CPUTF8("name") }, new CPUTF8[] { new CPUTF8("descriptor") }, new int[] { 0 });
    ClassFileEntry[] entries = attr.getNestedClassFileEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FOiO0() {
    LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(10, new int[]{1, 2, 3}, new int[]{4, 5, 6}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3")}, new int[]{7, 8, 9});
    String result = localVariableTableAttribute.toString();
    assertNotNull(result);
    assertTrue(result instanceof String);
    assertTrue(result.contains("LocalVariableTable: 10 variables"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_GPNu0_uFih0() {
    int localVariableTableLength = 10;
    int[] startPcs = new int[] { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 };
    int[] lengths = new int[] { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    CPUTF8[] names = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5"), new CPUTF8("name6"), new CPUTF8("name7"), new CPUTF8("name8"), new CPUTF8("name9"), new CPUTF8("name10") };
    CPUTF8[] descriptors = new CPUTF8[] { new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3"), new CPUTF8("descriptor4"), new CPUTF8("descriptor5"), new CPUTF8("descriptor6"), new CPUTF8("descriptor7"), new CPUTF8("descriptor8"), new CPUTF8("descriptor9"), new CPUTF8("descriptor10") };
    int[] indexes = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    LocalVariableTableAttribute attr = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
    int expectedLength = 2 + 10 * localVariableTableLength;
    int actualLength = attr.getLength();
    assertEquals(expectedLength, actualLength);
}
}