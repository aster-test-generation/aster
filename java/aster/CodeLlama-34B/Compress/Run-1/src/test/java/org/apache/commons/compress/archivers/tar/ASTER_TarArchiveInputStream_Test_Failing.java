/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveInputStream_Test_Failing {
public void testSetAtEOF_true_ohNn0() {
}
public void testSetAtEOF_false_BPPk1() {
}
public void testSetAtEOF_null_RAOZ2() {
}
public void testSetAtEOF_empty_nujd3() {
}
public void testSetAtEOF_nonEmpty_cCnq4() {
}
public void testSetAtEOF_nonEmpty_false_uzHU5() {
}
public void testSetAtEOF_nonEmpty_null_lhdT6() {
}
public void testSetAtEOF_nonEmpty_empty_hJiI7() {
}
public void testSetAtEOF_nonEmpty_nonEmpty_hCem8() {
}
public void testSetAtEOF_nonEmpty_nonEmpty_false_uBTh9() {
}
public void testGetRecordSize_DefaultConstructor_okmh0() {
}
public void testGetRecordSize_BlockSizeConstructor_qvFc1() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeConstructor_RhDy2() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndEncodingConstructor_RARP3() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndEncodingAndLenientConstructor_EQfP4() {
}
public void testGetRecordSize_BlockSizeAndRecordSizeAndLenientConstructor_qLkv5() {
}
public void testGetRecordSize_BlockSizeAndEncodingConstructor_pVRT6() {
}
public void testGetRecordSize_BlockSizeAndEncodingAndLenientConstructor_fyel7() {
}
public void testGetRecordSize_BlockSizeAndLenientConstructor_VkHx8() {
}
public void testGetRecordSize_EncodingConstructor_avTV9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullInputStream_ZUJW0() throws IOException {
TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 1024, "UTF-8");
TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullInputStream_cDBr0() throws IOException {
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
    TarArchiveEntry tarArchiveEntry = tarArchiveInputStream.getNextTarEntry();
    assertNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_NullInputStream_qEuo0_JhIc0() {
TarArchiveInputStream tarInputStream = new TarArchiveInputStream(null);
try {
assertNull(tarInputStream.getNextTarEntry());
} catch (IOException e) {
e.printStackTrace();
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_nonEmpty_withPadding_mdNn3_gZup0_1() throws IOException {
    byte[] data = new byte[1024];
    Arrays.fill(data, (byte) 1);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_nonEmpty_withPadding_mdNn3_gZup0_2() throws IOException {
    byte[] data = new byte[1024];
    Arrays.fill(data, (byte) 1);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals(1024, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_nonEmpty_withPadding_mdNn3_gZup0_3() throws IOException {
    byte[] data = new byte[1024];
    Arrays.fill(data, (byte) 1);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals(0, tarInputStream.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_nonEmpty_withPadding_mdNn3_gZup0_3_fid2() throws IOException {
    byte[] data = new byte[1024];
    Arrays.fill(data, (byte) 1);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals(1024, tarInputStream.getBytesRead());
}
}