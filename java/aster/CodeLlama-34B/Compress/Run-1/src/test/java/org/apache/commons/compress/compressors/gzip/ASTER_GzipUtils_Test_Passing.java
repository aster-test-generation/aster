/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_empty_egRH0() {
    assertFalse(GzipUtils.isCompressedFilename(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nonCompressed_jjIR2() {
    assertFalse(GzipUtils.isCompressedFilename("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_compressed_mjNP3() {
    assertTrue(GzipUtils.isCompressedFilename("file.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_uppercase_wpmz4() {
    assertTrue(GzipUtils.isCompressedFilename("FILE.GZ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_multipleExtensions_czqU6() {
    assertTrue(GzipUtils.isCompressedFilename("file.tar.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_noExtension_QiGl7() {
    assertFalse(GzipUtils.isCompressedFilename("file"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalidFilename_pgai9() {
    assertFalse(GzipUtils.isCompressedFilename("file."));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_Empty_nQLN1() {
    assertFalse(GzipUtils.isCompressedFileName(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidExtension_Pxzr2() {
    assertFalse(GzipUtils.isCompressedFileName("file.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtension_EybA3() {
    assertTrue(GzipUtils.isCompressedFileName("file.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithDot_Ugbv4() {
    assertTrue(GzipUtils.isCompressedFileName("file.tar.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDotsAndInvalidExtension_LaWM7() {
    assertFalse(GzipUtils.isCompressedFileName("file.tar.gz.bz2.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDotsAndValidExtension_GJPZ8() {
    assertTrue(GzipUtils.isCompressedFileName("file.tar.gz.bz2.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDotsAndValidExtensionAndInvalidExtension_wptm9() {
    assertFalse(GzipUtils.isCompressedFileName("file.tar.gz.bz2.gz.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDotsAndValidExtensionAndValidExtension_ZpVH10() {
    assertTrue(GzipUtils.isCompressedFileName("file.tar.gz.bz2.gz.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_UhsK0() {
    String fileName = "test.txt";
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals("test.txt.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithoutExtension_cGNW1() {
    String fileName = "test";
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals("test.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithMultipleExtensions_qkpX2() {
    String fileName = "test.txt.gz";
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals("test.txt.gz.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileNameWithInvalidExtension_kger3() {
    String fileName = "test.txt.invalid";
    String compressedFileName = GzipUtils.getCompressedFileName(fileName);
    assertEquals("test.txt.invalid.gz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_tQtV0() {
    String fileName = "test.txt.gz";
    String expected = "test.txt";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithoutExtension_Okwg1() {
    String fileName = "test";
    String expected = "test";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileNameWithEmptyString_zosb4() {
    String fileName = "";
    String expected = "";
    String actual = GzipUtils.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_Zhdl0() {
    String fileName = "test.txt";
    String expectedCompressedFileName = "test.txt.gz";
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithoutExtension_cmdF1() {
    String fileName = "test";
    String expectedCompressedFileName = "test.gz";
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleExtensions_CVio2() {
    String fileName = "test.txt.gz";
    String expectedCompressedFileName = "test.txt.gz.gz";
    String actualCompressedFileName = GzipUtils.getCompressedFilename(fileName);
    assertEquals(expectedCompressedFileName, actualCompressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_Woid0() {
        String fileName = "test.txt.gz";
        String expectedUncompressedFilename = "test.txt";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithoutExtension_Rkjt1() {
        String fileName = "test";
        String expectedUncompressedFilename = "test";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithEmptyString_JCVl4() {
        String fileName = "";
        String expectedUncompressedFilename = "";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_invalidExtension_ariM8_fid1() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidExtensionWithMultipleDots_RoAy6_fid1() {
    assertFalse(GzipUtils.isCompressedFileName("file.tar.gz.bz2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilenameWithMultipleExtensions_nuoz2_fid1() {
        String fileName = "test.txt.gz.bz2";
        String expectedUncompressedFilename = "test.txt.gz.bz2";
        String actualUncompressedFilename = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expectedUncompressedFilename, actualUncompressedFilename);
    }
}