/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassBands_Test_Failing {
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0_4_0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassMethodCountWithMultipleMethodsAndNonEmptySegment_JkAH3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classMethodCount = classBands.getClassMethodCount();
        assertEquals(3, classMethodCount.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_VyFZ0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);
    assertEquals(0, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_VyFZ0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertEquals(0, codeHandlerCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_cPQz0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertNotNull(classFlags);
    assertEquals(0, classFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithDefaultLayout_vSmR1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertEquals(16, classFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlagsWithInvalidContext_Hywo5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertEquals(0, classFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_hxac0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        for (int i = 0; i < icLocal.length; i++) {
            for (int j = 0; j < icLocal[i].length; j++) {
            }
        }
        assertNotNull(icLocal);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_hxac0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        for (int i = 0; i < icLocal.length; i++) {
            for (int j = 0; j < icLocal[i].length; j++) {
            }
        }
        assertEquals(10, icLocal.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertNotNull(methodDescrInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts.length);}
@Test
public void testGetClassSuperInts_2_OroQ1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(1, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_1_vrCk0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(0, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_3_RKNp2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(2, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_4_KGxN3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(3, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_5_qVpo4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(4, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_6_PPVR5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(5, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_7_mwii6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(6, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_8_RCaV7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(7, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_9_eCqw8() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(8, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_10_ltBv9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(9, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_11_zDWs10() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(10, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_12_YdXz11() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classSuperInts = classBands.getClassSuperInts();
    assertEquals(11, classSuperInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCatchPO_Gnyy0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
        assertNotNull(codeHandlerCatchPO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCatchPO_Gnyy0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
        assertEquals(10, codeHandlerCatchPO.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCatchPO_Gnyy0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
        assertEquals(10, codeHandlerCatchPO[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_cKcx0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_cPQz0_fid1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] classFlags = classBands.getClassFlags();
    assertNotNull(classFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcLocal_hxac0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        IcTuple[][] icLocal = classBands.getIcLocal();
        assertNotNull(icLocal);
        assertEquals(10, icLocal.length);
        for (int i = 0; i < icLocal.length; i++) {
            assertEquals(10, icLocal[i].length);
            for (int j = 0; j < icLocal[i].length; j++) {
                assertNotNull(icLocal[i][j]);
            }
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertNotNull(methodDescrInts);
        assertEquals(1, methodDescrInts.length);
        assertEquals(1, methodDescrInts[0].length);
        assertEquals(1, methodDescrInts[0][0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeHandlerCatchPO_Gnyy0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] codeHandlerCatchPO = classBands.getCodeHandlerCatchPO();
        assertNotNull(codeHandlerCatchPO);
        assertEquals(10, codeHandlerCatchPO.length);
        assertEquals(10, codeHandlerCatchPO[0].length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_cKcx0_fid1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        classBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpackWithNullSegment_fGcc1() {
        ClassBands classBands = new ClassBands(null);
        classBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_1_uKom0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {1, 2, 3};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_2_tYLU1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {4, 5, 6};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_3_HqgT2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {7, 8, 9};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_4_KTAJ3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {10, 11, 12};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_5_uIiZ4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {13, 14, 15};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_6_YjPv5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {16, 17, 18};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_7_GNcm6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {19, 20, 21};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_8_KnMB7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {22, 23, 24};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_9_JGsf8() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {25, 26, 27};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_10_UOsd9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {28, 29, 30};
    int[] actual = classBands.getClassThisInts();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_yqhG0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    assertNotNull(codeHandlerStartP);
    assertEquals(10, codeHandlerStartP.length);
    assertEquals(10, codeHandlerStartP[0].length);
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            assertEquals(i * j, codeHandlerStartP[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_qmaq0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals(methodDescr.length, 1);
        assertEquals(methodDescr[0].length, 1);
        assertEquals(methodDescr[0][0], "getMethodDescr");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_NFvm0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertNotNull(fieldDescrInts);
        assertEquals(1, fieldDescrInts.length);
        assertEquals(1, fieldDescrInts[0].length);
        assertEquals(1, fieldDescrInts[0][0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithNullSegment_dKlB1() {
        ClassBands classBands = new ClassBands(null);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertNull(fieldDescrInts);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithEmptySegment_gsBO2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertNotNull(fieldDescrInts);
        assertEquals(0, fieldDescrInts.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_default_iCXs0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(0, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_nonDefault_wXVO1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertEquals(1, methodFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_null_uyqG2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertNull(methodFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_nonEmpty_KvUI4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertTrue(methodFlags.length > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodFlags_invalid_gsis5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] methodFlags = classBands.getMethodFlags();
    assertFalse(methodFlags.length > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_rxPd0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);
        assertEquals(1, codeMaxNALocals.length);
        assertEquals(0, codeMaxNALocals[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNonZeroValue_PYzh1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);
        assertEquals(1, codeMaxNALocals.length);
        assertEquals(1, codeMaxNALocals[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithMultipleValues_mqwg2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);
        assertEquals(2, codeMaxNALocals.length);
        assertEquals(0, codeMaxNALocals[0]);
        assertEquals(1, codeMaxNALocals[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNullSegment_eHqb3() {
        ClassBands classBands = new ClassBands(null);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNull(codeMaxNALocals);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptySegment_hrpk4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);
        assertEquals(0, codeMaxNALocals.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNullClassBands_dvQe6() {
        ClassBands classBands = null;
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNull(codeMaxNALocals);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptyClassBands_lmYZ7() {
        ClassBands classBands = new ClassBands(new Segment());
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);
        assertEquals(0, codeMaxNALocals.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFieldCount_tRUm0() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classFieldCount = classBands.getClassFieldCount();
        assertNotNull(classFieldCount);
        assertEquals(0, classFieldCount.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStack_oGsQ0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    assertEquals(codeMaxStack.length, 10);
    for (int i = 0; i < codeMaxStack.length; i++) {
        assertEquals(codeMaxStack[i], i);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStackWithNullSegment_LIKT1() {
    ClassBands classBands = new ClassBands(null);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    assertNull(codeMaxStack);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajor_iqnu0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {1, 2, 3};
    int[] actual = classBands.getClassVersionMajor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajorWithNullSegment_pDCV1() {
    Segment segment = null;
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {};
    int[] actual = classBands.getClassVersionMajor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajorWithEmptySegment_LJjI2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {};
    int[] actual = classBands.getClassVersionMajor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajorWithNonEmptySegmentAndZeroClassVersion_DWwm5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {0, 0, 0};
    int[] actual = classBands.getClassVersionMajor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajorWithNonEmptySegmentAndNegativeClassVersion_HtRZ6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] expected = new int[] {-1, -2, -3};
    int[] actual = classBands.getClassVersionMajor();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerEndPO_Jmiu0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
    assertNotNull(codeHandlerEndPO);
    assertEquals(10, codeHandlerEndPO.length);
    assertEquals(10, codeHandlerEndPO[0].length);
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            assertEquals(i * j, codeHandlerEndPO[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_empty_RxcW0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(0, codeHasAttributes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_nonEmpty_DIHm1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(1, codeHasAttributes.length);
    assertTrue(codeHasAttributes[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_null_pQSu2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertNull(codeHasAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_invalid_KYhD3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertNotNull(codeHasAttributes);
    assertEquals(0, codeHasAttributes.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_valid_lsFT4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertNotNull(codeHasAttributes);
    assertEquals(1, codeHasAttributes.length);
    assertTrue(codeHasAttributes[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_nullSegment_ByCV7() {
    Segment segment = null;
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertNull(codeHasAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Empty_wgof0() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(0, classInterfacesInts.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_SingleElement_aXlw1() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts.length);
    assertEquals(0, classInterfacesInts[0].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_MultipleElements_WrTQ2() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(2, classInterfacesInts.length);
    assertEquals(1, classInterfacesInts[0].length);
    assertEquals(1, classInterfacesInts[1].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Null_Uaxl3() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertNull(classInterfacesInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid4_ClOq7() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(3, classInterfacesInts.length);
    assertEquals(1, classInterfacesInts[0].length);
    assertEquals(1, classInterfacesInts[1].length);
    assertEquals(1, classInterfacesInts[2].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid5_fDet8() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(4, classInterfacesInts.length);
    assertEquals(1, classInterfacesInts[0].length);
    assertEquals(1, classInterfacesInts[1].length);
    assertEquals(1, classInterfacesInts[2].length);
    assertEquals(1, classInterfacesInts[3].length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerClassRCN_Onsp0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
    assertNotNull(codeHandlerClassRCN);
    assertEquals(10, codeHandlerClassRCN.length);
    assertEquals(10, codeHandlerClassRCN[0].length);
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            assertEquals(i * j, codeHandlerClassRCN[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedCodeAttributesSevenElements_jnEC7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    List<Attribute> expected = new ArrayList<>();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags_defaultLayout_jPKP0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(16, fieldFlags.length);
    for (int i = 0; i < 16; i++) {
        assertEquals(0x7FFF, fieldFlags[i].length);
        for (int j = 0; j < fieldFlags[i].length; j++) {
            assertEquals(0, fieldFlags[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags_nonDefaultLayout_LSat1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(16, fieldFlags.length);
    for (int i = 0; i < 16; i++) {
        assertEquals(0x7FFF, fieldFlags[i].length);
        for (int j = 0; j < fieldFlags[i].length; j++) {
            assertNotEquals(0, fieldFlags[i][j]);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags_nullFieldFlags_rzPC2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertNull(fieldFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags_emptyFieldFlags_odCB3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    assertEquals(0, fieldFlags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_KHnM0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], 0);
    assertEquals(classVersionMinor[1], 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_QPeb1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], 1);
    assertEquals(classVersionMinor[1], 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_AfIH2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], -1);
    assertEquals(classVersionMinor[1], -1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_LmFn4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], "invalid");
    assertEquals(classVersionMinor[1], "invalid");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithValidValues_ufIU5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], 1);
    assertEquals(classVersionMinor[1], 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMaxValues_eVcY6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], Integer.MAX_VALUE);
    assertEquals(classVersionMinor[1], Integer.MAX_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMinValues_WZBP7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);
    assertEquals(classVersionMinor[0], Integer.MIN_VALUE);
    assertEquals(classVersionMinor[1], Integer.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_VyFZ0_1_fid3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0_3_fid3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescrInts_jzmM0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] methodDescrInts = classBands.getMethodDescrInts();
        assertEquals(1, methodDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_yqhG0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertNotNull(codeHandlerStartP);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_yqhG0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerStartP.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_yqhG0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerStartP[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_qmaq0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals(methodDescr.length, 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_qmaq0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals(methodDescr[0].length, 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodDescr_qmaq0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        String[][] methodDescr = classBands.getMethodDescr();
        assertEquals(methodDescr[0][0], "getMethodDescr");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_NFvm0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertNotNull(fieldDescrInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_NFvm0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(1, fieldDescrInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_NFvm0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(1, fieldDescrInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrInts_NFvm0_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(1, fieldDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFieldDescrIntsWithEmptySegment_gsBO2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[][] fieldDescrInts = classBands.getFieldDescrInts();
        assertEquals(0, fieldDescrInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_rxPd0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_rxPd0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(1, codeMaxNALocals.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocals_rxPd0_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(0, codeMaxNALocals[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNonZeroValue_PYzh1_3() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(1, codeMaxNALocals[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithMultipleValues_mqwg2_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(2, codeMaxNALocals.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithMultipleValues_mqwg2_4() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(1, codeMaxNALocals[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptySegment_hrpk4_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(0, codeMaxNALocals.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptyClassBands_lmYZ7_1() {
        ClassBands classBands = new ClassBands(new Segment());
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertNotNull(codeMaxNALocals);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithEmptyClassBands_lmYZ7_2() {
        ClassBands classBands = new ClassBands(new Segment());
        int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
        assertEquals(0, codeMaxNALocals.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodeMaxNALocalsWithNullSegmentAndClassBands_qdcP9() {
        ClassBands classBands = new ClassBands(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFieldCount_tRUm0_1() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classFieldCount = classBands.getClassFieldCount();
        assertNotNull(classFieldCount);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassFieldCount_tRUm0_2() {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment);
        int[] classFieldCount = classBands.getClassFieldCount();
        assertEquals(0, classFieldCount.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxStack_oGsQ0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] codeMaxStack = classBands.getCodeMaxStack();
    for (int i = 0; i < codeMaxStack.length; i++) {
    }
    assertEquals(codeMaxStack.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerEndPO_Jmiu0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertNotNull(codeHandlerEndPO);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerEndPO_Jmiu0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerEndPO.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerEndPO_Jmiu0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerEndPO = classBands.getCodeHandlerEndPO();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerEndPO[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_nonEmpty_DIHm1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertEquals(1, codeHasAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_nonEmpty_DIHm1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertTrue(codeHasAttributes[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHasAttributes_invalid_KYhD3_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    boolean[] codeHasAttributes = classBands.getCodeHasAttributes();
    assertNotNull(codeHasAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_SingleElement_aXlw1_1() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_SingleElement_aXlw1_2() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(0, classInterfacesInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_MultipleElements_WrTQ2_1() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(2, classInterfacesInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_MultipleElements_WrTQ2_2() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_MultipleElements_WrTQ2_3() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts[1].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid4_ClOq7_1() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(3, classInterfacesInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid4_ClOq7_4() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts[2].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid5_fDet8_1() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(4, classInterfacesInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassInterfacesInts_Invalid5_fDet8_5() {
    ClassBands classBands = new ClassBands(new Segment());
    int[][] classInterfacesInts = classBands.getClassInterfacesInts();
    assertEquals(1, classInterfacesInts[3].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerClassRCN_Onsp0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertNotNull(codeHandlerClassRCN);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerClassRCN_Onsp0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerClassRCN.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerClassRCN_Onsp0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[][] codeHandlerClassRCN = classBands.getCodeHandlerClassRCN();
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
        }
    }
    assertEquals(10, codeHandlerClassRCN[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldFlags_defaultLayout_jPKP0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[][] fieldFlags = classBands.getFieldFlags();
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < fieldFlags[i].length; j++) {
        }
    }
    assertEquals(16, fieldFlags.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_KHnM0_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor.length, 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_KHnM0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinor_KHnM0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_QPeb1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNonZeroValues_QPeb1_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_AfIH2_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], -1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNegativeValues_AfIH2_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], -1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_LmFn4_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], "invalid");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithInvalidValues_LmFn4_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], "invalid");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithValidValues_ufIU5_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMaxValues_eVcY6_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], Integer.MAX_VALUE);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMaxValues_eVcY6_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], Integer.MAX_VALUE);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMinValues_WZBP7_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[0], Integer.MIN_VALUE);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithMinValues_WZBP7_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertEquals(classVersionMinor[1], Integer.MIN_VALUE);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_aixc0_XGKX0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] expected = new long[0];
    long[] actual = classBands.getRawClassFlags();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithNullArray_Ypho2_Npvj1() {
    ClassBands classBands = new ClassBands(null);
    long[] expected = null;
    long[] actual = classBands.getRawClassFlags();
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlagsWithNonEmptyArray_WufJ1_IDov0() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    long[] expected = new long[] {1, 2, 3};
    long[] actual = classBands.getRawClassFlags();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCountWithNonEmptySegment_YGyl1_KcLX1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classMethodCount = classBands.getClassMethodCount();
    assertEquals(1, classMethodCount.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithMultipleSegments_PbZB4_nXYj0() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    classBands.unpack();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldDescrIntsWithMultipleSegments_jZSy3_GWDY0_1() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] fieldDescrInts = classBands.getFieldDescrInts();
    assertNotNull(fieldDescrInts);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldDescrIntsWithMultipleSegments_jZSy3_GWDY0_2() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] fieldDescrInts = classBands.getFieldDescrInts();
    assertEquals(1, fieldDescrInts.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldDescrIntsWithMultipleSegments_jZSy3_GWDY0_3() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] fieldDescrInts = classBands.getFieldDescrInts();
    assertEquals(1, fieldDescrInts[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldDescrIntsWithMultipleSegments_jZSy3_GWDY0_4() {
    Segment segment1 = new Segment();
    Segment segment2 = new Segment();
    ClassBands classBands = new ClassBands(segment1);
    int[][] fieldDescrInts = classBands.getFieldDescrInts();
    assertEquals(1, fieldDescrInts[0][0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullValues_MZDX3_yXBv0_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMinorWithNullValues_MZDX3_yXBv0_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    int[] classVersionMinor = classBands.getClassVersionMinor();
    assertNull(classVersionMinor[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertNotNull(methodAttributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(2, methodAttributes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_3() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(2, methodAttributes[0].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_4() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(1, methodAttributes[0][0].size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_5() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals("Attribute1", methodAttributes[0][0].get(0).toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_6() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(1, methodAttributes[0][1].size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals("Attribute2", methodAttributes[0][1].get(0).toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_8() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(1, methodAttributes[1].length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_9() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals(1, methodAttributes[1][0].size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributesWithMultipleAttributesAndMethods_pYWq3_uiZj1_10() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment);
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertEquals("Attribute3", methodAttributes[1][0].get(0).toString());}
}