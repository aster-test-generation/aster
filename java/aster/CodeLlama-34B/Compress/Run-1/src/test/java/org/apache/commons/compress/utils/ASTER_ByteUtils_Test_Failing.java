/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithOffset_IREa1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0506070801020304L;
    long actual = ByteUtils.fromLittleEndian(bytes, 4, 4);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithInvalidOffset_reXz2() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0102030405060708L;
    long actual = ByteUtils.fromLittleEndian(bytes, -1, 4);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithInvalidLength_HFDW3() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0102030405060708L;
    long actual = ByteUtils.fromLittleEndian(bytes, 4, -1);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithNullBytes_nJup5() {
    byte[] bytes = null;
    long expected = 0L;
    long actual = ByteUtils.fromLittleEndian(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithInvalidOffset_reXz2_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    long expected = 0x0102030405060708L;
    long actual = ByteUtils.fromLittleEndian(bytes, 0, 4);
    assertEquals(expected, actual);
}
}