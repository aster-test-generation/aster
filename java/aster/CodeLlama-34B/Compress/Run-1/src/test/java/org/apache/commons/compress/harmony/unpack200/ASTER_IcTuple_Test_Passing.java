/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_KTer0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int expectedHashCode = 123456789;
    int actualHashCode = tuple.hashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_True_eUUk0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.nestedExplicitFlagSet());
}
@Test
@Timeout(value =-1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_1_ZJDw0() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N",-1, 2, 3, 4);
    assertEquals(1, tuple.outerClassIndex());
}
@Test
@Timeout(value =-1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_1_CKeB0() {
    IcTuple tuple = new IcTuple("C",-1, "C2", "N",-1, 2, 3, 4);
    assertEquals(1, tuple.simpleClassNameIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_True_LPKF0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_False_TAHq1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 1);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymous_Null_fXQf2() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_True_AKnl0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_False_FXOB1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_Null_gNUO2() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_Invalid_QOto4() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_NullC2_lpcS5() {
    IcTuple tuple = new IcTuple("C", 1, null, "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_EmptyC2_NsSY6() {
    IcTuple tuple = new IcTuple("C", 1, "", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_InvalidC2_CKuq7() {
    IcTuple tuple = new IcTuple("C", 1, "Invalid", "N", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_NullN_jReR8() {
    IcTuple tuple = new IcTuple("C", 1, "C2", null, 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_EmptyN_ySeR9() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymous_InvalidN_isOS10() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "Invalid", 0, 0, 0, 0);
    assertFalse(tuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_evdP0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int actual = tuple.thisClassIndex();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedFalse_WHoK1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    int actual = tuple.thisClassIndex();
    assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_cIndexZero_Lfbr2() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 2, 3, 4);
    int actual = tuple.thisClassIndex();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedTrue_cIndexNegative_zqQN3() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", -1, 2, 3, 4);
    int actual = tuple.thisClassIndex();
    assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testThisClassIndex_predictedFalse_cIndexZero_dbay4() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 2, 3, 4);
    int actual = tuple.thisClassIndex();
    assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_True_pZwW0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_False_oKhu1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 0);
    assertTrue(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Empty_vyOR3() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC_ufqG4() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 1, 1, 1, 1);
    assertTrue(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidC2_eCif5() {
    IcTuple tuple = new IcTuple("C", 1, "Invalid", "N", 1, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidN_grda6() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "Invalid", 1, 1, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidcIndex_VPkV7() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 1, 1, 1);
    assertTrue(tuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_Invalidc2Index_BunV8() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 0, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMember_InvalidnIndex_maaX9() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetN_hRUK0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("N", tuple.getN());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_CFzq0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_JoBq1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 0, 0, 0);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_ZAuf2() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 1, 0, 0);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_IsRH3() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 1, 0);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_fsIW4() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 1);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_xiYu5() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
    String expected = "IcTuple (N in C2)";
    assertEquals(expected, tuple.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetC_mFmC0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithEmptyString_Jyig2() {
    IcTuple tuple = new IcTuple("", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithInvalidString_mxBi3() {
    IcTuple tuple = new IcTuple("Invalid", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("Invalid", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithValidString_FTxK4() {
    IcTuple tuple = new IcTuple("Valid", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("Valid", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithDifferentCase_gSAj5() {
    IcTuple tuple = new IcTuple("c", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("c", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithSpecialCharacters_IlnN7() {
    IcTuple tuple = new IcTuple("!@#$%^&*()_+", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("!@#$%^&*()_+", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithLongString_bxce8() {
    IcTuple tuple = new IcTuple("This is a very long string", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals("This is a very long string", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithNullC2_Kbit10() {
    IcTuple tuple = new IcTuple("C", 1, null, "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithEmptyC2_fQnQ11() {
    IcTuple tuple = new IcTuple("C", 1, "", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithInvalidC2_QcZe12() {
    IcTuple tuple = new IcTuple("C", 1, "Invalid", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCWithValidC2_lHzO13() {
    IcTuple tuple = new IcTuple("C", 1, "Valid", "N", 1, 2, 3, 4);
    assertEquals("C", tuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_pEcf0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result = tuple.outerClassString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_1() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C2", result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_2() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
    assertEquals("C2", result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_Bpej1_3() {
    IcTuple tuple1 = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    String result1 = tuple1.outerClassString();
    IcTuple tuple2 = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    String result2 = tuple2.outerClassString();
    IcTuple tuple3 = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    String result3 = tuple3.outerClassString();
    IcTuple tuple4 = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    String result4 = tuple4.outerClassString();
    IcTuple tuple5 = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    String result5 = tuple5.outerClassString();
    IcTuple tuple6 = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    String result6 = tuple6.outerClassString();
    IcTuple tuple7 = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    String result7 = tuple7.outerClassString();
    IcTuple tuple8 = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    String result8 = tuple8.outerClassString();
    IcTuple tuple9 = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    String result9 = tuple9.outerClassString();
    IcTuple tuple10 = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    String result10 = tuple10.outerClassString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C1_uWhW0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(1, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C2_trBZ1() {
    IcTuple tuple = new IcTuple("C", 2, "C2", "N", 1, 2, 3, 4);
    assertEquals(2, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C3_REzm2() {
    IcTuple tuple = new IcTuple("C", 3, "C2", "N", 1, 2, 3, 4);
    assertEquals(3, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C4_yTWD3() {
    IcTuple tuple = new IcTuple("C", 4, "C2", "N", 1, 2, 3, 4);
    assertEquals(4, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C5_sQGU4() {
    IcTuple tuple = new IcTuple("C", 5, "C2", "N", 1, 2, 3, 4);
    assertEquals(5, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C6_DwwO5() {
    IcTuple tuple = new IcTuple("C", 6, "C2", "N", 1, 2, 3, 4);
    assertEquals(6, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C7_NZdr6() {
    IcTuple tuple = new IcTuple("C", 7, "C2", "N", 1, 2, 3, 4);
    assertEquals(7, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C8_rahx7() {
    IcTuple tuple = new IcTuple("C", 8, "C2", "N", 1, 2, 3, 4);
    assertEquals(8, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C9_XSBT8() {
    IcTuple tuple = new IcTuple("C", 9, "C2", "N", 1, 2, 3, 4);
    assertEquals(9, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C10_ikqj9() {
    IcTuple tuple = new IcTuple("C", 10, "C2", "N", 1, 2, 3, 4);
    assertEquals(10, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C11_snFI10() {
    IcTuple tuple = new IcTuple("C", 11, "C2", "N", 1, 2, 3, 4);
    assertEquals(11, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C12_XdBq11() {
    IcTuple tuple = new IcTuple("C", 12, "C2", "N", 1, 2, 3, 4);
    assertEquals(12, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C13_DfZU12() {
    IcTuple tuple = new IcTuple("C", 13, "C2", "N", 1, 2, 3, 4);
    assertEquals(13, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetF_C14_KYuL13() {
    IcTuple tuple = new IcTuple("C", 14, "C2", "N", 1, 2, 3, 4);
    assertEquals(14, tuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_1_nkwo0() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
    assertEquals(4, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_2_OafW1() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 5);
    assertEquals(5, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_3_oKUQ2() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 6);
    assertEquals(6, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_4_UrKy3() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 7);
    assertEquals(7, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_5_muPx4() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 8);
    assertEquals(8, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_6_EoxQ5() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 9);
    assertEquals(9, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_7_MHXV6() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 10);
    assertEquals(10, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_8_lKWZ7() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 11);
    assertEquals(11, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_9_ReHH8() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 12);
    assertEquals(12, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_10_esfa9() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 13);
    assertEquals(13, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_11_TNYi10() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 14);
    assertEquals(14, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_12_Vwxg11() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 15);
    assertEquals(15, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_13_XIvz12() {
    IcTuple tuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 16);
    assertEquals(16, tuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_EmptyString_TMNd0() {
    IcTuple tuple = new IcTuple("", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("");
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleCharacter_txpw1_1() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleCharacter_txpw1_2() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals("a", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleCharacter_txpw1() {
    IcTuple tuple = new IcTuple("a", 0, "", "", 0, 0, 0, 0);
    String[] result = tuple.innerBreakAtDollar("a");
    assertEquals(1, result.length);
    assertEquals("a", result[0]);
}
}