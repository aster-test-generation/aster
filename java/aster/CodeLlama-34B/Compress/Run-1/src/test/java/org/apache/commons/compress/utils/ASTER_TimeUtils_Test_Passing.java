/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_unixTime_YwXZ0() {
    FileTime time = FileTime.fromMillis(1000);
    assertTrue(TimeUtils.isUnixTime(time));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_ValidSeconds_TfVy0() {
    long seconds = 1000000000L;
    assertTrue(TimeUtils.isUnixTime(seconds));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_NullDate_XNzq0() {
    Date date = null;
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_Uljn1() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNotNull(fileTime);
    assertEquals(date.getTime(), fileTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_nullFileTime_pEtu0() {
    long result = TimeUtils.toUnixTime(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToUnixTime_validFileTime_zSgt1() {
    FileTime fileTime = FileTime.from(Instant.now());
    long result = TimeUtils.toUnixTime(fileTime);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_nullFileTime_eYxk0() {
    assertNull(TimeUtils.toDate(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_validFileTime_AdFm1() {
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    Date expectedDate = new Date(fileTime.toMillis());
    Date actualDate = TimeUtils.toDate(fileTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_dqQX0() {
    Date date = new Date();
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTimeBeforeNtfsEpoch_ZeUg1() {
    Date date = new Date(0);
    long expected = FileTimes.toNtfsTime(date);
    long actual = TimeUtils.toNtfsTime(date);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_Uljn1_1() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToFileTime_ValidDate_Uljn1_2() {
    Date date = new Date();
    FileTime fileTime = TimeUtils.toFileTime(date);
    assertEquals(date.getTime(), fileTime.toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_nonUnixTime_rZyi1_fid2() {
    FileTime time = FileTime.fromMillis(1000);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixTime_InvalidSeconds_YBFJ1_fid2() {
    long seconds = -1000000000L;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToDate_invalidFileTime_jRqH2_fid2() {
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000000000L);
    Date expectedDate = new Date(fileTime.toMillis());
    Date actualDate = TimeUtils.toDate(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_HAdI0_fid2() {
    long ntfsTime = 1234567890;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_zero_zvnA1_fid2() {
    long ntfsTime = 0;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToFileTime_negative_ertP2_fid2() {
    long ntfsTime = -1;
    FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnixTimeToFileTime_ValidInput_Ibax0_fid2() {
    long time = 1000000000;
    FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_YJes0_fid2() {
    long javaTime = 1000000000000L;
    long expectedNtfsTime = 116444736000000000L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_zero_ylKZ1_fid2() {
    long javaTime = 0L;
    long expectedNtfsTime = 0L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_negative_poCu2_fid2() {
    long javaTime = -1000000000000L;
    long expectedNtfsTime =106444736000000000L;
    long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithNegativeValue_vvbu1_fid2() {
    long ntfsTime = -1234567890;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithZeroValue_UXkG2_fid2() {
    long ntfsTime = 0;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToDateWithMaxValue_ZZEm3_fid2() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = new Date(ntfsTime * 1000);
    Date actual = TimeUtils.ntfsTimeToDate(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToHundredNanos_6_JrBf5_fid2() {
    FileTime fileTime = FileTime.from(Instant.ofEpochSecond(1000, 1000));
    FileTime result = TimeUtils.truncateToHundredNanos(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToNtfsTime_xuSF0_BCoB0_fid2() {
    FileTime fileTime = FileTime.fromMillis(1000000000000L);
    long expected =126444736000000000L;
    long actual = TimeUtils.toNtfsTime(fileTime);
    assertEquals(expected, actual);
}
}