/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_UQTZ0() {
        List<String> list = Lists.newArrayList();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayListWithNonEmptyIterator_xbpy1_1() {
        Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
        List<String> list = Lists.newArrayList(iterator);
        assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayListWithNonEmptyIterator_xbpy1_2() {
        Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
        List<String> list = Lists.newArrayList(iterator);
        assertEquals("a", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayListWithNonEmptyIterator_xbpy1_3() {
        Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
        List<String> list = Lists.newArrayList(iterator);
        assertEquals("b", list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayListWithNonEmptyIterator_xbpy1_4() {
        Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
        List<String> list = Lists.newArrayList(iterator);
        assertEquals("c", list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithEmptyCollection_pUTn9_QEED0() {
    Collection<String> collection = new ArrayList<>();
    List<String> list = Lists.newArrayList(collection.iterator());
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithNonEmptyCollection_tUlW10_iOvt0_1() {
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    List<String> list = Lists.newArrayList(collection.iterator());
    assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithNonEmptyCollection_tUlW10_iOvt0_2() {
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    List<String> list = Lists.newArrayList(collection.iterator());
    assertEquals("a", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithNonEmptyCollection_tUlW10_iOvt0_3() {
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    List<String> list = Lists.newArrayList(collection.iterator());
    assertEquals("b", list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithNonEmptyCollection_tUlW10_iOvt0_4() {
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    List<String> list = Lists.newArrayList(collection.iterator());
    assertEquals("c", list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithNullCollection_eVci11_WLeA0() {
    Collection<String> collection = null;
    List<String> list = Lists.newArrayList();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewArrayListWithEmptyIterator_Ctol1_qoVz1() {
    Iterator<String> iterator = (Iterator<String>) Arrays.asList("").iterator();
    List<String> list = Lists.newArrayList(iterator);
    assertEquals(1, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayListWithNonEmptyIterator_xbpy1() {
        Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
        List<String> list = Lists.newArrayList(iterator);
        assertEquals(3, list.size());
        assertEquals("a", list.get(0));
        assertEquals("b", list.get(1));
        assertEquals("c", list.get(2));
    }
}