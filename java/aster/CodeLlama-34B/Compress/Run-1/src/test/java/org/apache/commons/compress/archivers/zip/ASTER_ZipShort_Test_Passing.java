/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShortWithByteArrayAndOffset_dmAN0() {
    byte[] bytes = new byte[2];
    int value = 0x1234;
    int offset = 0;
    ZipShort.putShort(value, bytes, offset);
    assertArrayEquals(new byte[] {0x34, 0x12}, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShortWithIntAndOffset_BAum2() {
    int value = 0x1234;
    byte[] bytes = new byte[2];
    int offset = 0;
    ZipShort.putShort(value, bytes, offset);
    assertArrayEquals(new byte[] {0x34, 0x12}, bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_dwZX1() {
    int value = 0x0102;
    ZipShort zipShort = new ZipShort(value);
    assertEquals(0x0102, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes1_iCnF0() {
    byte[] expected = {0x01, 0x02};
    ZipShort zipShort = new ZipShort(expected, 0);
    byte[] actual = zipShort.getBytes();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes2_DkIH1() {
    byte[] expected = {0x03, 0x04};
    ZipShort zipShort = new ZipShort(expected);
    byte[] actual = zipShort.getBytes();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_MrjF2() {
    byte[] expected = {0x05, 0x06};
    ZipShort zipShort = new ZipShort(expected, 0);
    byte[] actual = zipShort.getBytes();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_intValue_CRwV0() {
    ZipShort zipShort = new ZipShort(10);
    assertEquals(10, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_LittleEndian_sDfv0() {
    byte[] bytes = {0x01, 0x02, 0x03, 0x04};
    int offset = 0;
    int expected = 0x0201;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_BigEndian_Gkir1() {
    byte[] bytes = {0x01, 0x02, 0x03, 0x04};
    int offset = 2;
    int expected = 0x0403;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_tsgf0() {
    ZipShort zipShort = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    assertTrue(zipShort.equals(zipShort));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_UMYX1() {
    ZipShort zipShort1 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    ZipShort zipShort2 = new ZipShort(new byte[] { 0x03, 0x04 }, 0);
    assertFalse(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_String_Uadn6() {
    ZipShort zipShort = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    assertFalse(zipShort.equals("hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_dZTN0() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, 0);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentOffset_mtag1() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 }, 1);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentValue_wwjQ2() {
    ZipShort zipShort = new ZipShort(100);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentBytes_nLtT3() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4 });
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidValue_VlsG8() {
    ZipShort zipShort = new ZipShort(1000000000);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithInvalidBytes_nBax9() {
    ZipShort zipShort = new ZipShort(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithNegativeValue_jrdI12() {
    ZipShort zipShort = new ZipShort(-100);
    ZipShort clone = (ZipShort) zipShort.clone();
    assertEquals(zipShort, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_YZoH0_fid1() {
    byte[] bytes = new byte[] {0x01, 0x02};
    int offset = 0;
    ZipShort zipShort = new ZipShort(bytes, offset);
    assertEquals(513, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_OYFG2_fid1() {
    byte[] bytes = new byte[] {0x01, 0x02};
    ZipShort zipShort = new ZipShort(bytes);
    assertEquals(513, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_byteArray_KEOR1_fid1() {
    byte[] bytes = new byte[] {1, 2, 3, 4, 5};
    ZipShort zipShort = new ZipShort(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArrayAndOffset_iANK0_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    int offset = 1;
    ZipShort zipShort = new ZipShort(bytes, offset);
    String expected = "ZipShort value: 0x0203";
    String actual = zipShort.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithIntValue_vovr1_fid1() {
    int value = 0x0102;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0x0102";
    String actual = zipShort.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_EggJ2_fid1() {
    byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    ZipShort zipShort = new ZipShort(bytes);
    String expected = "ZipShort value: 513";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithZeroValue_KkdH3_fid1() {
    int value = 0;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0";
    String actual = zipShort.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNegativeValue_BCfN4_fid1() {
    int value = -1;
    ZipShort zipShort = new ZipShort(value);
    String expected = "ZipShort value: 0xFFFF";
    String actual = zipShort.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentOffsets_Kqpk4_fid1() {
    ZipShort zipShort1 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    ZipShort zipShort2 = new ZipShort(new byte[] { 0x01, 0x02 }, 0);
    assertTrue(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_1_Iton0_fid1() {
    byte[] bytes = new byte[] {0x01, 0x02};
    int expected = 0x0201;
    int actual = ZipShort.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_2_RERF1_fid1() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_3_AjsB2_fid1() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 0x0304;
    int actual = ZipShort.getValue(bytes, 2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_5_DTUJ4() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 1027;
    int actual = ZipShort.getValue(bytes, 2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_10_qNkD9() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int expected = 513;
    int actual = ZipShort.getValue(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShortWithByteArray_EXlX1_opvF0() {
    byte[] bytes = new byte[2];
    int value = 0x1234;
    ZipShort.putShort(value, bytes, 0);
    assertArrayEquals(new byte[] {0x34, 0x12}, bytes);
}
}