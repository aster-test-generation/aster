/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.FileTime;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Passing {
public void testSetNames_Yptv0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithNullUser_pjfi1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames(null, "group");
assertNull(entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithNullGroup_piDk2() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", null);
assertEquals("user", entry.getUserName());
assertNull(entry.getGroupName());
}
public void testSetNamesWithEmptyUser_CLrd3() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("", "group");
assertEquals("", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithEmptyGroup_vLOi4() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "");
assertEquals("user", entry.getUserName());
assertEquals("", entry.getGroupName());
}
public void testSetNamesWithInvalidUser_gPSr5() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithInvalidGroup_VRCa6() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithInvalidUserAndGroup_qlfP7() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithValidUserAndGroup_vDia8() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithValidUserAndInvalidGroup_SUiH9() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor1_MyKO0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor2_vQNx1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_mFkt0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    Date date = new Date();
    tarArchiveEntry.setModTime(date);
    assertEquals(FileTimes.toFileTime(date), tarArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithHeaderBuf_OndE4() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
    Date date = new Date();
    tarArchiveEntry.setModTime(date);
    assertEquals(FileTimes.toFileTime(date), tarArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTime_qvSS0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithFile_cDrF1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithName_ynRl3() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithNameAndPreserveAbsolutePath_SCIk4() {
    String name = "test.txt";
    boolean preserveAbsolutePath = true;
    TarArchiveEntry entry = new TarArchiveEntry(name, preserveAbsolutePath);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithHeaderBuf_aSGG5() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModTimeWithLinkFlag_kABf10() {
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", linkFlag);
    Date modTime = entry.getModTime();
    assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_defaultEncoding_qUhs0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = new byte[512];
    entry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    assertEquals(512, header.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupId_qVem1002() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(1002, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupIdWithName_uvje6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupIdWithNameAndPreserveAbsolutePath_nlLF7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupIdWithFile_FOHl8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupIdWithFileAndFileName_wymo9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xData_eOFx0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithName_qxnm1_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithName_qxnm1_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyName_Tgmt2_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyName_Tgmt2_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "");
    entry.fillGNUSparse0xData(headers);
    assertEquals("", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullName_KOOK3_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, null);
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullName_KOOK3_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, null);
    entry.fillGNUSparse0xData(headers);
    assertNull(entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithZeroSize_oqsq6() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "0");
    entry.fillGNUSparse0xData(headers);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_1_PjCw0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
    assertEquals(entry.getLinkFlag(), (byte)48);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_aMPN0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file.txt"));
Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate2_Fiit1() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file.txt"), "file.txt");
Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMajor_valid_nIpn0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setDevMajor(10);
    assertEquals(10, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_ValidOffset_kTht0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(100);
    assertEquals(100, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_ZeroOffset_AmUz3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(0);
    assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_CXQJ0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_XVys0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNull_widd1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = null;
    tarArchiveEntry.setCreationTime(fileTime);
    assertNull(tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_OROO2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithValidFileTime_mlRR3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithZeroFileTime_DNQD5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(0);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMaxFileTime_thLa6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(Long.MAX_VALUE);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithMinFileTime_WRqu7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(Long.MIN_VALUE);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFile_wSeE8() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    tarArchiveEntry.setCreationTime(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_tpQu0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_gCOv1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_normal_mYZk0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("new_name");
    assertEquals("new_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_empty_cpiO4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_OLAP5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setName("invalid_name");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name: invalid_name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_nMkO0_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_nMkO0_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithName_jHbY6_1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithName_jHbY6_2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithNameAndPreserveAbsolutePath_qmXz7_1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithNameAndPreserveAbsolutePath_qmXz7_2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithFile_nrDH8_1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithFile_nrDH8_2() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_HsfU0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(1000);
    assertEquals(1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithNegativeValue_KQfk1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(-1);
    assertEquals(-1, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithZeroValue_jCZu2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(0);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_StringConstructor_SeFO5() {
    String name = "test";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_StringConstructor_PreserveAbsolutePath_VGDN6() {
    String name = "test";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_FileConstructor_xAab7() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_FileConstructor_FileName_rphz8() {
    File file = new File("test.txt");
    String fileName = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(file, fileName);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsNonNull_HCxC0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsFileTime_sXPl1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertTrue(statusChangeTime instanceof FileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTime_dEwv2() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime statusChangeTime = entry.getStatusChangeTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForDirectory_HUkN3() {
    File directory = new File("test");
    TarArchiveEntry entry = new TarArchiveEntry(directory);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertEquals(directory.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForSymbolicLink_tncL4() {
    File link = new File("test.link");
    TarArchiveEntry entry = new TarArchiveEntry(link);
    FileTime statusChangeTime = entry.getStatusChangeTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupName_hEje0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("test");
    assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithEmptyString_SEwf1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("");
    assertEquals("", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithNull_TmRK2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName(null);
    assertNull(entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithLongString_vuAq3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a very long string that is longer than 32 characters");
    assertEquals("This is a very long string that is longer than 32 characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithInvalidCharacters_tHJw4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with invalid characters");
    assertEquals("This is a string with invalid characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithValidCharacters_zPKH5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with valid characters");
    assertEquals("This is a string with valid characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithDifferentCases_lQUV6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with different cases");
    assertEquals("This is a string with different cases", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithWhitespace_hAAL7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with whitespace");
    assertEquals("This is a string with whitespace", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithSpecialCharacters_LAUx8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with special characters");
    assertEquals("This is a string with special characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupNameWithUnicodeCharacters_wpGW9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupName("This is a string with unicode characters");
    assertEquals("This is a string with unicode characters", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserName_kwEE0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setUserName("test_user");
    assertEquals("test_user", tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameWithEmptyString_AYAn1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setUserName("");
    assertEquals("", tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameWithNull_VIfS2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setUserName(null);
    assertNull(tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameWithDifferentCase_onNg7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setUserName("TEST_USER");
    assertEquals("TEST_USER", tarArchiveEntry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserNameWithDifferentCaseAndDifferentNameAndValidName_GtqM13() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders1_hoMF0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.clearExtraPaxHeaders();
assertTrue(entry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClearExtraPaxHeaders2_VlgV1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
entry.clearExtraPaxHeaders();
assertTrue(entry.getExtraPaxHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithFile_OPsg7() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_nonNullFile_CHdb3() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_directory_ncXa4() {
    File directory = new File("test");
    directory.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(directory, "test");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_nameEndsWithSlash_CpJa2() throws IOException {
    String name = "directory/";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_FOaK0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(1000);
    assertEquals(1000, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNegativeValue_AJij1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(-1);
    assertEquals(-1, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithZeroValue_MLEF2() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(0);
    assertEquals(0, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_1_QPYC0_1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    headers.put(TarGnuSparseKeys.REALSIZE, "100");
    entry.fillGNUSparse1xData(headers);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_1_QPYC0_2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    headers.put(TarGnuSparseKeys.REALSIZE, "100");
    entry.fillGNUSparse1xData(headers);
    assertEquals(100, entry.getRealSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNameAndLinkFlag_TyAe5() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNameAndLinkFlagAndPreserveAbsolutePath_AxRO6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 0, true);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFile_jEeP8() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader1_CLbn0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader2_NTzr1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, true);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader3_RzFy2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader4_vFTR3() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, true);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_1_dfPv0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_2_DEKq1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test_header");
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_9_BrWk8() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test_name");
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_10_YPer9() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test_name", (byte) 0);
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_EmptyHeaders_ZpgG0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(new HashMap<>());
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_SingleHeader_OTWm1() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.tar");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals("test.tar", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_MultipleHeaders_XoVL2_1() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.tar");
    headers.put("size", "100");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals("test.tar", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_MultipleHeaders_XoVL2_2() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "100");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals(100, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_InvalidHeader_JWhP3() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "invalid");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(headers);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Unable to parse long from string value: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_EmptyHeadersMap_wNnc6() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(new HashMap<>());
        assertEquals(0, entry.getRealSize());
    } catch (IOException e) {
        fail("Expected IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_FileConstructor_uqCL1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_Pglw3() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructorWithPreserveAbsolutePath_neYW8() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNUSparse_NullEntry_KkON1() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertFalse(entry.isPaxGNUSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithName_rjci5() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt");
        entry.setLinkName("link");
        assertEquals("link", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithNameAndPreserveAbsolutePath_gDwW6() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
        entry.setLinkName("link");
        assertEquals("link", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithFile_KoZD7() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file);
        entry.setLinkName("link");
        assertEquals("link", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithFileAndFileName_SODL8() throws IOException {
        File file = new File("test.txt");
        TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
        entry.setLinkName("link");
        assertEquals("link", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName_emptyString_GRQb3() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("");
        assertEquals("", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNonZeroGroupId_HASW1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupId(1234);
    assertEquals(1234, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNegativeGroupId_aKdn2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupId(-1234);
    assertEquals(-1234, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithMaxIntGroupId_zLjt3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupId(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithMinIntGroupId_mvBb4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setGroupId(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithEmptyFile_jlpD6() {
    TarArchiveEntry entry = new TarArchiveEntry(new File(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithInvalidFile_zShd7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("invalid"));
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithEmptyEncoding_FRyn9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithInvalidEncoding_rXQQ11002() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "invalid");
    assertEquals(1002, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_1_EuMK1002() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(1002, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_2_VRoa1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(1002, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_6_vEUt5() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_7_lhmc6() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, false);
    assertEquals(0, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_9_FmtJ8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(1002, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_NullFile_UYSD0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_EmptyFile_zfOF1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File(""), "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(23, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_NonDirectoryFile_mPrV2() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFileWithSubdirectories_YGZl4_1() {
    File file = new File("test");
    file.mkdir();
    File subdir = new File(file, "subdir");
    subdir.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime1_YNUY0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime2_kppV1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime7_gfLg6() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
    FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime8_NXmW7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", true);
    FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
    assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(2, entry.getSparseHeaders().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0_2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(10, entry.getSparseHeaders().get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0_3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(20, entry.getSparseHeaders().get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0_4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(30, entry.getSparseHeaders().get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0_5() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(40, entry.getSparseHeaders().get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_WUod0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime time = FileTime.fromMillis(1234567890);
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_yQdm1002() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertEquals(1002, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithName_PRqn7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserIdWithNameAndPreserveAbsolutePath_cKDR8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset2_dySx1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
assertEquals(-1, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNegativeValue_RazS1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(-1000);
    assertEquals(-1000, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMaxValue_Pxfw3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMinValue_Cxnj4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithInvalidValue_BGru5() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(Integer.MAX_VALUE + 1);
        assertEquals(Integer.MAX_VALUE + 1, tarArchiveEntry.getGroupId());
    } catch (IllegalArgumentException e) {
        fail("Unexpected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinor_McHb0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    assertEquals(10, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorNegative_xDva1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setDevMinor(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Minor device number is out of range: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorDirectory_sQGp2_1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(0);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_CJsv0() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
tarArchiveEntry.setModTime(1000000000);
assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNegativeValue_AVDU1() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
tarArchiveEntry.setModTime(-1000000000);
assertEquals(-1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithZeroValue_rrJk2() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
tarArchiveEntry.setModTime(0);
assertEquals(0, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithMaxValue_RGdu3() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
tarArchiveEntry.setModTime(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithMinValue_YnLC4() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
tarArchiveEntry.setModTime(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithEmptyFile_uAKR6() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File(""));
tarArchiveEntry.setModTime(1000000000);
assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNonExistentFile_VUhG7() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("nonExistentFile.txt"));
tarArchiveEntry.setModTime(1000000000);
assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithInvalidFile_CEuU8() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("invalidFile.txt"));
tarArchiveEntry.setModTime(1000000000);
assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithValidFile_qvZm9() {
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("validFile.txt"));
tarArchiveEntry.setModTime(1000000000);
assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserNameWithName_UTZl7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertEquals("", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserNameWithNameAndPreserveAbsolutePath_bfhN8() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    assertEquals("", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor1_AEYy0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor2_quRh1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor6_Omoa5() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor7_qwAq6() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, false);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor9_CRmi8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_QeUl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithName_RgFl2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    FileTime creationTime = entry.getCreationTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithHeaderBuf_fRxt4() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    FileTime creationTime = entry.getCreationTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithFile_WaXb9() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithFileAndFileName_KBMz10() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_iDOn0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonZeroSize_JrGL1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_pNUi2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithLargeSize_AlcN4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithEmptyFile_ucgh7() {
    TarArchiveEntry entry = new TarArchiveEntry(new File(""));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonExistentFile_MGrk8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("non-existent.txt"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithDirectory_VExB9() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-dir"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithSymbolicLink_fLts10() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-link"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithPipe_lmqi11() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-pipe"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithSocket_LwJw12() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-socket"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithBlockDevice_gJfB13() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-block-device"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithCharacterDevice_yDbF14() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-character-device"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithFIFO_DnDT15() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-fifo"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithSymbolicLinkToFile_PYhh16() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-link-to-file"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithSymbolicLinkToDirectory_HhWd17() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test-link-to-directory"));
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCheckSumOK_True_HWKv0() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
        assertFalse(entry.isCheckSumOK());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCheckSumOK_EmptyFileName_sgmd13() {
        TarArchiveEntry entry = new TarArchiveEntry(new File(""));
        assertFalse(entry.isCheckSumOK());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCheckSumOK_InvalidFileName_IoAk14() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("invalid"));
        assertFalse(entry.isCheckSumOK());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_dcbJ0() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_eqYU1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test2.txt");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_yeRL2() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLinkFlag_CfON4() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt", (byte) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentPreserveAbsolutePath_VhON5() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt", false);
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt", true);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDataOffset_sqlH6() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setDataOffset(100L);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSize_mbAj7() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setSize(100L);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModTime_uqCY8() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setModTime(new Date(100L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NotSparse_vDEm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    entry.setSize(100);
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor1_cuRj2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor6_FpeL7() {
    String name = "test.txt";
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor7_MJsq8() {
    String name = "test.txt";
    byte linkFlag = 0;
    TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag, false);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor9_Zqel10() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_2_tWVl1_WtrC0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
    assertEquals(entry.getLinkFlag(), (byte)48);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_5_vjWQ4_mYEj0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
}
@Test
public void testSetDataOffset_NegativeOffset_oyJg4_Yypo0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(-1000);
    assertEquals(-1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_NullOffset_cYrw2_wOfV0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(0L);
    assertEquals(0L, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_preserveAbsolutePath_SOlx1_eoAz0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("absolute/path/new_name");
    assertEquals("absolute/path/new_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_preserveAbsolutePath_false_Qsfy7_wBds0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setName("invalid_name");
        assertEquals("invalid_name", entry.getName());
    } catch (IllegalArgumentException e) {
        fail("Expected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_DefaultConstructor_UjOb0_Apdi0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithValidStringAndMaxValue_rkWe11_cVGs0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(-1L);
    assertEquals(-1L, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_DefaultConstructor_RZzI33188_kIZb33188() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertEquals(33188, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_False_ncfh1_ApfW0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeInvalid_TRfk2_kBkt0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setModTime(FileTime.fromMillis(1234567890));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithInvalidString_gslc8_QvFK0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(0);
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Invalid group ID"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserNameWithAbsolutePath_JepB1_WhiP0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCreationTime_FAIE10_nFvN0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setCreationTime(FileTime.fromMillis(100L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentStatusChangeTime_pDiy11_Ygfq0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setStatusChangeTime(FileTime.fromMillis(100L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_regularFile_hdNz5_gGuR0() {
    File file = new File("test.txt");
    try {
        file.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.txt");
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_nonStandardExtension_wKND8_STUX0() {
    File file = new File("test.tar");
    try {
        file.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    TarArchiveEntry entry = new TarArchiveEntry(file, "test.tar");
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_specialFile_ltkQ7_IGaq0() {
    File file = new File("test.txt");
    try {
        file.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    File specialFile = new File("test.txt");
    specialFile.setReadOnly();
    TarArchiveEntry entry = new TarArchiveEntry(specialFile, "test.txt");
    assertEquals(specialFile, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_symbolicLink_UimA6_YbIT0() {
    File file = new File("test.txt");
    try {
        file.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    File link = new File("test.txt");
    try {
        Files.createSymbolicLink(link.toPath(), file.toPath());
    } catch (IOException e) {
        e.printStackTrace();
    }
    TarArchiveEntry entry = new TarArchiveEntry(link, "test.txt");
    assertEquals(file, entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithName_qxnm1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithEmptyName_Tgmt2() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, "");
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNullName_KOOK3() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "1024");
    headers.put(TarGnuSparseKeys.NAME, null);
    entry.fillGNUSparse0xData(headers);
    assertEquals(1024, entry.getRealSize());
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_nMkO0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());
    assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithName_jHbY6() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());
    assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithNameAndPreserveAbsolutePath_qmXz7() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());
    assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithFile_nrDH8() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());
    assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse1xData_1_QPYC0() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.NAME, "test.txt");
    headers.put(TarGnuSparseKeys.REALSIZE, "100");
    entry.fillGNUSparse1xData(headers);
    assertEquals("test.txt", entry.getName());
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSparseHeaders_owDE0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    sparseHeaders.add(new TarArchiveStructSparse(10, 20));
    sparseHeaders.add(new TarArchiveStructSparse(30, 40));
    entry.setSparseHeaders(sparseHeaders);
    assertEquals(2, entry.getSparseHeaders().size());
    assertEquals(10, entry.getSparseHeaders().get(0).getOffset());
    assertEquals(20, entry.getSparseHeaders().get(0).getNumbytes());
    assertEquals(30, entry.getSparseHeaders().get(1).getOffset());
    assertEquals(40, entry.getSparseHeaders().get(1).getNumbytes());
}
}