/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_dataLengthGreaterThanLength_uuhp6() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 0;
    int length = 5;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("data length", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithInvalidZipArchiveEntry_wrTy5() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveEntry.setName("test.txt");
    try {
        zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
        fail("Should throw IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithClosedOutputStream_khNh6() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.close();
    try {
        zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
        fail("Should throw IOException");
    } catch (IOException e) {
        assertEquals("Stream closed", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_InvalidEncoding_npAG1_mozq0() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipOutputStream.setEncoding("invalid_encoding");
        assertEquals("invalid_encoding", zipOutputStream.getEncoding());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_dataNull_MJCp0_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = null;
    int offset = 0;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_offsetNegative_IZYF1_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = -1;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("offset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_lengthNegative_ltLf2_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("length", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_offsetGreaterThanDataLength_cxab3_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 11;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("offset", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_lengthGreaterThanDataLength_eUFh4_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 0;
    int length = 11;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("length", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_dataLengthGreaterThanOffset_CLrg5_fid2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 5;
    int length = 10;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("data length", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteLocalFileHeader_Tkus0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry ze = new ZipArchiveEntry("test.txt");
    zos.writeLocalFileHeader(ze);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithInvalidZipArchiveEntry_wrTy5_fid2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveEntry.setName(null);
    try {
        zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
        fail("Should throw IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithClosedOutputStream_khNh6_fid2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.close();
    try {
        zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
        fail("Should throw IOException");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithInvalidOffset_iOqk7() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
    zipArchiveOutputStream.setUseZip64(Zip64Mode.Always);
    zipArchiveOutputStream.writeCentralFileHeader(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding_null_dxNo0_GdUc0_fid3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    assertNull(zos.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_File_NotSeekable_ZNwZ8_Grci0_fid3() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        assertFalse(zos.isSeekable());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_InvalidEncoding_npAG1_mozq0_fid3() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipOutputStream.setEncoding("invalid_encoding");
        assertEquals(null, zipOutputStream.getEncoding());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_NullEncoding_weud2_ipZg0_fid3() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipOutputStream.setEncoding(null);
        assertEquals(null, zipOutputStream.getEncoding());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}