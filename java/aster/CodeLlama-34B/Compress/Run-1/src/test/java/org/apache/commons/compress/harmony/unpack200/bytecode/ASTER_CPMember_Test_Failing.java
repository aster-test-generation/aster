/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_GpGW0_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_ITzw1_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_tekw2_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 2;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_DlTg3_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 3;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_fkcQ4_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 4;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_JtHJ5_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 5;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString7_qbxa6_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 6;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_Ojxe7_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 7;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_dnHn0_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    int expected = 1;
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_afOV1_fid1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    int expected = 32;
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
}