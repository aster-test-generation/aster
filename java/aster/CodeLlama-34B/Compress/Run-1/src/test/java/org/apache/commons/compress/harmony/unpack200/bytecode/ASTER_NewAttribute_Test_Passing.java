/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_bseT0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    int length = newAttribute.getLength();
    assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ngmR0_1() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    String result = attribute.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ngmR0_2() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    String result = attribute.toString();
    assertEquals("attributeName", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidAttributeName_pSsj1_1() {
    NewAttribute attribute = new NewAttribute(new CPUTF8(""), 0);
    String result = attribute.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidAttributeName_pSsj1_2() {
    NewAttribute attribute = new NewAttribute(new CPUTF8(""), 0);
    String result = attribute.toString();
    assertEquals("", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidLayoutIndex_zkkp3_1() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), -1);
    String result = attribute.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidLayoutIndex_zkkp3_2() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), -1);
    String result = attribute.toString();
    assertEquals("attributeName", result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullAttributeNameAndInvalidLayoutIndex_lvvG9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumber_emptyList_VaNi0() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("AttributeName"), 0);
    List<Integer> byteCodeOffsets = new ArrayList<>();
    attribute.renumber(byteCodeOffsets);
    assertTrue(attribute.renumbered);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndex_DxKl0_wcEl0() {
    CPUTF8 attributeName = new CPUTF8("", 0);
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals(0, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNonZeroIndex_iJMP1_YNtg0() {
    CPUTF8 attributeName = new CPUTF8("attributeName", 10);
    NewAttribute newAttribute = new NewAttribute(attributeName, 10);
    assertEquals(10, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNullAttributeNameAndNegativeIndex_obCo5_jDpA0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8(""), -1);
    assertEquals(-1, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNegativeIndex_jgnK2_GXJt0() {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals(0, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLayoutIndexWithNullAttributeName_OFcN3_Eshx0() {
    CPUTF8 attributeName = new CPUTF8("");
    NewAttribute newAttribute = new NewAttribute(attributeName, 0);
    assertEquals(0, newAttribute.getLayoutIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithOneElement_eImR2_mMGR0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    newAttribute.addBCOffset(1, 0);
    int length = newAttribute.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithLengths_SAzE1_VPwp0() {
    NewAttribute newAttribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    newAttribute.addBCOffset(1, 0);
    newAttribute.addBCOffset(2, 0);
    int length = newAttribute.getLength();
    assertEquals(3, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ngmR0() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), 0);
    String result = attribute.toString();
    assertNotNull(result);
    assertEquals("attributeName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidAttributeName_pSsj1() {
    NewAttribute attribute = new NewAttribute(new CPUTF8(""), 0);
    String result = attribute.toString();
    assertNotNull(result);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithInvalidLayoutIndex_zkkp3() {
    NewAttribute attribute = new NewAttribute(new CPUTF8("attributeName"), -1);
    String result = attribute.toString();
    assertNotNull(result);
    assertEquals("attributeName", result);
}
}