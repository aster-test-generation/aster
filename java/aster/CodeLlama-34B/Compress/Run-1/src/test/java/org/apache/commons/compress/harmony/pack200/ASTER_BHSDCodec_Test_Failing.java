/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b1h1s1d1_iQfI0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(2, codec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b2h2s2d2_KUlk1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 1);
    assertEquals(2, codec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b3h3s3d3_AOYj2() {
    BHSDCodec codec = new BHSDCodec(3, 3, 3, 3);
    assertEquals(3, codec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_b1_h1_s0_d0_Gddt0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 0, 0);
    String expected = "(1,1)";
    String actual = codec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_b1_h1_s1_d0_vBoA1() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 0);
    String expected = "(1,1,1)";
    String actual = codec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_b1_h1_s1_d1_nFOv2() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    String expected = "(1,1,1,1)";
    String actual = codec.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_1_EeRB0() {
    BHSDCodec codec = new BHSDCodec(5, 16);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_2_efAz1() {
    BHSDCodec codec = new BHSDCodec(4, 16, 4, 2);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_3_rLsr2() {
    BHSDCodec codec = new BHSDCodec(4, 16, 4);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBWithDifferentParameters_HwGN1_1() {
    BHSDCodec codec = new BHSDCodec(4, 2, 1, 1);
    codec = new BHSDCodec(2, 1, 1, 1);
    codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBWithDifferentParameters_HwGN1_3() {
    BHSDCodec codec = new BHSDCodec(4, 2, 1, 1);
    codec = new BHSDCodec(2, 1, 1, 1);
    codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(256, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHSDCodec_NoH_fHjL2() {
    BHSDCodec bhsdCodec = new BHSDCodec(4, 8);
    assertEquals(8, bhsdCodec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b1_h1_s1_d1_QlGj0() {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 1, 1, 1);
    int h = bhsdCodec.getH();
    assertEquals(256, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b3_h3_s3_d3_gYgr2() {
    BHSDCodec bhsdCodec = new BHSDCodec(3, 3, 3, 3);
    int h = bhsdCodec.getH();
    assertEquals(3, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b1_h1_s1_d1_YnTU0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(1, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b2_h2_s2_d2_YvUJ1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 1);
    assertEquals(2, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b3_h3_s3_d3_JTMO2() {
    BHSDCodec codec = new BHSDCodec(3, 3, 3, 3);
    assertEquals(3, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_xJtj0() {
    BHSDCodec codec = new BHSDCodec(3, 16, 32, 64);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_UKGo1() {
    BHSDCodec codec1 = new BHSDCodec(5, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(5, 16, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentB_sIVl2() {
    BHSDCodec codec1 = new BHSDCodec(5, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(16, 16, 32, 64);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentH_hsHH3() {
    BHSDCodec codec1 = new BHSDCodec(8, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(8, 32, 32, 64);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentS_sjoj4() {
    BHSDCodec codec1 = new BHSDCodec(8, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(8, 16, 64, 64);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_BIsZero_PyNe6() {
    BHSDCodec codec1 = new BHSDCodec(1, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(1, 16, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_HIsZero_yVQz7() {
    BHSDCodec codec1 = new BHSDCodec(5, 0, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(5, 0, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_B8_H16_S1_D1_IsGN2() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_B8_H16_S1_D2_nVxB3() {
    BHSDCodec codec = new BHSDCodec(3, 16, 1, 2);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_B8_H16_S2_D1_iIaF4() {
    BHSDCodec codec = new BHSDCodec(8, 16, 2, 1);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_B8_H16_S2_D2_EBDj5() {
    BHSDCodec codec = new BHSDCodec(8, 16, 2, 2);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_B8_H16_S0_D1_oIsO6() {
    BHSDCodec codec = new BHSDCodec(8, 16, 0, 1);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_B8_H16_S0_D2_pQHP7() {
    BHSDCodec codec = new BHSDCodec(8, 16, 0, 2);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_False_B8_H16_S1_D0_fBQQ8() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 0);
    assertFalse(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_hDmQ0() {
    BHSDCodec codec = new BHSDCodec(4, 4, 2, 1);
    assertEquals(15, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters_IwUd1() {
    BHSDCodec codec = new BHSDCodec(5, 8, 4, 2);
    assertEquals(31, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters2_QkTa2() {
    BHSDCodec codec = new BHSDCodec(5, 16, 8, 4);
    assertEquals(63, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters3_BonO3() {
    BHSDCodec codec = new BHSDCodec(5, 32, 16, 8);
    assertEquals(127, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters4_vtnW4() {
    BHSDCodec codec = new BHSDCodec(128, 64, 32, 16);
    assertEquals(255, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters5_SARx5() {
    BHSDCodec codec = new BHSDCodec(5, 128, 64, 32);
    assertEquals(511, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters6_gvmc6() {
    BHSDCodec codec = new BHSDCodec(256, 128, 64, 64);
    assertEquals(1023, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters7_GnJf7() {
    BHSDCodec codec = new BHSDCodec(512, 256, 128, 64);
    assertEquals(2047, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters8_rgEU8() {
    BHSDCodec codec = new BHSDCodec(5, 1024, 512, 256);
    assertEquals(4095, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters9_suNu9() {
    BHSDCodec codec = new BHSDCodec(5, 2048, 1024, 512);
    assertEquals(8191, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters10_QXyg10() {
    BHSDCodec codec = new BHSDCodec(5, 4096, 2048, 1024);
    assertEquals(16383, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters11_ZmpJ11() {
    BHSDCodec codec = new BHSDCodec(5, 8192, 4096, 2048);
    assertEquals(32767, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters12_IdxC12() {
    BHSDCodec codec = new BHSDCodec(5, 16384, 8192, 4096);
    assertEquals(65535, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters13_XHoQ13() {
    BHSDCodec codec = new BHSDCodec(5, 32768, 16384, 8192);
    assertEquals(131071, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_aywX0() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(5, 16);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_INBZ1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(4, 16, 4, 2);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_JzWS2() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(4, 16, 4);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_ntjZ0_pmnp0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(1, 1);
        assertEquals(1, result.length);
        assertEquals(1, result[0]);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_mdow2_NHvC0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(3, 1);
        assertEquals(1, result.length);
        assertEquals(3, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode4_KGmh3_IKQo0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(4, 1);
        assertEquals(1, result.length);
        assertEquals(4, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_zcnF1_LapS0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(2, 1);
        assertEquals(1, result.length);
        assertEquals(1, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode5_Pixb4_yoAY0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(5, 1);
        assertEquals(1, result.length);
        assertEquals(1, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode9_YWwd8_BJGz0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(9, 1);
        assertEquals(1, result.length);
        assertEquals(9, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode8_pMls7_Ewev0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(8, 1);
        assertEquals(1, result.length);
        assertEquals(1, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode7_Nvjm6_tUHa0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(7, 1);
        assertEquals(1, result.length);
        assertEquals(7, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode11_RQqB10_Eujn0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(11, 1);
        assertEquals(1, result.length);
        assertEquals(11, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode10_ntSz9_zrDo0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(10, 1);
        assertEquals(1, result.length);
        assertEquals(10, result[0]);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode12_KaXZ11_vdrm0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(12, 1);
        assertEquals(1, result.length);
        assertEquals(12, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode6_YmaH5_Sejv0() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(6, 1);
        assertEquals(1, result.length);
        assertEquals(6, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode6_YmaH5_Jncf3() throws AssertionError {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(6, 1);
        assertEquals(1, result.length);
        assertEquals(6, result[0]);
    } catch (Pack200Exception e) {
        throw new AssertionError("Unexpected exception", e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b1h1s1d1_iQfI0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(1, codec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_b2h2s2d2_KUlk1_fid1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 2);
    assertEquals(2, codec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_1_EeRB0_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 16);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_2_efAz1_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 4, 2);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCardinality_3_rLsr2_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 4);
    assertEquals(16, codec.cardinality());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetB_zJbm0_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(8, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBWithDifferentParameters_HwGN1() {
    BHSDCodec codec = new BHSDCodec(4, 2, 1, 1);
    assertEquals(4, codec.getB());
    codec = new BHSDCodec(2, 1, 1, 1);
    assertEquals(2, codec.getB());
    codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(1, codec.getB());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHSDCodec_Tgvm0_fid1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(2, bhsdCodec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHSDCodec_NoD_Jbih1_fid1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4, 2);
    assertEquals(2, bhsdCodec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetS_BHSDCodec_NoH_fHjL2_fid1() {
    BHSDCodec bhsdCodec = new BHSDCodec(8, 4);
    assertEquals(4, bhsdCodec.getS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b1_h1_s1_d1_QlGj0_fid1() {
    BHSDCodec bhsdCodec = new BHSDCodec(1, 1, 1, 1);
    int h = bhsdCodec.getH();
    assertEquals(1, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetH_b2_h2_s2_d2_gcGg1_fid1() {
    BHSDCodec bhsdCodec = new BHSDCodec(2, 2, 2, 2);
    int h = bhsdCodec.getH();
    assertEquals(2, h);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetL_b2_h2_s2_d2_YvUJ1_fid1() {
    BHSDCodec codec = new BHSDCodec(2, 2, 2, 2);
    assertEquals(2, codec.getL());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_xJtj0_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 32, 64);
    assertTrue(codec.equals(codec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_UKGo1_fid1() {
    BHSDCodec codec1 = new BHSDCodec(8, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(8, 16, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentB_sIVl2_fid1() {
    BHSDCodec codec1 = new BHSDCodec(8, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(16, 16, 32, 64);
    assertFalse(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_BIsZero_PyNe6_fid1() {
    BHSDCodec codec1 = new BHSDCodec(0, 16, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(0, 16, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_HIsZero_yVQz7_fid1() {
    BHSDCodec codec1 = new BHSDCodec(8, 0, 32, 64);
    BHSDCodec codec2 = new BHSDCodec(8, 0, 32, 64);
    assertTrue(codec1.equals(codec2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSigned_True_B8_H16_S1_D2_nVxB3_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 16, 1, 2);
    assertTrue(codec.isSigned());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargest_hDmQ0_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertEquals(15, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters_IwUd1_fid1() {
    BHSDCodec codec = new BHSDCodec(16, 8, 4, 2);
    assertEquals(31, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters2_QkTa2_fid1() {
    BHSDCodec codec = new BHSDCodec(32, 16, 8, 4);
    assertEquals(63, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters3_BonO3_fid1() {
    BHSDCodec codec = new BHSDCodec(64, 32, 16, 8);
    assertEquals(127, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters5_SARx5_fid1() {
    BHSDCodec codec = new BHSDCodec(256, 128, 64, 32);
    assertEquals(511, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters6_gvmc6_fid1() {
    BHSDCodec codec = new BHSDCodec(512, 256, 128, 64);
    assertEquals(1023, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters7_GnJf7_fid1() {
    BHSDCodec codec = new BHSDCodec(1024, 512, 256, 128);
    assertEquals(2047, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters8_rgEU8_fid1() {
    BHSDCodec codec = new BHSDCodec(2048, 1024, 512, 256);
    assertEquals(4095, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters9_suNu9_fid1() {
    BHSDCodec codec = new BHSDCodec(4096, 2048, 1024, 512);
    assertEquals(8191, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters10_QXyg10_fid1() {
    BHSDCodec codec = new BHSDCodec(8192, 4096, 2048, 1024);
    assertEquals(16383, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters11_ZmpJ11_fid1() {
    BHSDCodec codec = new BHSDCodec(16384, 8192, 4096, 2048);
    assertEquals(32767, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters12_IdxC12_fid1() {
    BHSDCodec codec = new BHSDCodec(32768, 16384, 8192, 4096);
    assertEquals(65535, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLargestWithDifferentParameters13_XHoQ13_fid1() {
    BHSDCodec codec = new BHSDCodec(65536, 32768, 16384, 8192);
    assertEquals(131071, codec.largest());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_aywX0_fid1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_INBZ1_fid1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 4, 2);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode3_JzWS2_fid1() throws Pack200Exception {
    BHSDCodec codec = new BHSDCodec(8, 16, 4);
    byte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    byte[] actual = codec.encode(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDelta_True_VWAC0_fid1() {
    BHSDCodec codec = new BHSDCodec(8, 4, 2, 1);
    assertTrue(codec.isDelta());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBWithDifferentParameters_HwGN1_1_fid2() {
    BHSDCodec codec = new BHSDCodec(4, 2, 1, 1);
    codec = new BHSDCodec(2, 1, 1, 1);
    codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(4, codec.getB());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBWithDifferentParameters_HwGN1_2_fid2() {
    BHSDCodec codec = new BHSDCodec(4, 2, 1, 1);
    codec = new BHSDCodec(2, 1, 1, 1);
    codec = new BHSDCodec(1, 1, 1, 1);
    assertEquals(2, codec.getB());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode2_zcnF1_LapS0_fid2() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(2, 1);
        assertEquals(1, result.length);
        assertEquals(2, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode5_Pixb4_yoAY0_fid2() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(5, 1);
        assertEquals(1, result.length);
        assertEquals(5, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode8_pMls7_Ewev0_fid2() {
    BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
    try {
        byte[] result = codec.encode(8, 1);
        assertEquals(1, result.length);
        assertEquals(8, result[0]);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
}