/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_lVrH0() throws IOException {
    String value = "1234567890";
    long expected = 1234567890L;
    long actual = ParsingUtils.parseLongValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValueWithBase_lWsd1() throws IOException {
    String value = "1234567890";
    int base = 10;
    long expected = 1234567890L;
    long actual = ParsingUtils.parseLongValue(value, base);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_diFI0() throws IOException {
    int expected = 123;
    String value = "123";
    int actual = ParsingUtils.parseIntValue(value);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ValidInput_LzKl0() throws IOException {
    long expected = 1234567890L;
    String value = "1234567890";
    int radix = 10;
    long actual = ParsingUtils.parseLongValue(value, radix);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_Success_UIxG0_qWap0() {
    try {
        long result = ParsingUtils.parseLongValue("123", 10);
        assertEquals(123, result);
    } catch (IOException e) {
        fail("Exception should not be thrown");
    }
}
}