/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_notMagic1_notMagic2_YRZd6() {
    byte[] signature = new byte[] { (byte) 0x00, (byte) 0x00 };
    int length = signature.length;
    assertFalse(DeflateCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_magic1_magic2a_KBGQ0_vfiO0() {
    byte[] signature = new byte[] { (byte) 0x78, (byte) 0x9C };
    int length = signature.length;
    assertFalse(DeflateCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_magic1_magic2c_YUaX2_oROP0() {
    byte[] signature = new byte[] { (byte)0x78, (byte)0x9c };
    int length = signature.length;
    assertFalse(DeflateCompressorInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_notMagic1_magic2_QEiJ5_MoPI0() {
    byte[] signature = new byte[] { (byte) 0x00, (byte) 0x78 };
    int length = signature.length;
    assertFalse(DeflateCompressorInputStream.matches(signature, length));
}
}