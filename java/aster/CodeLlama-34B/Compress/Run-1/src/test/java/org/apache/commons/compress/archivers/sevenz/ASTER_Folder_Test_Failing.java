/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Failing {
private Folder folder;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_rZyt0() {
    Folder folder = new Folder();
    String expected = "Folder with 0 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
    assertEquals(expected, folder.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsTwo_TiZI2() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsThree_AeMV3() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    assertEquals(3, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsFour_zWYg4() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 4;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsFive_uhxr5() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 5;
    assertEquals(5, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSix_MKYW6() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 6;
    assertEquals(6, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSeven_zQYt7() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 7;
    assertEquals(7, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsEight_IfvF8() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 8;
    assertEquals(8, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsNine_BHNo9() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 9;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsTen_ZVCd10() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 10;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_ExistentIndex_mAWM2() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[-1] = new BindPair(-1, 1);
    int result = folder.findBindPairForOutStream(-1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NullFolder_kVzH8() {
    Folder folder = null;
    int result = -1;
    assertEquals(result, folder.findBindPairForOutStream(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsOne_RQjr1_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsThree_AeMV3_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsFive_uhxr5_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 5;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSix_MKYW6_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 6;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsSeven_zQYt7_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 7;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsEight_IfvF8_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 8;
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_ExistentIndex_mAWM2_fid1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForOutStream(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_MultipleBindPairs_TOzk3_fid1() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[3];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    folder.bindPairs[2] = new BindPair(2, 3);
    int result = folder.findBindPairForOutStream(1);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_emptyBindPairs_dPju1() {
        int index = 0;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_vhGl2() {
        int index = 0;
        int expected = 0;
        folder.bindPairs = new BindPair[1];
        folder.bindPairs[0] = new BindPair(0, 0);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_differentIndex_THaJ3() {
        int index = 1;
        int expected = -1;
        folder.bindPairs = new BindPair[1];
        folder.bindPairs[0] = new BindPair(0, 0);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_multiplePairs_Lrwr4() {
        int index = 0;
        int expected = 0;
        folder.bindPairs = new BindPair[2];
        folder.bindPairs[0] = new BindPair(0, 0);
        folder.bindPairs[1] = new BindPair(1, 1);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_multiplePairs_differentIndex_WBEw5() {
        int index = 1;
        int expected = 1;
        folder.bindPairs = new BindPair[2];
        folder.bindPairs[0] = new BindPair(0, 0);
        folder.bindPairs[1] = new BindPair(1, 1);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_multiplePairs_differentIndex_negativeIndex_oJyg6() {
        int index = -1;
        int expected = -1;
        folder.bindPairs = new BindPair[2];
        folder.bindPairs[0] = new BindPair(0, 0);
        folder.bindPairs[1] = new BindPair(1, 1);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_multiplePairs_differentIndex_outOfBoundsIndex_sWAr7() {
        int index = 2;
        int expected = -1;
        folder.bindPairs = new BindPair[2];
        folder.bindPairs[0] = new BindPair(0, 0);
        folder.bindPairs[1] = new BindPair(1, 1);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_nonEmptyBindPairs_multiplePairs_differentIndex_negativeIndex_outOfBoundsIndex_FaYV8() {
        int index = -2;
        int expected = -1;
        folder.bindPairs = new BindPair[2];
        folder.bindPairs[0] = new BindPair(0, 0);
        folder.bindPairs[1] = new BindPair(1, 1);
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NullFolder_kVzH8_fid3() {
    Folder folder = null;
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
}