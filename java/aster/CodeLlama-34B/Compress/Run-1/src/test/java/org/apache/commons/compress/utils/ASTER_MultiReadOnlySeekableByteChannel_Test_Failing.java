/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.util.Collections;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_ClosedChannel_YEeS3_psXu0() throws IOException {
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
    channel.close();
    assertThrows(ClosedChannelException.class, () -> channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_NullChannel_QkmA4_fid3() throws IOException {
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
    assertThrows(NullPointerException.class, () -> channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void close_Gvet2_GcPc0() throws IOException {
    throw new IOException("failed to close wrapped channel");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEmptyBuffer_tksa0_TnuB0() throws IOException {
    MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
    ByteBuffer dst = ByteBuffer.allocate(1);
    int bytesRead = channel.read(dst);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void close_Fzpi8_XcWH0() throws IOException {
    throw new IOException("failed to close wrapped channel 2");
}
}