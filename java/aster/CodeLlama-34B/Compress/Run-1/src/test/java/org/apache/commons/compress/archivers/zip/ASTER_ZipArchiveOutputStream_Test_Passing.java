/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_OutputStream_pOmc5() {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    assertFalse(zos.isSeekable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_alreadyFinished_qCtP0() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.finish();
    try {
        zipOutputStream.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("This archive has already been finished", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_dataNull_MJCp0() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = null;
    int offset = 0;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_offsetNegative_IZYF1() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = -1;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_lengthNegative_ltLf2() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 0;
    int length = -1;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_offsetGreaterThanDataLength_cxab3() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 11;
    int length = 0;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    assertNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_lengthGreaterThanDataLength_eUFh4() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 0;
    int length = 11;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteOut_dataLengthGreaterThanOffset_CLrg5() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    byte[] data = new byte[10];
    int offset = 5;
    int length = 10;
    try {
        zipOutputStream.writeOut(data, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_ZipArchiveEntry_GSQH0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipMethod.DEFLATED.getCode());
    assertTrue(zos.canWriteEntryData(zae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_ZipArchiveEntry_UnsupportedMethod_sbPD1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    ZipArchiveEntry zae = new ZipArchiveEntry("test.txt");
    zae.setMethod(ZipMethod.IMPLODING.getCode());
    assertFalse(zos.canWriteEntryData(zae));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanWriteEntryData_Null_JlFp3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    assertFalse(zos.canWriteEntryData(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCentralFileHeaderWithNullZipArchiveEntry_Mkyn4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zipArchiveOutputStream.writeCentralFileHeader(null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidOffset_Cyhb2() throws IOException {
    byte[] preamble = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(preamble, -1, 2);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithInvalidLength_ueoq3() throws IOException {
    byte[] preamble = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(preamble, 1, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePreambleWithNullPreamble_qjfl4() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    try {
        zos.writePreamble(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_File_nEKm3_hkKv0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
        assertTrue(zos.isSeekable());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEncoding_null_dxNo0_GdUc0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    assertEquals("UTF-8", zos.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSeekable_File_NotSeekable_ZNwZ8_Grci0() {
    try {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_ValidEncoding_gNan0_enoh0() throws IOException {
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
    zipOutputStream.setEncoding("UTF-8");
    assertEquals("UTF-8", zipOutputStream.getEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEncoding_NullEncoding_weud2_ipZg0() {
    try {
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipOutputStream.setEncoding("UTF-8");
        assertEquals("UTF-8", zipOutputStream.getEncoding());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}