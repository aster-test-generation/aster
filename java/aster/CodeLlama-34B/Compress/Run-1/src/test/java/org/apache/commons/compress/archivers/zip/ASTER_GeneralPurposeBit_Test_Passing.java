/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
    private boolean languageEncodingFlag;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_Default_Yvtu0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(0, gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_fauH0_1() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertNotNull(clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_fauH0_2() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertEquals(bit, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_dOZJ0() {
    GeneralPurposeBit g = new GeneralPurposeBit();
    assertTrue(g.equals(g));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_PXUt1() {
    GeneralPurposeBit g1 = new GeneralPurposeBit();
    GeneralPurposeBit g2 = new GeneralPurposeBit();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithSlidingDictionarySizeFlag_rQBe4() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithNumberOfShannonFanoTreesFlag_mlUu5() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_1_diqv0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 0;
    int actual = gpb.getNumberOfShannonFanoTrees();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_3_NiDy2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 2;
    int actual = gpb.getNumberOfShannonFanoTrees();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_5_UMdO4() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 4;
    int actual = gpb.getNumberOfShannonFanoTrees();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_7_Qhxq6() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 6;
    int actual = gpb.getNumberOfShannonFanoTrees();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_13_Sgya12() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expected = 12;
    int actual = gpb.getNumberOfShannonFanoTrees();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SFVv0_1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SFVv0_2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SFVv0_3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_true_ruFL0_FzVN0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertTrue(gpb.usesUTF8ForNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_false_WsOr1_jmsl0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(false);
    assertFalse(gpb.usesUTF8ForNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_NonDefault_zQxt1_lKjQ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_Negative_mlAb2_DGzL0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertEquals(0, gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_Random_mGdl6_kHAB0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertEquals(gpb.getSlidingDictionarySize(), gpb.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_True_GAYp0_idQn0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertFalse(gpb.usesStrongEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesStrongEncryption_Null_RaVG2_nSke0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesStrongEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_true_jBKV0_SEVr0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertFalse(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_invalid_kjrW3_JsPp0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(false);
    assertFalse(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_null_zMue2_Truo0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesEncryption_empty_LoOw4_TVYC0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    assertFalse(gpb.usesEncryption());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_True_npZT0_kjzp0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    assertFalse(gpb.usesDataDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_encryptionFlagFalse_strongEncryptionFlagFalse_languageEncodingFlagFalse_dataDescriptorFlagFalse_FeBw1_psKt0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    int expectedHashCode = 3 * (7 * (13 * (17 * 0 + 0) + 0) + 0);
    assertEquals(expectedHashCode, gpb.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonZeroValues_ZHEn1_LJzo0_1() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    byte[] result = new byte[] {1, 2};
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonZeroValues_ZHEn1_LJzo0_2() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    byte[] result = new byte[] {1, 2};
    assertEquals(1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNonZeroValues_ZHEn1_LJzo0_3() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    byte[] result = new byte[] {1, 2};
    assertEquals(2, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNull_wlvu5_tSpJ0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    gpb.useUTF8ForNames(true);
    byte[] result = null;
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_fauH0() {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object clone = bit.clone();
    assertNotNull(clone);
    assertEquals(bit, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_SFVv0() {
    GeneralPurposeBit gpb = new GeneralPurposeBit();
    byte[] result = gpb.encode();
    assertEquals(2, result.length);
    assertEquals(0, result[0]);
    assertEquals(0, result[1]);
}
}