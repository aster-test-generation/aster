/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SignatureAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_WjgR7() {
    CPUTF8 utf8 = new CPUTF8("Signature", 6);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString9_arDb8() {
    CPUTF8 utf8 = new CPUTF8("Signature", 7);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString10_YGOR9() {
    CPUTF8 utf8 = new CPUTF8("Signature", 8);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString11_nXQw10() {
    CPUTF8 utf8 = new CPUTF8("Signature", 9);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString12_npMj11() {
    CPUTF8 utf8 = new CPUTF8("Signature", 10);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolveWithDifferentEntries_XjiK10() {
        CPUTF8 signature = new CPUTF8("signature");
        SignatureAttribute signatureAttribute = new SignatureAttribute(signature);
        ClassConstantPool pool = new ClassConstantPool();
        pool.add(new CPUTF8("another signature"));
        signatureAttribute.resolve(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_ouKE5_VXot0() {
    CPUTF8 utf8 = new CPUTF8("Signature");
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_Pexs0_asUJ0() {
    CPUTF8 utf8 = new CPUTF8("Signature", 0);
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    String actual = signatureAttribute.toString();
    String expected = "Signature: Signature";
    assertEquals(expected, actual);
}
}