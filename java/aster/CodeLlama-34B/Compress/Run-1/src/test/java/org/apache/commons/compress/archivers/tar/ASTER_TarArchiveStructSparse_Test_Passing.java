/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_tVoL0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 1000);
    long offset = tarArchiveStructSparse.getOffset();
    assertEquals(100, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffsetWithZeroOffset_TWdy1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 1000);
    long offset = tarArchiveStructSparse.getOffset();
    assertEquals(0, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_NYox0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 200);
    String expected = "TarArchiveStructSparse{offset=100, numbytes=200}";
    String actual = tarArchiveStructSparse.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_lAkg0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(100, 1000);
    int actual = tarArchiveStructSparse.hashCode();
    int expected = Objects.hash(100, 1000);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_bxmO0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    assertTrue(tarArchiveStructSparse.equals(tarArchiveStructSparse));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_QAfS1() {
    TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(10, 100);
    TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(10, 100);
    assertTrue(tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_JEzy2() {
    TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(10, 100);
    TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(20, 200);
    assertFalse(tarArchiveStructSparse1.equals(tarArchiveStructSparse2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_cdWT3() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    assertFalse(tarArchiveStructSparse.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_WUZR4() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 100);
    assertFalse(tarArchiveStructSparse.equals(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytes_vcPd0() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 20);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(20, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithNegativeOffset_YqKU1() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 20);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(20, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithZeroNumbytes_pcHW4() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, 0);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(0, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithMaxValueOffset_YMQj5() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(Long.MAX_VALUE, 20);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(20, numbytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumbytesWithMaxValueNumbytes_kldr6() {
    TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10, Long.MAX_VALUE);
    long numbytes = tarArchiveStructSparse.getNumbytes();
    assertEquals(Long.MAX_VALUE, numbytes);
}
}