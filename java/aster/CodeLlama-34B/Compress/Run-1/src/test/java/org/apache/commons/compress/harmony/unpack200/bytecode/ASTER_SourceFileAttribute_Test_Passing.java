/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNullName_megK2() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    int length = sourceFileAttribute.getLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_GpvV0() {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    String result = sourceFileAttribute.toString();
    assertEquals("SourceFile: UTF-8:SourceFile", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_GtBS0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
    int expected = 1;
    int actual = sourceFileAttribute.hashCode();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_gbpz0_hSGh0() {
    CPUTF8 cpUTF8Value = new CPUTF8("Test");
    SourceFileAttribute attribute = new SourceFileAttribute(cpUTF8Value);
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_dgtE3_vggk0() {
    CPUTF8 cpUTF8Value = new CPUTF8("Test");
    SourceFileAttribute attribute = new SourceFileAttribute(cpUTF8Value);
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttribute_GSnT0_jJjO0() {
    CPUTF8 cpUTF8Value = new CPUTF8("TestSourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cpUTF8Value);
    boolean result = sourceFileAttribute.isSourceFileAttribute();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_kNKm1_gPVN0() {
    CPUTF8 cpUTF8Value = new CPUTF8("Test");
    SourceFileAttribute attribute1 = new SourceFileAttribute(cpUTF8Value);
    SourceFileAttribute attribute2 = new SourceFileAttribute(cpUTF8Value);
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_CGiF0_ucVU0() {
    CPUTF8 cpUTF8 = new CPUTF8("Test");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cpUTF8);
    int length = sourceFileAttribute.getLength();
    assertEquals(2, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_PmKW2_NkJJ0() {
    CPUTF8 cpUTF8Value1 = new CPUTF8("Test1");
    CPUTF8 cpUTF8Value2 = new CPUTF8("Test2");
    SourceFileAttribute attribute1 = new SourceFileAttribute(cpUTF8Value1);
    SourceFileAttribute attribute2 = new SourceFileAttribute(cpUTF8Value2);
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_jDrm2_yJxx0() {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    assertNull(sourceFileAttribute.getAttributeName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_heUJ3_oOGt0() {
    CPUTF8 utf8 = new CPUTF8("SourceFile");
    assertEquals("SourceFile", utf8.underlyingString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetString_PWLG5_nGVW0() {
    CPUTF8 utf8 = new CPUTF8("SourceFile");
    String result = utf8.underlyingString();
    assertEquals("SourceFile", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nonCPUTF8Name_RbHJ2_ejFF0() {
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(new CPUTF8("dummy"));
    int expected = 1;
    int actual = sourceFileAttribute.hashCode();
}
}