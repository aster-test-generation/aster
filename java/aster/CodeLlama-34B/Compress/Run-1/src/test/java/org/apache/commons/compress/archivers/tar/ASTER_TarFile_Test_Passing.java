/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_gZWV0() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_EmptyArchive_hLXm0() throws IOException {
    TarFile tarFile = new TarFile(new byte[0]);
    assertTrue(tarFile.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_EmptyArchive_Lenient_zTVY2() throws IOException {
    TarFile tarFile = new TarFile(new byte[0], true);
    assertTrue(tarFile.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_EmptyArchive_NonLenient_ewuI4() throws IOException {
    TarFile tarFile = new TarFile(new byte[0], false);
    assertTrue(tarFile.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_EmptyArchive_VOiz0() throws IOException {
    TarFile tarFile = new TarFile(new byte[0], "UTF-8");
    List<TarArchiveEntry> entries = tarFile.getEntries();
    assertEquals(0, entries.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithNonExistentFile_CDwv1_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("non_existent_file.txt");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithDirectory_lVmP2_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_directory/");
    InputStream inputStream = tarFile.getInputStream(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithSymlink_ulfV3_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_symlink");
    InputStream inputStream = tarFile.getInputStream(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithBlockDevice_VRfB4_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_block_device");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithCharacterDevice_WqtA5_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_character_device");
    InputStream inputStream = tarFile.getInputStream(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithFIFO_DKNo6_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_fifo");
    InputStream inputStream = tarFile.getInputStream(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithSocket_moWt7_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_socket");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithWhiteout_lkKe8_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("test_whiteout");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamWithInvalidEntry_TmDw9_fid1() throws IOException {
    TarFile tarFile = new TarFile(new File("test.tar"), true);
    TarArchiveEntry entry = new TarArchiveEntry("invalid_entry");
    InputStream inputStream = tarFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_NonEmptyArchive_dGNS1_fid1() throws IOException {
    TarFile tarFile = new TarFile(new byte[10]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_NonEmptyArchive_Lenient_liPI3_fid1() throws IOException {
    TarFile tarFile = new TarFile(new byte[10], true);
    assertTrue(tarFile.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOF_NonEmptyArchive_NonLenient_aoJL5_fid1() throws IOException {
    TarFile tarFile = new TarFile(new byte[10], false);
    assertTrue(tarFile.isAtEOF());
}
}