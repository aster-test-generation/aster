/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNoDefault_ValidHeaderId_ZNQb0_1() {
    ZipShort headerId = new ZipShort(new byte[] { 0x01, 0x02 });
    ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
    assertNotNull(extraField);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNoDefault_ValidHeaderId_ZNQb0_2() {
    ZipShort headerId = new ZipShort(new byte[] { 0x01, 0x02 });
    ZipExtraField extraField = ExtraFieldUtils.createExtraFieldNoDefault(headerId);
    assertEquals(headerId.getValue(), extraField.getHeaderId().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_invalidClass_keik1() {
    Class<?> clazz = Object.class;
    try {
        ExtraFieldUtils.register(clazz);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Expected IllegalArgumentException", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_privateConstructor_xsHB4_rLMi0() {
    Class<?> clazz = ExtraFieldUtils.class;
    try {
        ExtraFieldUtils.register(clazz);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Expected IllegalArgumentException", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_noConstructor_HbLZ3_dlBx0() {
    Class<?> clazz = ExtraFieldUtils.class;
    try {
        ExtraFieldUtils.register(clazz);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals(IllegalArgumentException.class, e.getClass());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_dqfJ0_lyVj0() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[10];
    for (int i = 0; i < 10; i++) {
        expected[i] = new UnparseableExtraFieldData();
    }
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertEquals(expected.length, actual.length);
    for (int i = 0; i < expected.length; i++) {
        assertEquals(expected[i], actual[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_xCak0() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[2];
    assertArrayEquals(expected, ExtraFieldUtils.parse(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testParseWithNullData_nGBW2_PySS0() throws ZipException {
    byte[] data = null;
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testParseWithInvalidData_AaUL3_uDZT0() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[2];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_invalidData_lmNk2_fid1() {
    byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
    boolean local = true;
    try {
        ExtraFieldUtils.parse(data, local);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("Invalid extra field data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_invalidClass_keik1_fid1() {
    Class<?> clazz = Object.class;
    try {
        ExtraFieldUtils.register(clazz);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_nullClass_VcNx2_fid1() {
    try {
        ExtraFieldUtils.register(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Class cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister_privateConstructor_xsHB4_rLMi0_fid1() {
    Class<?> clazz = ExtraFieldUtils.class;
    try {
        ExtraFieldUtils.register(clazz);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_dqfJ0_lyVj0_fid1() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[10];
    for (int i = 0; i < 10; i++) {
        expected[i] = new UnparseableExtraFieldData();
    }
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_xCak0_fid1() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[0];
    assertArrayEquals(expected, ExtraFieldUtils.parse(data));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testParseWithNullData_nGBW2_PySS0_fid1() throws ZipException {
    byte[] data = null;
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testParseWithInvalidData_AaUL3_uDZT0_fid1() throws ZipException {
    byte[] data = new byte[10];
    ZipExtraField[] expected = new ZipExtraField[0];
    ZipExtraField[] actual = ExtraFieldUtils.parse(data);
    assertArrayEquals(expected, actual);
}
}