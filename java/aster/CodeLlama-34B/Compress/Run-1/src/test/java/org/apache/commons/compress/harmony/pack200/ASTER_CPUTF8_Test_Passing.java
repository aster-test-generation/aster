/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_differentCharactersAndCase_zhQA13() {
    CPUTF8 cputf8 = new CPUTF8("hello");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnderlyingStringWithInvalidString_YzSb3_njxd0() {
    CPUTF8 cputf8 = new CPUTF8("Hello, World!");
    String underlyingString = cputf8.toString();
    assertNotEquals("Hello, World!", underlyingString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithByteArray_yxso8_rMzv0() {
    byte[] bytes = {116, 101, 115, 116};
    String expected = new String(bytes);
    String actual = new CPUTF8(expected).toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithIntArray_hJqv9_jVtW0() {
    int[] ints = {116, 101, 115, 116};
    String expected = new String(ints, 0, ints.length);
    String actual = new CPUTF8(expected).toString();
}
}