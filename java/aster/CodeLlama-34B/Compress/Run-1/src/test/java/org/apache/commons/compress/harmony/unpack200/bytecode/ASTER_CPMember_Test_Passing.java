/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_RJMj0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertTrue(member.equals(member));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectSameValues_PBLz1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member1 = new CPMember(name, descriptor, flags, attributes);
    CPMember member2 = new CPMember(name, descriptor, flags, attributes);
    assertTrue(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectDifferentValues_DdAE2() {
    CPUTF8 name1 = new CPUTF8("name1");
    CPUTF8 descriptor1 = new CPUTF8("descriptor1");
    long flags1 = 0;
    List<Attribute> attributes1 = new ArrayList<>();
    CPMember member1 = new CPMember(name1, descriptor1, flags1, attributes1);
    CPUTF8 name2 = new CPUTF8("name2");
    CPUTF8 descriptor2 = new CPUTF8("descriptor2");
    long flags2 = 1;
    List<Attribute> attributes2 = new ArrayList<>();
    CPMember member2 = new CPMember(name2, descriptor2, flags2, attributes2);
    assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_FPbA3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_AGyE4() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    assertFalse(member.equals("string"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_GpGW0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_ITzw1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: UTF-8:name(UTF-8:descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_tekw2() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 2;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_DlTg3() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 3;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_fkcQ4() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 4;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_JtHJ5() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 5;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: UTF-8:name(UTF-8:descriptor)";
    String actual = member.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString7_qbxa6() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 6;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_Ojxe7() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 7;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    String expected = "CPMember: name(descriptor)";
    String actual = member.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString9_WpWC8() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 8;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
}
@Test
@Timeout(value =-1916785000, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_dnHn0() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 0;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    int expected =-1916785000;
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_afOV1() {
    CPUTF8 name = new CPUTF8("name");
    CPUTF8 descriptor = new CPUTF8("descriptor");
    long flags = 1;
    List<Attribute> attributes = new ArrayList<>();
    CPMember member = new CPMember(name, descriptor, flags, attributes);
    int expected =-1916784969;
    int actual = member.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_8_vrHQ7() {
    CPUTF8 name = new CPUTF8("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_oAzG0_vrJi0_1() {
    CPUTF8 name = new CPUTF8("TestClass", 0);
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;", 0);
    CPMember member = new CPMember(name, descriptor, 0, new ArrayList<>());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_oAzG0_vrJi0_2() {
    CPUTF8 name = new CPUTF8("TestClass", 0);
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;", 0);
    CPMember member = new CPMember(name, descriptor, 0, new ArrayList<>());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(name, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyAttributes_oAzG0_vrJi0_3() {
    CPUTF8 name = new CPUTF8("TestClass", 0);
    CPUTF8 descriptor = new CPUTF8("Ljava/lang/Object;", 0);
    CPMember member = new CPMember(name, descriptor, 0, new ArrayList<>());
    ClassFileEntry[] entries = member.getNestedClassFileEntries();
    assertEquals(descriptor, entries[1]);}
}