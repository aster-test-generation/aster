/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethod_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_LZMA_MzoS1_Efuf0() {
    byte[] id = {(byte) 0x37, (byte) 0x7A, (byte) 0xBC, (byte) 0x9E};
    SevenZMethod method = SevenZMethod.byId(id);
    assertNull(SevenZMethod.LZMA);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_COPY_Nmtq0_ydmD0_fid1() {
    byte[] id = {(byte)0x37, (byte)0x7A, (byte)0xBC, (byte)0x9D};
    SevenZMethod method = SevenZMethod.byId(id);
    assertEquals(SevenZMethod.COPY, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_LZMA2_aBkm2_OaIq0_fid1() {
    byte[] id = {(byte) 0x37, (byte) 0x7A, (byte) 0xBC, (byte) 0x9F};
    SevenZMethod method = SevenZMethod.byId(id);
    assertEquals(SevenZMethod.LZMA2, method);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testById_LZMA_MzoS1_Efuf0_fid1() {
    byte[] id = {(byte) 0x37, (byte) 0x7A, (byte) 0xBC, (byte) 0x9E};
    SevenZMethod method = SevenZMethod.byId(id);
    assertEquals(SevenZMethod.LZMA, method);
}
}