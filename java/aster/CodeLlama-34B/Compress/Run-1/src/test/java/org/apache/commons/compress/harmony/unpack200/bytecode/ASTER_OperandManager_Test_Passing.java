/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRef_PVrl0() {
    int[] bcCaseCount = new int[] {1, 2, 3};
    int[] bcCaseValue = new int[] {1, 2, 3};
    int[] bcByte = new int[] {1, 2, 3};
    int[] bcShort = new int[] {1, 2, 3};
    int[] bcLocal = new int[] {1, 2, 3};
    int[] bcLabel = new int[] {1, 2, 3};
    int[] bcIntRef = new int[] {1, 2, 3};
    int[] bcFloatRef = new int[] {1, 2, 3};
    int[] bcLongRef = new int[] {1, 2, 3};
    int[] bcDoubleRef = new int[] {1, 2, 3};
    int[] bcStringRef = new int[] {1, 2, 3};
    int[] bcClassRef = new int[] {1, 2, 3};
    int[] bcFieldRef = new int[] {1, 2, 3};
    int[] bcMethodRef = new int[] {1, 2, 3};
    int[] bcIMethodRef = new int[] {1, 2, 3};
    int[] bcThisField = new int[] {1, 2, 3};
    int[] bcSuperField = new int[] {1, 2, 3};
    int[] bcThisMethod = new int[] {1, 2, 3};
    int[] bcSuperMethod = new int[] {1, 2, 3};
    int[] bcInitRef = new int[] {1, 2, 3};
    int[] wideByteCodes = new int[] {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = 1;
    int actual = operandManager.nextThisMethodRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseValues_TxQJ0() {
    int[] bcCaseCount = new int[] { 1, 2, 3 };
    int[] bcCaseValue = new int[] { 10, 20, 30 };
    int[] bcByte = new int[] { 1, 2, 3 };
    int[] bcShort = new int[] { 1, 2, 3 };
    int[] bcLocal = new int[] { 1, 2, 3 };
    int[] bcLabel = new int[] { 1, 2, 3 };
    int[] bcIntRef = new int[] { 1, 2, 3 };
    int[] bcFloatRef = new int[] { 1, 2, 3 };
    int[] bcLongRef = new int[] { 1, 2, 3 };
    int[] bcDoubleRef = new int[] { 1, 2, 3 };
    int[] bcStringRef = new int[] { 1, 2, 3 };
    int[] bcClassRef = new int[] { 1, 2, 3 };
    int[] bcFieldRef = new int[] { 1, 2, 3 };
    int[] bcMethodRef = new int[] { 1, 2, 3 };
    int[] bcIMethodRef = new int[] { 1, 2, 3 };
    int[] bcThisField = new int[] { 1, 2, 3 };
    int[] bcSuperField = new int[] { 1, 2, 3 };
    int[] bcThisMethod = new int[] { 1, 2, 3 };
    int[] bcSuperMethod = new int[] { 1, 2, 3 };
    int[] bcInitRef = new int[] { 1, 2, 3 };
    int[] wideByteCodes = new int[] { 1, 2, 3 };
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextCaseValues();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShort_NwVI0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextShort();
    assertEquals(bcShort[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShortWithDifferentValues_CpJA1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextShort();
    assertEquals(bcShort[1], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShortWithDifferentValues2_nhXI2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_sEUL0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_GLiP1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisFieldRef();
    actual = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_GLiP1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisFieldRef();
    actual = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextInitRef_AlJF0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextInitRef();
    assertEquals(1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRef_pmFN0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = bcStringRef[0];
    int actual = operandManager.nextStringRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRefWithNonZeroIndex_eEgu1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.bcStringRefIndex = 1;
    int expected = bcStringRef[1];
    int actual = operandManager.nextStringRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRef_tOOS0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = 1;
    int actual = operandManager.nextFieldRef();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_wNkA0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextMethodRef();
    assertEquals(bcMethodRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRefWithDifferentValues_vSoI1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextMethodRef();
    assertEquals(bcMethodRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_jfwa0() {
    int[] bcCaseCount = {1, 2, 3};
    int[] bcCaseValue = {1, 2, 3};
    int[] bcByte = {1, 2, 3};
    int[] bcShort = {1, 2, 3};
    int[] bcLocal = {1, 2, 3};
    int[] bcLabel = {1, 2, 3};
    int[] bcIntRef = {1, 2, 3};
    int[] bcFloatRef = {1, 2, 3};
    int[] bcLongRef = {1, 2, 3};
    int[] bcDoubleRef = {1, 2, 3};
    int[] bcStringRef = {1, 2, 3};
    int[] bcClassRef = {1, 2, 3};
    int[] bcFieldRef = {1, 2, 3};
    int[] bcMethodRef = {1, 2, 3};
    int[] bcIMethodRef = {1, 2, 3};
    int[] bcThisField = {1, 2, 3};
    int[] bcSuperField = {1, 2, 3};
    int[] bcThisMethod = {1, 2, 3};
    int[] bcSuperMethod = {1, 2, 3};
    int[] bcInitRef = {1, 2, 3};
    int[] wideByteCodes = {1, 2, 3};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int result = operandManager.nextDoubleRef();
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_pgPX0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_rNcS1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLongRef();
    actual = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_rNcS1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLongRef();
    actual = operandManager.nextLongRef();
    assertEquals(bcLongRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRef_OReS0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_HVaf1_1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_HVaf1_2() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_fVhc0() {
    int[] bcCaseCount = new int[1];
    int[] bcCaseValue = new int[1];
    int[] bcByte = new int[1];
    int[] bcShort = new int[1];
    int[] bcLocal = new int[1];
    int[] bcLabel = new int[1];
    int[] bcIntRef = new int[1];
    int[] bcFloatRef = new int[1];
    int[] bcLongRef = new int[1];
    int[] bcDoubleRef = new int[1];
    int[] bcStringRef = new int[1];
    int[] bcClassRef = new int[1];
    int[] bcFieldRef = new int[1];
    int[] bcMethodRef = new int[1];
    int[] bcIMethodRef = new int[1];
    int[] bcThisField = new int[1];
    int[] bcSuperField = new int[1];
    int[] bcThisMethod = new int[1];
    int[] bcSuperMethod = new int[1];
    int[] bcInitRef = new int[1];
    int[] wideByteCodes = new int[1];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_NimQ1_1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_NimQ1_2() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[1], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_NimQ1_3() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[2], actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_yvzz0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    int expected = bcSuperMethod[0];
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef2_OACR1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextSuperMethodRef();
    int expected = bcSuperMethod[1];
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_IzUK0() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIntRef();
    int expected = bcIntRef[0];
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRefWithDifferentValues_ImwH1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIntRef();
    int expected = bcIntRef[1];
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRefWithMultipleValues_GLiP1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[0], actual);
    actual = operandManager.nextThisFieldRef();
    assertEquals(bcThisField[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRefWithMultipleValues_rNcS1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextLongRef();
    assertEquals(bcLongRef[0], actual);
    actual = operandManager.nextLongRef();
    assertEquals(bcLongRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRefWithMultipleValues_HVaf1() {
    int[] bcCaseCount = new int[2];
    int[] bcCaseValue = new int[2];
    int[] bcByte = new int[2];
    int[] bcShort = new int[2];
    int[] bcLocal = new int[2];
    int[] bcLabel = new int[2];
    int[] bcIntRef = new int[2];
    int[] bcFloatRef = new int[2];
    int[] bcLongRef = new int[2];
    int[] bcDoubleRef = new int[2];
    int[] bcStringRef = new int[2];
    int[] bcClassRef = new int[2];
    int[] bcFieldRef = new int[2];
    int[] bcMethodRef = new int[2];
    int[] bcIMethodRef = new int[2];
    int[] bcThisField = new int[2];
    int[] bcSuperField = new int[2];
    int[] bcThisMethod = new int[2];
    int[] bcSuperMethod = new int[2];
    int[] bcInitRef = new int[2];
    int[] wideByteCodes = new int[2];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[0], actual);
    actual = operandManager.nextFloatRef();
    assertEquals(bcFloatRef[1], actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRefWithMultipleValues_NimQ1() {
    int[] bcCaseCount = new int[3];
    int[] bcCaseValue = new int[3];
    int[] bcByte = new int[3];
    int[] bcShort = new int[3];
    int[] bcLocal = new int[3];
    int[] bcLabel = new int[3];
    int[] bcIntRef = new int[3];
    int[] bcFloatRef = new int[3];
    int[] bcLongRef = new int[3];
    int[] bcDoubleRef = new int[3];
    int[] bcStringRef = new int[3];
    int[] bcClassRef = new int[3];
    int[] bcFieldRef = new int[3];
    int[] bcMethodRef = new int[3];
    int[] bcIMethodRef = new int[3];
    int[] bcThisField = new int[3];
    int[] bcSuperField = new int[3];
    int[] bcThisMethod = new int[3];
    int[] bcSuperMethod = new int[3];
    int[] bcInitRef = new int[3];
    int[] wideByteCodes = new int[3];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[0], actual);
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[1], actual);
    actual = operandManager.nextIMethodRef();
    assertEquals(bcIMethodRef[2], actual);
}
}