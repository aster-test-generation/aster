/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InnerClassesAttribute_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteBodyWithNullDataOutputStream_zAYh4() throws IOException {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("test");
    DataOutputStream dos = null;
    try {
        innerClassesAttribute.writeBody(dos);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("DataOutputStream is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNestedClasses_aXte1_nIOw1_2() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
    assertEquals("InnerClass", entries[0].getClass().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_qMWd1_fid1() {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("name");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("name");
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAttributeName_sZOQ5_fid1() {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("name1");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("name2");
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullAttributeName_QyDE6_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    assertFalse(attribute.equals(new InnerClassesAttribute("name")));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_gOOE0_fid1() {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
    int length = innerClassesAttribute.getLength();
    assertEquals(4, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_yaFU0() {
        InnerClassesAttribute attribute = new InnerClassesAttribute("name");
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidName_XPqf3_fid1() {
        InnerClassesAttribute attribute = new InnerClassesAttribute("invalid_name");
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullName_vKpN4_fid1() {
        InnerClassesAttribute attribute = new InnerClassesAttribute(null);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(0, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_HAYK0_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    String actual = attribute.toString();
    String expected = "InnerClasses: name";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyName_Cfxy2_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("");
    String actual = attribute.toString();
    String expected = "InnerClasses: ";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNullAttributeName_kzVJ0_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    int expected = 1;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNonNullAttributeName_nvpE1_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("test");
    int expected = 32;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNonStringName_juVL4_VCbu0_fid1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("123");
    String actual = attribute.toString();
    String expected = "InnerClasses: 123";
    assertEquals(expected, actual);
}
}