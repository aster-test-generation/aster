/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import org.apache.commons.io.input.BoundedInputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadPathWithNullFileInputStream_Ujqe0() {
    FileInputStream fis = null;
    String path = Pack200UnpackerAdapter.readPath(fis);
    assertNull(path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrap_null_yFWw2() {
    FilterInputStream filterInputStream = null;
    InputStream result = Pack200UnpackerAdapter.unwrap(filterInputStream);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidPath_vHsD2() throws IOException {
    String path = "path/to/invalid/file.txt";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithNullPath_zuJI3() throws IOException {
    String path = null;
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithEmptyPath_ihZm4() throws IOException {
    String path = "";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidPaths_LzaJ5() throws IOException {
    String path1 = "path/to/invalid/file1.txt";
    String path2 = "path/to/invalid/file2.txt";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithNullPaths_Iwqq6() throws IOException {
    String path1 = null;
    String path2 = null;
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithEmptyPaths_MDvT7() throws IOException {
    String path1 = "";
    String path2 = "";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths_pJbo8() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = "path/to/invalid/file2.txt";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths2_CwIA9() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = null;
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths3_yKjt10() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = "";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths4_mcbp11() throws IOException {
    String path1 = null;
    String path2 = "path/to/file2.txt";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths5_bIBu12() throws IOException {
    String path1 = "";
    String path2 = "path/to/file2.txt";
    BoundedInputStream bis =Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_FileInputStream_wdny2_QpIF0() throws IOException {
    File file = new File("test.txt");
    FileInputStream fileInputStream = new FileInputStream(file);
    BoundedInputStream boundedInputStream = new BoundedInputStream(fileInputStream);
    assertEquals(fileInputStream, boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidURL_kcXT2_AsUR0() throws IOException, URISyntaxException {
    URL url = new URL("https://www.example.com");
    url.openConnection().setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url.getPath());
    assertNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithNullURL_mAjU1_EWTA0() throws IOException, URISyntaxException {
    URL url = null;
    BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream((URL) url);
    assertNull(boundedInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidPath_vHsD2_fid1() throws IOException {
    String path = "path/to/invalid/file.txt";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithNullPath_zuJI3_fid1() throws IOException {
    String path = null;
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithInvalidPaths_LzaJ5_fid1() throws IOException {
    String path1 = "path/to/invalid/file1.txt";
    String path2 = "path/to/invalid/file2.txt";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithNullPaths_Iwqq6_fid1() throws IOException {
    String path1 = null;
    String path2 = null;
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths_pJbo8_fid1() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = "path/to/invalid/file2.txt";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths2_CwIA9_fid1() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = null;
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths3_yKjt10_fid1() throws IOException {
    String path1 = "path/to/file1.txt";
    String path2 = "";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths4_mcbp11_fid1() throws IOException {
    String path1 = null;
    String path2 = "path/to/file2.txt";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithMixedPaths5_bIBu12_fid1() throws IOException {
    String path1 = "";
    String path2 = "path/to/file2.txt";
    BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1, path2);
    assertNotNull(bis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_FileInputStream_wdny2_QpIF0_fid1() throws IOException {
    File file = new File("test.txt");
    FileInputStream fileInputStream = new FileInputStream(file);
    BoundedInputStream boundedInputStream = new BoundedInputStream(fileInputStream);
    assertEquals(fileInputStream.getClass(), boundedInputStream.getClass());
}
}