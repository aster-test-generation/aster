/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_EmptyList_EaVc0() {
    IntList list = new IntList();
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_NonEmptyList_mwlA1() {
    IntList list = new IntList(10);
    list.add(1);
    assertFalse(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEmpty_ZeroSizeList_kmmz3() {
    IntList list = new IntList(0);
    assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_InvalidLocation_uIMA1() {
    IntList list = new IntList(10);
    try {
        list.get(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("-1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_EmptyList_JjnW0() {
    IntList list = new IntList();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_SingleElementList_UGXA1() {
    IntList list = new IntList(1);
    list.add(1);
    assertEquals(1, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSize_MultipleElementList_raag2() {
    IntList list = new IntList(3);
    list.add(1);
    list.add(2);
    list.add(3);
    assertEquals(3, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrement_InvalidLocation_BEMm1() {
    IntList list = new IntList(10);
    try {
        list.increment(-1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertEquals("-1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClear_emptyList_egVR0() {
    IntList list = new IntList();
    list.clear();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClear_emptyList_firstIndexAndLastIndexNotEqual_pFKF3() {
    IntList list = new IntList();
    list.add(1);
    list.clear();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClear_nonEmptyList_firstIndexAndLastIndexEqual_bYeG4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.clear();
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_Qoxx0_1() {
    IntList list = new IntList(10);
    assertTrue(list.add(1));}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_Qoxx0_2() {
    IntList list = new IntList(10);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_Jbwm2_1() {
    IntList list = new IntList(0);
    assertTrue(list.add(1));}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_Jbwm2_2() {
    IntList list = new IntList(0);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_FullList_wvEq3_1() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(i);
    }
    assertTrue(list.add(10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_FullList_wvEq3_2() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(i);
    }
    assertEquals(10, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_DuplicateElement_fjGE4_1() {
    IntList list = new IntList(10);
    list.add(1);
    assertTrue(list.add(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_DuplicateElement_fjGE4_2() {
    IntList list = new IntList(10);
    list.add(1);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_DuplicateElement_fjGE4_3() {
    IntList list = new IntList(10);
    list.add(1);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_BADd0_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_BADd0_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_BADd0_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_BADd0_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(3, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_InvalidLocation_ACNX1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    try {
        list.remove(4);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_EmptyList_VYyx2() {
    IntList list = new IntList(10);
    try {
        list.remove(0);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSize_IQtg3_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(2, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsSize_IQtg3_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(2);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_5() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(4, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4_6() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(5, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_5() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(3, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5_6() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(5, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_JeGF6_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_JeGF6_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_JeGF6_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(2, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_JeGF6_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(3, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyList_mOsa0() {
    IntList list = new IntList();
    list.addAll(new IntList());
    assertEquals(0, list.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyListToNonEmptyList_dfnY2_1() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    list.addAll(new IntList());
    assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyListToNonEmptyList_dfnY2_2() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    list.addAll(new IntList());
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyListToNonEmptyList_dfnY2_3() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    list.addAll(new IntList());
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3_1() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3_2() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3_3() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3_4() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(3, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3_5() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(4, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4_1() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(4, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4_2() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4_3() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4_4() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(1, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4_5() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(2, list.get(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArray_XXiw0_1() {
    IntList list = new IntList(0);
    int[] result = list.toArray();
    for (int i = 0; i < result.length; i++) {
    }
    assertEquals(0, result.length);}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayEmpty_ilIT1() {
    IntList list = new IntList();
    int[] result = list.toArray();
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleElements_dhiY3_1() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleElements_dhiY3_2() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(1, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleElements_dhiY3_3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(2, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleElements_dhiY3_4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayLargeNumberOfElements_TKhe4_1() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result = list.toArray();
    for (int i = 0; i < 1000; i++) {
    }
    assertEquals(1000, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleCalls_qXxb5_1() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result1 = list.toArray();
    int[] result2 = list.toArray();
    for (int i = 0; i < 1000; i++) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_ValidInput_Qoxx0() {
    IntList list = new IntList(10);
    assertTrue(list.add(1));
    assertEquals(1, list.size());
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_EmptyList_Jbwm2() {
    IntList list = new IntList(0);
    assertTrue(list.add(1));
    assertEquals(1, list.size());
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ValidLocation_BADd0() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(1);
    assertEquals(2, result);
    assertEquals(2, list.size());
    assertEquals(1, list.get(0));
    assertEquals(3, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationLessThanHalf_xoGv4() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(2);
    assertEquals(3, result);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(4, list.get(2));
    assertEquals(5, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationGreaterThanHalf_IQvG5() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    list.add(4);
    list.add(5);
    int result = list.remove(3);
    assertEquals(4, result);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(3, list.get(2));
    assertEquals(5, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_LocationEqualsZero_JeGF6() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int result = list.remove(0);
    assertEquals(1, result);
    assertEquals(2, list.size());
    assertEquals(2, list.get(0));
    assertEquals(3, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_EmptyListToNonEmptyList_dfnY2() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    list.addAll(new IntList());
    assertEquals(2, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NonEmptyListToNonEmptyList_TkrZ3() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(3);
    list2.add(4);
    list.addAll(list2);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(3, list.get(2));
    assertEquals(4, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_DuplicateElements_DYby4() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(1, list.get(2));
    assertEquals(2, list.get(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAll_NoDuplicates_DuplicateElements_tUwW6() {
    IntList list = new IntList();
    list.add(1);
    list.add(2);
    IntList list2 = new IntList();
    list2.add(1);
    list2.add(2);
    list.addAll(list2);
    assertEquals(4, list.size());
    assertEquals(1, list.get(0));
    assertEquals(2, list.get(1));
    assertEquals(1, list.get(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleElements_dhiY3() {
    IntList list = new IntList(10);
    list.add(1);
    list.add(2);
    list.add(3);
    int[] result = list.toArray();
    assertEquals(3, result.length);
    assertEquals(1, result[0]);
    assertEquals(2, result[1]);
    assertEquals(3, result[2]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayLargeNumberOfElements_TKhe4() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result = list.toArray();
    assertEquals(1000, result.length);
    for (int i = 0; i < 1000; i++) {
        assertEquals(i, result[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleCalls_qXxb5() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result1 = list.toArray();
    int[] result2 = list.toArray();
    assertEquals(1000, result1.length);
    assertEquals(1000, result2.length);
    for (int i = 0; i < 1000; i++) {
        assertEquals(i, result1[i]);
        assertEquals(i, result2[i]);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_location0_ziXR0() {
    IntList list = new IntList(10);
    list.add(0, 10);
    assertEquals(10, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleCalls_qXxb5_1_fid3() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result1 = list.toArray();
    int[] result2 = list.toArray();
    for (int i = 0; i < 1000; i++) {
    }
    assertEquals(1000, result1.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToArrayMultipleCalls_qXxb5_2() {
    IntList list = new IntList(1000);
    for (int i = 0; i < 1000; i++) {
        list.add(i);
    }
    int[] result1 = list.toArray();
    int[] result2 = list.toArray();
    for (int i = 0; i < 1000; i++) {
    }
    assertEquals(1000, result2.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_NullElement_VtOm5_KpVY0_2() {
    IntList list = new IntList(10);
    assertEquals(0, list.size());}
}