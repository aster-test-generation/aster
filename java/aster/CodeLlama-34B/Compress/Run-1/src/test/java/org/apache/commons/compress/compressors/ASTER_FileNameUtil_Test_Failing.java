/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName4_XiDc3() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.txt..zip";
    String expected = "file.txt.";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleSuffix_pXog2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.gz.bz2.gz.bz2";
    String expected = "file.txt.gz.bz2";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtensionAndSuffix_VKpj4() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.gz.gz";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffix_qGJr6() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.custom.custom";
    String expected = "file.txt.custom";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndDefaultExtension_JsGc7() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.custom.custom";
    String expected = "file.txt.custom";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndMultipleSuffix_eGFS8() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.custom.gz.custom.gz";
    String expected = "file.txt.custom.gz";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndMultipleSuffixAndDefaultExtension_tDvX9() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.custom.gz.custom.gz";
    String expected = "file.txt.custom.gz";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_defaultExtension_aHeb3_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String compressedFileName = fileNameUtil.getCompressedFileName("file");
    assertEquals("file.txt", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_nullFileName_ZkDs1_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertFalse(fileNameUtil.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileName_Ocab3_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("file.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithExtension_yeZU4_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("file.zip.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_validFileNameWithMultipleExtensions_rQUY5_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    assertTrue(fileNameUtil.isCompressedFilename("file.zip.txt.gz"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName1_Vabn0_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.zip";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName2_rMWl1_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.rar";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName4_XiDc3_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    uncompressSuffix.put("rar", "");
    String defaultExtension = "txt";
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
    String fileName = "file.txt.zip";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFileName(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_InvalidCompressedFileNameWithLongSuffix_ejwl4_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertFalse(fileNameUtil.isCompressedFileName("file.txt.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_ValidCompressedFileNameWithShortSuffix_hAEv5_fid2() {
    Map<String, String> uncompressSuffix = new HashMap<>();
    uncompressSuffix.put("zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "zip");
    assertTrue(fileNameUtil.isCompressedFileName("file.z"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_sIFB0() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt";
    String expected = "file";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithSuffix_gwvb1_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleSuffix_pXog2_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.gz.bz2";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtension_ixDj3() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt";
    String expected = "file";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtensionAndSuffix_VKpj4_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithDefaultExtensionAndMultipleSuffix_NyvX5_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.gz.bz2";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffix_qGJr6_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.custom";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndDefaultExtension_JsGc7_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.custom";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndMultipleSuffix_eGFS8_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "");
    String fileName = "file.txt.custom.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithCustomSuffixAndMultipleSuffixAndDefaultExtension_tDvX9_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<>(), "txt");
    String fileName = "file.txt.custom.gz";
    String expected = "file.txt";
    String actual = fileNameUtil.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_eBWp0_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "");
    String fileName = "file.txt";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithSuffix_YDql1_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt";
    String expected = "file.txt.gz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithDefaultExtension_giLI2_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt";
    String expected = "file.txt.txt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleSuffix_cuGr3_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt.gz";
    String expected = "file.txt.gz.gz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleDefaultExtension_vicG4_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.txt";
    String expected = "file.txt.txt.txt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleSuffixAndDefaultExtension_zOdy5_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "gz");
    String fileName = "file.txt.gz.txt";
    String expected = "file.txt.gz.txt.gz";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilenameWithMultipleDefaultExtensionAndSuffix_LrvR6_fid2() {
    FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
    String fileName = "file.txt.txt.gz";
    String expected = "file.txt.txt.gz.txt";
    String actual = fileNameUtil.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
}