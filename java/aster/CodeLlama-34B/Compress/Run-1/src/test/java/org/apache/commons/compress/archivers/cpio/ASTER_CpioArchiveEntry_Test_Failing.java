/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
public void testGetAlignmentBoundary_gnqq0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithName_sdOh1() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithSize_Isak2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithInputPath_ewsn3() throws IOException {
}
public void testGetAlignmentBoundaryWithFormatAndInputPath_qBjb4() throws IOException {
}
public void testGetAlignmentBoundaryWithFormatAndName_HYku5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithFormatAndFile_NZQq6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(1, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithNameAndSize_CGly7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithFileAndName_VbQR8() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0, entry.getAlignmentBoundary());
}
public void testGetAlignmentBoundaryWithAllParams_WUre9() {
}
public void testGetRemoteDeviceMaj_FlvR0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithName_hArr1() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithPath_RawZ2() throws IOException {
}
public void testGetRemoteDeviceMajWithFile_pnZf3() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithSize_Bftd4() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100L);
assertEquals(0, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormat_IyFX5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndName_lama6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndPath_Zuii7() throws IOException {
}
public void testGetRemoteDeviceMajWithFormatAndFile_lxMp8() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testGetRemoteDeviceMajWithFormatAndSize_ssCO9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(1, entry.getRemoteDeviceMaj());
}
public void testSetInode_igEq0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(10);
assertEquals(10, entry.getInode());
}
public void testSetInodeWithNegativeValue_vfXB1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(-10);
assertEquals(-10, entry.getInode());
}
public void testSetInodeWithZeroValue_zaxY2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(0);
assertEquals(0, entry.getInode());
}
public void testSetInodeWithMaxValue_nASW3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getInode());
}
public void testSetInodeWithMinValue_hfRQ4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
entry.setInode(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getInode());
}
public void testSetInodeWithNull_xclQ5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertNull(entry.getInode());
}
public void testSetInodeWithEmptyString_enGm6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals("", entry.getInode());
}
public void testSetInodeWithInvalidString_jqIR7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals("invalid", entry.getInode());
}
public void testSetInodeWithValidString_GNdw8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(10, entry.getInode());
}
public void testSetInodeWithValidStringAndNegativeValue_Mnmv9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(-10, entry.getInode());
}
public void testGetRemoteDeviceMin_qzfl0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFormat_CISV1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithName_xxTA2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithInputPath_Bqgn3() throws IOException {
}
public void testGetRemoteDeviceMinWithFormatAndInputPath_IJQi4() throws IOException {
}
public void testGetRemoteDeviceMinWithFormatAndName_vRzt5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFile_UNcy6() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFormatAndFile_lCzd7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithNameAndSize_bAYV8() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testGetRemoteDeviceMinWithFileAndSize_cLll9() {
}
public void testGetUID_shortFormat_AVYG0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(1, entry.getUID());
}
public void testGetUID_shortFormat_name_aglA1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
assertEquals(1, entry.getUID());
}
public void testGetUID_shortFormat_name_size_ECtc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
assertEquals(1, entry.getUID());
}
public void testGetUID_name_Zhav3() {
CpioArchiveEntry entry = new CpioArchiveEntry("name");
assertEquals(0, entry.getUID());
}
public void testGetUID_name_size_OSuX4() {
CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
assertEquals(0, entry.getUID());
}
public void testGetUID_path_name_hYTQ5() throws IOException {
}
public void testGetUID_path_name_options_wsLt6() throws IOException {
}
public void testGetUID_file_name_DlHC7() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
assertEquals(0, entry.getUID());
}
public void testGetUID_file_name_size_mkKl8() {
}
public void testGetUID_invalidFormat_gLFk9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
assertEquals(0, entry.getUID());
}
public void testSetRemoteDeviceMaj_PcuL0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(200L);
assertEquals(200L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithNegativeValue_LxUo1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(-200L);
assertEquals(-200L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithZeroValue_rjeX2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(0L);
assertEquals(0L, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithMaxValue_RynO3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithMinValue_lhiF4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMaj(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMaj());
}
public void testSetRemoteDeviceMajWithInvalidValue_mzEn5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected NullPointerException");
} catch (NullPointerException e) {
assertEquals("Remote device major number cannot be null", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue2_CGCt6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: invalid", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue3_isPu7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: java.lang.Object", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue4_ACfs8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: [I", e.getMessage());
}
}
public void testSetRemoteDeviceMajWithInvalidValue5_fCKU9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
try {
fail("Expected IllegalArgumentException");
} catch (IllegalArgumentException e) {
assertEquals("Invalid remote device major number: [Ljava.lang.Object;", e.getMessage());
}
}
public void testGetDeviceMin_NPLQ0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithFormat_WwCj1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
assertEquals(2, entry.getDeviceMin());
}
public void testGetDeviceMinWithName_QWFg2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithInputPath_wqFN3() throws IOException {
}
public void testGetDeviceMinWithFormatAndInputPath_ptkO4() throws IOException {
}
public void testGetDeviceMinWithFormatAndName_Wgyc5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithFile_ofaS6() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithFormatAndFile_RhZs7() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
assertEquals(1, entry.getDeviceMin());
}
public void testGetDeviceMinWithNameAndSize_sBge8() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
assertEquals(0, entry.getDeviceMin());
}
public void testGetDeviceMinWithFileAndSize_xXWT9() {
File inputFile = new File("test");
}
public void testGetHeaderSizeWithDefaultConstructor_rCsU0() {
}
public void testGetHeaderSizeWithShortFormatConstructor_oLfz1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithShortFormatNameConstructor_skPC2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithShortFormatNameSizeConstructor_uBMB3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithPathConstructor_kqpe4() throws IOException {
}
public void testGetHeaderSizeWithShortFormatPathConstructor_YrNa5() throws IOException {
}
public void testGetHeaderSizeWithShortFormatFileConstructor_cayD6() {
File inputFile = new File("test.txt");
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithNameSizeConstructor_rdhK7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithFileConstructor_IweU8() {
File inputFile = new File("test.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testGetHeaderSizeWithNullConstructor_OcAy9() {
CpioArchiveEntry entry = new CpioArchiveEntry(null);
int headerSize = entry.getHeaderSize();
assertEquals(0, headerSize);
}
public void testSetTime_HZcD0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt", 100L);
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFormat_HnFI1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt", 100L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithName_WidY2() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithInputPath_pYZn3() throws IOException {
}
public void testSetTimeWithFormatAndInputPath_MHdH4() throws IOException {
}
public void testSetTimeWithFormatAndName_OnbQ5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFile_aSkZ6() {
File inputFile = new File("file.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithNameAndSize_wXTm7() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt", 100L);
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithFileAndName_utZd8() {
File inputFile = new File("file.txt");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "file.txt");
entry.setTime(1000L);
assertEquals(1000L, entry.getTime());
}
public void testSetTimeWithInvalidTime_LLuR9() {
CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
entry.setTime(-1L);
assertEquals(-1L, entry.getTime());
}
public void testSetRemoteDevice_pqXS0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithOldFormat_YuxB1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNewFormat_nrBJ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNameOnly_zrZr3() {
CpioArchiveEntry entry = new CpioArchiveEntry("name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithPathAndName_nDkR4() {
}
public void testSetRemoteDeviceWithFormatPathAndName_PQJA5() {
}
public void testSetRemoteDeviceWithFormatNameAndSize_efnj6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithFileAndName_FnNd7() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithFormatFileAndName_zIfv8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "name");
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testSetRemoteDeviceWithNameAndSize_DoIc9() {
CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
entry.setRemoteDevice(10L);
assertEquals(10L, entry.getRemoteDevice());
}
public void testGetSize_shortFormat_ismu0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(0, entry.getSize());
}
public void testGetSize_shortFormat_name_Odcd1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0, entry.getSize());
}
public void testGetSize_shortFormat_name_size_aHsa2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
assertEquals(10, entry.getSize());
}
public void testGetSize_name_xXrY3() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getSize());
}
public void testGetSize_name_size_gppC4() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 10);
assertEquals(10, entry.getSize());
}
public void testGetSize_inputPath_UmNx5() throws IOException {
}
public void testGetSize_inputPath_entryName_UCoC6() throws IOException {
}
public void testGetSize_inputPath_entryName_options_KkUk7() throws IOException {
}
public void testGetSize_inputFile_YpWk8() {
File inputFile = new File("test");
CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entry");
assertEquals(0, entry.getSize());
}
public void testGetSize_inputFile_entryName_apBW9() {
File inputFile = new File("test");
}
public void testSetUID_gJnE0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(100L);
assertEquals(100L, entry.getUID());
}
public void testSetUIDWithNegativeValue_onwH1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(-100L);
assertEquals(-100L, entry.getUID());
}
public void testSetUIDWithZeroValue_PXOs2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(0L);
assertEquals(0L, entry.getUID());
}
public void testSetUIDWithMaxValue_hTxE3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getUID());
}
public void testSetUIDWithMinValue_LHNb4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
entry.setUID(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getUID());
}
public void testSetUIDWithNull_aFQU5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertNull(entry.getUID());
}
public void testSetUIDWithEmptyString_dZnQ6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals("", entry.getUID());
}
public void testSetUIDWithInvalidString_Vtqo7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals("invalid", entry.getUID());
}
public void testSetUIDWithValidString_zZYB8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals(100L, entry.getUID());
}
public void testSetUIDWithInvalidFormat_BWYs9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
assertEquals(100L, entry.getUID());
}
public void testGetGID_shortFormat_pakY0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_umvd1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_size_VIjc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
assertEquals(0, entry.getGID());
}
public void testGetGID_name_xwid3() {
CpioArchiveEntry entry = new CpioArchiveEntry("test");
assertEquals(0, entry.getGID());
}
public void testGetGID_inputPath_entryName_fIsp4() {
}
public void testGetGID_shortFormat_inputPath_entryName_Nlqk5() {
}
public void testGetGID_shortFormat_name_inputFile_entryName_HUnM6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test"), "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_name_size_oqVB7() {
CpioArchiveEntry entry = new CpioArchiveEntry("test", 100);
assertEquals(0, entry.getGID());
}
public void testGetGID_inputFile_entryName_VbVI8() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
assertEquals(0, entry.getGID());
}
public void testGetGID_shortFormat_name_size_inputFile_entryName_pgob9() {
}
public void testSetDeviceMaj_oVOL0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(10L);
assertEquals(10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithNegativeValue_lcIp1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(-10L);
assertEquals(-10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithZeroValue_HyuZ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(0L);
assertEquals(0L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithMaxValue_XkxC3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getDeviceMaj());
}
public void testSetDeviceMajWithMinValue_SpBh4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setDeviceMaj(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getDeviceMaj());
}
public void testSetDeviceMajWithNull_VQcI5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getDeviceMaj());
}
public void testSetDeviceMajWithEmptyString_TwgZ6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("", entry.getDeviceMaj());
}
public void testSetDeviceMajWithNonNumericString_kbXG7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("abc", entry.getDeviceMaj());
}
public void testSetDeviceMajWithNumericString_AbJM8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(10L, entry.getDeviceMaj());
}
public void testSetDeviceMajWithInvalidFormat_jJso9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(10.0, entry.getDeviceMaj());
}
public void testSetMode_C_ISDIR_ruxe0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISLNK_ZjnG1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISREG_jFXc2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISFIFO_htgf3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISCHR_QOkg4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISBLK_WfJw5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISSOCK_QPFu6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_C_ISNWK_TGsH7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
}
public void testSetMode_UnknownMode_UjcL8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
try {
entry.setMode(1000);
fail("IllegalArgumentException should be thrown");
} catch (IllegalArgumentException e) {
assertEquals("Unknown mode. Full: 1000 Masked: 1000", e.getMessage());
}
}
public void testSetMode_NullMode_yabT9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
try {
fail("NullPointerException should be thrown");
} catch (NullPointerException e) {
assertEquals("Mode cannot be null", e.getMessage());
}
}
public void testSetNumberOfLinks_vqpj0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNegativeValue_MVdC1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(-1);
assertEquals(0, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithZeroValue_extP2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(0);
assertEquals(0, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithLargeValue_cWnx3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(1000);
assertEquals(1000, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNullName_rgQD4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithEmptyName_NKeW5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithInvalidName_HIuD6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetNumberOfLinksWithNullInputPath_YRgg7() {
}
public void testSetNumberOfLinksWithEmptyInputPath_UjVr8() {
}
public void testSetNumberOfLinksWithInvalidInputPath_bucN9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
entry.setNumberOfLinks(2);
assertEquals(2, entry.getNumberOfLinks());
}
public void testSetRemoteDeviceMin_ZGcl0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(10L);
assertEquals(10L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNegativeValue_oDtc1() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(-10L);
assertEquals(-10L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithZeroValue_ivcQ2() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(0L);
assertEquals(0L, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithMaxValue_DoZK3() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(Long.MAX_VALUE);
assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithMinValue_aQEq4() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
entry.setRemoteDeviceMin(Long.MIN_VALUE);
assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNull_ESFh5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithInvalidValue_ozuq6() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("invalid", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithEmptyString_bdCj7() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals("", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithBlankString_dcbf8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertEquals(" ", entry.getRemoteDeviceMin());
}
public void testSetRemoteDeviceMinWithNullFormat_XNvX9() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
assertNull(entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_CpioArchiveEntry_PmBb0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test.txt", 100L);
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetwork_CpioArchiveEntry_JMmK0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertTrue(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_Ysky0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFile_OJfC6() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test.txt");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFormatAndFile_TiGv7() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test.txt");
    assertEquals(0L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithNameAndSize_RFrx8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 100L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_shortFormat_cisA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_formatAndFileAndEntryName_yoDM8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_inputFileAndEntryName_eqAo10() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_format_inputFile_kOSK7() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_inputFile_wHqr9() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setGID(1000);
    assertEquals(1000, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_true_Eazm0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "symbolic_link", 0);
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_CpioArchiveEntry_KlCy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_File_C_ISDIR_RNIF3() {
    File file = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(file, "test");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ImWe1() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "test", 100);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_oldFormat_PzNc0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_newFormat_zXOL1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withName_kUNk2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withNameAndSize_zMFz3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100);
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withFile_Akoq6() {
    File inputFile = new File("file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_withFile_cNfQ4() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_withFormatAndFile_aevq8() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, inputFile, "test");
    assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_oldFormat_MwAo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_newFormat_kKln1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2);
    assertEquals(2, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_withName_TMov2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_withSize_OKJs3() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_withFormatAndFile_jyUL6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "name");
    assertEquals(1, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_withFile_JqaM8() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringFormat_ALhd6() {
    CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_stringFormatAndSize_zKkE7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("file.txt", 100L);
    assertEquals((short) 0, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_MstZ0() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithName_iehg2() {
CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithFormatAndFile_gCNY5() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("test.txt"), "test.txt");
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithNameAndSize_TKej6() {
CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 100L);
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithFileAndName_FVEy7() {
CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDateWithFormatAndName_icBa8() {
CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt");
Date lastModifiedDate = entry.getLastModifiedDate();
assertEquals(new Date(1000 * 100), lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_CpioArchiveEntry_xDmP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_shortFormat_MUid0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipe_shortFormat_mode1_yyJk3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setMode(1);
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_ytUL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    entry.setTime(FileTime.fromMillis(1000));
    assertEquals(1000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nonNullName_Xpwl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(4, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_nonNullNameAndCharset_OCsV2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test");
    assertEquals(4, entry.getHeaderPadCount(Charset.defaultCharset()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_emptyName_epaM4() {
    CpioArchiveEntry entry = new CpioArchiveEntry("");
    assertEquals(0, entry.getHeaderPadCount(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_nonDefault_vbLC1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidValue_hxnR5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    try {
        entry.setDeviceMin(Long.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid device number", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithNullEntry_skuy6() {
    CpioArchiveEntry entry = null;
    try {
        entry.setDeviceMin(10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Entry is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidFormat_oeFA7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 10);
    try {
        entry.setDeviceMin(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid format", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidName_uDrl8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 10);
    try {
        entry.setDeviceMin(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidSize_zzKv9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", -10);
    try {
        entry.setDeviceMin(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_tHBn0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFile_wAmv3() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(0, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormatAndName_Jhdt4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test");
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFormatAndFile_PCmE6() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "test");
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormat_uxlZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFileAndEntryName_RNPp7() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(Objects.hash("entryName"), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nameAndSize_mhZx8() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
    assertEquals(Objects.hash("name", 100L), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice_cZNR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setDevice(10);
    assertEquals(10, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithNewFormat_GGOH2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    entry.setDevice(10);
    assertEquals(10, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithInvalidFormat_ZZoI3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "test", 100);
    try {
        entry.setDevice(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid format", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithNullName_vEBK4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 100);
    try {
        entry.setDevice(10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Name cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithEmptyName_oRGV5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 100);
    try {
        entry.setDevice(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Name cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithNegativeSize_WSYa6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", -100);
    try {
        entry.setDevice(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Size cannot be negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithZeroSize_GDrG7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 0);
    entry.setDevice(10);
    assertEquals(10, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithLargeSize_HqGv8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 1000000000000L);
    entry.setDevice(10);
    assertEquals(10, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithInvalidDevice_Jjiu9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setDevice(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Device cannot be negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_alignmentBoundaryIsZero_UAhB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test.txt", 100L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_alignmentBoundaryIsNegative_MvCk3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) -4, "test.txt", 100L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsNegative_lhfP4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", -100L);
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_sizeIsGreaterThanAlignmentBoundary_baLE6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 4, "test.txt", 101L);
    assertEquals(3, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_fileFormat_muge12() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_fileFormat_longName_FcHP13() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    entry.setName("test_long_name");
    assertEquals("test_long_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_shortFormat_IZyQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_longSize_kSXq2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDevice_fileInputFile_burA5() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("test"), "test");
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinks_directory_quxQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioConstants.FORMAT_NEW, "directory", 0);
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_1_TWVj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(10);
    assertEquals(0, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_2_zYVl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(11);
    assertEquals(1, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_3_Llsm2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(12);
    assertEquals(2, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_7_wfuV6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(13);
    assertEquals(3, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_8_tIeL7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10);
    int padCount = entry.getHeaderPadCount(14);
    assertEquals(4, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_1_hclB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_2_CnOE1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_3_CPnT2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_5_PRRW4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 5, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_6_arHe5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 6, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_7_NHrk6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 7, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_8_DPpS7() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 8, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_9_hWeT8() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 9, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_10_oFiI9() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 10, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_11_ESPU10() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 11, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_12_kQBW11() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_13_MzQY12() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 13, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_14_XqVq13() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 14, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_15_WdNN14() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 15, "test.txt", 10L);
    assertEquals(0, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_Ysky0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt",0L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithNameAndSize_RFrx8_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt",0L);
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_newFormat_zXOL1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(1, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_oldFormat_MwAo0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals(0, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_withSize_OKJs3_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 10);
    assertEquals(10, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_ytUL0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
    entry.setTime(FileTime.fromMillis(1));
    assertEquals(1, entry.getTime());
}
@Test
@Timeout(value =32768, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_nonDefault_vbLC1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)32768, "test.txt",3276800L);
    assertEquals(1, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMinWithInvalidSize_zzKv9_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 10);
    try {
        entry.setDeviceMin(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid size", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInodeWithFile_wAmv3_fid1() {
    File inputFile = new File("test");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test");
    assertEquals(1, entry.getInode());
}
@Test
@Timeout(value =31, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormat_uxlZ0_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)31);
    assertEquals(1, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithNegativeSize_WSYa6_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setDevice(10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Size cannot be negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceWithInvalidDevice_Jjiu9_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    try {
        entry.setDevice(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Device cannot be negative", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_1_TWVj3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 13);
    int padCount = entry.getHeaderPadCount(13);
    assertEquals(3, padCount);
}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_2_zYVl1_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)2, "name",20);
    int padCount = entry.getHeaderPadCount(11);
    assertEquals(1, padCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_3_CPnT2_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 3, "test.txt", 10L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_6_arHe5_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 6, "test.txt", 10L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_9_hWeT8_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 9, "test.txt", 10L);
    assertEquals(4, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_10_oFiI9_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 10, "test.txt", 10L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_12_kQBW11_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 12, "test.txt", 10L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_14_XqVq13_fid1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 14, "test.txt", 10L);
    assertEquals(1, entry.getHeaderPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_oldFormat_pEQD1_wfPw0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_invalidFormat_dXyp2_vouE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test",0);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_nullName_mODE3_TsnQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null,0);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_invalidFile_ZoHa9_SaSj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test",0);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withFileAndNameAndSizeAndOptions_xPIA9_hKgt0() throws IOException {
    File inputFile = new File("file");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    assertEquals(1, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFileAndEntryNameAndSize_ftjx9_cRmI0() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(Objects.hash("entryName", inputFile.length()), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTimeWithFileAndSize_BWho9_Ldpw0_fid2() {
    File inputFile = new File("test.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "test.txt");
    assertEquals(100L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_newFormat_dZdG0_XzQh0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_invalidFormat_dXyp2_vouE0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test", 100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_nullName_mODE3_TsnQ0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, null, 100);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_invalidSize_Nxsm11_cgyQ0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", -1);
    assertEquals(0, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksum_emptyName_OOrt4_xtEp0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "", 100);
    entry.setRemoteDeviceMin(100);
    assertEquals(100, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDevice_withFileAndNameAndSizeAndOptions_xPIA9_hKgt0_fid2() throws IOException {
    File inputFile = new File("file");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputFile, "entryName");
    assertEquals(0, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_shortFormatAndSize_XOWt2_FXkS0_fid2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test", 100L);
    assertEquals(Objects.hash(100L), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFileAndEntryNameAndSize_ftjx9_cRmI0_fid2() {
    File inputFile = new File("path/to/file");
    CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
    assertEquals(Objects.hash("entryName", 100L), entry.hashCode());
}
}