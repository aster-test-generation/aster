/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleFlags_NwZh2() {
    int[] flags = new int[3];
    flags[0] = 1 << 16;
    flags[1] = 1 << 17;
    flags[2] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(3, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_emptyDescriptor_arkS0() {
    int result = SegmentUtils.countArgs("");
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_invalidDescriptor_Evqq9() {
    int result = SegmentUtils.countArgs("(I");
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_nullDescriptor_bMAs10() {
    int result = SegmentUtils.countArgs(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleFlags_rnJG2() {
    long[] flags = new long[3];
    flags[0] = 1 << 16;
    flags[1] = 1 << 17;
    flags[2] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(3, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_allFlags_mmNZ3() {
    long[] flags = new long[64];
    for (int i = 0; i < 64; i++) {
        flags[i] = 1 << i;
    }
    int count = SegmentUtils.countBit16(flags);
    assertEquals(64, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountInvokeInterfaceArgs_emptyDescriptor_Lbky0() {
    int result = SegmentUtils.countInvokeInterfaceArgs("");
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountInvokeInterfaceArgs_nullDescriptor_CgAP1() {
    int result = SegmentUtils.countInvokeInterfaceArgs(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountInvokeInterfaceArgs_invalidDescriptor_uovX5() {
    int result = SegmentUtils.countInvokeInterfaceArgs("(Ljava/lang/String;Ljava/lang/String;)V");
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleElements_BEkY2() {
    long[][] flags = new long[2][2];
    flags[0][0] = 1 << 16;
    flags[0][1] = 1 << 17;
    flags[1][0] = 1 << 18;
    flags[1][1] = 1 << 19;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(4, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_nullArray_LhFB3() {
    long[][] flags = null;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(0, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_singleRowMultipleColumns_kEUa4() {
    long[][] flags = new long[1][3];
    flags[0][0] = 1 << 16;
    flags[0][1] = 1 << 17;
    flags[0][2] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(3, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleRowsSingleColumn_vbIZ5() {
    long[][] flags = new long[3][1];
    flags[0][0] = 1 << 16;
    flags[1][0] = 1 << 17;
    flags[2][0] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(3, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleRowsMultipleColumns_cZDU6() {
    long[][] flags = new long[3][3];
    flags[0][0] = 1 << 16;
    flags[0][1] = 1 << 17;
    flags[0][2] = 1 << 18;
    flags[1][0] = 1 << 19;
    flags[1][1] = 1 << 20;
    flags[1][2] = 1 << 21;
    flags[2][0] = 1 << 22;
    flags[2][1] = 1 << 23;
    flags[2][2] = 1 << 24;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(9, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleFlags_NwZh2_fid1() {
    int[] flags = new int[1];
    flags[0] = 1 << 16;
    flags[1] = 1 << 17;
    flags[2] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(1, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs_nullDescriptor_bMAs10_fid1() {
    int result = SegmentUtils.countArgs("", 10);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleFlags_rnJG2_fid1() {
    long[] flags = new long[1];
    flags[0] = 1 << 16;
    flags[1] = 1 << 17;
    flags[2] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(1, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_allFlags_mmNZ3_fid1() {
    long[] flags = new long[64];
    for (int i = 0; i <2; i++) {
        flags[i] = 1 << i;
    }
    int count = SegmentUtils.countBit16(flags);
    assertEquals(64, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16_multipleRowsSingleColumn_vbIZ5_fid1() {
    long[][] flags = new long[1][1];
    flags[0][0] = 1 << 16;
    flags[1][0] = 1 << 17;
    flags[2][0] = 1 << 18;
    int count = SegmentUtils.countBit16(flags);
    assertEquals(1, count);
}
}