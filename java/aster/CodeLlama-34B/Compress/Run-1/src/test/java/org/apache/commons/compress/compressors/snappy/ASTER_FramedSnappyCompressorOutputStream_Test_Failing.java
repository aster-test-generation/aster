/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask_PzxU0() {
    long x =1017969039;
    long expected =1017969039;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMask_PzxU0_fid1() {
    long x = 123456789;
    long expected = 123456789;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskNegative_WEfv1_fid1() {
    long x = -123456789;
    long expected = -123456789;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskLarge_PMPO2_fid1() {
    long x = 1234567890123456789L;
    long expected = 1234567890123456789L;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskSmall_TEhP3_fid1() {
    long x = 123;
    long expected = 123;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskZero_eTfg4() {
    long x = 0;
    long expected = 0;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskNegativeZero_UXAg5_fid1() {
    long x = -0;
    long expected = -0;
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMaskNegativeInfinity_HXQn7_cKwr0_fid1() {
    long x = Double.doubleToLongBits(Double.NEGATIVE_INFINITY);
    long expected = Double.doubleToLongBits(Double.NEGATIVE_INFINITY);
    long actual = FramedSnappyCompressorOutputStream.mask(x);
    assertEquals(expected, actual);
}
}