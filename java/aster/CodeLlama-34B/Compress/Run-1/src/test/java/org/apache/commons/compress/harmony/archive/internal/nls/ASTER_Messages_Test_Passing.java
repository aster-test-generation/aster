/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.archive.internal.nls;
import java.util.Locale;
import java.util.ResourceBundle;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Locale;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Messages_Test_Passing {
Messages messages = new Messages();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullBundle_bQGk0() {
        String msg = "Hello, World!";
        Object[] args = new Object[] { "John", "Doe" };
        String expected = "Hello, World!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_rcRY0() {
        messages = new Messages();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyMessage_xqvo2() {
        String result = messages.getString("", new Object[] { "arg" });
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNonEmptyMessage_YNNH3() {
        String result = messages.getString("message", new Object[] { "arg" });
        assertEquals("message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArgs_BJXR5() {
        String result = messages.getString("message", new Object[] {});
        assertEquals("message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithMultipleArgs_gQOp7() {
        String result = messages.getString("message", new Object[] { "arg1", "arg2" });
        assertEquals("message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNullAndNonNullArgs_Tngc8() {
        String result = messages.getString("message", new Object[] { null, "arg" });
        assertEquals("message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNonNullAndNullArgs_AYnP9() {
        String result = messages.getString("message", new Object[] { "arg", null });
        assertEquals("message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArgsAndEmptyMessage_zcLF14() {
        String result = messages.getString("", new Object[] {});
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_EmptyFormat_ZOXe0() {
    String format = "";
    Object[] args = new Object[0];
    String expected = "";
    String actual = Messages.format(format, args);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_SingleArgument_AMQc1() {
    String format = "{}";
    Object[] args = new Object[] { "arg1" };
    String expected = "arg1";
    String actual = Messages.format(format, args);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_MultipleArguments_uDtq2() {
    String format = "{} {} {}";
    Object[] args = new Object[] { "arg1", "arg2", "arg3" };
    String expected = "arg1 arg2 arg3";
    String actual = Messages.format(format, args);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_MissingArgument_Ddup6() {
    String format = "{} {}";
    Object[] args = new Object[] { "arg1" };
    String expected = "{} {}";
    String actual = Messages.format(format, args);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_MissingArguments_KaGi7() {
    String format = "{} {} {}";
    Object[] args = new Object[] { "arg1" };
    String expected = "{} {} {}";
    String actual = Messages.format(format, args);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_InvalidFormat_wEvf8() {
    String format = "{}";
    Object[] args = new Object[] { "arg1" };
    String expected = "<missing argument>";
    String actual = Messages.format(format, args);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormat_InvalidFormatWithMultipleArguments_bAJu9() {
    String format = "{} {} {}";
    Object[] args = new Object[] { "arg1", "arg2", "arg3" };
    String expected = "<missing argument> <missing argument> <missing argument>";
    String actual = Messages.format(format, args);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithIntArg_jTzI0() {
        String msg = "Hello, {0}!";
        int arg = 10;
        String expected = "Hello, 10!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringArg_nexi1() {
        String msg = "Hello, {0}!";
        String arg = "world";
        String expected = "Hello, world!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithMultipleArgs_eraq2() {
        String msg = "Hello, {0} and {1}!";
        String arg1 = "John";
        String arg2 = "Doe";
        String expected = "Hello, John and Doe!";
        String actual = Messages.getString(msg, arg1, arg2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithNoArgs_pErq3() {
        String msg = "Hello!";
        String expected = "Hello!";
        String actual = Messages.getString(msg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArg_JgTJ5() {
        String msg = "Hello, {0}!";
        String arg = "";
        String expected = "Hello, !";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyMsg_Dfke7() {
        String msg = "";
        String arg = "world";
        String expected = "";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithEmptyArgs_FCOc9() {
        String msg = "Hello, {0}!";
        String[] args = new String[] {};
        String expected = "Hello, <missing argument>!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetString_withTwoArguments_iqGO0() {
        String msg = "Hello, {0}!";
        Object arg1 = "world";
        Object arg2 = "!";
        String expected = "Hello, world!";
        String actual = Messages.getString(msg, arg1, arg2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndChar_ErsG0() {
        String msg = "Hello, {0}!";
        char arg = 'A';
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArray_Kmof2() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", "B", "C"};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndInteger_MbEW3() {
        String msg = "Hello, {0}!";
        int arg = 1;
        String expected = "Hello, 1!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObject_mbNm5() {
        String msg = "Hello, {0}!";
        Object arg = "A";
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, arg);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNull_LrUv6() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", null, "C"};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithEmptyString_Vnrl7() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", "", "C"};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithNullAndEmptyString_JtAv8() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", null, ""};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleNullAndEmptyString_Ckok9() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", null, "", null, "C"};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStringWithStringAndObjectArrayWithMultipleNullAndEmptyStringAndInteger_unYq10() {
        String msg = "Hello, {0}!";
        Object[] args = new Object[] {"A", null, "", null, 1};
        String expected = "Hello, A!";
        String actual = Messages.getString(msg, args);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocaleWithInvalidResource_rMrT3() {
        Locale locale = new Locale("en", "US");
        String resource = "invalid_resource";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertNull(bundle);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocaleWithInvalidLocale_fbEN4() {
        Locale locale = new Locale("invalid_locale", "US");
        String resource = "messages";
        ResourceBundle bundle = Messages.setLocale(locale, resource);
        assertNull(bundle);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithNullBundle_sRcU0_OJqq0() {
    Messages.setLocale(Locale.ENGLISH, "test message");
    String result = Messages.getString("test message");
    assertEquals("test message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithNullBundleAndInvalidKey_jFiT9_GGpj0() {
    Messages.setLocale(Locale.ENGLISH, "messages");
    String result = Messages.getString("invalid key");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithNullArgs_dBQD4_DcWP0() {
    String result = messages.getString("message");
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithEmptyMessage_xqvo2_qmFq0() {
    Messages messages = new Messages();
    String result = messages.getString("", new Object[] { "arg" });
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_rcRY0_WieV1() {
    ResourceBundle messages = Messages.setLocale(Locale.ENGLISH, "messages");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithNullAndNonNullArgs_Tngc8_FPur0() {
    Messages messages = new Messages();
    String result = messages.getString("message", new Object[] { null, "arg" });
    assertEquals("message", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithEmptyArgsAndEmptyMessage_zcLF14_VPXe0() {
    Messages messages = new Messages();
    String result = messages.getString("", new Object[] {});
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStringWithNullArgsAndEmptyMessage_FoDL13_xUJL0() {
    Messages messages = new Messages();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLocaleWithNullPrivilegedAction_mYrn8_zwcT0() {
    Locale locale = new Locale("en", "US");
    String resource = "messages";
    ResourceBundle bundle = Messages.setLocale(locale, resource);
    assertNull(bundle);
}
}