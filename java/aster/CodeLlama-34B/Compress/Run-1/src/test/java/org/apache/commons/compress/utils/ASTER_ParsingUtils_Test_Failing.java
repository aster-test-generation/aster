/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValueWithInvalidValue_lJpN2() throws IOException {
    String value = "invalid";
    try {
        ParsingUtils.parseLongValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_Ibsx1() throws IOException {
    String value = "abc";
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("For input string: \"abc\"", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_NullInput_ufHf2() throws IOException {
    String value = null;
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Input string cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_EmptyInput_OsdG3() throws IOException {
    String value = "";
    try {
        ParsingUtils.parseIntValue(value);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Input string cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidInput_yKiE1() throws IOException {
    String value = "abcdefghij";
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse long from string value: abcdefghij", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NullInput_ZfHF2() throws IOException {
    String value = null;
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Value cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_EmptyInput_AOAP3() throws IOException {
    String value = "";
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse long from string value: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidRadix_MfRG4() throws IOException {
    String value = "1234567890";
    int radix = 2;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_RadixTooLarge_yQaM5() throws IOException {
    String value = "1234567890";
    int radix = 37;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_RadixTooSmall_gYzy6() throws IOException {
    String value = "1234567890";
    int radix = 1;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_NegativeRadix_UoXj7() throws IOException {
    String value = "1234567890";
    int radix = -10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_ZeroRadix_sBrE8() throws IOException {
    String value = "1234567890";
    int radix = 0;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_DifferentRadix_Success_MVZN1_oWRr0() {
    try {
        long result = ParsingUtils.parseLongValue("123", 2);
        assertEquals(123, result);
    } catch (IOException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_NumberFormatException_tKto2_HThm0() {
    try {
        ParsingUtils.parseIntValue("abc", 10);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse int from string value: abc", e.getMessage());
    } catch (IOException e) {
        fail("Expected NumberFormatException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_NullPointerException_tmKh3_rXzP0() {
    try {
        ParsingUtils.parseIntValue(null, 10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Value cannot be null", e.getMessage());
    } catch (IOException e) {
        fail("Expected NullPointerException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_DKUl4_ilfk0() {
    try {
        ParsingUtils.parseIntValue("123", -1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_RadixTooLarge_YALc5_aLWz0() {
    try {
        ParsingUtils.parseIntValue("123", 37);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_RadixTooSmall_HylR6_iRWC0() {
    try {
        ParsingUtils.parseIntValue("123", 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException, but got IOException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_RadixZero_wGRB7_dYab0() {
    try {
        ParsingUtils.parseIntValue("123", 0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_RadixNegative_dbyU8_CSlx0() {
    try {
        ParsingUtils.parseIntValue("123", -10);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_IllegalArgumentException_RadixTooLarge_Negative_fXeS9_TLNQ0() {
    try {
        ParsingUtils.parseIntValue("123", -37);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Radix must be between 2 and 36", e.getMessage());
    } catch (IOException e) {
        fail("Expected IllegalArgumentException, but got IOException instead");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValueWithInvalidValue_lJpN2_fid1() throws IOException {
    String value = "invalid";
    try {
        ParsingUtils.parseLongValue(value, 10);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("Unable to parse long from string value: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseLongValue_InvalidInput_yKiE1_fid1() throws IOException {
    String value = "abcdefghij";
    int radix = 10;
    try {
        ParsingUtils.parseLongValue(value, radix);
        fail("Expected NumberFormatException");
    } catch (NumberFormatException e) {
        assertEquals("abcdefghij", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_ValidInput_DifferentRadix_Success_MVZN1_oWRr0_fid1() {
    try {
        long result = ParsingUtils.parseLongValue("123", 2);
        assertEquals(3, result);
    } catch (IOException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseIntValue_InvalidInput_NullPointerException_tmKh3_rXzP0_fid1() {
    try {
        ParsingUtils.parseIntValue(null, 10);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Value cannot be null", e.getMessage());
    } catch (IOException e) {
        assertEquals("Expected NullPointerException, but got IOException", e.getMessage());
    }
}
}