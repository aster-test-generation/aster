/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
private long dateToZipLong(Date date) {
    return date.getTime() / 1000;
}
    private X5455_ExtendedTimestamp timestamp;
    private X5455_ExtendedTimestamp extendedTimestamp;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_ekeD0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);
    assertEquals(centralDirectoryData.length, timestamp.getCentralDirectoryLength().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_btEF0() {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    assertTrue(x.equals(x));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFlags_Xhcq0() {
        timestamp = new X5455_ExtendedTimestamp();
        byte flags = timestamp.getFlags();
        assertEquals(0, flags);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithNullModifyTime_djva2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_MQpP0() {
        extendedTimestamp = new X5455_ExtendedTimestamp();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_null_FmQv1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    x5455.setCreateFileTime(null);
    assertNull(x5455.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessJavaTime_notSet_Cdef3() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Date expected = null;
        Date actual = timestamp.getAccessJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_NullValue_NVoe2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    Date actual = timestamp.getModifyJavaTime();
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_hsWQ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        timestamp.parseFromCentralDirectoryData(buffer, offset, length);
    } catch (ZipException e) {
        fail("Exception should not be thrown");
    }
    assertEquals(0, timestamp.getFlags());
    assertNull(timestamp.getModifyTime());
    assertNull(timestamp.getAccessTime());
    assertNull(timestamp.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_BTqi0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original, clone);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithNull_sLqq1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyFileTime(null);
    assertNull(timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTimeWithDifferentTime_bQDZ4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time1 = FileTime.fromMillis(System.currentTimeMillis());
    FileTime time2 = FileTime.fromMillis(System.currentTimeMillis() + 1000000000000L);
    timestamp.setModifyFileTime(time1);
    assertNotEquals(time2, timestamp.getModifyTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_ekeD0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_ekeD0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] centralDirectoryData = timestamp.getCentralDirectoryData();
    assertEquals(centralDirectoryData.length, timestamp.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_unixTime_PwGi1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    timestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_nonUnixTime_Ccnb2_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000001L);
    timestamp.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_WGTr0_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date date = new Date();
    timestamp.setCreateJavaTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjects_mjjS1_fid1() {
    X5455_ExtendedTimestamp x1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp x2 = new X5455_ExtendedTimestamp();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_tnLO0_fid1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    extendedTimestamp.setCreateFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_noBitsPresent_opKD4_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = timestamp.getLocalFileDataData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_DMTV0_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_VLTM0_fid1() {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(1000000000000L);
    x5455.setCreateFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBit2_createTimePresent_lQye0_fid1() {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertFalse(timestamp.isBit2_createTimePresent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_nUWW0_fid1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setModifyFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_ZNjN0_TiYY0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = timestamp.getAccessFileTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_bit0_modifyTimePresent_XrYv0_ZdRt0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    ZipShort actual = timestamp.getLocalFileDataLength();
    assertEquals(5, actual.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessTime_JmAA4_MVXc0() {
    X5455_ExtendedTimestamp x1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp x2 = new X5455_ExtendedTimestamp();
    x2.setAccessTime(new ZipLong(1));
    assertFalse(x1.equals(x2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithZeroFlag_mbDV6_fHVc2() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(2));
    byte flags = timestamp.getFlags();
    assertEquals(2, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithMaxFlag_cXaJ7_ydeJ0() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(15));
    byte flags = timestamp.getFlags();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithMaxValue_GEyv9_rTXO0() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date(Byte.MAX_VALUE));
    byte flags = timestamp.getFlags();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagsWithEmptyString_QdDS12_xabv2() {
    timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    byte flags = timestamp.getFlags();
    assertEquals(2, flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithValidModifyTime_ryZi1_tIek0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(1643743200)); // 2022-01-28T12:00:00Z
    FileTime fileTime = timestamp.getModifyFileTime();
    assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTimeWithValidModifyTime_ryZi1_tIek0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(new ZipLong(1643743200)); // 2022-01-28T12:00:00Z
    FileTime fileTime = timestamp.getModifyFileTime();
    assertEquals(fileTime.toInstant().getEpochSecond(), 1643743200);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_lineCoverage_aJfV1_mCWE0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    assertFalse(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_Null_TOeF2_Gndu0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(null);
    assertFalse(timestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_AccessTimePresent_brcp2_wipR0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessJavaTime(new Date());
    String expected = "0x5455 Zip Extra Field: Flags=0 Access:[";
    assertFalse(timestamp.toString().startsWith(expected));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentValues_pahc1_kota0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date());
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.getAccessJavaTime(), clone.getAccessJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentHashCodes_KWFD4_BLKR0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date(100));
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.hashCode(), clone.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentToString_ufxM5_nrsn0() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    original.setAccessJavaTime(new Date(100));
    X5455_ExtendedTimestamp clone = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.toString(), clone.toString());
}
}