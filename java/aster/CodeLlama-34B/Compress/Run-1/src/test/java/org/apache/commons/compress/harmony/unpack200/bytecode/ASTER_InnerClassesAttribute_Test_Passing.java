/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InnerClassesAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_MMOa0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_qMWd1() {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("name");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_KEzW2() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_ameq3() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    Object obj = new Object();
    assertFalse(attribute.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameAttributeName_sqvj4() {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("name");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("name");
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAttributeName_sZOQ5() {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("name1");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("name2");
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullAttributeName_QyDE6() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_gOOE0() {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
    int length = innerClassesAttribute.getLength();
    assertEquals(2, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_yaFU1() {
        InnerClassesAttribute attribute = new InnerClassesAttribute("name");
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(1, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithInvalidName_XPqf3() {
        InnerClassesAttribute attribute = new InnerClassesAttribute("invalid_name");
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(1, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullName_vKpN4() {
        InnerClassesAttribute attribute = new InnerClassesAttribute(null);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(1, entries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_HAYK0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("name");
    String actual = attribute.toString();
    String expected = "InnerClasses: null";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullName_TEOC1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    String actual = attribute.toString();
    String expected = "InnerClasses: null";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyName_Cfxy2() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("");
    String actual = attribute.toString();
    String expected = "InnerClasses: null";
    assertEquals(expected, actual);
}
@Test
@Timeout(value =961, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNullAttributeName_kzVJ0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    int expected =961;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_withNonNullAttributeName_nvpE1() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("test");
    int expected =961;
    int actual = attribute.hashCode();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNonStringName_juVL4_VCbu0() {
    InnerClassesAttribute attribute = new InnerClassesAttribute("123");
    String actual = attribute.toString();
    String expected = "InnerClasses: null";
    assertEquals(expected, actual);
}
}