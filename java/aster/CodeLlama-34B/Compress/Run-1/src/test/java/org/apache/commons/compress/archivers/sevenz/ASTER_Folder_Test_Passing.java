/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
private Folder folder;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSizeForCoder_NullCoder_dyRw0() {
    Folder folder = new Folder();
    long result = folder.getUnpackSizeForCoder(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsZero_OcAe0() {
    Folder folder = new Folder();
    assertEquals(0, folder.getUnpackSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnpackSize_totalOutputStreamsIsOne_RQjr1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_EmptyArray_efUj0() {
    Folder folder = new Folder();
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NonExistentIndex_rdER1() {
    Folder folder = new Folder();
    int result = folder.findBindPairForOutStream(1);
    assertEquals(-1, result);
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_MultipleBindPairs_TOzk3() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[3];
    folder.bindPairs[0] = new BindPair(0,0);
    folder.bindPairs[1] = new BindPair(1, 2);
    folder.bindPairs[2] = new BindPair(2, 3);
    int result = folder.findBindPairForOutStream(1);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NegativeIndex_hfoa4() {
    Folder folder = new Folder();
    int result = folder.findBindPairForOutStream(-1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_OutOfBoundsIndex_jTQM5() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    int result = folder.findBindPairForOutStream(2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_NullBindPairs_tcLM6() {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForOutStream_EmptyBindPairs_QGVI7() {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[0];
    int result = folder.findBindPairForOutStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_rMvK0() {
        folder = new Folder();
    }
}