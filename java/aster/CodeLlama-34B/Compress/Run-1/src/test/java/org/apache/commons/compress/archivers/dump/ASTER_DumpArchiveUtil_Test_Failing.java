/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_2_Ydeb1() {
    byte[] buffer = new byte[8];
    int offset = 1;
    long expected = 1;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_3_zJaC2() {
    byte[] buffer = new byte[8];
    int offset = 2;
    long expected = 2;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_4_amlt3() {
    byte[] buffer = new byte[8];
    int offset = 3;
    long expected = 3;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_5_Gmzn4() {
    byte[] buffer = new byte[8];
    int offset = 4;
    long expected = 4;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_6_TMZa5() {
    byte[] buffer = new byte[8];
    int offset = 5;
    long expected = 5;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_7_LRbX6() {
    byte[] buffer = new byte[8];
    int offset = 6;
    long expected = 6;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_8_WgcD7() {
    byte[] buffer = new byte[8];
    int offset = 7;
    long expected = 7;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_9_zSjA8() {
    byte[] buffer = new byte[8];
    int offset = 7;
    long expected = 8;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_10_Fdbl9() {
    byte[] buffer = new byte[8];
    int offset = 9;
    long expected = 10;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_11_HyTx10() {
    byte[] buffer = new byte[8];
    int offset = 10;
    long expected = 10;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_12_GAEs11() {
    byte[] buffer = new byte[8];
    int offset = 11;
    long expected = 11;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_13_ANJu12() {
    byte[] buffer = new byte[8];
    int offset = 12;
    long expected = 0;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_validInput_OAvj0() {
    byte[] buffer = new byte[20];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    buffer[5] = 6;
    buffer[6] = 7;
    buffer[7] = 8;
    buffer[8] = 9;
    buffer[9] = 10;
    buffer[10] = 11;
    buffer[11] = 12;
    buffer[12] = 13;
    buffer[13] = 14;
    buffer[14] = 15;
    buffer[15] = 16;
    buffer[16] = 17;
    buffer[17] = 18;
    buffer[18] = 19;
    buffer[19] = 20;
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(20, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_nullInput_mbWN2() {
    byte[] buffer = null;
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_emptyInput_PAdi3() {
    byte[] buffer = new byte[0];
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_2_NmJf1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 0);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_8_wiMm7() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 1);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_10_LJyD9() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 1);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_2_bSsM1() {
    byte[] buffer = new byte[4];
    int offset = 1;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_3_KHcC2() {
    byte[] buffer = new byte[4];
    int offset = 2;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_4_NWSM3() {
    byte[] buffer = new byte[4];
    int offset = 3;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_6_UhRN5() {
    byte[] buffer = new byte[4];
    int offset = 5;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_7_fisr6() {
    byte[] buffer = new byte[4];
    int offset = 6;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_10_KLfS9() {
    byte[] buffer = new byte[4];
    int offset = 9;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_12_TWNZ11() {
    byte[] buffer = new byte[4];
    int offset = 11;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_13_IRCJ12() {
    byte[] buffer = new byte[4];
    int offset = 12;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_ValidInput_yTEI0_fid1() {
        byte[] buffer = new byte[1024];
        int expectedChecksum = 123456789;
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_InvalidInput_nxBR1_fid1() {
        byte[] buffer = new byte[1024];
        int expectedChecksum = 0;
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_validBuffer_fevt3_fid1() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) 0x00;
    buffer[25] = (byte) 0x00;
    buffer[26] = (byte) 0x00;
    buffer[27] = (byte) 0x00;
    buffer[28] = (byte) 0x00;
    buffer[29] = (byte) 0x00;
    buffer[30] = (byte) 0x00;
    buffer[31] = (byte) 0x00;
    assertTrue(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_9_zSjA8_fid1() {
    byte[] buffer = new byte[8];
    int offset = 8;
    long expected = 8;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_10_Fdbl9_fid1() {
    byte[] buffer = new byte[8];
    int offset = 9;
    long expected = 9;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_13_ANJu12_fid1() {
    byte[] buffer = new byte[8];
    int offset = 12;
    long expected = 12;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_validInput_OAvj0_fid1() {
    byte[] buffer = new byte[20];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    buffer[5] = 6;
    buffer[6] = 7;
    buffer[7] = 8;
    buffer[8] = 9;
    buffer[9] = 10;
    buffer[10] = 11;
    buffer[11] = 12;
    buffer[12] = 13;
    buffer[13] = 14;
    buffer[14] = 15;
    buffer[15] = 16;
    buffer[16] = 17;
    buffer[17] = 18;
    buffer[18] = 19;
    buffer[19] = 20;
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_invalidInput_oWgK1_fid1() {
    byte[] buffer = new byte[20];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
    buffer[3] = 4;
    buffer[4] = 5;
    buffer[5] = 6;
    buffer[6] = 7;
    buffer[7] = 8;
    buffer[8] = 9;
    buffer[9] = 10;
    buffer[10] = 11;
    buffer[11] = 12;
    buffer[12] = 13;
    buffer[13] = 14;
    buffer[14] = 15;
    buffer[15] = 16;
    buffer[16] = 17;
    buffer[17] = 18;
    buffer[18] = 19;
    buffer[19] = 20;
    int result = DumpArchiveUtil.getIno(buffer);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_3_ceGY2_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 2);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_4_zhmd3_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 3);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_5_POds4_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 4);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_6_WJRN5_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 5);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_7_qaJO6_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 6);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_8_wiMm7_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 7);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_9_cRWv8_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 8);
    assertEquals(0x0102, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_10_LJyD9_fid1() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 9);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_5_pagd4_fid1() {
    byte[] buffer = new byte[4];
    int offset = 4;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_8_TRCt7_fid1() {
    byte[] buffer = new byte[4];
    int offset = 7;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_9_pESM8_fid1() {
    byte[] buffer = new byte[4];
    int offset = 8;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_11_IbwD10_fid1() {
    byte[] buffer = new byte[4];
    int offset = 10;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
}