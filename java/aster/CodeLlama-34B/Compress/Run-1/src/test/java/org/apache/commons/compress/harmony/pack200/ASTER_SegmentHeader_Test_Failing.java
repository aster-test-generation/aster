/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Failing {
public void testSetCp_String_count_null_nktU0() {
}
public void testSetCp_String_count_empty_MpOP1() {
}
public void testSetCp_String_count_nonEmpty_pUHA2() {
}
public void testSetCp_String_count_invalid_LccS3() {
}
public void testSetCp_String_count_zero_emuE4() {
}
public void testSetCp_String_count_negative_wPgr5() {
}
public void testSetCp_String_count_decimal_iEpm6() {
}
public void testSetCp_String_count_scientific_UWyD7() {
}
public void testSetCp_String_count_long_uJQq8() {
}
public void testSetCp_String_count_invalid_input_oJxV9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileSizeHi_PEfv0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_size_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptionsWithEmptyOptions_zKrb1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_options();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFieldFlagsHi_bkrb0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_field_flags_hi();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFieldFlagsHi_rQOW1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_field_flags_hi();
    assertTrue(result);
    assertFalse(segmentHeader.have_field_flags_hi());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAppendBandCodingSpecifier_invalidSpecifier_JVmY2() {
    SegmentHeader segmentHeader = new SegmentHeader();
    try {
        segmentHeader.appendBandCodingSpecifier(-1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid band coding specifier: -1", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAppendBandCodingSpecifier_duplicateSpecifier_gpez4() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.appendBandCodingSpecifier(0);
    try {
        segmentHeader.appendBandCodingSpecifier(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Duplicate band coding specifier: 0", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAppendBandCodingSpecifier_outOfRangeSpecifier_Huxb5() {
    SegmentHeader segmentHeader = new SegmentHeader();
    try {
        segmentHeader.appendBandCodingSpecifier(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Band coding specifier out of range: 100", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultMajorVersion_kRIh0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedMajorVersion = 1;
    int actualMajorVersion = segmentHeader.getDefaultMajorVersion();
    assertEquals(expectedMajorVersion, actualMajorVersion);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultMajorVersionWithDifferentMajorVersion_NtkU1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedMajorVersion = 2;
    int actualMajorVersion = segmentHeader.getDefaultMajorVersion();
    assertEquals(expectedMajorVersion, actualMajorVersion);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultMajorVersionWithEmptyMajverCounter_BebE3_IoQM0_fid2() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setCp_Double_count(1);
    int expectedMajorVersion = 1;
    int actualMajorVersion = segmentHeader.getDefaultMajorVersion();
    assertEquals(expectedMajorVersion, actualMajorVersion);
}
}