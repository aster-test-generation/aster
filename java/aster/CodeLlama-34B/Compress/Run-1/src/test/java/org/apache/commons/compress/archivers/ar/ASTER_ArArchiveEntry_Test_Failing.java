/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithInvalidName_QzvR1() {
    ArArchiveEntry entry = new ArArchiveEntry("not equal", 100);
    assertNotEquals("not equal", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNegativeGroupId_RCXP1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100,1000, 1000, 0755, 123456789);
    int actualGroupId = entry.getGroupId();
    assertEquals(-1000, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithUserId_LGaR1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt",00,0,0, 0, 0);
    assertEquals(10, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_groupId_LoVS3() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertEquals(Objects.hash(1, 1), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_mode_gClx4() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertEquals(Objects.hash(1, 10, 1, 1, 1, 1), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified1_zezZ0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt",1719057047);
    assertEquals(100, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_IkUP0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    Date expected = new Date(1000 * 100);
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected.getTime(), actual.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate2_GEVT1() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 1, 1, 1000);
    Date expected = new Date(1000 * 100);
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected.getTime(), actual.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate3_dFra2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1, 1, 1, 1000);
    Date expected = new Date(1000 * 100);
    Date actual = entry.getLastModifiedDate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_zGOt0_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithInvalidLength_jkWL1_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", -100L);
    assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithInvalidName_QzvR1_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertNotEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNegativeGroupId_RCXP1_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, -1000, 1000, 0755, 123456789);
    int actualGroupId = entry.getGroupId();
    assertEquals(-1000, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithZeroGroupId_QFSA2_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 0, 1000, 0755, 123456789);
    int actualGroupId = entry.getGroupId();
    assertEquals(0, actualGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_bFHR0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithUserId_LGaR1_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 10, 10, 0, 0);
    assertEquals(10, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithGroupId_TOdx2_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 0, 10, 0, 0);
    assertEquals(10, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_length_fzgS1_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10);
    assertEquals(Objects.hash(10), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_userId_JYhD2_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test", 10, 1, 1, 1, 1);
    assertEquals(Objects.hash(1), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_inputFile_zVvQ7_fid2() {
    File inputFile = new File("test");
    ArArchiveEntry entry = new ArArchiveEntry(inputFile, "test");
    assertEquals(Objects.hash(inputFile), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified1_zezZ0_fid2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
    assertEquals(100, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate1_IkUP0_fid2() {
ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
Date expected = new Date(1000 * 100);
Date actual = entry.getLastModifiedDate();
assertEquals(expected, actual);
}
}