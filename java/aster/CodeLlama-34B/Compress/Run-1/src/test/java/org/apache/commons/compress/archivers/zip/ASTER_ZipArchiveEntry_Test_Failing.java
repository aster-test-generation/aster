/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_ZipEntryConstructor_YwVc2() throws ZipException {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
    assertEquals(0, zipEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_InvalidValue_jRVp6() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionRequired(-1);
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributesWithNullEntryName_tfJF5() {
ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
int internalAttributes = entry.getInternalAttributes();
assertEquals(0, internalAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_oiSU1() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_fsku0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.removeUnparseableExtraFieldData();
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldDataWithNonNullExtraAndNullEntryName_GzeA3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(new byte[10]);
    entry.removeUnparseableExtraFieldData();
    assertNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithExtraTimeFields_KhPr1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertNotNull(entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_TZLG1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, new byte[0]);
    assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullNameAndRawName_QcBh7_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, null);
    assertEquals(null, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullExtraField_CzGi2() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
        entry.setExtra(null);
        Assertions.assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEmptyExtraField_Yppk3() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
        entry.setExtra(new byte[0]);
        Assertions.assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithInvalidExtraField_OTyT4() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
        entry.setExtra(new byte[] { 0x01, 0x02, 0x03, 0x04 });
        Assertions.assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithValidExtraField_TQRK5() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
        entry.setExtra(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 });
        Assertions.assertEquals(1, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_ROjv1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullInputPath_DaXA2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, "entry1");
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry size", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullEntryName_Bjsn3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), null);
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid entry name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullInputFile_gdnL5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(null, "entry1");
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid input file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseable_CrRn0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertEquals(1, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ValidExtraFields_yYWJ0() throws IOException {
    byte[] extra = new byte[10];
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(extra);
    assertEquals(extra, entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_InvalidExtraFields_adPI1() throws IOException {
    byte[] extra = new byte[10];
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Error parsing extra fields for entry: entry1 - ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_NullExtraFields_fgYg2() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("Extra fields cannot be null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_EmptyExtraFields_BAth3() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(new byte[0]);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Extra fields cannot be empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraFieldsWithInvalidLength_ozHY4() throws IOException {
    byte[] extra = new byte[10];
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Extra fields must have a length of at least 4 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraFieldsWithInvalidHeaderId_FdBZ5() throws IOException {
    byte[] extra = new byte[10];
    extra[0] = 0x01;
    extra[1] = 0x02;
    extra[2] = 0x03;
    extra[3] = 0x04;
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid extra field header ID", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_ExtraFieldsWithInvalidData_rrkN6() throws IOException {
    byte[] extra = new byte[10];
    extra[0] = 0x01;
    extra[1] = 0x02;
    extra[2] = 0x03;
    extra[3] = 0x04;
    extra[4] = 0x05;
    extra[5] = 0x06;
    extra[6] = 0x07;
    extra[7] = 0x08;
    extra[8] = 0x09;
    extra[9] = 0x0A;
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setExtra(extra);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid extra field data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_null_JzQg3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), null);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName2_yxGB5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name/");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName4_CpMc7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name/directory/");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveExtraFieldWithNonExistentType_qURb1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    ZipShort type = new ZipShort(new byte[] { 0x03, 0x04 });
    try {
        entry.removeExtraField(type);
        fail("Expected NoSuchElementException");
    } catch (NoSuchElementException e) {
        assertEquals("No extra field with type 0x0304 found", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_differentLength_CBvz2_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    byte[] rawName = entry.getRawName();
    rawName = Arrays.copyOf(rawName, 5);
    assertNotNull(rawName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_differentLength_CBvz2_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    byte[] rawName = entry.getRawName();
    rawName = Arrays.copyOf(rawName, 5);
    assertEquals(rawName.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_differentLength_CBvz2_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    byte[] rawName = entry.getRawName();
    rawName = Arrays.copyOf(rawName, 5);
    assertNotEquals(rawName.length, 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_HSEr0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
    assertEquals(10, centralDirectoryExtra.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullFileTime_PxJn2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = null;
    entry.setTime(fileTime);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidFileTime_jrSy4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
    entry.setTime(fileTime);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithInvalidLong_dRsk5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis() + 10000000000L;
    entry.setTime(time);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDifferentFileTime_MjvP8() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() + 10000000000L);
    entry.setTime(fileTime);
    assertNotEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithDifferentLong_FAoD9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis() + 10000000000L;
    entry.setTime(time);
    assertNotEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_EmptyEntry_vdyA0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddExtraField_Null_dUeH9() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    try {
        entry.addExtraField(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("test.zip", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_platform_invalid_YwQI6() {
    int platform = -1;
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(platform);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_nrAY0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNullExtraFields_yXwP4_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.addExtraField(null);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNullExtraFields_yXwP4_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.addExtraField(null);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_lurQ0_DCNi0() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(ExtraFieldUtils.mergeLocalFileDataData(entry.getExtraFields()));
    Assertions.assertEquals(1, entry.getExtraFields().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_ZipArchiveEntry_LinkOption_Fhgc1_rcyS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_File_jCfo8_dBta0() {
    File inputFile = new File("inputFile");
    assertTrue(inputFile.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_YVyu0_CqBW0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setName(null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NullOptions_caoY4_KvzC0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    try {
        entry.setSize(100);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid options", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataExtra_EmptyByteArray_epAi2_BEdS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File(""), "entryName");
    byte[] extra = new byte[0];
    entry.setExtra(extra);
    byte[] actualExtra = entry.getLocalFileDataExtra();
    assertEquals(extra, actualExtra);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributesWithNullInputPath_nOAB8_jYVk0() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName", LinkOption.NOFOLLOW_LINKS);
        int internalAttributes = entry.getInternalAttributes();
        assertEquals(0, internalAttributes);
    } catch (IOException e) {
        assertTrue(e instanceof IOException);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_cFEv1_ltaC1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry(""));
        entry.setName("");
        assertEquals("", entry.getName());
    } catch (ZipException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_ZipEntry_jbNL2_GsZk0() {
    ZipEntry entry = new ZipEntry("entryName");
    try {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        assertEquals("entryName", zipEntry.getName());
    } catch (ZipException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_UnparseableExtraFieldData_ebWh1_LUrE0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    UnparseableExtraFieldData extraField = new UnparseableExtraFieldData();
    entry.addAsFirstExtraField(extraField);
    assertEquals(extraField, entry.getExtraFields()[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAsFirstExtraField_NullExtraField_SlXM3_TInF0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    ZipExtraField extraField = null;
    entry.addAsFirstExtraField(extraField);
    assertEquals(null, entry.getExtraFields()[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_MaxValue_HVPf1_HuVi0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setAlignment(0xffff);
    assertEquals(0xffff, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_GreaterThanMaxValue_YYhB4_zFIQ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setAlignment(0x10000);
    assertEquals(0x10000, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset1_ssRT0_qNYt0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(0, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset2_ldLF1_gngS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(10, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset4_KtPc3_xMMq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(1000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset5_ijbq4_GEGa0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(10000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset8_EnwS7_necu0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(10000000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset7_yBLA6_FQwZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(1000000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset10_QTJi9_rdpJ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(1000000000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset9_dqxu8_AJiO0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    long dataOffset = entry.getDataOffset();
    assertEquals(100000000, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNullExtraFields_EyRx0_Rdwl1() {
    try {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, null, null);
        ZipExtraField[] extraFields = entry.getExtraFields();
        assertEquals(0, extraFields.length);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_zipEntry_GwbE1_FeqQ0() {
    java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entry");
    try {
        ZipArchiveEntry zipEntry = new ZipArchiveEntry(entry);
        int platform = zipEntry.getPlatform();
        assertEquals(0, platform);
    } catch (ZipException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldData_fsku0_fid1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.removeUnparseableExtraFieldData();
    assertNull(entry.getGeneralPurposeBit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveUnparseableExtraFieldDataWithNonNullExtraAndNullEntryName_GzeA3_fid1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setExtra(new byte[10]);
    entry.removeUnparseableExtraFieldData();
    assertNotNull(entry.getExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithExtraTimeFields_KhPr1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
    assertNotNull(entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));
    assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_TZLG1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, new byte[0]);
    assertEquals(null, entry.getName());
    assertArrayEquals(new byte[0], entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullNameAndRawName_QcBh7() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, null);
    assertEquals(null, entry.getName());
    assertArrayEquals(null, entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_ROjv1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertNotNull(extraFields);
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseable_ElJz0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    assertNotNull(extraFields);
    assertEquals(1, extraFields.length);
    assertTrue(extraFields[0] instanceof ZipExtraField);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseable_CrRn0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertNotNull(extraFields);
    assertEquals(1, extraFields.length);
    assertTrue(extraFields[0] instanceof ZipExtraField);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawName_differentLength_CBvz2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entryName");
    byte[] rawName = entry.getRawName();
    assertNotNull(rawName);
    assertEquals(rawName.length, 10);
    rawName = Arrays.copyOf(rawName, 5);
    assertNotEquals(rawName.length, 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_HSEr0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
    assertNotNull(centralDirectoryExtra);
    assertEquals(10, centralDirectoryExtra.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_nrAY0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);
    assertEquals(0, extraFields.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithNullExtraFields_yXwP4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.addExtraField(null);
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);
    assertEquals(0, extraFields.length);
}
}