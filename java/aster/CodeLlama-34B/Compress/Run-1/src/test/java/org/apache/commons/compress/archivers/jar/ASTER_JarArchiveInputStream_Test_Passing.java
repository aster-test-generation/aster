/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.jar;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_validLength_LbZt0() {
    byte[] signature = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    int length = 4;
    assertTrue(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_validLength_Ruxv1() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00 };
    int length = 4;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_invalidLength_eKMc2() {
    byte[] signature = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    int length = 3;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_invalidLength_RFEj3() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00 };
    int length = 3;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_validLength_YahL4() {
    byte[] signature = null;
    int length = 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_invalidLength_rgzx5() {
    byte[] signature = null;
    int length = 3;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_invalidSignature_nullLength_GEQk7_yedZ0() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00 };
    int length = 0;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_nullSignature_nullLength_HDib8_VpDN0() {
    byte[] signature = null;
    int length = 0;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_nullLength_uszW6_kLQZ0() {
    byte[] signature = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
    int length = 0;
    assertFalse(JarArchiveInputStream.matches(signature, length));
}
}