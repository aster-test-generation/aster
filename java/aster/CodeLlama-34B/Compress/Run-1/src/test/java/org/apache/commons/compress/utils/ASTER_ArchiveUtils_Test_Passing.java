/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_EmptyArray_zTSE0() {
    byte[] a = new byte[0];
    assertTrue(ArchiveUtils.isArrayZero(a, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_NonEmptyArray_vNbI1() {
    byte[] a = new byte[10];
    a[0] = 1;
    assertFalse(ArchiveUtils.isArrayZero(a, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameLength_SameContent_cBSV0() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLength_SameContent_TvVm1() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameLength_DifferentContent_RLAt2() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLength_DifferentContent_tMAn3() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10, 11 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameLength_SameContent_IgnoreTrailingNulls_xIrS4() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLength_SameContent_IgnoreTrailingNulls_xCVV5() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0, 0 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameLength_DifferentContent_IgnoreTrailingNulls_TqNi6() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10, 0, 0, 0 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLength_DifferentContent_IgnoreTrailingNulls_VJfj7() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 0, 0, 0 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10, 0, 0, 0, 0 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArrays_ofvl0() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArrays_uSsO1() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 4, 5, 6 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArrays_ouaw2() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_OneNullArray_FNbU3() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = null;
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArrays_DqRO4() {
    byte[] buffer1 = new byte[0];
    byte[] buffer2 = new byte[0];
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays_rmqw5() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays2_UXqx6() {
    byte[] buffer1 = new byte[] { 1, 2 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays3_cFLq7() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4 };
    byte[] buffer2 = new byte[] { 1, 2, 3 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays4_LQXa8() {
    byte[] buffer1 = new byte[] { 1, 2, 3 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays5_hrQs9() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays6_DLjw10() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengthArrays7_Hnip11() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5, 6 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_emptyString_gUIL0() {
    String inputString = "";
    byte[] expected = new byte[0];
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_nonEmptyString_Yroh1() {
    String inputString = "hello";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters_hkIY3() {
    String inputString = "hello\u0000world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 0, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters2_jKtI4() {
    String inputString = "hello\u0001world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 1, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters3_OJak5() {
    String inputString = "hello\u0002world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 2, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters4_jPno6() {
    String inputString = "hello\u0003world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 3, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters5_LFeX7() {
    String inputString = "hello\u0004world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 4, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters6_mlYH8() {
    String inputString = "hello\u0005world";
    byte[] expected = new byte[] { 104, 101, 108, 108, 111, 5, 119, 111, 114, 108, 100 };
    byte[] actual = ArchiveUtils.toAsciiBytes(inputString);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_invalidCharacters7_VCgq9() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_emptyString_ahnQ0() {
    String input = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_shortString_wREG2() {
    String input = "abc";
    String expected = "abc";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_longString_raNH3() {
    String input = "abcdefghijklmnopqrstuvwxyz";
    String expected = "abcdefghijklmnopqrstuvwxyz";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitize_specialChars_hNRG4() {
    String input = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
    String expected = "!@#$%^&*()_+-=[]{}|;':\"<>,./?~";
    String actual = ArchiveUtils.sanitize(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_equal_Jdow0() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_notEqual_Lgyu1() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 6};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_ignoreTrailingNulls_PKqE2() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5, 0};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_differentLengths_HnoB3() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5, 6};
    assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_nullBuffer1_lmCM4() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 5, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_differentOffsets_kkvn7() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 4, buffer2, 2, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_differentLengthsAndOffsets_pOgf8() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = new byte[] {1, 2, 3, 4, 5, 6};
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 4, buffer2, 2, 3, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_nullBuffer2AndDifferentOffsets_wyDT10() {
    byte[] buffer1 = new byte[] {1, 2, 3, 4, 5};
    byte[] buffer2 = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_emptyExpected_jcwD0() {
    byte[] buffer = new byte[0];
    assertTrue(ArchiveUtils.matchAsciiBuffer("", buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_emptyBuffer_vOnq1() {
    String expected = "hello";
    byte[] buffer = new byte[0];
    assertFalse(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_matching_jKzt2() {
    String expected = "hello";
    byte[] buffer = new byte[] { 0x68, 0x65, 0x6c, 0x6c, 0x6f };
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_notMatching_GNeY3() {
    String expected = "hello";
    byte[] buffer = new byte[] { 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20 };
    assertFalse(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_differentLengths_wmMY4() {
    String expected = "hello";
    byte[] buffer = new byte[] { 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64 };
    assertFalse(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_nullExpected_fLbH5() {
    byte[] buffer = new byte[] { 0x68, 0x65, 0x6c, 0x6c, 0x6f };
    assertTrue(ArchiveUtils.matchAsciiBuffer("hello", buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_nullBuffer_HGsJ6() {
    String expected = "hello";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_emptyExpectedAndNonEmptyBuffer_Mmsy8() {
    byte[] buffer = new byte[] { 0x68, 0x65, 0x6c, 0x6c, 0x6f };
    assertFalse(ArchiveUtils.matchAsciiBuffer("", buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_NullBuffer_mgpD3() {
    String expected = "Hello World!";
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, offset, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_SameArrays_YZeO0() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentArrays_xUBd1() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentOffsets_zCtM2() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 1, 5, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_DifferentLengths_Twpe3() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] { 6, 7, 8, 9, 10 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArrays_pyBz4() {
    byte[] buffer1 = null;
    byte[] buffer2 = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_NullArray1_WQIg5() {
    byte[] buffer1 = null;
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArrays_NkXi7() {
    byte[] buffer1 = new byte[] {};
    byte[] buffer2 = new byte[] {};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArray1_SQzR8() {
    byte[] buffer1 = new byte[] {};
    byte[] buffer2 = new byte[] { 1, 2, 3, 4, 5 };
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqual_EmptyArray2_ASdo9() {
    byte[] buffer1 = new byte[] { 1, 2, 3, 4, 5 };
    byte[] buffer2 = new byte[] {};
    assertFalse(ArchiveUtils.isEqual(buffer1, 0, 5, buffer2, 0, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_emptyInput_bdYu1() {
    byte[] inputBytes = new byte[0];
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_validInput_LjtI2() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 };
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_EmptyInput_XDie0() {
    byte[] inputBytes = new byte[0];
    int offset = 0;
    int length = 0;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_NonEmptyInput_mZEk1() {
    byte[] inputBytes = new byte[] { 65, 66, 67 };
    int offset = 0;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("ABC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_Offset_cZSt2() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 1;
    int length = 3;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("BCD", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_Length_XdHD3() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 0;
    int length = 2;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("AB", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_OffsetAndLength_aJBb6() {
    byte[] inputBytes = new byte[] { 65, 66, 67, 68, 69 };
    int offset = 1;
    int length = 2;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("BC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer1_peWX0() {
    byte[] buffer1 = null;
    int offset1 = 0;
    int length1 = 0;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_NullBuffer2_Utra1() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = null;
    int offset2 = 0;
    int length2 = 0;
    boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_DifferentLengths_cOsV2() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 5;
    boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameLengthsAndOffsets_ocWL4() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithNull_SameLengthsAndOffsets_DifferentBuffers_DifferentData_EGfH6() {
    byte[] buffer1 = new byte[10];
    int offset1 = 0;
    int length1 = 10;
    byte[] buffer2 = new byte[10];
    int offset2 = 0;
    int length2 = 10;
    buffer2[0] = 1;
    boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
    assertFalse(result);
}
}