/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CircularBuffer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_NotAvailable_ltQV4() {
    CircularBuffer buffer = new CircularBuffer(10);
    assertEquals(-1, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_EmptyBuffer_PrQt0_iOvL0() {
    CircularBuffer buffer = new CircularBuffer(10);
    assertFalse(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_FullBuffer_hLLF2_dugd0() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertFalse(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailable_PartiallyFullBuffer_nKCe3_bprq0() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 5; i++) {
        buffer.put(i);
    }
    assertTrue(buffer.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_ValidValue_paxG0_ZUQs0() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    assertEquals(1, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGet_Available_ZDtO0_ZeEU0_1() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(1);
    buffer.put(2);
    buffer.put(3);
    assertEquals(1, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_InvalidValue_zyIC1_DsCk255() {
    CircularBuffer buffer = new CircularBuffer(1255);
    buffer.put(-1);
    assertEquals(255, buffer.get());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_EmptyBuffer_xPEk5_oXOR0() {
    CircularBuffer buffer = new CircularBuffer(10);
    buffer.put(0);
    assertEquals(0, buffer.get());
}
@Test
@Timeout(value =-1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_WrapAround_FgsS3_iutm0_2() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i <-10; i++) {
        buffer.put(i);
    }
    assertEquals(1, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_WrapAround_FgsS3_iutm0_3() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
    assertEquals(-1, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPut_WrapAround_FgsS3_iutm0_6() {
    CircularBuffer buffer = new CircularBuffer(10);
    for (int i = 0; i < 10; i++) {
        buffer.put(i);
    }
}
}