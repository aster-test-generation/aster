/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_gDtL0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = entry.getCrcValue();
    assertEquals(0, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNonZeroCrc_tpeF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    long crc = entry.getCrcValue();
    assertEquals(123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValueWithNegativeCrc_eoNF2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    long crc = entry.getCrcValue();
    assertEquals(-123456789, crc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_KqoF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(true);
        assertTrue(entry.getHasLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDateFalse_jmBq1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(false);
        assertFalse(entry.getHasLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_True_CyCj0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_False_ySlj1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_True_fogX0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true);
    assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_False_vVpF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(false);
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_specificValue_oudr3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1234567890);
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_validCrc_bhSD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    assertEquals(123456789, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_zeroCrc_lYAK7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_noLastModifiedDate_oUXr1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    try {
        entry.getLastModifiedTime();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_Valid_DpCw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertEquals(0, compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_NotNull_ZvxP8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertNotNull(compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nullName_xqak0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_nonNullName_sBoq1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    assertEquals("test".hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_InvalidDate_eQlj2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date(0);
    entry.setCreationDate(creationDate);
    assertNotEquals(creationDate, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_OaZW0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_sGtG2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_homr3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameHasLastModifiedDate_yzqv14() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_HwhH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeNegative_Eusc1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-100);
    assertEquals(-100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeZero_FlXM2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMaxValue_eGTp3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeMinValue_RzaD4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_True_pPLZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(true);
    assertTrue(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_False_ZRsF1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(false);
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_ValidDate_cAsY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    entry.setAccessDate(accessDate);
    assertEquals(FileTimes.toFileTime(accessDate), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_mERW0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean hasCreationDate = entry.getHasCreationDate();
    assertEquals(false, hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDateWithCreationDate_saQD1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationDate(new Date());
    boolean hasCreationDate = entry.getHasCreationDate();
    assertEquals(true, hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_zDvp0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    assertEquals(true, entry.getHasAccessDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_cdVm0() {
        Date date = new Date();
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(FileTimes.toNtfsTime(date), ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTimeWithInvalidDate_pDJw2() {
        Date date = new Date(Long.MAX_VALUE);
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(FileTimes.toNtfsTime(date), ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrcWithFalse_Odqz1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(false);
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithoutCreationDate_nluq1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    try {
        entry.getCreationTime();
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_ValidSize_hckm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 100;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_ZeroSize_ahvn2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = 0;
    entry.setCompressedSize(size);
    assertEquals(0, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_MaxSize_qCSs3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = Long.MAX_VALUE;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_MinSize_oVKx4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = Long.MIN_VALUE;
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_RandomSize_XZUF5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = (long) (Math.random() * Long.MAX_VALUE);
    entry.setCompressedSize(size);
    assertEquals(size, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_HhKL0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_DIZP1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_qeIO2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithInvalidName_YDrx4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("invalid name");
    assertEquals("invalid name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithValidName_pOME5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("valid name");
    assertEquals("valid name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDifferentCase_jDGN6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("VALID NAME");
    assertEquals("VALID NAME", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithSpecialCharacters_aZae7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("special characters");
    assertEquals("special characters", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithMultipleNames_ECBd8_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name1");
    entry.setName("name2");
    assertEquals("name2", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithSameName_wZlS9_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name");
    entry.setName("name");
    assertEquals("name", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_Oqdl0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValueWithNegativeValue_zcQk1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = -1234567890L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValueWithZeroValue_GXVj2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0L;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValueWithMaxValue_LTlT3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValueWithMinValue_WKzw4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MIN_VALUE;
    entry.setCrcValue(crc);
    assertEquals(crc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_xsOE0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(123456789);
    assertEquals(123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcDifferentValue_dCqU2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(987654321);
    assertEquals(987654321, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_LlSO0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = entry.getSize();
    assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNonZeroSize_fMNb1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(10);
    long size = entry.getSize();
    assertEquals(10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_FNeJ2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(-10);
    long size = entry.getSize();
    assertEquals(-10, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithMaxValue_QitD3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(Long.MAX_VALUE);
    long size = entry.getSize();
    assertEquals(Long.MAX_VALUE, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributesWithWindowsAttributes_UwBh1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributesWithoutWindowsAttributes_aAyo2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTimeWithoutAccessDate_wlXd1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertThrows(UnsupportedOperationException.class, () -> entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_invalidCrc_tAyl1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(0);
    assertEquals(0, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_negativeCrc_JxwR3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(-123456789);
    assertEquals(-123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_maxValueCrc_iFHX4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_minValueCrc_LNxF5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_ValidCrc_oOXF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_ZeroCrc_EAjc3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 0L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_MaxValueCrc_mfFa4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MAX_VALUE;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_MinValueCrc_cOaA5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = Long.MIN_VALUE;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_RandomCrc_CoOJ8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = new Random().nextLong();
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_SameCrc_GMBo9_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_default_zLNx0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int actual = entry.getCompressedCrc();
    assertEquals(0, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_withCompressedCrc_JMjC1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    int actual = entry.getCompressedCrc();
    assertEquals(123456789, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_VLqT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(123456789);
    assertEquals(123456789, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithNegativeValue_BHqh1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-123456789);
    assertEquals(-123456789, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithZeroValue_vSip2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(0);
    assertEquals(0, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMaxValue_jODU3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributesWithMinValue_ADDV4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTimeAndMaxAccessTime_ZtEG12() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_Wfdz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(0, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValueWithNonZeroValue_BglX1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456789);
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(123456789, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValueWithNegativeValue_cLxc2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456789);
    long compressedCrc = entry.getCompressedCrcValue();
    assertEquals(-123456789, compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_ywRl0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    SevenZMethodConfiguration method1 = new SevenZMethodConfiguration(SevenZMethod.COPY, null);
    SevenZMethodConfiguration method2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, null);
    SevenZMethodConfiguration method3 = new SevenZMethodConfiguration(SevenZMethod.LZMA2, null);
    SevenZMethodConfiguration method4 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE, null);
    SevenZMethodConfiguration method5 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE64, null);
    SevenZMethodConfiguration method6 = new SevenZMethodConfiguration(SevenZMethod.BZIP2, null);
    SevenZMethodConfiguration method7 = new SevenZMethodConfiguration(SevenZMethod.AES256SHA256, null);
    SevenZMethodConfiguration method8 = new SevenZMethodConfiguration(SevenZMethod.BCJ_X86_FILTER, null);
    SevenZMethodConfiguration method9 = new SevenZMethodConfiguration(SevenZMethod.BCJ_PPC_FILTER, null);
    SevenZMethodConfiguration method10 = new SevenZMethodConfiguration(SevenZMethod.BCJ_IA64_FILTER, null);
    SevenZMethodConfiguration method11 = new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_FILTER, null);
    SevenZMethodConfiguration method12 = new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_THUMB_FILTER, null);
    SevenZMethodConfiguration method13 = new SevenZMethodConfiguration(SevenZMethod.BCJ_SPARC_FILTER, null);
    SevenZMethodConfiguration method14 = new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER, null);
    List<SevenZMethodConfiguration> methods = new ArrayList<>();
    methods.add(method1);
    methods.add(method2);
    methods.add(method3);
    methods.add(method4);
    methods.add(method5);
    methods.add(method6);
    methods.add(method7);
    methods.add(method8);
    methods.add(method9);
    methods.add(method10);
    methods.add(method11);
    methods.add(method12);
    methods.add(method13);
    methods.add(method14);
    entry.setContentMethods(methods);
    assertEquals(methods, entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithInvalidMethod_pqAx4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_rpvo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int attributes = entry.getWindowsAttributes();
    assertEquals(0, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNonZeroAttributes_GyiY1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(1, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNegativeAttributes_ztOd2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(-1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(-1, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithMaxValue_RbdG3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE);
    int attributes = entry.getWindowsAttributes();
    assertEquals(Integer.MAX_VALUE, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithMinValue_GabB4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MIN_VALUE);
    int attributes = entry.getWindowsAttributes();
    assertEquals(Integer.MIN_VALUE, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithInvalidValue_DKQN5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(Integer.MAX_VALUE + 1);
    int attributes = entry.getWindowsAttributes();
    assertEquals(Integer.MIN_VALUE, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_specificTimeAndLastModifiedTimeAlreadySet_XNAo6_hgIc0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1234567890);
    entry.setLastModifiedTime(time);
    FileTime newTime = FileTime.fromMillis(9876543210L);
    entry.setLastModifiedTime(newTime);
    assertEquals(newTime, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrc_sfDE0_YSeL0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    entry.setHasCrc(false);
    assertFalse(entry.getHasCrc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithValidCreationTime_LUKF3_TTWY0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(1000));
    Date creationDate = entry.getCreationDate();
    assertNotNull(creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDateWithValidCreationTime_LUKF3_TTWY0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(FileTime.fromMillis(1000));
    Date creationDate = entry.getCreationDate();
    assertEquals(creationDate, FileTimes.toDate(entry.getCreationTime()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateValidFormatWithTimeZone_zkgZ8_PoqX0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    assertTrue(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameHasStream_TOLX6_zxbg1() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDateWithInvalidValue_jQGM2_vkDS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertEquals(false, entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryEmpty_uYbk3_qsem0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertEquals(true, entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryInvalid_FLGz4_YJpJ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertEquals(false, entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithAccessTime_ZrPB1_SFzQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(1000000000L));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(1000000000L), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMaxAccessTime_zzob5_xEGm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MAX_VALUE));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(Long.MAX_VALUE), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithMinAccessTime_ZMtp6_uUKD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(Long.MIN_VALUE));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(Long.MIN_VALUE), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithNullAccessTimeAndZeroAccessTime_Fdef11_gsmj0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    entry.setAccessTime(FileTime.fromMillis(0L));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(0L), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithInvalidAccessTimeAndZeroAccessTime_XDwC8_eRWy0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(0L));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(0L), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDateWithInvalidAccessTimeAndMaxAccessTime_SwVs9_BVRD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(FileTime.fromMillis(-1L));
    entry.setAccessTime(FileTime.fromMillis(Long.MAX_VALUE));
    Date accessDate = entry.getAccessDate();
    assertEquals(new Date(Long.MAX_VALUE), accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributesWithNullAttributes_FvSR7_EhzT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setWindowsAttributes(0);
    int attributes = entry.getWindowsAttributes();
    assertEquals(0, attributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_ienE0_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithNegativeValue_cSAw1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = -1234567890;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDateWithZeroValue_gZJV2_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 0;
    entry.setLastModifiedDate(ntfsLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_XDft0_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 1643744000000L; // 2022-02-01 00:00:00
    entry.setAccessDate(ntfsAccessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDateWithMaxValue_WXxJ3_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = Long.MAX_VALUE;
    entry.setAccessDate(ntfsAccessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_nullFileTime_Cokr4_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = null;
    entry.setLastModifiedTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_invalidCrc_DMGO1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-1);
    assertEquals(-1, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrc_negativeCrc_uLpV6_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456789);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithNegativeValue_qZMz1_fid1() {
    long ntfsTime = -1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithZeroValue_xwzS2_fid1() {
    long ntfsTime = 0;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithMaxValue_lytt3_fid1() {
    long ntfsTime = Long.MAX_VALUE;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithInvalidValue_wtPS5_fid1() {
    long ntfsTime = -1;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTimeWithInvalidDateTime_gGcH9_fid1() {
    long ntfsTime = 1234567890;
    Date expected = new Date(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_Negative_ahUV2_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertFalse(compressedSize < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_Positive_WRsq4_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertFalse(compressedSize > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_MaxValue_LsyN5_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_MinValue_hmsI6_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long compressedSize = entry.getCompressedSize();
    assertEquals(0L, compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItem_IllegalStateException_LPIu9_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.setAntiItem(true);
    } catch (IllegalStateException e) {
        assertTrue(e.getMessage().contains("isAntiItem"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_NullDate_Awvf1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessDate(null);
    assertEquals(0, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTimeWithValidDate_ngqA3_fid1() {
        Date date = new Date(1585971200000L); // 2020-04-01 00:00:00
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        assertEquals(132304448000000000L, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_Qkby0_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_NegativeSize_JdhY1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = -100;
    entry.setCompressedSize(size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_InvalidSize_Lkdm6_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long size = -1;
    entry.setCompressedSize(size);
    assertEquals(-1, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithMultipleNames_ECBd8_1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name2");
    entry.setName("name2");
    assertEquals("name2", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDifferentName_IxvQ10_1_fid1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name1");
    entry.setName("name2");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_zDvp0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(false, entry.getHasAccessDate());
    entry.setHasAccessDate(true);
    assertEquals(true, entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithMultipleNames_ECBd8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name1");
    assertEquals("name1", entry.getName());
    entry.setName("name2");
    assertEquals("name2", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithSameName_wZlS9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setName("name");
    assertEquals("name", entry.getName());
    entry.setName("name");
    assertEquals("name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_SameCrc_GMBo9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long crc = 1234567890L;
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
    entry.setCompressedCrcValue(crc);
    assertEquals(crc, entry.getCompressedCrcValue());
}
}