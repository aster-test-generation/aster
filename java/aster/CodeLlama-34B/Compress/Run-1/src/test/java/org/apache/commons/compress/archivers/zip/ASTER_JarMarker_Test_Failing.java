/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_withoutData_dmOq1() {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[0];
    int offset = 0;
    int length = 0;
    try {
        jarMarker.parseFromLocalFileData(data, offset, length);
        fail("Expected ZipException");
    } catch (ZipException e) {
        assertEquals("JarMarker doesn't expect any data", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_fhDb0_fid1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.getValue(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.getValue(), 0);
    assertEquals(headerId.getBytes(), new byte[0]);
    assertEquals(headerId.hashCode(), 0);
    assertEquals(ZipShort.getValue(new byte[0]), 0);
    assertEquals(ZipShort.getBytes(0), new byte[0]);
    assertEquals(ZipShort.getValue(new byte[0], 0), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithNonEmptyByteArray_UUQz1() {
    JarMarker jarMarker = new JarMarker();
    byte[] expected = new byte[] { 1, 2, 3, 4, 5 };
    byte[] actual = jarMarker.getLocalFileDataData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithNullByteArray_YmXo2() {
    JarMarker jarMarker = new JarMarker();
    byte[] expected = null;
    byte[] actual = jarMarker.getLocalFileDataData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GmJM0() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertNotNull(centralDirectoryLength);
    assertEquals(0, centralDirectoryLength.getValue());
    assertEquals(0, centralDirectoryLength.getBytes().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1_2() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.getBytes(), new byte[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1_3() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(headerId.hashCode(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1_4() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(ZipShort.getValue(new byte[0]), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1_5() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(ZipShort.getBytes(0), new byte[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PlGZ1_6() {
    JarMarker jarMarker = new JarMarker();
    ZipShort headerId = jarMarker.getHeaderId();
    assertEquals(ZipShort.getValue(new byte[0], 0), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_GmJM0_3() {
    JarMarker jarMarker = new JarMarker();
    ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getBytes().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceWithCentralDirectoryData_odZu1_PSPb0_2() {
    byte[] centralDirectoryData = new byte[10];
    JarMarker jarMarker = new JarMarker();
    assertEquals(centralDirectoryData, jarMarker.getCentralDirectoryData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_HWaK0_wWzZ0() {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
    } catch (ZipException e) {
        e.printStackTrace();
    }
    assertEquals(10, jarMarker.getCentralDirectoryData().length);
}
}