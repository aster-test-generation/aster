/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.nio.file.attribute.FileTime;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_DefaultConstructor_iJZK0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_StringConstructor_PuJN3() {
    String name = "entry";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_FileConstructor_WHTV4() {
    File inputFile = new File("test.zip");
    String entryName = "entry";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_NonDefaultValue_RRgW5() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionRequired(1);
    assertEquals(1, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_rstT0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setCreationTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributesWithStringName_CZNJ3() {
ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
int internalAttributes = entry.getInternalAttributes();
assertEquals(0, internalAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInternalAttributesWithFileAndEntryName_hUdR4() {
ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
int internalAttributes = entry.getInternalAttributes();
assertEquals(0, internalAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_hkfV0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_rvah2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_vCSr3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    Object obj = new Object();
    assertFalse(entry.equals(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_JAXu4() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_rHkq5() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test2.zip");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameComment_PNhl6() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry1.setComment("test comment");
    entry2.setComment("test comment");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentComment_PASp7() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry1.setComment("test comment");
    entry2.setComment("different comment");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithEmptyInput_GRlJ3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("");
    int expectedRawFlag = 0;
    int actualRawFlag = entry.getRawFlag();
    assertEquals(expectedRawFlag, actualRawFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_Iloo0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithExtraTimeFields_KhPr1_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_MdEZ0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertEquals("newName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_MdEZ0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_TZLG1_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyName_PkSF2_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("", new byte[0]);
    assertEquals("", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyName_PkSF2_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("", new byte[0]);
    assertArrayEquals(new byte[0], entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullRawName_pEkU4_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", null);
    assertEquals("newName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullRawName_pEkU4_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", null);
    assertArrayEquals(null, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullNameAndRawName_QcBh7_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, null);
    assertArrayEquals(null, entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithMultipleExtraFields_gTic6() throws Exception {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
        entry.setExtra(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 });
        Assertions.assertEquals(2, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsExcludeUnparseable_ROjv1_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(false);
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_PXhg0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraField_nullExtraFields_oYuT0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    ZipShort type = new ZipShort(1);
    assertNull(entry.getExtraField(type));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseable_CrRn0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithIncludeUnparseable_CrRn0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields(true);
    assertTrue(extraFields[0] instanceof ZipExtraField);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstructor_FileAndName_eULR3() {
    File file = new File("file.zip");
    ZipArchiveEntry entry = new ZipArchiveEntry(file, "entryName");
    assertEquals("entryName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_directory_cPzS0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "directory/");
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_file_wBDh1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_empty_Wilz2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName_OCpL4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName3_ZAPr6() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name/file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName5_woPe8() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name/directory");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_invalidName6_qshO9() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "invalid/name/directory/file.txt");
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_platformNotUnix_PNAL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    assertEquals(0, entry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_HSEr0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    byte[] centralDirectoryExtra = entry.getCentralDirectoryExtra();
    assertNotNull(centralDirectoryExtra);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_DZlm0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(fileTime);
    assertEquals(fileTime.toMillis(), entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithLong_Lwxb1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = System.currentTimeMillis();
    entry.setTime(time);
    assertEquals(time, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUnixSymlink_true_OivL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "test.txt");
    entry.setUnixMode(UnixStat.LINK_FLAG);
    assertTrue(entry.isUnixSymlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMethod_valid_YsqT0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setMethod(ZipEntry.DEFLATED);
    assertEquals(ZipEntry.DEFLATED, entry.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentInternalAttributes_DOEU2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setInternalAttributes(1234);
    ZipArchiveEntry clonedEntry = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getInternalAttributes(), clonedEntry.getInternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NonEmptyEntry_WithStringName_KePA4() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setSize(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NonEmptyEntry_WithFileAndStringName_OzVk5() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("file.zip"), "entryName");
    entry.setSize(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_default_JReu0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    int platform = entry.getPlatform();
    assertEquals(0, platform);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_file_DVub3() {
    File inputFile = new File("path/to/file");
    String entryName = "entry";
    ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
    int platform = entry.getPlatform();
    assertEquals(0, platform);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_name_bbjE4() {
    String name = "entry";
    ZipArchiveEntry entry = new ZipArchiveEntry(name);
    int platform = entry.getPlatform();
    assertEquals(0, platform);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_platform_VYji5() {
    int platform = 1;
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(platform);
    assertEquals(platform, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFields_nrAY0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_NullValue_gyec7_guvt0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionRequired(0);
    assertEquals(0, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModifiedTime_uySs9_ofVA0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry1.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    entry2.setLastModifiedTime(FileTime.fromMillis(9876543210L));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithValidInputAndInvalidLinkOption_IukV5_vHJc0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    int expectedRawFlag = 1;
    int actualRawFlag = entry.getRawFlag();
    assertNotEquals(expectedRawFlag, actualRawFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLastModifiedTime_owMg8_nzGE0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry1.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    entry2.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawFlagWithValidInputAndNullLinkOption_SRYx6_eLSO0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    int expectedRawFlag = 0;
    int actualRawFlag = entry.getRawFlag();
    assertEquals(expectedRawFlag, actualRawFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLastAccessTime_NWUz10_eDpG0() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("test.zip");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("test.zip");
    entry1.setLastAccessTime(FileTime.fromMillis(1234567890L));
    entry2.setLastAccessTime(FileTime.fromMillis(1234567890L));
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_ZipArchiveEntry_LinkOption_Invalid_fFnQ2_OhNP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setStreamContiguous(false);
    assertFalse(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnixMode_invalidExternalAttributes_rjYK2_ZdAC0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setExternalAttributes(0x12345678);
    assertEquals(0, entry.getUnixMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNullLong_wAry3_cTYX0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    long time = 0L;
    entry.setTime(time);
    assertEquals(0, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_platform_null_sppK7_ZIdF0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(0);
    assertEquals(0, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignment_Constructor6_JwCJ9_JLDi0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setAlignment(1);
    int alignment = entry.getAlignment();
    assertEquals(1, alignment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_4_WDac3_gICn0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry4");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_2_blPo1_ojIy0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry2");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_1_wZZy0_IUbg0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry1");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_6_Wvhc5_tmse0() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry("entry6");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_8_PImB7_EZod0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry8");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_TimeSet_znRA1_xmAa0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry2");
    entry.setTime(2000);
    assertEquals(2000, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_9_IBGK8_cziB0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry9");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_10_xxqr9_nGGe0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entry10");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithEmptyString_cFEv1_zGtx0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("");
    entry.setName("");
    assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlag_kBgR0_qAjZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setRawFlag(1);
    assertEquals(1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithValidString_MLBB2_PcSj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setName("test");
    assertEquals("test", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlagWithInvalidValue_xvBH1_WVhE0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setRawFlag(-1);
    assertEquals(-1, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAlignment_PowerOfTwo_MvGY0_fMoy0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry1");
    entry.setAlignment(4);
    assertEquals(4, entry.getAlignment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRawFlagWithInteger_IFil6_DCTe0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    entry.setRawFlag(10);
    assertEquals(10, entry.getRawFlag());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NonEmptyEntry_KppO1_MEFl0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setSize(10);
    assertEquals(10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithValidZipArchiveEntry_yElv0_ozVj0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertNotNull(extraFields);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraFieldsWithValidZipArchiveEntry_yElv0_ozVj0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test.zip");
    ZipExtraField[] extraFields = entry.getExtraFields();
    assertEquals(0, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_InvalidValue_jRVp6_fid1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionRequired(-1);
    assertEquals(-1, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullName_TZLG1_1_fid1() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName(null, new byte[0]);
    assertNull(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_ValidName_MdEZ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", new byte[0]);
    assertEquals("newName", entry.getName());
    assertArrayEquals(new byte[0], entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_EmptyName_PkSF2() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("", new byte[0]);
    assertEquals("", entry.getName());
    assertArrayEquals(new byte[0], entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_NullRawName_pEkU4() {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setName("newName", null);
    assertEquals("newName", entry.getName());
    assertArrayEquals(null, entry.getRawName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneWithDifferentExternalAttributes_ShPb3() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry(new File("test.zip"), "entry");
    entry.setExternalAttributes(5678);
    ZipArchiveEntry clonedEntry = (ZipArchiveEntry) entry.clone();
    assertEquals(entry.getExternalAttributes(), clonedEntry.getExternalAttributes());
}
}