/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.java.util.jar.Pack200;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullProps_ZiPG0() throws IOException {
    File from = new File("from.jar");
    File to = new File("to.jar");
    Map<String, String> props = null;
    Pack200Utils.normalize(from, to, props);
    assertTrue(Files.exists(to.toPath()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_emptyProps_FIxw1() throws IOException {
    File from = new File("from.jar");
    File to = new File("to.jar");
    Map<String, String> props = new HashMap<>();
    Pack200Utils.normalize(from, to, props);
    assertTrue(Files.exists(to.toPath()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nonEmptyProps_tzwP2() throws IOException {
    File from = new File("from.jar");
    File to = new File("to.jar");
    Map<String, String> props = new HashMap<>();
    props.put(Pack200.Packer.SEGMENT_LIMIT, "-1");
    Pack200Utils.normalize(from, to, props);
    assertTrue(Files.exists(to.toPath()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_invalidProps_jpnm3() throws IOException {
    File from = new File("from.jar");
    File to = new File("to.jar");
    Map<String, String> props = new HashMap<>();
    props.put(Pack200.Packer.SEGMENT_LIMIT, "invalid");
    try {
        Pack200Utils.normalize(from, to, props);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid segment limit: invalid", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullFrom_FFqD0() throws IOException {
    File from = null;
    File to = new File("test.txt");
    try {
        Pack200Utils.normalize(from, to);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("from", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullTo_dDqE1() throws IOException {
    File from = new File("test.txt");
    File to = null;
    try {
        Pack200Utils.normalize(from, to);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("to", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_fromNotFile_tNgA4() throws IOException {
    File from = new File("test.txt");
    File to = new File("test.txt");
    try {
        Pack200Utils.normalize(from, to);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("test.txt is not a file", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_fromNotReadable_sNan6() throws IOException {
    File from = new File("test.txt");
    File to = new File("test.txt");
    try {
        Pack200Utils.normalize(from, to);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("test.txt is not readable", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_toNotWritable_Yjfx7() throws IOException {
    File from = new File("test.txt");
    File to = new File("test.txt");
    try {
        Pack200Utils.normalize(from, to);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("test.txt is not writable", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_success_ucUS8() throws IOException {
    File from = new File("test.txt");
    File to = new File("test.txt");
    Pack200Utils.normalize(from, to);
    assertTrue(to.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalize_TqVi0() throws IOException {
        File jar = new File("test.jar");
        File normalizedJar = new File("normalized.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(normalizedJar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNullJar_hLLO1() throws IOException {
        File normalizedJar = new File("normalized.jar");
        Pack200Utils.normalize(null, normalizedJar, null);
        assertFalse(normalizedJar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNullNormalizedJar_qzfq2() throws IOException {
        File jar = new File("test.jar");
        Pack200Utils.normalize(jar, null, null);
        assertTrue(jar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNullJarAndNormalizedJar_GjZQ3() throws IOException {
        Pack200Utils.normalize(null, null, null);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNonExistentJar_CiBv4() throws IOException {
        File jar = new File("non_existent.jar");
        File normalizedJar = new File("normalized.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertFalse(normalizedJar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNonExistentNormalizedJar_giAn5() throws IOException {
        File jar = new File("test.jar");
        File normalizedJar = new File("non_existent.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(jar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithNonExistentJarAndNormalizedJar_VYbo6() throws IOException {
        File jar = new File("non_existent.jar");
        File normalizedJar = new File("non_existent.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithInvalidJar_mofr7() throws IOException {
        File jar = new File("invalid.jar");
        File normalizedJar = new File("normalized.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertFalse(normalizedJar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithInvalidNormalizedJar_pvFE8() throws IOException {
        File jar = new File("test.jar");
        File normalizedJar = new File("invalid.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(jar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithInvalidJarAndNormalizedJar_isvT9() throws IOException {
        File jar = new File("invalid.jar");
        File normalizedJar = new File("invalid.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyJar_FKNy10() throws IOException {
        File jar = new File("empty.jar");
        File normalizedJar = new File("normalized.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(normalizedJar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeWithEmptyNormalizedJar_OoLP11() throws IOException {
        File jar = new File("test.jar");
        File normalizedJar = new File("empty.jar");
        Pack200Utils.normalize(jar, normalizedJar, null);
        assertTrue(jar.exists());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_nullTo_dDqE1_fid1() throws IOException {
    File from = new File("test.txt");
    File to = new File("test_normalized.txt");
    Pack200Utils.normalize(from, to);
    assertTrue(to.exists());
    assertTrue(to.isFile());
    assertEquals(from.length(), to.length());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalize_success_ucUS8_fid1() throws IOException {
    File from = new File("test.txt");
    File to = new File("test.txt");
    Pack200Utils.normalize(from, to);
    assertTrue(to.length() > 0);
}
}