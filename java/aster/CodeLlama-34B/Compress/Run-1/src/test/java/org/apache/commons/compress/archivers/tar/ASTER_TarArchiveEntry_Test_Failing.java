/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Failing {
public void testSetNames_Yptv0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithNullUser_pjfi1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames(null, "group");
assertNull(entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithNullGroup_piDk2() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", null);
assertEquals("user", entry.getUserName());
assertNull(entry.getGroupName());
}
public void testSetNamesWithEmptyUser_CLrd3() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("", "group");
assertEquals("", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithEmptyGroup_vLOi4() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "");
assertEquals("user", entry.getUserName());
assertEquals("", entry.getGroupName());
}
public void testSetNamesWithInvalidUser_gPSr5() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithInvalidGroup_VRCa6() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithInvalidUserAndGroup_qlfP7() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithValidUserAndGroup_vDia8() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
public void testSetNamesWithValidUserAndInvalidGroup_SUiH9() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
entry.setNames("user", "group");
assertEquals("user", entry.getUserName());
assertEquals("group", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_nullHeader_HkKr6() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = null;
    try {
        entry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Header is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_emptyHeader_soKR7() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = new byte[0];
    try {
        entry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Header is empty", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseTarHeader_invalidHeader_Rzun8() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    byte[] header = new byte[512];
    header[0] = (byte) 0xFF;
    try {
        entry.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithInvalidSize_gOUE4() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "invalid");
    entry.fillGNUSparse0xData(headers);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_xlSl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1]);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_rSCv1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1]);
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_coxX2() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1]);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ipeO3() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[1]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[1]);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObjectWithDifferentData_EDDC4() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[1]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[1]);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeFileTime_fujn4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(-10000);
    tarArchiveEntry.setCreationTime(fileTime);
    assertEquals(FileTime.fromMillis(0), tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_null_vajF3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName(null);
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_null_Rhps8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setName("");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithMaxValue_PIvV3() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithMinValue_udPw4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForCharacterDevice_hqHC6() {
    File device = new File("test.dev");
    TarArchiveEntry entry = new TarArchiveEntry(device);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertNotNull(statusChangeTime);
    assertEquals(device.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForFifo_kdWD8() {
    File fifo = new File("test.fifo");
    TarArchiveEntry entry = new TarArchiveEntry(fifo);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertEquals(fifo.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithName_ZuVR5() throws IOException {
        String name = "test.txt";
        TarArchiveEntry entry = new TarArchiveEntry(name);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTimeWithNameAndPreserveAbsolutePath_paFd6() throws IOException {
        String name = "test.txt";
        TarArchiveEntry entry = new TarArchiveEntry(name, true);
        FileTime lastAccessTime = entry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMaxValue_EHbv3() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithMinValue_YrHW4() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_8_nAhG7() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[1]);
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertNull(extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_MissingHeader_bPba4() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(headers);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Missing header value for 'size'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_InvalidHeaderKey_ZXan7() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("invalid", "value");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(headers);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid header key 'invalid'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName_empty_THkh0() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
        assertEquals("", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName_nonEmpty_OFEH1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(new byte[] { 1, 2, 3 });
        assertEquals("123", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName_nullString_yJGi5() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry((String) null);
        assertEquals(null, entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNullEncoding_cRWD8() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFile_cejW3_1() {
    File file = new File("test");
    file.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithNameAndPreserveAbsolutePath_eTGY3() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt", true);
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor5_KTjR6() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_preserveAbsolutePath_false_WsHc2_CjdS0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("/absolute/path/absolute/path/new_name");
    assertEquals("absolute/path/new_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_preserveAbsolutePath_zNQo6_lqsK0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setName("invalid_name");
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name: invalid_name", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithHeaderBuf_Ezux3_pJbN0_1() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIdsWithHeaderBuf_Ezux3_pJbN0_2() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    entry.setIds(1000, 1000);
    assertEquals(1000, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_ByteArrayConstructor_ZRPJ1_jZdF0() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertTrue(entry.isStreamContiguous());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraPaxHeader_5_cSAp4_xNZu0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
        String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
        assertNull(extraPaxHeader);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_ByteArrayConstructor_FySL4_SAoQ0() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNullFile_VYkG5_RfBi0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNull_ZiLq6_NOxd0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(0);
        assertNull(tarArchiveEntry.getGroupId());
    } catch (NullPointerException e) {
        fail("Expected NullPointerException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNullFile_JfHW5_VRuZ0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[1]);
    tarArchiveEntry.setModTime(1000000000);
    assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserNameWithHeaderBuf_qvcm3_JVqg0() {
    byte[] headerBuf = new byte[1];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals("", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNullFile_KYBk6_Ngob0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1]);
    assertEquals(1, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCheckSumOK_NullFile_mMdh11_sWXl0() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[1]);
    assertTrue(entry.isCheckSumOK());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupId_qVem0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupIdWithFileAndFileName_wymo9_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillGNUSparse0xDataWithNegativeSize_JqsH5() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    Map<String, String> headers = new HashMap<>();
    headers.put(TarGnuSparseKeys.SIZE, "-1024");
    entry.fillGNUSparse0xData(headers);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_xlSl0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_rSCv1_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_coxX2_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObject_ipeO3_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[0]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[0]);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObjectWithDifferentData_EDDC4_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[0]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[1]);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectWithSameData_ByteArray_RVie6_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry(new byte[0]);
    TarArchiveEntry entry2 = new TarArchiveEntry(new byte[0]);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_1_PjCw0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
    assertEquals(entry.getLinkFlag(), (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMajor_different_hMZn4() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.setDevMajor(10);
    assertNotEquals(10, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFileTime_OROO2_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis() - 10000);
    tarArchiveEntry.setCreationTime(fileTime);
    assertNotEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithNegativeFileTime_fujn4_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(-10000);
    tarArchiveEntry.setCreationTime(fileTime);
    assertNotEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTimeWithInvalidFile_wSeE8_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"));
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    tarArchiveEntry.setCreationTime(fileTime);
    assertNotEquals(fileTime, tarArchiveEntry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_null_vajF3_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName(null);
    assertEquals(null, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_invalid_null_Rhps8_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    try {
        entry.setName(null);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Invalid name: null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTime_dEwv2_fid1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertEquals(file.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForSymbolicLink_tncL4_fid1() {
    File link = new File("test.link");
    TarArchiveEntry entry = new TarArchiveEntry(link);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertEquals(link.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatusChangeTimeReturnsCorrectFileTimeForCharacterDevice_hqHC6_fid1() {
    File device = new File("test.dev");
    TarArchiveEntry entry = new TarArchiveEntry(device);
    FileTime statusChangeTime = entry.getStatusChangeTime();
    assertEquals(device.lastModified(), statusChangeTime.toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName1_UVVU0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_directory_ncXa4_fid1() {
    File directory = new File("test");
    directory.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(directory, "test");
    assertNull(entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader5_DDlH4() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, null, false);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteEntryHeader6_Vuax5() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    byte[] outbuf = new byte[1024];
    entry.writeEntryHeader(outbuf, null, true);
    assertEquals(1024, outbuf.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_1_dfPv0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertEquals("test_header", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeader_2_DEKq1_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"), "test_header");
    String extraPaxHeader = tarArchiveEntry.getExtraPaxHeader("test_header");
    assertEquals("test_header", extraPaxHeader);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_SingleHeader_OTWm1_fid1() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_MultipleHeaders_XoVL2_1_fid1() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "100");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_InvalidHeader_JWhP3_fid1() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "invalid");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(headers);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Invalid header value for 'size'", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_NullHeaders_yHSd5() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(null);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertEquals("headers", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_EmptyHeadersMap_wNnc6_fid1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    try {
        entry.updateEntryFromPaxHeaders(new HashMap<>());
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("No headers found", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_FileConstructor_uqCL1_fid1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructor_Pglw3_fid1() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_StringConstructorWithPreserveAbsolutePath_neYW8_fid1() {
    String name = "test.txt";
    TarArchiveEntry entry = new TarArchiveEntry(name, true);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNUSparse_NullEntry_KkON1_fid1() {
    TarArchiveEntry entry = null;
    assertFalse(entry.isPaxGNUSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkName_nonEmptyString_XQDs4_fid1() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry("hello");
        assertEquals("hello", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_iRRc0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithEmptyFile_jlpD6_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File(""));
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithNullEncoding_cRWD8_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), null);
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithEmptyEncoding_FRyn9_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupIdWithInvalidEncoding_rXQQ10() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "invalid");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_1_EuMK0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals(0, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_2_VRoa1_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
    assertEquals(0, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_9_FmtJ8_fid1() {
    File file = new File("test.txt");
    TarArchiveEntry entry = new TarArchiveEntry(file);
    assertEquals(0, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_NullFile_UYSD0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(null, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_EmptyFile_zfOF1_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File(""), "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(0, entries.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFile_cejW3_2() {
    File file = new File("test");
    file.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals("test", entries[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFileWithSubdirectories_YGZl4_2() {
    File file = new File("test");
    file.mkdir();
    File subdir = new File(file, "subdir");
    subdir.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals("test", entries[0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFileWithSubdirectories_YGZl4_3() {
    File file = new File("test");
    file.mkdir();
    File subdir = new File(file, "subdir");
    subdir.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals("subdir", entries[1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_yQdm0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertEquals(0, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset1_OZSm0() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset2_dySx1_fid1() {
TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"), "test.txt");
assertEquals(0, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithInvalidValue_BGru5_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(Integer.MAX_VALUE + 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Invalid group ID"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorDirectory_sQGp2_1_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(-1);
    assertEquals(10, entry.getDevMinor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorDirectory_sQGp2_2_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(-1);
    assertEquals(-1, entry.getDevMinor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserName_Tdai0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"), "test.txt");
    assertEquals("test", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithName_RgFl2_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry("test.txt");
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithHeaderBuf_fRxt4_fid1() {
    byte[] headerBuf = new byte[1024];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeSize_pNUi2_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(-10);
    assertEquals(-10, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNegativeLargeSize_osxc5_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setSize(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCheckSumOK_True_HWKv0_fid1() {
        TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
        assertTrue(entry.isCheckSumOK());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLinkFlag_CfON4_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt", (byte) 1);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentPreserveAbsolutePath_VhON5_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt", false);
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt", true);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentDataOffset_sqlH6_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setDataOffset(100L);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSize_mbAj7_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setSize(100L);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModTime_uqCY8_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setModTime(new Date(100L));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_Constructor5_KTjR6_fid1() {
    byte[] headerBuf = new byte[100];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals(0, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_2_tWVl1_WtrC0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"));
    assertEquals(entry.getLinkFlag(), (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_5_vjWQ4_mYEj0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("file.txt"), "file.txt");
    assertEquals(entry.getLinkFlag(), (byte) 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataOffset_NullOffset_cYrw2_wOfV0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDataOffset(0L);
    assertNull(entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_preserveAbsolutePath_SOlx1_eoAz0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("/absolute/path/new_name");
    assertEquals("/absolute/path/new_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_preserveAbsolutePath_false_WsHc2_CjdS0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setName("/absolute/path/new_name");
    assertEquals("new_name", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserIdWithValidString_GupR9_PMDd0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setUserId(1000);
    assertEquals("1000", entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_ByteArrayConstructor_ZRPJ1_jZdF0_fid1() {
    byte[] headerBuf = new byte[10];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertTrue(entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName2_zQbE1_RyQi0() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    assertEquals("test", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNull_aQZS5_Ebpk0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(0);
    assertNull(tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithValidString_yvlb8_mMQw0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(1000);
    assertEquals("1000", tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithValidStringAndZeroValue_qwBk10_LmzW0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(0);
    assertEquals("0", tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithValidStringAndMaxValue_rkWe11_cVGs0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    tarArchiveEntry.setGroupId(9223372036854775807L);
    assertEquals(9223372036854775807L, tarArchiveEntry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_DefaultConstructor_RZzI0_kIZb0() {
    TarArchiveEntry entry = new TarArchiveEntry("test");
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeInvalid_TRfk2_kBkt0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setModTime(FileTime.fromMillis(1234567890));
    assertNull(entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithNull_ZiLq6_NOxd0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("Group ID cannot be null"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithInvalidString_gslc8_QvFK0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Invalid group ID"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupIdWithEmptyString_vDxR7_iUQA0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.tar"));
    try {
        tarArchiveEntry.setGroupId(0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertTrue(e.getMessage().contains("Group ID cannot be empty"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTimeWithNullFile_JfHW5_VRuZ0_fid1() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
    tarArchiveEntry.setModTime(1000000000);
    assertEquals(1000000000, tarArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserNameWithHeaderBuf_qvcm3_JVqg0_fid1() {
    byte[] headerBuf = new byte[0];
    TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
    assertEquals("", entry.getUserName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithNullFile_KYBk6_Ngob0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCheckSumOK_NullFile_mMdh11_sWXl0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[0]);
    assertFalse(entry.isCheckSumOK());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCreationTime_FAIE10_nFvN0_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setCreationTime(FileTime.fromMillis(100L));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentStatusChangeTime_pDiy11_Ygfq0_fid1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("test.txt");
    TarArchiveEntry entry2 = new TarArchiveEntry("test.txt");
    entry2.setStatusChangeTime(FileTime.fromMillis(100L));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFile_specialFile_ltkQ7_IGaq0_fid1() {
    File file = new File("test.txt");
    try {
        file.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    File specialFile = new File("test.txt");
    specialFile.setReadOnly();
    TarArchiveEntry entry = new TarArchiveEntry(specialFile, "test.txt");
    assertNull(entry.getFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFileWithFiles_DMcK5_Czre0() {
    File file = new File("test");
    file.mkdir();
    File subfile = new File(file, "subfile.txt");
    try {
        subfile.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(2, entries.length);
    assertEquals("test", entries[0].getName());
    assertEquals("subfile.txt", entries[1].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateEntryFromPaxHeaders_MultipleHeaders_XoVL2() throws IOException {
    Map<String, String> headers = new HashMap<>();
    headers.put("name", "test.txt");
    headers.put("size", "100");
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.tar"));
    entry.updateEntryFromPaxHeaders(headers);
    assertEquals("test.txt", entry.getName());
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFile_cejW3() {
    File file = new File("test");
    file.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(1, entries.length);
    assertEquals("test", entries[0].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryFileWithSubdirectories_YGZl4() {
    File file = new File("test");
    file.mkdir();
    File subdir = new File(file, "subdir");
    subdir.mkdir();
    TarArchiveEntry entry = new TarArchiveEntry(file, "test");
    TarArchiveEntry[] entries = entry.getDirectoryEntries();
    assertEquals(2, entries.length);
    assertEquals("test", entries[0].getName());
    assertEquals("subdir", entries[1].getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorDirectory_sQGp2() {
    TarArchiveEntry entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(10);
    assertEquals(10, entry.getDevMinor());
    entry = new TarArchiveEntry(new File("test.txt"));
    entry.setDevMinor(-1);
    assertEquals(-1, entry.getDevMinor());
}
}