/**
 * Generated by Aster
 */
package org.apache.commons.compress;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MemoryLimitException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryNeededInKb_pCze0() {
    MemoryLimitException exception = new MemoryLimitException(1000, 500);
    assertEquals(1000, exception.getMemoryNeededInKb());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryNeededInKbWithException_Bcme1() {
    MemoryLimitException exception = new MemoryLimitException(1000, 500, new Exception());
    assertEquals(1000, exception.getMemoryNeededInKb());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryLimitInKb_xGUj0() {
    MemoryLimitException exception = new MemoryLimitException(1000, 500);
    assertEquals(500, exception.getMemoryLimitInKb());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryLimitInKbWithZeroMemoryNeeded_KIXo1() {
    MemoryLimitException exception = new MemoryLimitException(0, 500);
    assertEquals(500, exception.getMemoryLimitInKb());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryLimitInKbWithZeroMemoryLimit_dBYh2() {
    MemoryLimitException exception = new MemoryLimitException(1000, 0);
    assertEquals(0, exception.getMemoryLimitInKb());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMemoryLimitInKbWithNegativeMemoryNeeded_MbXI3() {
    MemoryLimitException exception = new MemoryLimitException(-1000, 500);
    assertEquals(500, exception.getMemoryLimitInKb());
}
}