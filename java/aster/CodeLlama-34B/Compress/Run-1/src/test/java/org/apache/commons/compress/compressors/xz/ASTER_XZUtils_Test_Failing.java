/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleExtensions_CYdA2() {
    String fileName = "test.xz.gz";
    String expected = "test.xz";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithInvalidExtension_BaqH3() {
    String fileName = "test.txt";
    String expected = "test";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNull_OKbF5() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_EmptyString_ZuXz0() {
    String fileName = "";
    String expected = "";
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_NullString_UIlo1() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getCompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_null_zGjE0() {
    assertFalse(XZUtils.isCompressedFilename(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_multipleExtensions_kQBL6() {
    assertTrue(XZUtils.isCompressedFilename("file.xz.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileNameWithExtension_XrWC1() {
        String fileName = "test.xz.gz";
        String expected = "test.xz";
        String actual = XZUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileNameWithMultipleExtensions_ctnL2() {
        String fileName = "test.xz.gz.bz2";
        String expected = "test.xz.gz";
        String actual = XZUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileNameWithNull_LETn5() {
        String fileName = null;
        String expected = null;
        String actual = XZUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_True_blRg0() {
    String fileName = "file.zip";
    assertTrue(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_Null_rlWH2() {
    String fileName = null;
    assertFalse(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_UppercaseExtension_fgBC6() {
    String fileName = "file.ZIP";
    assertTrue(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_MultipleExtensions_LTNu8() {
    String fileName = "file.zip.txt";
    assertTrue(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_MultipleExtensionsWithValid_eNvj12() {
    String fileName = "file.zip.txt.zip";
    assertTrue(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileName_MultipleExtensionsWithValidAndValid_oGkX15() {
    String fileName = "file.zip.txt.zip.txt";
    assertTrue(XZUtils.isCompressedFileName(fileName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_null_YcIm0() {
    String fileName = null;
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertNull(compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_empty_xDSo1() {
    String fileName = "";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid_gcmu3() {
    String fileName = "file.txt.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid2_HBpe4() {
    String fileName = "file.txt.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid3_WXJB5() {
    String fileName = "file.txt.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid4_mQGP6() {
    String fileName = "file.txt.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid5_DAMa7() {
    String fileName = "file.txt.xz.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid6_wUqD8() {
    String fileName = "file.txt.xz.xz.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid7_WREv9() {
    String fileName = "file.txt.xz.xz.xz.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid8_MehI10() {
    String fileName = "file.txt.xz.xz.xz.xz.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_invalid9_YYhy11() {
    String fileName = "file.txt.xz.xz.xz.xz.xz.xz.xz.xz.xz";
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals("file.txt.xz.xz.xz.xz.xz.xz.xz.xz.xz", compressedFileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_validSignature_gULH1_kJPx0() {
    byte[] signature = new byte[] { (byte) 0x1F, (byte) 0x9D };
    int length = 2;
    assertTrue(XZUtils.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithMultipleExtensions_CYdA2_fid1() {
    String fileName = "test.xz.gz.gz";
    String expected = "test.xz.gz";
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilenameWithNull_OKbF5_fid1() {
    String fileName = null;
    String expected = null;
    String actual = XZUtils.getUncompressedFilename(fileName);
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_null_YcIm0_fid1() {
    String fileName = null;
    String compressedFileName = XZUtils.getCompressedFileName(fileName);
    assertEquals(null, compressedFileName);
}
}