/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_CWBm0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setSize(size);
    assertEquals(size, zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_Null_rpdB1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    zip64ExtendedInformationExtraField.setSize(null);
    assertNull(zip64ExtendedInformationExtraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_DifferentValue_ArqC2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setSize(size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskStartNumber_sOiu0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong diskStart = zip64ExtendedInformationExtraField.getDiskStartNumber();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_ftzN0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setCompressedSize(compressedSize);
    assertEquals(compressedSize, zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSizeWithNull_UXiN2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    zip64ExtendedInformationExtraField.setCompressedSize(null);
    assertNull(zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(16, data.length);
    assertEquals(0x01, data[0]);
    assertEquals(0x02, data[1]);
    assertEquals(0x03, data[2]);
    assertEquals(0x04, data[3]);
    assertEquals(0x05, data[4]);
    assertEquals(0x06, data[5]);
    assertEquals(0x07, data[6]);
    assertEquals(0x08, data[7]);
    assertEquals(0x09, data[8]);
    assertEquals(0x0A, data[9]);
    assertEquals(0x0B, data[10]);
    assertEquals(0x0C, data[11]);
    assertEquals(0x0D, data[12]);
    assertEquals(0x0E, data[13]);
    assertEquals(0x0F, data[14]);
    assertEquals(0x10, data[15]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumber_zPfQ0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong zipLong = new ZipLong(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0);
    zip64ExtendedInformationExtraField.setDiskStartNumber(zipLong);
    assertEquals(zipLong, zip64ExtendedInformationExtraField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumberWithNull_iXuR1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0), new ZipEightByteInteger(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 0));
    ZipLong zipLong = null;
    zip64ExtendedInformationExtraField.setDiskStartNumber(zipLong);
    assertNull(zip64ExtendedInformationExtraField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_RJCF0() {
Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0));
assertEquals(1, zip64ExtendedInformationExtraField.getHeaderId().getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNull_HpuH1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(0, localFileDataLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNull_compressedSizeNotNull_uiBb4() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }));
    ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(0, localFileDataLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNull_compressedSizeNull_NiJW5() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength4_ncYt3() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(null, null);
    ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
    assertEquals(0, centralDirectoryLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffset_MIRE0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger rho = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zip64ExtendedInformationExtraField.setRelativeHeaderOffset(rho);
    assertEquals(rho, zip64ExtendedInformationExtraField.getRelativeHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffsetWithNull_uDVE2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger rho = null;
    zip64ExtendedInformationExtraField.setRelativeHeaderOffset(rho);
    assertNull(zip64ExtendedInformationExtraField.getRelativeHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_HXSN0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger size = zip64ExtendedInformationExtraField.getSize();
    assertEquals(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRelativeHeaderOffset2_OPUn1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), new ZipLong(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0));
    ZipEightByteInteger actual = zip64ExtendedInformationExtraField.getRelativeHeaderOffset();
    assertEquals(new ZipEightByteInteger(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}, 0), actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNull_hltw3() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(null, null);
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0, data.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_azFd0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, 0),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 }, 0),
            new ZipEightByteInteger(new byte[] { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 }, 0),
            new ZipLong(new byte[] { 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20 }, 0));
    ZipEightByteInteger compressedSize = zip64ExtendedInformationExtraField.getCompressedSize();
    assertEquals(new ZipEightByteInteger(new byte[] { 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 }, 0), compressedSize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_1() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(16, data.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_2() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x01, data[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_3() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x02, data[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_4() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x03, data[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_5() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x04, data[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_6() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x05, data[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_7() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x06, data[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_8() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x07, data[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_9() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x08, data[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_10() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x09, data[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_11() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0A, data[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_12() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0B, data[10]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_13() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0C, data[11]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_14() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0D, data[12]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_15() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0E, data[13]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_16() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x0F, data[14]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_1_PlHz0_17() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(
            new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }),
            new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64ExtendedInformationExtraField.getCentralDirectoryData();
    assertEquals(0x10, data[15]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNotNull_kTSY0_YdLe0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }));
    ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(2 * 8, localFileDataLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_sizeNotNull_compressedSizeNull_JLpo3_odIi0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), null);
    ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
    assertEquals(2 * 8, localFileDataLength.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_1() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(2 * 8, data.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_2() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x01, data[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_3() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x02, data[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_4() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x03, data[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_5() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x04, data[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_6() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x05, data[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_7() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x06, data[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_8() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x07, data[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_9() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x08, data[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_10() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x09, data[8]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_11() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0A, data[9]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_12() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0B, data[10]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_13() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0C, data[11]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_14() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0D, data[12]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_15() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0E, data[13]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_16() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x0F, data[14]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_sizeAndCompressedSizeNotNull_wcEC0_nkuR0_17() {
    Zip64ExtendedInformationExtraField zip64 = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }), new ZipEightByteInteger(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10 }));
    byte[] data = zip64.getLocalFileDataData();
    assertEquals(0x10, data[15]);}
}