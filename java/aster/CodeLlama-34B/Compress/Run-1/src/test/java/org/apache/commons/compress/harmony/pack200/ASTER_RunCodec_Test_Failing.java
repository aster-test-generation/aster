/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBCodec_jgtp0() throws Pack200Exception {
        int k = 1;
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4);
        RunCodec runCodec = new RunCodec(k, aCodec, bCodec);
        Codec bCodecResult = runCodec.getBCodec();
        assertEquals(bCodec, bCodecResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_IaPY0_1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_IaPY0_2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(256, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithLast_opGs1_1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(256, result[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithLast_opGs1_2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 256);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(20, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_TdNA0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10);
    assertArrayEquals(new byte[] { 1, 2, 3, 4, 5 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentBHSDCodec_Oito1_cKtP0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4, 1, 1);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertEquals(aCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDifferentBAndH_nZfS1_wHkk0() {
    BHSDCodec aCodec = new BHSDCodec(3, 8);
    BHSDCodec bCodec = new BHSDCodec(3, 8, 4, 2);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
        String expected = "RunCodec[k=2;aCodec=BHSDCodec[b=3,h=8];bCodec=BHSDCodec[b=3,h=8,s=4,d=2]]";
        String actual = runCodec.toString();
        assertEquals(expected, actual);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentRunCodec_tMgg2_dXAh0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertEquals(bCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentK_Sjnn3_WKZj0() {
    BHSDCodec aCodec = new BHSDCodec(8, 4, 2, 1);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(3, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertEquals(bCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_IaPY0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);
    assertEquals(20, result[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithInvalidInput_sBrQ2_fid2() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    try {
        runCodec.encode(10, 20);
        fail("Expected Pack200Exception");
    } catch (Pack200Exception e) {
        assertEquals("Must encode entire band at once with a RunCodec", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNegativeValue_BTlj1() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(-10);
    assertArrayEquals(new byte[] { 1, 2, 3, 4, 5 }, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_IaPY0_1_fid3() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(10, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_IaPY0_2_fid3() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = new RunCodec(5, aCodec, bCodec);
    byte[] result = runCodec.encode(10, 20);
    assertEquals(20, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentBHSDCodec_Oito1_cKtP0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(1, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertNotEquals(bCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDifferentBAndH_nZfS1_wHkk0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(16, 8);
    BHSDCodec bCodec = new BHSDCodec(16, 8, 4, 2);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
        String expected = "RunCodec[k=2;aCodec=BHSDCodec[b=16,h=8];bCodec=BHSDCodec[b=16,h=8,s=4,d=2]]";
        String actual = runCodec.toString();
        assertEquals(expected, actual);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentRunCodec_tMgg2_dXAh0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(2, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertNotEquals(aCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecWithDifferentK_Sjnn3_WKZj0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(8, 4);
    BHSDCodec bCodec = new BHSDCodec(8, 4, 2, 1);
    try {
        RunCodec runCodec = new RunCodec(3, aCodec, bCodec);
        Codec codec = runCodec.getACodec();
        assertNotEquals(aCodec, codec);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
}
}