/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.List;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_True_kwEu0() {
    byte[] buffer = new byte[1];
    buffer[0] = 1;
    int offset = 0;
    assertTrue(TarUtils.parseBoolean(buffer, offset));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBoolean_False_fvVi1() {
    byte[] buffer = new byte[1];
    buffer[0] = 0;
    int offset = 0;
    assertFalse(TarUtils.parseBoolean(buffer, offset));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_1() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_2() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary1_ycTZ0() {
    byte[] buffer = new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff };
    int offset = 0;
    int length = 8;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytesWithNullName_mLYL4() throws IOException {
    String name = null;
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertTrue(e.getMessage().contains("name"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytesWithLengthGreaterThanBufLength_mfYo8() throws IOException {
    String name = "test";
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 11;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
        assertTrue(e.getMessage().contains("length"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctal_InvalidInput_LengthLessThan2_HjlK6() {
    byte[] buffer = new byte[] { '1' };
    int offset = 0;
    int length = buffer.length;
    try {
        TarUtils.parseOctal(buffer, offset, length);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("Length 1 must be at least 2", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_KCeH0_1() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_KCeH0_2() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparseWithOffset_yGwc1_2() {
    byte[] buffer = new byte[100];
    int offset = 10;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value0_offset0_length1_XClx0() {
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 1;
    TarUtils.formatUnsignedOctalString(0, buffer, offset, length);
    assertEquals('0', buffer[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1_offset0_length1_pIdY1() {
    byte[] buffer = new byte[1];
    int offset = 0;
    int length = 1;
    TarUtils.formatUnsignedOctalString(1, buffer, offset, length);
    assertEquals('1', buffer[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10_offset0_length2_NIyH2_1() {
    byte[] buffer = new byte[2];
    int offset = 0;
    int length = 2;
    TarUtils.formatUnsignedOctalString(10, buffer, offset, length);
    assertEquals('1', buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value100_offset0_length3_ujQz3_1() {
    byte[] buffer = new byte[3];
    int offset = 0;
    int length = 3;
    TarUtils.formatUnsignedOctalString(100, buffer, offset, length);
    assertEquals('1', buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_offset0_length4_zCrA4_1() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int length = 4;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals('1', buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value1000_offset0_length4_zCrA4_4() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int length = 4;
    TarUtils.formatUnsignedOctalString(1000, buffer, offset, length);
    assertEquals('0', buffer[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_value10000_offset0_length5_qFpB5_5() {
    byte[] buffer = new byte[5];
    int offset = 0;
    int length = 5;
    TarUtils.formatUnsignedOctalString(10000, buffer, offset, length);
    assertEquals('0', buffer[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0_1() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0_2() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0_3() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(100, sparseHeaders.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0_4() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(200, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0_5() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(300, sparseHeaders.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_negativeOffset_ewdR2() throws IOException {
    String sparseMap = "-1,100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct offset contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_negativeNumbytes_JVfs3() throws IOException {
    String sparseMap = "0,-100,200,300";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Sparse struct numbytes contains negative value", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_oddNumberOfElements_NMcL4() throws IOException {
    String sparseMap = "0,100,200,300,400";
    try {
        TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        fail("Expected IOException");
    } catch (IOException e) {
        assertEquals("Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_EmptyArray_oZSQ0() {
    long sum = TarUtils.computeCheckSum(new byte[0]);
    assertEquals(0, sum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSum_NonEmptyArray_mUUD1() {
    byte[] buf = new byte[] { 1, 2, 3, 4, 5 };
    long sum = TarUtils.computeCheckSum(buf);
    assertEquals(15, sum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_1() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_PositiveValueGreaterThanMaxAsOctalChar_zkMr1_3() {
		long value = 1234567890123456789L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(0, buf[offset + 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueLessThanMaxAsOctalChar_YFFa2_1() {
		long value = -1234567890L;
		byte[] buf = new byte[12];
		int offset = 0;
		int length = 10;
		int expected = 10;
		int actual = TarUtils.formatLongOctalOrBinaryBytes(value, buf, offset, length);
		assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatLongOctalOrBinaryBytes_NegativeValueGreaterThanMaxAsOctalChar_XdCX3() {
		long value = -1234567890123456789L;
		byte[] buf = new byte[12];
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesZero_vJOl4_1() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 0L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesZero_vJOl4_2() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 0L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals((byte) ' ', buf[offset + length - 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_NullBuffer_IyKc2_Deid0() throws IOException {
    byte[] buffer = null;
    int offset = 0;
    int length = 0;
    ZipEncoding encoding = null;
    String expected = "";
    String actual = TarUtils.parseName(buffer, offset, length, encoding);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_validInput_vaTX0_3_fid1() throws IOException {
    byte[] buffer = new byte[1024];
    int offset = 0;
    int entries = 2;
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.readSparseStructs(buffer, offset, entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_KCeH0() {
    byte[] buffer = new byte[100];
    int offset = 0;
    TarArchiveStructSparse sparse = TarUtils.parseSparse(buffer, offset);
    assertEquals(0, sparse.getOffset());
    assertEquals(0, sparse.getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_validInput_GoiE0() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> sparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, sparseHeaders.size());
    assertEquals(0, sparseHeaders.get(0).getOffset());
    assertEquals(100, sparseHeaders.get(0).getNumbytes());
    assertEquals(200, sparseHeaders.get(1).getOffset());
    assertEquals(300, sparseHeaders.get(1).getNumbytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytesZero_vJOl4() {
    byte[] buf = new byte[10];
    int offset = 0;
    int length = 10;
    long value = 0L;
    int expected = 10;
    int actual = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(expected, actual);
    assertEquals((byte) ' ', buf[offset + length - 1]);
}
}