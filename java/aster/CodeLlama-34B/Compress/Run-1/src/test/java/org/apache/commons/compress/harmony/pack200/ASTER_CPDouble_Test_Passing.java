/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPDouble_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_9_teLo8() {
    CPDouble cpDouble = new CPDouble(9.0);
    double result = cpDouble.getDouble();
    assertEquals(9.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_10_WERc9() {
    CPDouble cpDouble = new CPDouble(10.0);
    double result = cpDouble.getDouble();
    assertEquals(10.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_11_lwDe10() {
    CPDouble cpDouble = new CPDouble(11.0);
    double result = cpDouble.getDouble();
    assertEquals(11.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_12_hUui11() {
    CPDouble cpDouble = new CPDouble(12.0);
    double result = cpDouble.getDouble();
    assertEquals(12.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_13_WDTg12() {
    CPDouble cpDouble = new CPDouble(13.0);
    double result = cpDouble.getDouble();
    assertEquals(13.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_14_vOCM13() {
    CPDouble cpDouble = new CPDouble(14.0);
    double result = cpDouble.getDouble();
    assertEquals(14.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_15_saER14() {
    CPDouble cpDouble = new CPDouble(15.0);
    double result = cpDouble.getDouble();
    assertEquals(15.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_16_mSwA15() {
    CPDouble cpDouble = new CPDouble(16.0);
    double result = cpDouble.getDouble();
    assertEquals(16.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_17_EgoF16() {
    CPDouble cpDouble = new CPDouble(17.0);
    double result = cpDouble.getDouble();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Equal_XoKd0_XNyQ0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Greater_GrOp1_mILu0() {
    CPDouble obj1 = new CPDouble(2.0);
    CPDouble obj2 = new CPDouble(1.0);
    int result = obj1.compareTo(obj2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareTo_Less_Cdsi2_CoUV0() {
    CPDouble obj1 = new CPDouble(1.0);
    CPDouble obj2 = new CPDouble(2.0);
    int result = obj1.compareTo(obj2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_1_PRfs0_fllJ0() {
    CPDouble cpDouble = new CPDouble(1.0);
    double result = cpDouble.getDouble();
    assertEquals(1.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_4_AoDz3_EIDI0() {
    CPDouble cpDouble = new CPDouble(4.0);
    double result = cpDouble.getDouble();
    assertEquals(4.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_6_pTfQ5_JsaH0() {
    CPDouble cpDouble = new CPDouble(6.0);
    double result = cpDouble.getDouble();
    assertEquals(6.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_8_LTzH7_WHrm0() {
    CPDouble cpDouble = new CPDouble(8.0);
    double result = cpDouble.getDouble();
    assertEquals(8.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_5_kJPM4_TokW0() {
    CPDouble cpDouble = new CPDouble(5.0);
    double result = cpDouble.getDouble();
    assertEquals(5.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDouble_7_VCMI6_HKUM0() {
    CPDouble cpDouble = new CPDouble(7.0);
    double result = cpDouble.getDouble();
    assertEquals(7.0, result, 0.0);
}
}