/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SkippableFrameMagic_lcOx1() {
    byte[] signature = new byte[] { 0x50, 0x2A, 0x4D, 0x18 };
    int length = 4;
    boolean result = ZstdUtils.matches(signature, length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSignature_GOTL2() {
    byte[] signature = new byte[] { 0x00, 0x00, 0x00, 0x00 };
    int length = 4;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EmptySignature_DaRv7() {
    byte[] signature = new byte[] {};
    int length = 0;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NullSignatureAndNegativeLength_Dzxd8() {
    byte[] signature = null;
    int length = -1;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZstandardFrameMagic_oNfx0_QvwM0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = 4;
    boolean result = ZstdUtils.matches(signature, length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidLength_bASC3_gNwZ0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = 3;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_NegativeLength_QaJO5_KVbg0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = -1;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ZeroLength_mUYl6_YVeW0() {
    byte[] signature = new byte[] { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };
    int length = 0;
    boolean result = ZstdUtils.matches(signature, length);
    assertFalse(result);
}
}