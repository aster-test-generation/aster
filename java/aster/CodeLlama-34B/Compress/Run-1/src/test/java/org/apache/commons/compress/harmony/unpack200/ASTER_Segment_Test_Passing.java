/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.jar.JarOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWrite_IOException_eqzZ2_fid1() throws IOException {
    Segment segment = new Segment();
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream()) {
    };
    try {
        segment.unpackWrite(out);
        fail("Expected IOException");
    } catch (IOException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWrite_writeJar_IOException_SWJH8_fid3() throws IOException {
    Segment segment = new Segment();
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream()) {
    };
    try {
        segment.unpackWrite(out);
        fail("Expected IOException");
    } catch (IOException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantPool_tIov0() {
    Segment segment = new Segment();
    SegmentConstantPool constantPool = segment.getConstantPool();
    assertNotNull(constantPool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_zdoy0() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    assertNotNull(classBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRawClassFlags_jsEw1() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] rawClassFlags = classBands.getRawClassFlags();
    assertNotNull(rawClassFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassSuperInts_qszO2() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classSuperInts = classBands.getClassSuperInts();
    assertNotNull(classSuperInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassMethodCount_DudL3() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classMethodCount = classBands.getClassMethodCount();
    assertNotNull(classMethodCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassThisInts_yTcU4() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classThisInts = classBands.getClassThisInts();
    assertNotNull(classThisInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFlags_Ejxb5() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    long[] classFlags = classBands.getClassFlags();
    assertNotNull(classFlags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerStartP_SjlW6() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[][] codeHandlerStartP = classBands.getCodeHandlerStartP();
    assertNotNull(codeHandlerStartP);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFieldAttributes_wXzb7() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] fieldAttributes = classBands.getFieldAttributes();
    assertNotNull(fieldAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodAttributes_mSfU8() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    ArrayList<Attribute>[][] methodAttributes = classBands.getMethodAttributes();
    assertNotNull(methodAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcLocal_oyax9() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    IcTuple[][] icLocal = classBands.getIcLocal();
    assertNotNull(icLocal);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeMaxNALocals_QEcG10() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeMaxNALocals = classBands.getCodeMaxNALocals();
    assertNotNull(codeMaxNALocals);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodeHandlerCount_redS11() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] codeHandlerCount = classBands.getCodeHandlerCount();
    assertNotNull(codeHandlerCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassFieldCount_tIDz12() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[] classFieldCount = classBands.getClassFieldCount();
    assertNotNull(classFieldCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodDescrInts_RZiy13() {
    Segment segment = new Segment();
    ClassBands classBands = segment.getClassBands();
    int[][] methodDescrInts = classBands.getMethodDescrInts();
    assertNotNull(methodDescrInts);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassVersionMajor_RTgr14() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWrite_IOException_eqzZ2() throws IOException {
    Segment segment = new Segment();
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream()) {
        @Override
        public void write(byte[] b) throws IOException {
            throw new IOException();
        }
    };
    try {
        segment.unpackWrite(out);
        fail("Expected IOException");
    } catch (IOException e) {
        assertNotNull(e);
    }
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWrite_IOException_eqzZ2_RHrt0() throws IOException {
    Segment segment = new Segment();
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());
    segment.writeJar(out);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_nvBY2() {
Segment segment = new Segment();
SegmentConstantPool constantPool = segment.getConstantPool();
ClassFileEntry entry = constantPool.getClassPoolEntry("java.lang.Object");
assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcBands_OEpM0_mIkl0_1() {
        Segment segment = new Segment();
        IcBands icBands = segment.getIcBands();
        assertNotNull(icBands);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcBands_OEpM0_mIkl0_2() {
        Segment segment = new Segment();
        IcBands icBands = segment.getIcBands();
        assertEquals(0, icBands.getIcTuples().length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_ahGP0_NGke0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());
    segment.unpack(inputStream, out);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackProcess_zPFp2_baIn0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    segment.unpackProcess();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackRead_BWms1_NvbN0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    segment.unpackRead(inputStream);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWrite_xoiB3_shkJ0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());
    segment.unpackWrite(out);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrDefinitionBands_QsvY0_CAdG0() {
    Segment segment = new Segment();
    AttrDefinitionBands attrDefinitionBands = segment.getAttrDefinitionBands();
    assertNotNull(attrDefinitionBands);
}
}