/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_ValidInput_yTEI0() {
        byte[] buffer = new byte[1024];
        int expectedChecksum =84446;
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_nullBuffer_DnGf0() {
    byte[] buffer = null;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_invalidMagic_oHqj1() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) 0xFF;
    buffer[25] = (byte) 0xFF;
    buffer[26] = (byte) 0xFF;
    buffer[27] = (byte) 0xFF;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_invalidChecksum_fBii2() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) 0x00;
    buffer[25] = (byte) 0x00;
    buffer[26] = (byte) 0x00;
    buffer[27] = (byte) 0x00;
    buffer[28] = (byte) 0x00;
    buffer[29] = (byte) 0x00;
    buffer[30] = (byte) 0x00;
    buffer[31] = (byte) 0x00;
    assertFalse(DumpArchiveUtil.verify(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerify_validBuffer_fevt3() {
    byte[] buffer = new byte[32];
    buffer[24] = (byte) 0x00;
    buffer[25] = (byte) 0x00;
    buffer[26] = (byte) 0x00;
    buffer[27] = (byte) 0x00;
    buffer[28] = (byte) 0x00;
    buffer[29] = (byte) 0x00;
    buffer[30] = (byte) 0x00;
    buffer[31] = (byte) 0x00;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_1_QcOW0() {
    byte[] buffer = new byte[8];
    int offset = 0;
    long expected = 0;
    long actual = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_invalidLengthInput2_Kzfu5() {
    byte[] buffer = new byte[20];
    buffer[0] = 1;
    buffer[1] = 2;
    buffer[2] = 3;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16_1_RvZZ0() {
    byte[] buffer = new byte[2];
    buffer[0] = (byte) 0x01;
    buffer[1] = (byte) 0x02;
    int result = DumpArchiveUtil.convert16(buffer, 0);
    assertEquals(0x0201, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_1_khhQ0() {
    byte[] buffer = new byte[4];
    int offset = 0;
    int expected = 0;
    int actual = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, actual);
}
}