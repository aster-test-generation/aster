/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExactMath_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_int_long_overflow_Rmnw1() {
    int x = Integer.MAX_VALUE;
    long y = 1;
    try {
        ExactMath.add(x, y);
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        assertEquals("Argument too large or result overflows", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_int_long_underflow_KdGT2() {
    int x = Integer.MIN_VALUE;
    long y = -1;
    try {
        ExactMath.add(x, y);
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        assertEquals("Argument too large or result overflows", e.getMessage());
    }
}
}